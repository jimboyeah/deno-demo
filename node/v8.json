{
  "code": [
  {
    "name": "C:\\nodejs\\node.exe",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\ntdll.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\KERNEL32.DLL",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\KERNELBASE.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\WS2_32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\RPCRT4.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\dbghelp.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\ADVAPI32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\ucrtbase.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\msvcrt.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\sechost.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\USER32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\win32u.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\GDI32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\gdi32full.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\msvcp_win.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\PSAPI.DLL",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\CRYPT32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\MSASN1.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\IPHLPAPI.DLL",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\bcrypt.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\USERENV.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\profapi.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\WINMM.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\SYSTEM32\\winmmbase.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\cfgmgr32.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\bcryptPrimitives.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\IMM32.DLL",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\powrprof.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\UMPDC.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\system32\\uxtheme.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\combase.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\system32\\mswsock.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "C:\\Windows\\System32\\kernel.appcore.dll",
    "type": "SHARED_LIB"
  },
  {
    "name": "RecordWrite",
    "timestamp": 158152,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EphemeronKeyBarrier",
    "timestamp": 158174,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AdaptorWithBuiltinExitFrame",
    "timestamp": 158182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArgumentsAdaptorTrampoline",
    "timestamp": 158191,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNullOrUndefined",
    "timestamp": 158199,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNotNullOrUndefined",
    "timestamp": 158207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsAny",
    "timestamp": 158215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallBoundFunction",
    "timestamp": 158223,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined",
    "timestamp": 158231,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined",
    "timestamp": 158239,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny",
    "timestamp": 158247,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallProxy",
    "timestamp": 158254,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallVarargs",
    "timestamp": 158261,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 158268,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithArrayLike",
    "timestamp": 158276,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallForwardVarargs",
    "timestamp": 158283,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionForwardVarargs",
    "timestamp": 158291,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccess",
    "timestamp": 158332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckCompatibleReceiver",
    "timestamp": 158343,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccessAndCompatibleReceiver",
    "timestamp": 158352,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunction",
    "timestamp": 158361,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructBoundFunction",
    "timestamp": 158368,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructedNonConstructable",
    "timestamp": 158376,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Construct",
    "timestamp": 158384,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructVarargs",
    "timestamp": 158391,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 158398,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithArrayLike",
    "timestamp": 158406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructForwardVarargs",
    "timestamp": 158413,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunctionForwardVarargs",
    "timestamp": 158421,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructStubGeneric",
    "timestamp": 158429,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSBuiltinsConstructStub",
    "timestamp": 158437,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewObject",
    "timestamp": 158444,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewClosure",
    "timestamp": 158452,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextEval",
    "timestamp": 158459,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextFunction",
    "timestamp": 158488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 158496,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 158507,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowArrayLiteral",
    "timestamp": 158515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowObjectLiteral",
    "timestamp": 158523,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructProxy",
    "timestamp": 158531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntry",
    "timestamp": 158538,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntry",
    "timestamp": 158545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSRunMicrotasksEntry",
    "timestamp": 158553,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntryTrampoline",
    "timestamp": 158560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntryTrampoline",
    "timestamp": 158568,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResumeGeneratorTrampoline",
    "timestamp": 158575,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringCharAt",
    "timestamp": 158583,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringCodePointAt",
    "timestamp": 158590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePointAt",
    "timestamp": 158598,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringEqual",
    "timestamp": 158606,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThan",
    "timestamp": 158613,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThanOrEqual",
    "timestamp": 158620,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIndexOf",
    "timestamp": 158628,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThan",
    "timestamp": 158636,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThanOrEqual",
    "timestamp": 158643,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringSubstring",
    "timestamp": 158651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrderedHashTableHealIndex",
    "timestamp": 158658,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEntryTrampoline",
    "timestamp": 158666,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCall",
    "timestamp": 158674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushUndefinedAndArgsThenCall",
    "timestamp": 158681,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCallWithFinalSpread",
    "timestamp": 158690,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstruct",
    "timestamp": 158698,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructArrayFunction",
    "timestamp": 158706,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructWithFinalSpread",
    "timestamp": 158714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterBytecodeAdvance",
    "timestamp": 158723,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterBytecodeDispatch",
    "timestamp": 158731,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterOnStackReplacement",
    "timestamp": 158745,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazy",
    "timestamp": 158753,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazyDeoptimizedCode",
    "timestamp": 158763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstantiateAsmJs",
    "timestamp": 158770,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NotifyDeoptimized",
    "timestamp": 158778,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltin",
    "timestamp": 158785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltinWithResult",
    "timestamp": 158819,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltin",
    "timestamp": 158830,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltinWithResult",
    "timestamp": 158837,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiCallback",
    "timestamp": 158846,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiGetter",
    "timestamp": 158853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCall",
    "timestamp": 158860,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsFunction",
    "timestamp": 158870,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsConstructor",
    "timestamp": 158878,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInYoungGeneration",
    "timestamp": 158885,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInYoungGeneration",
    "timestamp": 158893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInOldGeneration",
    "timestamp": 158901,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInOldGeneration",
    "timestamp": 158909,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyFastSmiOrObjectElements",
    "timestamp": 158917,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastDoubleElements",
    "timestamp": 158925,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastSmiOrObjectElements",
    "timestamp": 158935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewArgumentsElements",
    "timestamp": 158942,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DebugBreakTrampoline",
    "timestamp": 158950,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FrameDropperTrampoline",
    "timestamp": 158958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleDebuggerStatement",
    "timestamp": 158965,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToObject",
    "timestamp": 158973,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBoolean",
    "timestamp": 158980,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_Number",
    "timestamp": 158987,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_String",
    "timestamp": 158995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Default",
    "timestamp": 159003,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Number",
    "timestamp": 159011,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_String",
    "timestamp": 159019,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToNumber",
    "timestamp": 159027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToName",
    "timestamp": 159034,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumber",
    "timestamp": 159041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumeric",
    "timestamp": 159049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumber",
    "timestamp": 159056,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumberConvertBigInt",
    "timestamp": 159063,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumeric",
    "timestamp": 159071,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberToString",
    "timestamp": 159078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToInteger",
    "timestamp": 159086,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToInteger_TruncateMinusZero",
    "timestamp": 159093,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToLength",
    "timestamp": 159101,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Typeof",
    "timestamp": 159108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetSuperConstructor",
    "timestamp": 159115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntToI64",
    "timestamp": 159122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "I64ToBigInt",
    "timestamp": 159130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBooleanLazyDeoptContinuation",
    "timestamp": 159137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_PolymorphicName",
    "timestamp": 159145,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_Slow",
    "timestamp": 159153,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Megamorphic",
    "timestamp": 159160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Slow",
    "timestamp": 159168,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC_Slow",
    "timestamp": 159175,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_FunctionPrototype",
    "timestamp": 159183,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Slow",
    "timestamp": 159190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringLength",
    "timestamp": 159198,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringWrapperLength",
    "timestamp": 159207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Uninitialized",
    "timestamp": 159215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC_Slow",
    "timestamp": 159223,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC_Uninitialized",
    "timestamp": 159230,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC_Slow",
    "timestamp": 159238,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_SloppyArguments",
    "timestamp": 159246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIndexedInterceptorIC",
    "timestamp": 159253,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInterceptorIC",
    "timestamp": 159262,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_Standard",
    "timestamp": 159270,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW",
    "timestamp": 159279,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB",
    "timestamp": 159287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW",
    "timestamp": 159296,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC_Slow_Standard",
    "timestamp": 159305,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_Standard",
    "timestamp": 159313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_GrowNoTransitionHandleCOW",
    "timestamp": 159321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionIgnoreOOB",
    "timestamp": 159329,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionHandleCOW",
    "timestamp": 159338,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC_Slow_GrowNoTransitionHandleCOW",
    "timestamp": 159346,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC_Slow_NoTransitionIgnoreOOB",
    "timestamp": 159355,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC_Slow_NoTransitionHandleCOW",
    "timestamp": 159363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Slow_Standard",
    "timestamp": 159372,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Slow_GrowNoTransitionHandleCOW",
    "timestamp": 159380,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Slow_NoTransitionIgnoreOOB",
    "timestamp": 159388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Slow_NoTransitionHandleCOW",
    "timestamp": 159396,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_Standard",
    "timestamp": 159404,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_GrowNoTransitionHandleCOW",
    "timestamp": 159413,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionIgnoreOOB",
    "timestamp": 159421,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionHandleCOW",
    "timestamp": 159430,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_PolymorphicName",
    "timestamp": 159439,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_SloppyArguments",
    "timestamp": 159447,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasIndexedInterceptorIC",
    "timestamp": 159454,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasIC_Slow",
    "timestamp": 159462,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EnqueueMicrotask",
    "timestamp": 159469,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasksTrampoline",
    "timestamp": 159477,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasks",
    "timestamp": 159484,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasProperty",
    "timestamp": 159492,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DeleteProperty",
    "timestamp": 159499,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyDataProperties",
    "timestamp": 159506,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetDataProperties",
    "timestamp": 159514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Abort",
    "timestamp": 159522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AbortCSAAssert",
    "timestamp": 159529,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EmptyFunction",
    "timestamp": 159536,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Illegal",
    "timestamp": 159543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictPoisonPillThrower",
    "timestamp": 159550,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "UnsupportedThrower",
    "timestamp": 159558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReturnReceiver",
    "timestamp": 159566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructor",
    "timestamp": 159573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructorImpl",
    "timestamp": 159580,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 159588,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 159596,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 159605,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 159614,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 159623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 159632,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 159640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 159650,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 159679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 159690,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 159698,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 159708,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 159717,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 159726,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 159737,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 159747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNArgumentsConstructor",
    "timestamp": 159756,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InternalArrayConstructor",
    "timestamp": 159764,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InternalArrayConstructorImpl",
    "timestamp": 159771,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InternalArrayNoArgumentConstructor_Packed",
    "timestamp": 159779,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConcat",
    "timestamp": 159787,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIsArray",
    "timestamp": 159795,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFill",
    "timestamp": 159802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFrom",
    "timestamp": 159893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesSmiOrObject",
    "timestamp": 159912,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesPackedDoubles",
    "timestamp": 159921,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesHoleyDoubles",
    "timestamp": 159932,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludes",
    "timestamp": 159940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfSmiOrObject",
    "timestamp": 159950,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfPackedDoubles",
    "timestamp": 159958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfHoleyDoubles",
    "timestamp": 159969,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOf",
    "timestamp": 159977,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPop",
    "timestamp": 159987,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePop",
    "timestamp": 159995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPush",
    "timestamp": 160005,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePush",
    "timestamp": 160012,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayShift",
    "timestamp": 160022,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayUnshift",
    "timestamp": 160030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArray",
    "timestamp": 160040,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArrayFillingHoles",
    "timestamp": 160048,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtractFastJSArray",
    "timestamp": 160058,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeEntries",
    "timestamp": 160066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeKeys",
    "timestamp": 160076,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeValues",
    "timestamp": 160084,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIteratorPrototypeNext",
    "timestamp": 160094,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlattenIntoArray",
    "timestamp": 160102,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlatMapIntoArray",
    "timestamp": 160112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlat",
    "timestamp": 160120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlatMap",
    "timestamp": 160164,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor",
    "timestamp": 160173,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor_DoNotInitialize",
    "timestamp": 160183,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeGetByteLength",
    "timestamp": 160191,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferIsView",
    "timestamp": 160201,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeSlice",
    "timestamp": 160209,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionEnter",
    "timestamp": 160219,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionReject",
    "timestamp": 160227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionResolve",
    "timestamp": 160237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionLazyDeoptContinuation",
    "timestamp": 160245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitCaught",
    "timestamp": 160255,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitUncaught",
    "timestamp": 160264,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitRejectClosure",
    "timestamp": 160276,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitResolveClosure",
    "timestamp": 160287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntConstructor",
    "timestamp": 160296,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsUintN",
    "timestamp": 160305,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsIntN",
    "timestamp": 160314,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToLocaleString",
    "timestamp": 160323,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToString",
    "timestamp": 160332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeValueOf",
    "timestamp": 160341,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeToString",
    "timestamp": 160350,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeValueOf",
    "timestamp": 160359,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetColumnNumber",
    "timestamp": 160369,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEvalOrigin",
    "timestamp": 160379,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFileName",
    "timestamp": 160387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunction",
    "timestamp": 160397,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunctionName",
    "timestamp": 160405,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetLineNumber",
    "timestamp": 160415,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetMethodName",
    "timestamp": 160424,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPosition",
    "timestamp": 160434,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPromiseIndex",
    "timestamp": 160442,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetScriptNameOrSourceURL",
    "timestamp": 160452,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetThis",
    "timestamp": 160461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetTypeName",
    "timestamp": 160470,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsAsync",
    "timestamp": 160479,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsConstructor",
    "timestamp": 160488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsEval",
    "timestamp": 160497,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsNative",
    "timestamp": 160506,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsPromiseAll",
    "timestamp": 160514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsToplevel",
    "timestamp": 160525,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeToString",
    "timestamp": 160533,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDebug",
    "timestamp": 160543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleError",
    "timestamp": 160550,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleInfo",
    "timestamp": 160559,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleLog",
    "timestamp": 160567,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleWarn",
    "timestamp": 160576,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDir",
    "timestamp": 160584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDirXml",
    "timestamp": 160593,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTable",
    "timestamp": 160600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTrace",
    "timestamp": 160610,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroup",
    "timestamp": 160617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupCollapsed",
    "timestamp": 160627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupEnd",
    "timestamp": 160635,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleClear",
    "timestamp": 160645,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCount",
    "timestamp": 160652,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCountReset",
    "timestamp": 160662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleAssert",
    "timestamp": 160669,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastConsoleAssert",
    "timestamp": 160679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfile",
    "timestamp": 160686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfileEnd",
    "timestamp": 160696,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTime",
    "timestamp": 160704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeLog",
    "timestamp": 160713,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeEnd",
    "timestamp": 160721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeStamp",
    "timestamp": 160730,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleContext",
    "timestamp": 160741,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewConstructor",
    "timestamp": 160751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateConstructor",
    "timestamp": 160759,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDate",
    "timestamp": 160766,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDay",
    "timestamp": 160774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetFullYear",
    "timestamp": 160782,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetHours",
    "timestamp": 160791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMilliseconds",
    "timestamp": 160799,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMinutes",
    "timestamp": 160807,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMonth",
    "timestamp": 160815,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetSeconds",
    "timestamp": 160825,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTime",
    "timestamp": 160833,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTimezoneOffset",
    "timestamp": 160843,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDate",
    "timestamp": 160851,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDay",
    "timestamp": 160859,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCFullYear",
    "timestamp": 160866,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCHours",
    "timestamp": 160878,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMilliseconds",
    "timestamp": 160886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMinutes",
    "timestamp": 160897,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMonth",
    "timestamp": 160905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCSeconds",
    "timestamp": 160915,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeValueOf",
    "timestamp": 160923,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToPrimitive",
    "timestamp": 160932,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetYear",
    "timestamp": 160940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetYear",
    "timestamp": 160950,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateNow",
    "timestamp": 160958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateParse",
    "timestamp": 160967,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetDate",
    "timestamp": 160974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetFullYear",
    "timestamp": 160984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetHours",
    "timestamp": 160992,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMilliseconds",
    "timestamp": 161002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMinutes",
    "timestamp": 161010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMonth",
    "timestamp": 161020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetSeconds",
    "timestamp": 161027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetTime",
    "timestamp": 161037,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCDate",
    "timestamp": 161045,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCFullYear",
    "timestamp": 161055,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCHours",
    "timestamp": 161063,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMilliseconds",
    "timestamp": 161073,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMinutes",
    "timestamp": 161081,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMonth",
    "timestamp": 161091,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCSeconds",
    "timestamp": 161099,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToDateString",
    "timestamp": 161109,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToISOString",
    "timestamp": 161117,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToUTCString",
    "timestamp": 161127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToString",
    "timestamp": 161135,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToTimeString",
    "timestamp": 161145,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToJson",
    "timestamp": 161155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateUTC",
    "timestamp": 161165,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorConstructor",
    "timestamp": 161172,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorCaptureStackTrace",
    "timestamp": 161182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorPrototypeToString",
    "timestamp": 161190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MakeError",
    "timestamp": 161200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MakeRangeError",
    "timestamp": 161207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MakeSyntaxError",
    "timestamp": 161216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MakeTypeError",
    "timestamp": 161224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MakeURIError",
    "timestamp": 161233,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtrasUtilsUncurryThis",
    "timestamp": 161241,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtrasUtilsCallReflectApply",
    "timestamp": 161251,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionConstructor",
    "timestamp": 161259,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeApply",
    "timestamp": 161269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeBind",
    "timestamp": 161277,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastFunctionPrototypeBind",
    "timestamp": 161287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeCall",
    "timestamp": 161296,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeHasInstance",
    "timestamp": 161306,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeToString",
    "timestamp": 161315,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateIterResultObject",
    "timestamp": 161325,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateGeneratorObject",
    "timestamp": 161333,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorFunctionConstructor",
    "timestamp": 161343,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeNext",
    "timestamp": 161351,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeReturn",
    "timestamp": 161361,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeThrow",
    "timestamp": 161369,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionConstructor",
    "timestamp": 161379,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURI",
    "timestamp": 161387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURIComponent",
    "timestamp": 161396,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURI",
    "timestamp": 161405,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURIComponent",
    "timestamp": 161414,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEscape",
    "timestamp": 161422,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalUnescape",
    "timestamp": 161432,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEval",
    "timestamp": 161439,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsFinite",
    "timestamp": 161449,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsNaN",
    "timestamp": 161456,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonParse",
    "timestamp": 161466,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonStringify",
    "timestamp": 161473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC",
    "timestamp": 161483,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Megamorphic",
    "timestamp": 161493,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Noninlined",
    "timestamp": 161502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline",
    "timestamp": 161510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline_Megamorphic",
    "timestamp": 161520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC",
    "timestamp": 161528,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_Megamorphic",
    "timestamp": 161538,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline",
    "timestamp": 161546,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline_Megamorphic",
    "timestamp": 161556,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC",
    "timestamp": 161564,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalICTrampoline",
    "timestamp": 161574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC",
    "timestamp": 161581,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreICTrampoline",
    "timestamp": 161591,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC",
    "timestamp": 161599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreICTrampoline",
    "timestamp": 161608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC",
    "timestamp": 161616,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC",
    "timestamp": 161626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeof",
    "timestamp": 161633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICTrampoline",
    "timestamp": 161643,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeofTrampoline",
    "timestamp": 161651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC",
    "timestamp": 161662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC_Slow",
    "timestamp": 161669,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC",
    "timestamp": 161679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_Megamorphic",
    "timestamp": 161686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToList",
    "timestamp": 161696,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListWithSymbolLookup",
    "timestamp": 161704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListMayPreserveHoles",
    "timestamp": 161714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FindOrderedHashMapEntry",
    "timestamp": 161722,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapConstructor",
    "timestamp": 161732,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeSet",
    "timestamp": 161743,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeDelete",
    "timestamp": 161755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGet",
    "timestamp": 161778,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeHas",
    "timestamp": 161802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeClear",
    "timestamp": 161813,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeEntries",
    "timestamp": 161823,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGetSize",
    "timestamp": 161891,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeForEach",
    "timestamp": 161915,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeKeys",
    "timestamp": 161928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeValues",
    "timestamp": 161969,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorPrototypeNext",
    "timestamp": 161980,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorToList",
    "timestamp": 161988,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAbs",
    "timestamp": 161996,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCeil",
    "timestamp": 162003,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFloor",
    "timestamp": 162010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathHypot",
    "timestamp": 162021,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathImul",
    "timestamp": 162042,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMax",
    "timestamp": 162067,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMin",
    "timestamp": 162078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathPow",
    "timestamp": 162085,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRandom",
    "timestamp": 162093,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRound",
    "timestamp": 162100,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTrunc",
    "timestamp": 162108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateHeapNumber",
    "timestamp": 162115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberConstructor",
    "timestamp": 162125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsFinite",
    "timestamp": 162133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsInteger",
    "timestamp": 162143,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsNaN",
    "timestamp": 162151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsSafeInteger",
    "timestamp": 162159,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseFloat",
    "timestamp": 162169,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseInt",
    "timestamp": 162176,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ParseInt",
    "timestamp": 162186,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToExponential",
    "timestamp": 162193,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToFixed",
    "timestamp": 162204,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToLocaleString",
    "timestamp": 162212,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToPrecision",
    "timestamp": 162222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToString",
    "timestamp": 162230,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeValueOf",
    "timestamp": 162240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Add",
    "timestamp": 162248,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Subtract",
    "timestamp": 162257,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Multiply",
    "timestamp": 162265,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Divide",
    "timestamp": 162274,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Modulus",
    "timestamp": 162282,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Exponentiate",
    "timestamp": 162291,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 162299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 162309,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 162316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 162327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRight",
    "timestamp": 162347,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 162372,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThan",
    "timestamp": 162396,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThanOrEqual",
    "timestamp": 162420,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThan",
    "timestamp": 162431,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThanOrEqual",
    "timestamp": 162438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Equal",
    "timestamp": 162446,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValue",
    "timestamp": 162453,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValueNumbersOnly",
    "timestamp": 162460,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictEqual",
    "timestamp": 162468,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 162477,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Decrement",
    "timestamp": 162485,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Increment",
    "timestamp": 162494,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Negate",
    "timestamp": 162502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectConstructor",
    "timestamp": 162510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectAssign",
    "timestamp": 162519,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectCreate",
    "timestamp": 162527,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateObjectWithoutProperties",
    "timestamp": 162536,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineGetter",
    "timestamp": 162545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperties",
    "timestamp": 162554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperty",
    "timestamp": 162562,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineSetter",
    "timestamp": 162572,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectEntries",
    "timestamp": 162580,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFreeze",
    "timestamp": 162589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptor",
    "timestamp": 162597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptors",
    "timestamp": 162638,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyNames",
    "timestamp": 162649,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertySymbols",
    "timestamp": 162657,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIs",
    "timestamp": 162665,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsFrozen",
    "timestamp": 162672,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsSealed",
    "timestamp": 162679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectKeys",
    "timestamp": 162687,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupGetter",
    "timestamp": 162694,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupSetter",
    "timestamp": 162704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToString",
    "timestamp": 162711,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeValueOf",
    "timestamp": 162721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeHasOwnProperty",
    "timestamp": 162729,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeIsPrototypeOf",
    "timestamp": 162755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypePropertyIsEnumerable",
    "timestamp": 162763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeGetProto",
    "timestamp": 162774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeSetProto",
    "timestamp": 162782,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToLocaleString",
    "timestamp": 162792,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSeal",
    "timestamp": 162800,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectToString",
    "timestamp": 162809,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectValues",
    "timestamp": 162817,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryHasInstance",
    "timestamp": 162827,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstanceOf",
    "timestamp": 162835,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 162845,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInFilter",
    "timestamp": 162853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FulfillPromise",
    "timestamp": 162860,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RejectPromise",
    "timestamp": 162870,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResolvePromise",
    "timestamp": 162877,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultReject",
    "timestamp": 162887,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultResolve",
    "timestamp": 162896,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseGetCapabilitiesExecutor",
    "timestamp": 162904,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewPromiseCapability",
    "timestamp": 162912,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructorLazyDeoptContinuation",
    "timestamp": 162922,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructor",
    "timestamp": 162931,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IsPromise",
    "timestamp": 162941,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeThen",
    "timestamp": 162950,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PerformPromiseThen",
    "timestamp": 162958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeCatch",
    "timestamp": 162966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRejectReactionJob",
    "timestamp": 162975,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseFulfillReactionJob",
    "timestamp": 162983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveThenableJob",
    "timestamp": 162991,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveTrampoline",
    "timestamp": 163000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolve",
    "timestamp": 163008,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseReject",
    "timestamp": 163017,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeFinally",
    "timestamp": 163025,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThenFinally",
    "timestamp": 163036,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCatchFinally",
    "timestamp": 163044,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseValueThunkFinally",
    "timestamp": 163053,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThrowerFinally",
    "timestamp": 163062,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAll",
    "timestamp": 163072,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllResolveElementClosure",
    "timestamp": 163079,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRace",
    "timestamp": 163087,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettled",
    "timestamp": 163095,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledResolveElementClosure",
    "timestamp": 163102,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledRejectElementClosure",
    "timestamp": 163113,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseInternalConstructor",
    "timestamp": 163122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseInternalReject",
    "timestamp": 163132,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseInternalResolve",
    "timestamp": 163140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectApply",
    "timestamp": 163153,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectConstruct",
    "timestamp": 163161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDefineProperty",
    "timestamp": 163170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetOwnPropertyDescriptor",
    "timestamp": 163180,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectHas",
    "timestamp": 163189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectOwnKeys",
    "timestamp": 163198,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSet",
    "timestamp": 163207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture1Getter",
    "timestamp": 163215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture2Getter",
    "timestamp": 163224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture3Getter",
    "timestamp": 163233,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture4Getter",
    "timestamp": 163242,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture5Getter",
    "timestamp": 163267,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture6Getter",
    "timestamp": 163276,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture7Getter",
    "timestamp": 163285,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture8Getter",
    "timestamp": 163295,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture9Getter",
    "timestamp": 163304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpConstructor",
    "timestamp": 163313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputGetter",
    "timestamp": 163322,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputSetter",
    "timestamp": 163331,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastMatchGetter",
    "timestamp": 163341,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastParenGetter",
    "timestamp": 163350,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLeftContextGetter",
    "timestamp": 163360,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeCompile",
    "timestamp": 163369,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExec",
    "timestamp": 163378,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeDotAllGetter",
    "timestamp": 163388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeFlagsGetter",
    "timestamp": 163398,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeGlobalGetter",
    "timestamp": 163407,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeIgnoreCaseGetter",
    "timestamp": 163417,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatch",
    "timestamp": 163426,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatchAll",
    "timestamp": 163436,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMultilineGetter",
    "timestamp": 163445,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSearch",
    "timestamp": 163453,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSourceGetter",
    "timestamp": 163461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeStickyGetter",
    "timestamp": 163469,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTest",
    "timestamp": 163479,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTestFast",
    "timestamp": 163488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeToString",
    "timestamp": 163498,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeUnicodeGetter",
    "timestamp": 163507,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpRightContextGetter",
    "timestamp": 163516,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSplit",
    "timestamp": 163526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecAtom",
    "timestamp": 163535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecInternal",
    "timestamp": 163545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpMatchFast",
    "timestamp": 163554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExecSlow",
    "timestamp": 163563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSearchFast",
    "timestamp": 163573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSplit",
    "timestamp": 163582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpStringIteratorPrototypeNext",
    "timestamp": 163590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetConstructor",
    "timestamp": 163600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeHas",
    "timestamp": 163608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeAdd",
    "timestamp": 163618,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeDelete",
    "timestamp": 163626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeClear",
    "timestamp": 163636,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeEntries",
    "timestamp": 163644,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeGetSize",
    "timestamp": 163654,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeForEach",
    "timestamp": 163662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeValues",
    "timestamp": 163672,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetIteratorPrototypeNext",
    "timestamp": 163681,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetOrSetIteratorToList",
    "timestamp": 163692,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGetByteLength",
    "timestamp": 163701,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeSlice",
    "timestamp": 163711,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsLoad",
    "timestamp": 163721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsStore",
    "timestamp": 163738,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsExchange",
    "timestamp": 163747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsCompareExchange",
    "timestamp": 163755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAdd",
    "timestamp": 163763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsSub",
    "timestamp": 163770,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAnd",
    "timestamp": 163778,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsOr",
    "timestamp": 163788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsXor",
    "timestamp": 163796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsNotify",
    "timestamp": 163886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsIsLockFree",
    "timestamp": 163907,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWait",
    "timestamp": 163915,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWake",
    "timestamp": 163925,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringConstructor",
    "timestamp": 163934,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePoint",
    "timestamp": 163945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCharCode",
    "timestamp": 163953,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIncludes",
    "timestamp": 163963,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIndexOf",
    "timestamp": 163972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLastIndexOf",
    "timestamp": 163983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatch",
    "timestamp": 163991,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatchAll",
    "timestamp": 164002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLocaleCompare",
    "timestamp": 164011,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadEnd",
    "timestamp": 164021,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadStart",
    "timestamp": 164030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeReplace",
    "timestamp": 164041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSearch",
    "timestamp": 164050,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSplit",
    "timestamp": 164060,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstr",
    "timestamp": 164069,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrim",
    "timestamp": 164079,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimEnd",
    "timestamp": 164097,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimStart",
    "timestamp": 164106,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRaw",
    "timestamp": 164116,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolConstructor",
    "timestamp": 164124,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolFor",
    "timestamp": 164134,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolKeyFor",
    "timestamp": 164141,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeDescriptionGetter",
    "timestamp": 164151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToPrimitive",
    "timestamp": 164160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToString",
    "timestamp": 164170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeValueOf",
    "timestamp": 164179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayBaseConstructor",
    "timestamp": 164189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericLazyDeoptContinuation",
    "timestamp": 164197,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayConstructor",
    "timestamp": 164208,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeBuffer",
    "timestamp": 164216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteLength",
    "timestamp": 164226,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteOffset",
    "timestamp": 164235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLength",
    "timestamp": 164245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEntries",
    "timestamp": 164254,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeKeys",
    "timestamp": 164265,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeValues",
    "timestamp": 164273,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeCopyWithin",
    "timestamp": 164281,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFill",
    "timestamp": 164290,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIncludes",
    "timestamp": 164312,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIndexOf",
    "timestamp": 164320,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLastIndexOf",
    "timestamp": 164328,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReverse",
    "timestamp": 164338,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSet",
    "timestamp": 164348,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToStringTag",
    "timestamp": 164357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeMap",
    "timestamp": 164367,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayOf",
    "timestamp": 164376,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayFrom",
    "timestamp": 164385,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmCompileLazy",
    "timestamp": 164394,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateHeapNumber",
    "timestamp": 164407,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAtomicNotify",
    "timestamp": 164415,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI32AtomicWait",
    "timestamp": 164425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64AtomicWait",
    "timestamp": 164433,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmCallJavaScript",
    "timestamp": 164443,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmMemoryGrow",
    "timestamp": 164451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableGet",
    "timestamp": 164459,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableSet",
    "timestamp": 164466,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRecordWrite",
    "timestamp": 164473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackGuard",
    "timestamp": 164481,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackOverflow",
    "timestamp": 164488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmToNumber",
    "timestamp": 164498,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmThrow",
    "timestamp": 164506,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRethrow",
    "timestamp": 164515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnreachable",
    "timestamp": 164523,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapMemOutOfBounds",
    "timestamp": 164533,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnalignedAccess",
    "timestamp": 164541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivByZero",
    "timestamp": 164549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivUnrepresentable",
    "timestamp": 164557,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapRemByZero",
    "timestamp": 164565,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFloatUnrepresentable",
    "timestamp": 164573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFuncInvalid",
    "timestamp": 164581,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFuncSigMismatch",
    "timestamp": 164589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDataSegmentDropped",
    "timestamp": 164599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapElemSegmentDropped",
    "timestamp": 164607,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapTableOutOfBounds",
    "timestamp": 164617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64ToBigInt",
    "timestamp": 164626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmBigIntToI64",
    "timestamp": 164633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapConstructor",
    "timestamp": 164640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapLookupHashIndex",
    "timestamp": 164649,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapGet",
    "timestamp": 164656,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeHas",
    "timestamp": 164664,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeSet",
    "timestamp": 164674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeDelete",
    "timestamp": 164682,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetConstructor",
    "timestamp": 164692,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeHas",
    "timestamp": 164700,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeAdd",
    "timestamp": 164710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeDelete",
    "timestamp": 164719,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionDelete",
    "timestamp": 164728,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionSet",
    "timestamp": 164757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResolve",
    "timestamp": 164765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReject",
    "timestamp": 164773,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYield",
    "timestamp": 164781,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturn",
    "timestamp": 164788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResumeNext",
    "timestamp": 164796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorFunctionConstructor",
    "timestamp": 164804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeNext",
    "timestamp": 164812,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeReturn",
    "timestamp": 164822,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeThrow",
    "timestamp": 164831,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitCaught",
    "timestamp": 164841,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitUncaught",
    "timestamp": 164851,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitResolveClosure",
    "timestamp": 164862,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitRejectClosure",
    "timestamp": 164870,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYieldResolveClosure",
    "timestamp": 164879,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedResolveClosure",
    "timestamp": 164889,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedRejectClosure",
    "timestamp": 164899,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnResolveClosure",
    "timestamp": 164909,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeNext",
    "timestamp": 164918,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeThrow",
    "timestamp": 164928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeReturn",
    "timestamp": 164937,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncIteratorValueUnwrap",
    "timestamp": 164947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 164955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 164966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 164975,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 164987,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 164997,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 165007,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 165018,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 165029,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 165039,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 165050,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DirectCEntry",
    "timestamp": 165059,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAdd_CheckNone",
    "timestamp": 165069,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAdd_ConvertLeft",
    "timestamp": 165077,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAdd_ConvertRight",
    "timestamp": 165087,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SubString",
    "timestamp": 165095,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StackCheck",
    "timestamp": 165104,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DoubleToI",
    "timestamp": 165112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetProperty",
    "timestamp": 165122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetPropertyWithReceiver",
    "timestamp": 165130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetProperty",
    "timestamp": 165140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPropertyInLiteral",
    "timestamp": 165148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemCopyUint8Uint8",
    "timestamp": 165158,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemCopyUint16Uint8",
    "timestamp": 165165,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemMove",
    "timestamp": 165175,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IsTraceCategoryEnabled",
    "timestamp": 165182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Trace",
    "timestamp": 165190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationGroupCleanupIteratorNext",
    "timestamp": 165197,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationGroupCleanupSome",
    "timestamp": 165205,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationGroupConstructor",
    "timestamp": 165213,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationGroupRegister",
    "timestamp": 165224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationGroupUnregister",
    "timestamp": 165232,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefConstructor",
    "timestamp": 165242,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefDeref",
    "timestamp": 165265,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeCopyWithin",
    "timestamp": 165275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopEagerDeoptContinuation",
    "timestamp": 165284,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopLazyDeoptContinuation",
    "timestamp": 165294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopContinuation",
    "timestamp": 165303,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEvery",
    "timestamp": 165314,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopEagerDeoptContinuation",
    "timestamp": 165321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopLazyDeoptContinuation",
    "timestamp": 165332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopContinuation",
    "timestamp": 165344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilter",
    "timestamp": 165354,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopEagerDeoptContinuation",
    "timestamp": 165363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopLazyDeoptContinuation",
    "timestamp": 165374,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 165383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopContinuation",
    "timestamp": 165392,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFind",
    "timestamp": 165400,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopEagerDeoptContinuation",
    "timestamp": 165408,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopLazyDeoptContinuation",
    "timestamp": 165417,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 165425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopContinuation",
    "timestamp": 165436,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFindIndex",
    "timestamp": 165445,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopEagerDeoptContinuation",
    "timestamp": 165455,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopLazyDeoptContinuation",
    "timestamp": 165465,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopContinuation",
    "timestamp": 165476,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEach",
    "timestamp": 165484,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement20ATDictionaryElements",
    "timestamp": 165494,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement25ATFastSmiOrObjectElements",
    "timestamp": 165503,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement20ATFastDoubleElements",
    "timestamp": 165514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConvertToLocaleString",
    "timestamp": 165522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPush",
    "timestamp": 165531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPop",
    "timestamp": 165539,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeJoin",
    "timestamp": 165549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToLocaleString",
    "timestamp": 165557,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToString",
    "timestamp": 165568,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeJoin",
    "timestamp": 165576,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToLocaleString",
    "timestamp": 165586,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeLastIndexOf",
    "timestamp": 165595,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopEagerDeoptContinuation",
    "timestamp": 165606,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopLazyDeoptContinuation",
    "timestamp": 165614,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopContinuation",
    "timestamp": 165625,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMap",
    "timestamp": 165633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayOf",
    "timestamp": 165643,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightPreLoopEagerDeoptContinuation",
    "timestamp": 165651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopEagerDeoptContinuation",
    "timestamp": 165662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopLazyDeoptContinuation",
    "timestamp": 165671,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopContinuation",
    "timestamp": 165681,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRight",
    "timestamp": 165691,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReducePreLoopEagerDeoptContinuation",
    "timestamp": 165700,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopEagerDeoptContinuation",
    "timestamp": 165711,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopLazyDeoptContinuation",
    "timestamp": 165720,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopContinuation",
    "timestamp": 165743,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduce",
    "timestamp": 165752,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeReverse",
    "timestamp": 165760,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeShift",
    "timestamp": 165768,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSlice",
    "timestamp": 165776,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopEagerDeoptContinuation",
    "timestamp": 165784,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopLazyDeoptContinuation",
    "timestamp": 165840,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopContinuation",
    "timestamp": 165849,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySome",
    "timestamp": 165858,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSplice",
    "timestamp": 165866,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeUnshift",
    "timestamp": 165874,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToString",
    "timestamp": 165884,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastCreateDataProperty",
    "timestamp": 165895,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CheckNumberInRange",
    "timestamp": 165905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAddNoThrow",
    "timestamp": 165919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAdd",
    "timestamp": 165927,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntUnaryMinus",
    "timestamp": 165937,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanConstructor",
    "timestamp": 165945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBuffer",
    "timestamp": 165955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteLength",
    "timestamp": 165964,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteOffset",
    "timestamp": 165974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint8",
    "timestamp": 165983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt8",
    "timestamp": 165994,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint16",
    "timestamp": 166002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt16",
    "timestamp": 166010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint32",
    "timestamp": 166018,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt32",
    "timestamp": 166027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat32",
    "timestamp": 166035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat64",
    "timestamp": 166043,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigUint64",
    "timestamp": 166053,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigInt64",
    "timestamp": 166062,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint8",
    "timestamp": 166072,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt8",
    "timestamp": 166081,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint16",
    "timestamp": 166091,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt16",
    "timestamp": 166100,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint32",
    "timestamp": 166108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt32",
    "timestamp": 166116,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat32",
    "timestamp": 166124,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat64",
    "timestamp": 166132,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigUint64",
    "timestamp": 166140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigInt64",
    "timestamp": 166151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtrasUtilsCreatePrivateSymbol",
    "timestamp": 166160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtrasUtilsMarkPromiseAsHandled",
    "timestamp": 166170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtrasUtilsPromiseState",
    "timestamp": 166179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 166189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcos",
    "timestamp": 166197,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcosh",
    "timestamp": 166222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsin",
    "timestamp": 166229,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsinh",
    "timestamp": 166239,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan",
    "timestamp": 166246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan2",
    "timestamp": 166256,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtanh",
    "timestamp": 166263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCbrt",
    "timestamp": 166272,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathClz32",
    "timestamp": 166280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCos",
    "timestamp": 166289,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCosh",
    "timestamp": 166297,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExp",
    "timestamp": 166304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExpm1",
    "timestamp": 166311,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFround",
    "timestamp": 166318,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog",
    "timestamp": 166326,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog1p",
    "timestamp": 166333,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog10",
    "timestamp": 166342,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog2",
    "timestamp": 166349,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSin",
    "timestamp": 166359,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSign",
    "timestamp": 166366,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSinh",
    "timestamp": 166375,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSqrt",
    "timestamp": 166383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTan",
    "timestamp": 166392,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTanh",
    "timestamp": 166399,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFromEntries",
    "timestamp": 166409,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsExtensible",
    "timestamp": 166418,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPreventExtensions",
    "timestamp": 166428,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetPrototypeOf",
    "timestamp": 166437,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSetPrototypeOf",
    "timestamp": 166447,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyConstructor",
    "timestamp": 166454,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyDeleteProperty",
    "timestamp": 166464,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetProperty",
    "timestamp": 166472,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetPrototypeOf",
    "timestamp": 166480,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyHasProperty",
    "timestamp": 166487,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyIsExtensible",
    "timestamp": 166495,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyPreventExtensions",
    "timestamp": 166502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevocable",
    "timestamp": 166510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevoke",
    "timestamp": 166519,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetProperty",
    "timestamp": 166528,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetPrototypeOf",
    "timestamp": 166537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectIsExtensible",
    "timestamp": 166546,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectPreventExtensions",
    "timestamp": 166554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetPrototypeOf",
    "timestamp": 166563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSetPrototypeOf",
    "timestamp": 166573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGet",
    "timestamp": 166581,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDeleteProperty",
    "timestamp": 166590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpReplace",
    "timestamp": 166599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeReplace",
    "timestamp": 166608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToString",
    "timestamp": 166617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeValueOf",
    "timestamp": 166626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToList",
    "timestamp": 166635,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharAt",
    "timestamp": 166643,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharCodeAt",
    "timestamp": 166652,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCodePointAt",
    "timestamp": 166662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeConcat",
    "timestamp": 166671,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeEndsWith",
    "timestamp": 166680,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateHTML",
    "timestamp": 166689,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeAnchor",
    "timestamp": 166697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBig",
    "timestamp": 166706,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBlink",
    "timestamp": 166715,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBold",
    "timestamp": 166724,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontcolor",
    "timestamp": 166748,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontsize",
    "timestamp": 166757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFixed",
    "timestamp": 166765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeItalics",
    "timestamp": 166772,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLink",
    "timestamp": 166780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSmall",
    "timestamp": 166788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStrike",
    "timestamp": 166795,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSub",
    "timestamp": 166803,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSup",
    "timestamp": 166810,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIterator",
    "timestamp": 166820,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIteratorPrototypeNext",
    "timestamp": 166828,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRepeat",
    "timestamp": 166838,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeRepeat",
    "timestamp": 166846,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSlice",
    "timestamp": 166856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStartsWith",
    "timestamp": 166864,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstring",
    "timestamp": 166874,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateTypedArray",
    "timestamp": 166882,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEvery",
    "timestamp": 166892,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFilter",
    "timestamp": 166900,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFind",
    "timestamp": 166908,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFindIndex",
    "timestamp": 166916,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeForEach",
    "timestamp": 166924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduce",
    "timestamp": 166935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduceRight",
    "timestamp": 166944,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSlice",
    "timestamp": 166954,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSome",
    "timestamp": 166962,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSubArray",
    "timestamp": 166972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayMergeSort",
    "timestamp": 166981,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSort",
    "timestamp": 166990,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load17ATFastSmiElements",
    "timestamp": 166999,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load20ATFastObjectElements",
    "timestamp": 167006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load20ATFastDoubleElements",
    "timestamp": 167014,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store17ATFastSmiElements",
    "timestamp": 167022,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store20ATFastObjectElements",
    "timestamp": 167030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store20ATFastDoubleElements",
    "timestamp": 167039,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete17ATFastSmiElements",
    "timestamp": 167048,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete20ATFastObjectElements",
    "timestamp": 167057,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete20ATFastDoubleElements",
    "timestamp": 167067,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareDefault",
    "timestamp": 167077,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareUserFn",
    "timestamp": 167085,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor25ATGenericElementsAccessor",
    "timestamp": 167095,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Copy",
    "timestamp": 167103,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MergeAt",
    "timestamp": 167113,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopLeft",
    "timestamp": 167120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopRight",
    "timestamp": 167130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayTimSort",
    "timestamp": 167137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSort",
    "timestamp": 167145,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest20UT5ATSmi10HeapObject",
    "timestamp": 167153,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus1",
    "timestamp": 167161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus2",
    "timestamp": 167168,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewSmiBox",
    "timestamp": 167178,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement25ATGenericElementsAccessor",
    "timestamp": 167186,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement15ATInt32Elements",
    "timestamp": 167196,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement17ATFloat32Elements",
    "timestamp": 167205,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement17ATFloat64Elements",
    "timestamp": 167214,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement22ATUint8ClampedElements",
    "timestamp": 167224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement19ATBigUint64Elements",
    "timestamp": 167235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement18ATBigInt64Elements",
    "timestamp": 167245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement15ATUint8Elements",
    "timestamp": 167255,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement14ATInt8Elements",
    "timestamp": 167264,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement16ATUint16Elements",
    "timestamp": 167274,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement15ATInt16Elements",
    "timestamp": 167283,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement16ATUint32Elements",
    "timestamp": 167293,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement15ATInt32Elements",
    "timestamp": 167302,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement17ATFloat32Elements",
    "timestamp": 167312,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement17ATFloat64Elements",
    "timestamp": 167321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement22ATUint8ClampedElements",
    "timestamp": 167331,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement19ATBigUint64Elements",
    "timestamp": 167344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement18ATBigInt64Elements",
    "timestamp": 167355,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement15ATUint8Elements",
    "timestamp": 167363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement14ATInt8Elements",
    "timestamp": 167371,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement16ATUint16Elements",
    "timestamp": 167379,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement15ATInt16Elements",
    "timestamp": 167387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadFixedElement16ATUint32Elements",
    "timestamp": 167395,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement15ATInt32Elements",
    "timestamp": 167406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement17ATFloat32Elements",
    "timestamp": 167417,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement17ATFloat64Elements",
    "timestamp": 167427,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement22ATUint8ClampedElements",
    "timestamp": 167436,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement19ATBigUint64Elements",
    "timestamp": 167446,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement18ATBigInt64Elements",
    "timestamp": 167455,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement15ATUint8Elements",
    "timestamp": 167464,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement14ATInt8Elements",
    "timestamp": 167474,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement16ATUint16Elements",
    "timestamp": 167505,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement15ATInt16Elements",
    "timestamp": 167514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFixedElement16ATUint32Elements",
    "timestamp": 167522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor20ATFastDoubleElements",
    "timestamp": 167530,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor17ATFastSmiElements",
    "timestamp": 167539,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor20ATFastObjectElements",
    "timestamp": 167547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load25ATGenericElementsAccessor",
    "timestamp": 167557,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store25ATGenericElementsAccessor",
    "timestamp": 167566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete25ATGenericElementsAccessor",
    "timestamp": 167574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest5ATSmi",
    "timestamp": 167582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorConstructor",
    "timestamp": 167590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorInternalCompare",
    "timestamp": 167597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeCompare",
    "timestamp": 167605,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorSupportedLocalesOf",
    "timestamp": 167615,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeResolvedOptions",
    "timestamp": 167623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleDateString",
    "timestamp": 167633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleString",
    "timestamp": 167641,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleTimeString",
    "timestamp": 167652,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatConstructor",
    "timestamp": 167660,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatInternalFormat",
    "timestamp": 167670,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormat",
    "timestamp": 167678,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRange",
    "timestamp": 167688,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRangeToParts",
    "timestamp": 167697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatToParts",
    "timestamp": 167705,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeResolvedOptions",
    "timestamp": 167713,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatSupportedLocalesOf",
    "timestamp": 167721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IntlGetCanonicalLocales",
    "timestamp": 167729,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatConstructor",
    "timestamp": 167747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormat",
    "timestamp": 167754,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormatToParts",
    "timestamp": 167764,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeResolvedOptions",
    "timestamp": 167774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatSupportedLocalesOf",
    "timestamp": 167819,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocaleConstructor",
    "timestamp": 167834,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeBaseName",
    "timestamp": 167842,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCalendar",
    "timestamp": 167850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCaseFirst",
    "timestamp": 167858,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCollation",
    "timestamp": 167868,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeHourCycle",
    "timestamp": 167877,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeLanguage",
    "timestamp": 167887,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMaximize",
    "timestamp": 167895,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMinimize",
    "timestamp": 167905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumeric",
    "timestamp": 167914,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumberingSystem",
    "timestamp": 167924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeRegion",
    "timestamp": 167935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeScript",
    "timestamp": 167947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeToString",
    "timestamp": 167955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatConstructor",
    "timestamp": 167965,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatInternalFormatNumber",
    "timestamp": 167974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatNumber",
    "timestamp": 167984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatToParts",
    "timestamp": 167993,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeResolvedOptions",
    "timestamp": 168003,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatSupportedLocalesOf",
    "timestamp": 168012,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesConstructor",
    "timestamp": 168022,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeResolvedOptions",
    "timestamp": 168030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeSelect",
    "timestamp": 168041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesSupportedLocalesOf",
    "timestamp": 168049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatConstructor",
    "timestamp": 168059,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormat",
    "timestamp": 168068,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormatToParts",
    "timestamp": 168078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeResolvedOptions",
    "timestamp": 168089,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatSupportedLocalesOf",
    "timestamp": 168099,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterConstructor",
    "timestamp": 168110,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeResolvedOptions",
    "timestamp": 168118,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeSegment",
    "timestamp": 168132,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterSupportedLocalesOf",
    "timestamp": 168140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeBreakType",
    "timestamp": 168148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeFollowing",
    "timestamp": 168156,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypePreceding",
    "timestamp": 168164,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeIndex",
    "timestamp": 168172,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeNext",
    "timestamp": 168180,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeNormalizeIntl",
    "timestamp": 168190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleLowerCase",
    "timestamp": 168200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleUpperCase",
    "timestamp": 168208,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLowerCaseIntl",
    "timestamp": 168218,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToUpperCaseIntl",
    "timestamp": 168227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToLowerCaseIntl",
    "timestamp": 168237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorConstructor",
    "timestamp": 168245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalAdoptText",
    "timestamp": 168255,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalBreakType",
    "timestamp": 168263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalCurrent",
    "timestamp": 168273,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalFirst",
    "timestamp": 168282,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalNext",
    "timestamp": 168290,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeAdoptText",
    "timestamp": 168298,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeBreakType",
    "timestamp": 168306,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeCurrent",
    "timestamp": 168314,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeFirst",
    "timestamp": 168324,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeNext",
    "timestamp": 168332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeResolvedOptions",
    "timestamp": 168340,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorSupportedLocalesOf",
    "timestamp": 168348,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Wide",
    "timestamp": 168357,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExtraWide",
    "timestamp": 168365,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakWide",
    "timestamp": 168372,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakExtraWide",
    "timestamp": 168382,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak0",
    "timestamp": 168391,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1",
    "timestamp": 168399,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2",
    "timestamp": 168410,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3",
    "timestamp": 168420,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4",
    "timestamp": 168429,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5",
    "timestamp": 168438,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6",
    "timestamp": 168447,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaZero",
    "timestamp": 168456,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi",
    "timestamp": 168465,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaUndefined",
    "timestamp": 168474,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNull",
    "timestamp": 168483,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTheHole",
    "timestamp": 168491,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTrue",
    "timestamp": 168500,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaFalse",
    "timestamp": 168509,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant",
    "timestamp": 168518,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal",
    "timestamp": 168527,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof",
    "timestamp": 168536,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal",
    "timestamp": 168547,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext",
    "timestamp": 168555,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext",
    "timestamp": 168563,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot",
    "timestamp": 168570,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot",
    "timestamp": 168578,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot",
    "timestamp": 168587,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot",
    "timestamp": 168595,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot",
    "timestamp": 168606,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot",
    "timestamp": 168614,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot",
    "timestamp": 168622,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot",
    "timestamp": 168630,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot",
    "timestamp": 168638,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof",
    "timestamp": 168647,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof",
    "timestamp": 168656,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof",
    "timestamp": 168666,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot",
    "timestamp": 168677,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar",
    "timestamp": 168685,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star",
    "timestamp": 168693,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov",
    "timestamp": 168700,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty",
    "timestamp": 168707,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback",
    "timestamp": 168716,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty",
    "timestamp": 168724,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable",
    "timestamp": 168744,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable",
    "timestamp": 168756,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty",
    "timestamp": 168764,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback",
    "timestamp": 168772,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty",
    "timestamp": 168780,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty",
    "timestamp": 168789,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral",
    "timestamp": 168797,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral",
    "timestamp": 168806,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile",
    "timestamp": 168819,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add",
    "timestamp": 168829,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub",
    "timestamp": 168837,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul",
    "timestamp": 168845,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div",
    "timestamp": 168852,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod",
    "timestamp": 168860,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp",
    "timestamp": 168867,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 168875,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 168885,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 168893,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 168900,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight",
    "timestamp": 168909,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 168918,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi",
    "timestamp": 168926,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi",
    "timestamp": 168933,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi",
    "timestamp": 168943,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi",
    "timestamp": 168951,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi",
    "timestamp": 168960,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi",
    "timestamp": 168968,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi",
    "timestamp": 168976,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi",
    "timestamp": 168983,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi",
    "timestamp": 168991,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi",
    "timestamp": 168999,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi",
    "timestamp": 169009,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi",
    "timestamp": 169017,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc",
    "timestamp": 169025,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec",
    "timestamp": 169033,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate",
    "timestamp": 169040,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 169047,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToBooleanLogicalNot",
    "timestamp": 169055,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LogicalNot",
    "timestamp": 169063,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TypeOf",
    "timestamp": 169071,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict",
    "timestamp": 169078,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy",
    "timestamp": 169087,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor",
    "timestamp": 169095,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver",
    "timestamp": 169103,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty",
    "timestamp": 169113,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0",
    "timestamp": 169121,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1",
    "timestamp": 169131,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2",
    "timestamp": 169139,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver",
    "timestamp": 169149,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0",
    "timestamp": 169157,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1",
    "timestamp": 169166,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2",
    "timestamp": 169174,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback",
    "timestamp": 169182,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 169190,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime",
    "timestamp": 169198,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair",
    "timestamp": 169206,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime",
    "timestamp": 169214,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic",
    "timestamp": 169223,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct",
    "timestamp": 169232,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 169241,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual",
    "timestamp": 169251,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict",
    "timestamp": 169259,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan",
    "timestamp": 169267,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan",
    "timestamp": 169275,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual",
    "timestamp": 169283,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual",
    "timestamp": 169291,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual",
    "timestamp": 169302,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf",
    "timestamp": 169310,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn",
    "timestamp": 169318,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndetectable",
    "timestamp": 169325,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestNull",
    "timestamp": 169333,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndefined",
    "timestamp": 169341,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestTypeOf",
    "timestamp": 169350,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName",
    "timestamp": 169358,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber",
    "timestamp": 169368,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric",
    "timestamp": 169376,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject",
    "timestamp": 169387,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToString",
    "timestamp": 169395,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 169404,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral",
    "timestamp": 169414,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayFromIterable",
    "timestamp": 169424,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 169434,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral",
    "timestamp": 169445,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyObjectLiteral",
    "timestamp": 169455,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject",
    "timestamp": 169465,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject",
    "timestamp": 169475,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure",
    "timestamp": 169483,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext",
    "timestamp": 169491,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext",
    "timestamp": 169499,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext",
    "timestamp": 169507,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext",
    "timestamp": 169518,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext",
    "timestamp": 169526,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateMappedArguments",
    "timestamp": 169535,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateUnmappedArguments",
    "timestamp": 169543,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRestParameter",
    "timestamp": 169551,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop",
    "timestamp": 169561,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump",
    "timestamp": 169569,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant",
    "timestamp": 169579,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant",
    "timestamp": 169587,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant",
    "timestamp": 169595,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant",
    "timestamp": 169604,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant",
    "timestamp": 169612,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant",
    "timestamp": 169620,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant",
    "timestamp": 169628,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant",
    "timestamp": 169639,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant",
    "timestamp": 169647,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant",
    "timestamp": 169656,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue",
    "timestamp": 169664,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse",
    "timestamp": 169672,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue",
    "timestamp": 169681,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse",
    "timestamp": 169689,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull",
    "timestamp": 169696,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull",
    "timestamp": 169704,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined",
    "timestamp": 169711,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined",
    "timestamp": 169719,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver",
    "timestamp": 169727,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback",
    "timestamp": 169743,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 169751,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare",
    "timestamp": 169759,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue",
    "timestamp": 169767,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext",
    "timestamp": 169774,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep",
    "timestamp": 169821,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StackCheck",
    "timestamp": 169834,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetPendingMessage",
    "timestamp": 169843,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Throw",
    "timestamp": 169852,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ReThrow",
    "timestamp": 169860,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Return",
    "timestamp": 169868,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole",
    "timestamp": 169878,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperNotCalledIfHole",
    "timestamp": 169887,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperAlreadyCalledIfNotHole",
    "timestamp": 169896,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState",
    "timestamp": 169905,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator",
    "timestamp": 169917,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator",
    "timestamp": 169929,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Debugger",
    "timestamp": 169937,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 169945,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort",
    "timestamp": 169953,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Illegal",
    "timestamp": 169961,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.Wide",
    "timestamp": 169973,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.Wide",
    "timestamp": 169982,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.Wide",
    "timestamp": 169990,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.Wide",
    "timestamp": 169998,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.Wide",
    "timestamp": 170007,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.Wide",
    "timestamp": 170015,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.Wide",
    "timestamp": 170023,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.Wide",
    "timestamp": 170030,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.Wide",
    "timestamp": 170038,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.Wide",
    "timestamp": 170047,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.Wide",
    "timestamp": 170055,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.Wide",
    "timestamp": 170063,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.Wide",
    "timestamp": 170071,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.Wide",
    "timestamp": 170079,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.Wide",
    "timestamp": 170088,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.Wide",
    "timestamp": 170096,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.Wide",
    "timestamp": 170105,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.Wide",
    "timestamp": 170116,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.Wide",
    "timestamp": 170125,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.Wide",
    "timestamp": 170134,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.Wide",
    "timestamp": 170142,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.Wide",
    "timestamp": 170151,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.Wide",
    "timestamp": 170159,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.Wide",
    "timestamp": 170170,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.Wide",
    "timestamp": 170180,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.Wide",
    "timestamp": 170189,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.Wide",
    "timestamp": 170197,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.Wide",
    "timestamp": 170205,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.Wide",
    "timestamp": 170213,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty.Wide",
    "timestamp": 170220,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback.Wide",
    "timestamp": 170229,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty.Wide",
    "timestamp": 170238,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.Wide",
    "timestamp": 170246,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.Wide",
    "timestamp": 170255,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty.Wide",
    "timestamp": 170264,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback.Wide",
    "timestamp": 170274,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty.Wide",
    "timestamp": 170285,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty.Wide",
    "timestamp": 170294,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.Wide",
    "timestamp": 170302,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral.Wide",
    "timestamp": 170311,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.Wide",
    "timestamp": 170320,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.Wide",
    "timestamp": 170328,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.Wide",
    "timestamp": 170336,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.Wide",
    "timestamp": 170344,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.Wide",
    "timestamp": 170351,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.Wide",
    "timestamp": 170359,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.Wide",
    "timestamp": 170370,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.Wide",
    "timestamp": 170379,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.Wide",
    "timestamp": 170387,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.Wide",
    "timestamp": 170395,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.Wide",
    "timestamp": 170403,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.Wide",
    "timestamp": 170410,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.Wide",
    "timestamp": 170419,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.Wide",
    "timestamp": 170427,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.Wide",
    "timestamp": 170435,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.Wide",
    "timestamp": 170442,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.Wide",
    "timestamp": 170450,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.Wide",
    "timestamp": 170458,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.Wide",
    "timestamp": 170468,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.Wide",
    "timestamp": 170476,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.Wide",
    "timestamp": 170485,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.Wide",
    "timestamp": 170493,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.Wide",
    "timestamp": 170501,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.Wide",
    "timestamp": 170510,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.Wide",
    "timestamp": 170519,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.Wide",
    "timestamp": 170527,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.Wide",
    "timestamp": 170535,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.Wide",
    "timestamp": 170544,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.Wide",
    "timestamp": 170552,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.Wide",
    "timestamp": 170561,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.Wide",
    "timestamp": 170569,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.Wide",
    "timestamp": 170578,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.Wide",
    "timestamp": 170586,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.Wide",
    "timestamp": 170595,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.Wide",
    "timestamp": 170603,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.Wide",
    "timestamp": 170611,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.Wide",
    "timestamp": 170619,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.Wide",
    "timestamp": 170628,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.Wide",
    "timestamp": 170638,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.Wide",
    "timestamp": 170648,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.Wide",
    "timestamp": 170657,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback.Wide",
    "timestamp": 170666,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.Wide",
    "timestamp": 170674,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.Wide",
    "timestamp": 170683,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.Wide",
    "timestamp": 170691,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.Wide",
    "timestamp": 170699,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.Wide",
    "timestamp": 170708,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.Wide",
    "timestamp": 170716,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.Wide",
    "timestamp": 170724,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.Wide",
    "timestamp": 170757,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.Wide",
    "timestamp": 170781,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.Wide",
    "timestamp": 170806,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.Wide",
    "timestamp": 170825,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.Wide",
    "timestamp": 170834,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.Wide",
    "timestamp": 170843,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.Wide",
    "timestamp": 170852,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.Wide",
    "timestamp": 170860,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.Wide",
    "timestamp": 170870,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.Wide",
    "timestamp": 170879,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.Wide",
    "timestamp": 170888,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.Wide",
    "timestamp": 170900,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.Wide",
    "timestamp": 170909,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.Wide",
    "timestamp": 170917,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.Wide",
    "timestamp": 170926,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.Wide",
    "timestamp": 170935,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.Wide",
    "timestamp": 170943,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.Wide",
    "timestamp": 170953,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.Wide",
    "timestamp": 170964,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.Wide",
    "timestamp": 170973,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.Wide",
    "timestamp": 170981,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.Wide",
    "timestamp": 170989,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.Wide",
    "timestamp": 170998,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.Wide",
    "timestamp": 171007,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.Wide",
    "timestamp": 171015,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.Wide",
    "timestamp": 171024,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.Wide",
    "timestamp": 171034,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.Wide",
    "timestamp": 171043,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.Wide",
    "timestamp": 171054,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.Wide",
    "timestamp": 171062,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.Wide",
    "timestamp": 171071,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.Wide",
    "timestamp": 171080,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.Wide",
    "timestamp": 171146,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.Wide",
    "timestamp": 171167,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.Wide",
    "timestamp": 171177,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.Wide",
    "timestamp": 171186,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.Wide",
    "timestamp": 171195,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.Wide",
    "timestamp": 171205,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.Wide",
    "timestamp": 171213,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.Wide",
    "timestamp": 171224,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.Wide",
    "timestamp": 171233,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.Wide",
    "timestamp": 171243,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.Wide",
    "timestamp": 171252,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.Wide",
    "timestamp": 171263,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.Wide",
    "timestamp": 171274,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.Wide",
    "timestamp": 171284,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.Wide",
    "timestamp": 171295,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.Wide",
    "timestamp": 171304,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.Wide",
    "timestamp": 171315,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.Wide",
    "timestamp": 171324,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.Wide",
    "timestamp": 171333,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.Wide",
    "timestamp": 171343,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.Wide",
    "timestamp": 171353,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.Wide",
    "timestamp": 171364,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.Wide",
    "timestamp": 171374,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.Wide",
    "timestamp": 171385,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.Wide",
    "timestamp": 171394,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.Wide",
    "timestamp": 171405,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.ExtraWide",
    "timestamp": 171413,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.ExtraWide",
    "timestamp": 171424,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.ExtraWide",
    "timestamp": 171436,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.ExtraWide",
    "timestamp": 171448,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.ExtraWide",
    "timestamp": 171458,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.ExtraWide",
    "timestamp": 171468,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.ExtraWide",
    "timestamp": 171479,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.ExtraWide",
    "timestamp": 171488,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.ExtraWide",
    "timestamp": 171498,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.ExtraWide",
    "timestamp": 171508,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.ExtraWide",
    "timestamp": 171519,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.ExtraWide",
    "timestamp": 171528,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.ExtraWide",
    "timestamp": 171537,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.ExtraWide",
    "timestamp": 171548,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.ExtraWide",
    "timestamp": 171557,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.ExtraWide",
    "timestamp": 171566,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.ExtraWide",
    "timestamp": 171578,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.ExtraWide",
    "timestamp": 171587,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.ExtraWide",
    "timestamp": 171596,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.ExtraWide",
    "timestamp": 171605,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.ExtraWide",
    "timestamp": 171614,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.ExtraWide",
    "timestamp": 171623,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.ExtraWide",
    "timestamp": 171632,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.ExtraWide",
    "timestamp": 171641,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.ExtraWide",
    "timestamp": 171650,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.ExtraWide",
    "timestamp": 171698,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.ExtraWide",
    "timestamp": 171715,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.ExtraWide",
    "timestamp": 171724,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.ExtraWide",
    "timestamp": 171747,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedProperty.ExtraWide",
    "timestamp": 171757,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNamedPropertyNoFeedback.ExtraWide",
    "timestamp": 171766,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaKeyedProperty.ExtraWide",
    "timestamp": 171775,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.ExtraWide",
    "timestamp": 171784,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.ExtraWide",
    "timestamp": 171793,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedProperty.ExtraWide",
    "timestamp": 171802,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedPropertyNoFeedback.ExtraWide",
    "timestamp": 171899,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaNamedOwnProperty.ExtraWide",
    "timestamp": 171913,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaKeyedProperty.ExtraWide",
    "timestamp": 171923,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.ExtraWide",
    "timestamp": 171934,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaDataPropertyInLiteral.ExtraWide",
    "timestamp": 171944,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.ExtraWide",
    "timestamp": 171955,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.ExtraWide",
    "timestamp": 171964,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.ExtraWide",
    "timestamp": 171975,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.ExtraWide",
    "timestamp": 171983,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.ExtraWide",
    "timestamp": 171994,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.ExtraWide",
    "timestamp": 172002,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.ExtraWide",
    "timestamp": 172012,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.ExtraWide",
    "timestamp": 172021,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.ExtraWide",
    "timestamp": 172031,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.ExtraWide",
    "timestamp": 172042,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.ExtraWide",
    "timestamp": 172051,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.ExtraWide",
    "timestamp": 172062,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.ExtraWide",
    "timestamp": 172072,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.ExtraWide",
    "timestamp": 172163,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.ExtraWide",
    "timestamp": 172184,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.ExtraWide",
    "timestamp": 172194,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.ExtraWide",
    "timestamp": 172202,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.ExtraWide",
    "timestamp": 172210,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.ExtraWide",
    "timestamp": 172218,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.ExtraWide",
    "timestamp": 172227,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.ExtraWide",
    "timestamp": 172235,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.ExtraWide",
    "timestamp": 172243,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.ExtraWide",
    "timestamp": 172252,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.ExtraWide",
    "timestamp": 172260,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.ExtraWide",
    "timestamp": 172269,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.ExtraWide",
    "timestamp": 172277,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.ExtraWide",
    "timestamp": 172285,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.ExtraWide",
    "timestamp": 172293,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.ExtraWide",
    "timestamp": 172302,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.ExtraWide",
    "timestamp": 172310,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.ExtraWide",
    "timestamp": 172319,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.ExtraWide",
    "timestamp": 172328,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.ExtraWide",
    "timestamp": 172336,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.ExtraWide",
    "timestamp": 172345,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.ExtraWide",
    "timestamp": 172353,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.ExtraWide",
    "timestamp": 172362,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.ExtraWide",
    "timestamp": 172370,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.ExtraWide",
    "timestamp": 172378,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.ExtraWide",
    "timestamp": 172388,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.ExtraWide",
    "timestamp": 172397,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.ExtraWide",
    "timestamp": 172406,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallNoFeedback.ExtraWide",
    "timestamp": 172414,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.ExtraWide",
    "timestamp": 172423,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.ExtraWide",
    "timestamp": 172431,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.ExtraWide",
    "timestamp": 172439,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.ExtraWide",
    "timestamp": 172448,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.ExtraWide",
    "timestamp": 172456,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.ExtraWide",
    "timestamp": 172465,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.ExtraWide",
    "timestamp": 172473,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.ExtraWide",
    "timestamp": 172482,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.ExtraWide",
    "timestamp": 172490,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.ExtraWide",
    "timestamp": 172498,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.ExtraWide",
    "timestamp": 172507,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.ExtraWide",
    "timestamp": 172515,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.ExtraWide",
    "timestamp": 172524,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.ExtraWide",
    "timestamp": 172533,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.ExtraWide",
    "timestamp": 172541,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.ExtraWide",
    "timestamp": 172550,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.ExtraWide",
    "timestamp": 172558,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.ExtraWide",
    "timestamp": 172566,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.ExtraWide",
    "timestamp": 172577,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.ExtraWide",
    "timestamp": 172586,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.ExtraWide",
    "timestamp": 172594,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.ExtraWide",
    "timestamp": 172603,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.ExtraWide",
    "timestamp": 172612,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.ExtraWide",
    "timestamp": 172621,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.ExtraWide",
    "timestamp": 172629,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.ExtraWide",
    "timestamp": 172638,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.ExtraWide",
    "timestamp": 172646,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.ExtraWide",
    "timestamp": 172655,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.ExtraWide",
    "timestamp": 172663,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.ExtraWide",
    "timestamp": 172672,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.ExtraWide",
    "timestamp": 172681,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.ExtraWide",
    "timestamp": 172689,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.ExtraWide",
    "timestamp": 172698,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.ExtraWide",
    "timestamp": 172706,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.ExtraWide",
    "timestamp": 172714,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.ExtraWide",
    "timestamp": 172722,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.ExtraWide",
    "timestamp": 172731,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.ExtraWide",
    "timestamp": 172745,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.ExtraWide",
    "timestamp": 172771,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.ExtraWide",
    "timestamp": 172793,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.ExtraWide",
    "timestamp": 172817,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.ExtraWide",
    "timestamp": 172832,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.ExtraWide",
    "timestamp": 172849,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.ExtraWide",
    "timestamp": 172866,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.ExtraWide",
    "timestamp": 172881,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.ExtraWide",
    "timestamp": 172895,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.ExtraWide",
    "timestamp": 172910,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.ExtraWide",
    "timestamp": 172925,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.ExtraWide",
    "timestamp": 172940,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.ExtraWide",
    "timestamp": 172956,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.ExtraWide",
    "timestamp": 172971,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.ExtraWide",
    "timestamp": 172986,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.ExtraWide",
    "timestamp": 173001,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.ExtraWide",
    "timestamp": 173016,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.ExtraWide",
    "timestamp": 173031,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.ExtraWide",
    "timestamp": 173047,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.ExtraWide",
    "timestamp": 173063,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.ExtraWide",
    "timestamp": 173077,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.ExtraWide",
    "timestamp": 173091,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.ExtraWide",
    "timestamp": 173105,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.ExtraWide",
    "timestamp": 173121,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.ExtraWide",
    "timestamp": 173138,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.ExtraWide",
    "timestamp": 173152,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.ExtraWide",
    "timestamp": 173167,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.ExtraWide",
    "timestamp": 173181,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 0,
    "tm": 175564,
    "source": {
      "script": 6,
      "start": 0,
      "end": 9441,
      "positions": "C0O0C5O9441",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 1,
    "tm": 176322,
    "source": {
      "script": 6,
      "start": 0,
      "end": 9441,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeSet internal/per_context/primordials.js:73:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 2,
    "tm": 176793,
    "source": {
      "script": 4,
      "start": 2386,
      "end": 2386,
      "positions": "C6O2386C7O2386C13O2386C18O2386",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "internalBinding internal/bootstrap/loaders.js:128:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 3,
    "tm": 177230,
    "source": {
      "script": 6,
      "start": 4447,
      "end": 4677,
      "positions": "C0O4447C1O4473C9O4483C14O4498C18O4536C30O4563C36O4561C43O4598C51O4613C63O4638C69O4613C74O4661C76O4672",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NativeModule internal/bootstrap/loaders.js:149:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 4,
    "tm": 177473,
    "source": {
      "script": 6,
      "start": 4983,
      "end": 5231,
      "positions": "C0O4983C1O4993C3O5012C11O5007C15O5024C17O5032C21O5041C22O5054C26O5063C27O5075C31O5091C32O5107C36O5123C37O5135C41O5147C42O5160C46O5204C56O5204C62O5198C67O5230",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 5,
    "tm": 178278,
    "source": {
      "script": 7,
      "start": 0,
      "end": 16300,
      "positions": "C0O0C5O16300",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 6,
    "tm": 179516,
    "source": {
      "script": 7,
      "start": 0,
      "end": 16300,
      "positions": "C86O0C87O1762C90O1824C96O1797C103O1799C109O1805C115O1813C121O1853C129O1853C133O1853C135O1903C143O1903C151O1887C158O1889C164O1932C167O1957C170O1978C173O1996C178O2011C182O2020C187O2037C191O2148C199O2148C203O2148C205O2236C208O2304C211O2324C215O2351C223O2369C231O2438C239O2458C245O2567C249O2589C263O2595C269O2627C275O2589C280O2582C284O2659C292O2659C298O2768C302O2791C306O2818C310O2805C314O2860C320O2860C327O2895C331O2919C335O2909C339O2929C343O2953C347O2943C351O2963C355O2985C359O2975C363O3066C367O3101C371O3088C375O3119C379O3150C383O3137C387O3164C391O3217C395O3199C399O3248C403O3295C407O3282C413O3369C419O3369C426O3406C430O3440C440O3440C445O3420C449O3475C453O3509C463O3509C468O3489C472O3544C476O3568C480O3558C484O3578C488O3603C492O3590C496O3676C500O3704C504O3691C508O3715C512O3743C516O3730C520O3820C524O3860C528O3847C532O3883C536O3922C540O3909C544O3984C548O4016C552O4003C556O4031C560O4058C564O4045C568O4086C572O4101C578O4101C585O4136C589O4164C593O4154C597O4178C601O4203C605O4193C609O4214C613O4222C619O4246C623O4236C627O4263C631O4290C635O4280C639O4303C643O4335C647O4325C651O4353C655O4383C659O4373C663O4399C667O4422C671O4412C675O4431C679O4454C683O4444C687O4486C695O4486C701O4535C707O4568C711O4597C715O4583C719O4608C723O4638C727O4624C731O4650C735O4679C739O4665C743O4690C747O4720C751O4706C755O4732C759O4764C763O4750C767O4780C771O4841C777O4841C784O4887C788O4916C792O4906C796O4933C800O4961C804O4951C808O4977C812O5003C816O4993C820O5017C824O5043C828O5033C832O5057C836O5082C840O5072C844O5095C848O5120C852O5110C858O5145C862O5191C872O5191C877O5164C881O5233C885O5271C895O5271C900O5251C904O5312C908O5348C918O5348C923O5328C927O5387C931O5423C941O5423C946O5403C950O5462C954O5497C964O5497C969O5477C973O5535C977O5570C987O5570C992O5550C996O5614C1000O5685C1008O5685C1014O5718C1020O5719C1028O5643C1035O5645C1041O5656C1047O5666C1053O5744C1062O5744C1069O5874C1075O5874C1083O5814C1090O5816C1096O5827C1102O5837C1108O5899C1117O5899C1122O6265C1130O6265C1138O6247C1145O6249C1151O6299C1159O6299C1165O6328C1171O6329C1176O6407C1184O6407C1192O6363C1199O6368C1209O6387C1219O6451C1223O6463C1233O6661C1245O6700C1253O6707C1263O6680C1273O6645C1283O6756C1291O6756C1303O6729C1310O6731C1320O6736C1330O6839C1345O6823C1355O6930C1370O6914C1380O7025C1388O7025C1400O6986C1407O6993C1417O7006C1427O7126C1442O7110C1452O7234C1467O7218C1477O7378C1485O7378C1495O7416C1507O7448C1517O7400C1527O7483C1539O7514C1549O7467C1559O7548C1571O7578C1581O7532C1591O7611C1603O7640C1613O7595C1623O7674C1638O7658C1648O7769C1660O7802C1670O7753C1680O7838C1692O7869C1702O7822C1712O8171C1720O8171C1732O8130C1739O8132C1749O8205C1753O8255C1763O8205C1771O8325C1775O8332C1793O8347C1802O8392C1814O8663C1826O8332C1836O8915C1848O8961C1866O8932C1876O8930C1884O9236C1890O9191C1897O9193C1907O9207C1917O9219C1927O9245C1931O9252C1949O9267C1958O9365C1969O9383C1979O9409C1989O9502C1999O9528C2009O9555C2019O9577C2031O9618C2057O9252C2067O9785C2075O9785C2087O9661C2094O9668C2104O9700C2114O9742C2124O10188C2130O10212C2138O10244C2144O10288C2152O10335C2158O10379C2166O10453C2174O10453C2186O10435C2193O10437C2203O10491C2209O10511C2217O10802C2227O10773C2234O10775C2244O10785C2254O10823C2260O10840C2268O11111C2274O11133C2282O11184C2290O11184C2302O11160C2309O11162C2319O11239C2327O11239C2339O11221C2346O11223C2356O11313C2368O11275C2375O11277C2385O11295C2395O11597C2406O16299",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupPrepareStackTrace internal/bootstrap/node.js:300:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 7,
    "tm": 180334,
    "source": {
      "script": 7,
      "start": 11739,
      "end": 12311,
      "positions": "C0O11739C1O11835C9O11835C17O11753C24O11760C30O11799C36O11994C44O11994C52O11871C59O11878C73O11932C80O11941C86O11965C92O12122C96O12242C102O12310",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nativeModuleRequire internal/bootstrap/loaders.js:183:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 8,
    "tm": 180482,
    "source": {
      "script": 6,
      "start": 5912,
      "end": 6248,
      "positions": "C0O5912C1O5922C3O5933C5O5929C10O5950C14O5971C15O5994C19O6007C25O6011C31O6011C38O6155C40O6165C51O6213C66O6171C71O6165C72O6235C78O6235C82O6245",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NativeModule.compile internal/bootstrap/loaders.js:272:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 9,
    "tm": 180597,
    "source": {
      "script": 6,
      "start": 8840,
      "end": 9358,
      "positions": "C0O8840C1O8857C7O8872C13O8900C17O8908C18O8935C24O8942C25O8955C32O9002C38O9005C48O9005C63O9110C69O9110C75O9144C87O9179C101O9136C106O9217C107O9229C126O9257C129O9270C144O9289C150O9304C162O9325C168O9304C173O9347C177O9355",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/errors.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 10,
    "tm": 182197,
    "source": {
      "script": 8,
      "start": 0,
      "end": 45767,
      "positions": "C0O0C5O45767",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/errors.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 11,
    "tm": 185465,
    "source": {
      "script": 8,
      "start": 0,
      "end": 45767,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "E internal/errors.js:286:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 12,
    "tm": 186982,
    "source": {
      "script": 8,
      "start": 8338,
      "end": 8852,
      "positions": "C14O8338C29O8522C37O8531C47O8531C53O8549C61O8561C63O8557C68O8581C78O8587C82O8585C86O8634C100O8640C105O8638C107O8700C114O8707C119O8734C131O8734C136O8832C150O8843C155O8851",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeNodeErrorWithCode internal/errors.js:212:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 13,
    "tm": 187073,
    "source": {
      "script": 8,
      "start": 6260,
      "end": 7013,
      "positions": "C9O6260C10O6277C44O7010",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/errors.js:297:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 14,
    "tm": 187334,
    "source": {
      "script": 8,
      "start": 8742,
      "end": 8821,
      "positions": "C0O8742C1O8762C7O8772C21O8809C25O8780C30O8778C35O8820",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeSystemErrorWithCode internal/errors.js:204:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 15,
    "tm": 187626,
    "source": {
      "script": 8,
      "start": 6107,
      "end": 6226,
      "positions": "C9O6107C10O6118C43O6223",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 16,
    "tm": 188246,
    "source": {
      "script": 9,
      "start": 0,
      "end": 12178,
      "positions": "C0O0C5O12178",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 17,
    "tm": 189204,
    "source": {
      "script": 9,
      "start": 0,
      "end": 12178,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupProcessObject internal/bootstrap/node.js:319:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 18,
    "tm": 190503,
    "source": {
      "script": 7,
      "start": 12342,
      "end": 12925,
      "positions": "C0O12342C1O12371C9O12371C15O12415C21O12422C31O12422C38O12450C44O12457C50O12500C56O12457C62O12528C72O12528C77O12546C83O12553C95O12577C99O12584C111O12553C116O12783C122O12790C128O12805C145O12838C149O12790C155O12924",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " events.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 19,
    "tm": 190996,
    "source": {
      "script": 10,
      "start": 0,
      "end": 16046,
      "positions": "C0O0C5O16046",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " events.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 20,
    "tm": 192162,
    "source": {
      "script": 10,
      "start": 0,
      "end": 16046,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 21,
    "tm": 193777,
    "source": {
      "script": 11,
      "start": 0,
      "end": 57290,
      "positions": "C0O0C5O57290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 22,
    "tm": 197609,
    "source": {
      "script": 11,
      "start": 0,
      "end": 57290,
      "positions": "C558O0C559O341C565O23C572O28C578O48C584O69C590O87C596O106C602O115C608O132C614O141C620O161C634O189C641O196C647O217C653O247C659O267C665O284C671O304C677O324C683O606C687O606C695O363C702O368C708O397C714O419C720O439C726O452C732O466C738O505C752O552C759O559C765O580C771O708C779O708C787O640C794O645C800O669C806O681C812O690C818O818C826O818C834O743C849O755C856O762C862O792C868O1485C876O1485C884O855C891O860C897O880C903O904C909O925C915O943C921O965C927O986C933O1001C939O1016C945O1026C951O1044C957O1072C963O1090C969O1104C975O1114C981O1132C987O1146C993O1160C999O1173C1005O1184C1011O1201C1017O1220C1023O1239C1029O1259C1035O1278C1041O1295C1047O1319C1053O1337C1059O1355C1065O1371C1071O1388C1077O1405C1083O1424C1089O1443C1095O1463C1101O1535C1109O1535C1113O1535C1115O1591C1123O1591C1131O1572C1138O1574C1144O1637C1145O1637C1147O1673C1156O1692C1162O1712C1167O1692C1174O1719C1186O1720C1195O1673C1200O1673C1202O1799C1206O1806C1218O1806C1223O1799C1225O2034C1226O2034C1228O2057C1230O2057C1232O2086C1234O2086C1236O2164C1240O2164C1242O2223C1246O2223C1248O2287C1252O2287C1254O2348C1258O2348C1260O2430C1264O2430C1266O2480C1270O2480C1272O2529C1276O2529C1278O2614C1282O2614C1284O2681C1286O2681C1288O2743C1289O2743C1291O2765C1293O2765C1295O2789C1297O2789C1299O2885C1303O2885C1305O5887C1311O5902C1315O5928C1319O5935C1333O5950C1339O5982C1347O6034C1355O5935C1360O6316C1368O6340C1378O6354C1387O6354C1400O6340C1406O6331C1410O6681C1418O6705C1428O6719C1437O6719C1450O6705C1456O6696C1460O7194C1464O7194C1466O12965C1467O12965C1469O52242C1473O52242C1475O52288C1476O52288C1478O57196C1486O57218C1492O57230C1498O57241C1504O57263C1510O57211C1515O57289",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/types.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 23,
    "tm": 198340,
    "source": {
      "script": 12,
      "start": 0,
      "end": 1968,
      "positions": "C0O0C5O1968",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/types.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 24,
    "tm": 198600,
    "source": {
      "script": 12,
      "start": 0,
      "end": 1968,
      "positions": "C80O0C81O49C87O23C94O25C100O33C106O100C112O115C117O126C123O100C130O209C136O294C141O301C147O209C155O313C161O182C165O182C167O410C172O422C178O1668C182O1693C196O1722C202O1744C208O1761C214O1778C220O1802C226O1820C232O1838C238O1854C244O1871C250O1888C256O1907C262O1926C268O1946C274O1683C279O1967",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "uncurryThis internal/per_context/primordials.js:23:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 25,
    "tm": 198761,
    "source": {
      "script": 4,
      "start": 1086,
      "end": 1164,
      "positions": "C9O1086C10O1098C14O1161",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/assert.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 26,
    "tm": 198936,
    "source": {
      "script": 13,
      "start": 0,
      "end": 497,
      "positions": "C0O0C5O497",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/assert.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 27,
    "tm": 199015,
    "source": {
      "script": 13,
      "start": 0,
      "end": 497,
      "positions": "C30O0C31O21C32O21C34O448C36O460C40O471C42O486C47O496",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/inspect.js:97:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 28,
    "tm": 199216,
    "source": {
      "script": 11,
      "start": 1727,
      "end": 1760,
      "positions": "C0O1727C1O1753C7O1753C13O1753C18O1760",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^([A-Z][a-z]+)+$",
    "timestamp": 199460,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "EventEmitter events.js:43:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 29,
    "tm": 199714,
    "source": {
      "script": 10,
      "start": 1528,
      "end": 1568,
      "positions": "C0O1528C1O1536C5O1549C11O1554C17O1554C23O1567",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitter.init events.js:83:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 30,
    "tm": 199876,
    "source": {
      "script": 10,
      "start": 2711,
      "end": 2953,
      "positions": "C0O2711C1O2730C7O2767C15O2779C19O2786C25O2786C32O2806C36O2775C41O2823C43O2838C47O2845C56O2845C61O2836C65O2864C66O2882C70O2923C80O2916C85O2952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupGlobalProxy internal/bootstrap/node.js:364:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 31,
    "tm": 200025,
    "source": {
      "script": 7,
      "start": 13486,
      "end": 14370,
      "positions": "C12O13486C13O13494C19O13501C25O13516C32O13524C36O13531C48O13501C53O14100C59O14107C65O14124C76O14147C86O14188C98O14222C112O14262C122O14303C134O14335C148O14107C155O14369",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeGetter internal/bootstrap/node.js:372:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 32,
    "tm": 200119,
    "source": {
      "script": 7,
      "start": 13669,
      "end": 13798,
      "positions": "C0O13669C1O13683C19O13745C36O13690C41O13793",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "deprecate internal/util.js:46:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 33,
    "tm": 200222,
    "source": {
      "script": 9,
      "start": 1353,
      "end": 2471,
      "positions": "C26O1353C27O1374C33O1386C40O1400C45O1417C47O1427C48O1438C58O1495C80O1501C85O1495C86O1569C87O1569C89O2157C97O2164C111O2164C117O2199C121O2206C127O2403C135O2429C139O2424C143O2450C145O2468",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeSetter internal/bootstrap/node.js:378:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 34,
    "tm": 200314,
    "source": {
      "script": 7,
      "start": 13823,
      "end": 14094,
      "positions": "C9O13823C10O13837C30O14041C47O13844C52O14089",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupBuffer internal/bootstrap/node.js:403:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 35,
    "tm": 200422,
    "source": {
      "script": 7,
      "start": 14394,
      "end": 14826,
      "positions": "C0O14394C1O14421C9O14421C17O14408C24O14410C30O14465C38O14465C44O14565C50O14591C56O14565C61O14606C65O14650C69O14686C75O14693C81O14708C98O14740C102O14693C108O14825",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 36,
    "tm": 201357,
    "source": {
      "script": 14,
      "start": 0,
      "end": 35353,
      "positions": "C0O0C5O35353",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 37,
    "tm": 203944,
    "source": {
      "script": 14,
      "start": 0,
      "end": 35353,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 38,
    "tm": 204787,
    "source": {
      "script": 15,
      "start": 0,
      "end": 4482,
      "positions": "C0O0C5O4482",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 39,
    "tm": 205155,
    "source": {
      "script": 15,
      "start": 0,
      "end": 4482,
      "positions": "C74O0C75O169C79O169C87O23C94O28C108O55C115O62C121O89C127O117C133O140C139O232C143O232C151O204C158O209C164O285C168O285C174O313C182O271C189O273C195O366C202O325C209O327C215O345C221O527C225O527C227O557C229O557C231O1665C237O1665C243O2092C249O2092C253O2092C255O2739C261O2739C267O4025C273O4025C279O4283C287O4305C293O4317C299O4330C305O4344C311O4363C317O4383C323O4401C329O4420C335O4439C341O4458C347O4298C352O4481",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hideStackFrames internal/errors.js:242:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 40,
    "tm": 205321,
    "source": {
      "script": 8,
      "start": 7112,
      "end": 7515,
      "positions": "C9O7112C10O7122C14O7512",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 41,
    "tm": 206259,
    "source": {
      "script": 16,
      "start": 0,
      "end": 29383,
      "positions": "C0O0C5O29383",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/buffer.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 42,
    "tm": 208452,
    "source": {
      "script": 16,
      "start": 0,
      "end": 29383,
      "positions": "C509O0C510O34C516O23C523O25C529O137C533O137C539O163C547O56C554O61C560O90C566O115C572O199C576O199C584O178C591O180C597O420C601O420C609O238C616O243C622O258C628O274C634O290C640O303C646O317C652O331C658O346C664O362C670O378C676O391C682O405C688O513C699O513C704O513C706O561C715O589C723O561C728O561C730O620C741O620C746O620C748O668C757O696C765O668C770O668C772O730C781O746C785O944C791O961C797O965C800O944C802O26856C833O29315C841O29337C847O29352C853O29330C858O29382",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addBufferPrototypeMethods internal/buffer.js:942:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 43,
    "tm": 208898,
    "source": {
      "script": 16,
      "start": 26907,
      "end": 29311,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createPool buffer.js:127:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 44,
    "tm": 209197,
    "source": {
      "script": 14,
      "start": 3516,
      "end": 3625,
      "positions": "C0O3516C1O3524C5O3542C13O3533C19O3555C25O3586C29O3567C35O3595C43O3565C49O3607C54O3618C61O3624",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createUnsafeBuffer buffer.js:118:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 45,
    "tm": 209264,
    "source": {
      "script": 14,
      "start": 3377,
      "end": 3493,
      "positions": "C0O3377C1O3389C11O3401C18O3420C26O3427C48O3469C59O3481C79O3492C81O3492",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FastBuffer internal/buffer.js:940:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 46,
    "tm": 209312,
    "source": {
      "script": 16,
      "start": 26831,
      "end": 26831,
      "positions": "C6O26831C7O26831C13O26831C18O26831",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 47,
    "tm": 210110,
    "source": {
      "script": 17,
      "start": 0,
      "end": 10713,
      "positions": "C0O0C5O10713",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 48,
    "tm": 210799,
    "source": {
      "script": 17,
      "start": 0,
      "end": 10713,
      "positions": "C92O0C93O248C99O174C106O179C112O190C118O210C124O227C130O455C138O455C146O270C153O275C167O301C174O308C180O328C186O348C192O375C198O403C204O426C210O499C218O499C224O531C228O499C230O559C238O559C244O587C250O590C254O559C256O6714C260O6714C262O6748C266O6748C268O6785C272O6785C274O10182C275O10182C277O10605C285O10627C291O10656C297O10667C303O10689C309O10620C314O10712",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/main_thread_only.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 49,
    "tm": 211098,
    "source": {
      "script": 18,
      "start": 0,
      "end": 4302,
      "positions": "C0O0C5O4302",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/main_thread_only.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 50,
    "tm": 211423,
    "source": {
      "script": 18,
      "start": 0,
      "end": 4302,
      "positions": "C61O0C62O212C66O212C74O114C81O119C95O145C102O152C108O179C114O305C118O305C126O247C133O252C139O266C145O285C151O360C159O360C165O388C173O346C180O348C186O3070C187O3070C189O4200C197O4222C203O4245C209O4270C215O4215C220O4301",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrapProcessMethods internal/process/main_thread_only.js:22:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 51,
    "tm": 211796,
    "source": {
      "script": 18,
      "start": 500,
      "end": 1131,
      "positions": "C30O500C31O665C33O665C35O1081C43O1095C49O1107C55O1119C61O1128",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrapProcessMethods internal/process/per_thread.js:33:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 52,
    "tm": 212207,
    "source": {
      "script": 17,
      "start": 801,
      "end": 6678,
      "positions": "C93O801C94O980C100O822C107O837C113O865C119O895C125O924C131O958C137O1178C148O1178C153O1178C155O3404C166O3404C171O3404C173O4220C184O4220C189O4220C191O4367C202O4367C207O4367C209O5753C220O5753C225O5753C227O6539C235O6553C241O6569C247O6582C253O6601C259O6616C265O6636C271O6654C277O6665C283O6675",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/stdio.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 53,
    "tm": 212632,
    "source": {
      "script": 19,
      "start": 0,
      "end": 5629,
      "positions": "C0O0C5O5629",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/stdio.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 54,
    "tm": 213135,
    "source": {
      "script": 19,
      "start": 0,
      "end": 5629,
      "positions": "C38O0C39O45C43O45C51O23C58O25C64O71C70O98C75O5628",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getMainThreadStdio internal/process/stdio.js:21:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 55,
    "tm": 213363,
    "source": {
      "script": 19,
      "start": 550,
      "end": 4081,
      "positions": "C23O550C24O3889C34O3918C38O4018C46O4032C52O4048C58O4064C64O4078",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupProcessStdio internal/bootstrap/node.js:339:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 56,
    "tm": 213469,
    "source": {
      "script": 7,
      "start": 12955,
      "end": 13457,
      "positions": "C0O12955C1O12993C7O13000C21O13015C29O13094C33O13000C38O13116C44O13123C58O13138C66O13217C70O13123C75O13239C81O13246C95O13261C103O13339C107O13246C112O13360C120O13378C125O13456",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 57,
    "tm": 214028,
    "source": {
      "script": 20,
      "start": 0,
      "end": 16519,
      "positions": "C0O0C5O16519",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 58,
    "tm": 215124,
    "source": {
      "script": 20,
      "start": 0,
      "end": 16519,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitHookFactory internal/async_hooks.js:182:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 59,
    "tm": 215695,
    "source": {
      "script": 20,
      "start": 7756,
      "end": 8002,
      "positions": "C0O7756C1O7787C7O7805C23O7805C30O7926C36O7933C46O7948C54O7974C61O7933C66O7989C68O7999",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/per_context/primordials.js:24:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 60,
    "tm": 215761,
    "source": {
      "script": 4,
      "start": 1105,
      "end": 1160,
      "positions": "C3O1105C10O1127C28O1127C33O1160",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 61,
    "tm": 216290,
    "source": {
      "script": 21,
      "start": 0,
      "end": 4989,
      "positions": "C0O0C5O4989",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 62,
    "tm": 216665,
    "source": {
      "script": 21,
      "start": 0,
      "end": 4989,
      "positions": "C139O0C140O47C146O23C153O25C159O300C163O300C171O69C178O186C184O240C190O258C196O278C202O375C206O375C214O340C221O345C227O519C235O519C243O411C250O416C256O442C262O465C268O489C274O773C282O773C290O566C297O571C303O600C309O615C315O634C321O656C327O669C333O684C339O698C353O723C360O725C366O742C372O869C380O869C386O895C394O813C401O818C407O843C413O923C421O923C427O1046C428O1046C430O1237C432O1237C437O1237C439O3630C440O3630C442O3683C446O3683C448O4676C454O4698C464O4969C470O4691C475O4988",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 63,
    "tm": 217006,
    "source": {
      "script": 22,
      "start": 0,
      "end": 8308,
      "positions": "C0O0C5O8308",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/promises.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 64,
    "tm": 217538,
    "source": {
      "script": 22,
      "start": 0,
      "end": 8308,
      "positions": "C154O0C155O36C161O23C168O25C174O278C178O278C186O58C193O63C207O97C214O104C220O138C226O176C232O211C238O248C244O379C248O379C256O318C263O323C269O349C275O498C277O498C279O535C284O535C289O535C291O586C293O586C295O622C297O622C299O647C300O647C302O780C303O780C305O932C307O932C309O1234C311O1234C313O1434C315O1434C317O1444C318O1444C320O4008C322O4008C324O4775C325O4775C327O8183C335O8205C341O8228C347O8254C353O8278C359O8198C364O8307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 65,
    "tm": 217807,
    "source": {
      "script": 23,
      "start": 0,
      "end": 4291,
      "positions": "C0O0C5O4291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 66,
    "tm": 218316,
    "source": {
      "script": 23,
      "start": 0,
      "end": 4291,
      "positions": "C14O0C15O111C19O111C21O132C23O138C26O132C28O2976C80O2976C82O3593C128O3608C133O4290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedQueue internal/fixed_queue.js:87:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 67,
    "tm": 218460,
    "source": {
      "script": 23,
      "start": 3643,
      "end": 3708,
      "positions": "C0O3643C1O3653C3O3681C7O3677C14O3675C20O3663C25O3707",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 218520,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createGlobalConsole internal/bootstrap/node.js:420:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 69,
    "tm": 218652,
    "source": {
      "script": 7,
      "start": 14858,
      "end": 15526,
      "positions": "C0O14858C1O14908C9O14908C15O14947C21O14958C27O14997C35O14997C41O15108C43O15132C47O15258C53O15258C59O15349C67O15349C75O15314C82O15316C88O15465C94O15426C98O15500C100O15523",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/console/global.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 70,
    "tm": 218773,
    "source": {
      "script": 24,
      "start": 0,
      "end": 1770,
      "positions": "C0O0C5O1770",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/console/global.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 71,
    "tm": 218944,
    "source": {
      "script": 24,
      "start": 0,
      "end": 1770,
      "positions": "C0O0C1O651C7O629C14O631C20O639C26O732C30O732C38O673C45O678C51O690C57O711C63O805C72O805C79O1179C85O1195C91O1179C132O1163C163O1152C164O1163C167O1212C169O1221C174O1242C176O1278C182O1311C188O1278C196O1348C204O1415C210O1421C216O1421C221O1408C225O1458C243O1458C341O1507C343O1520C348O1538C353O1550C355O1563C367O1580C373O1701C375O1723C379O1737C381O1752C386O1769",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 72,
    "tm": 219673,
    "source": {
      "script": 25,
      "start": 0,
      "end": 17288,
      "positions": "C0O0C5O17288",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 73,
    "tm": 221001,
    "source": {
      "script": 25,
      "start": 0,
      "end": 17288,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Console.<computed> internal/console/constructor.js:141:47",
    "type": "JS",
    "kind": "Unopt",
    "func": 74,
    "tm": 221644,
    "source": {
      "script": 25,
      "start": 4525,
      "end": 5037,
      "positions": "C15O4525C16O4543C17O4543C19O4558C20O4558C22O4569C30O4576C42O4617C48O4679C56O4774C70O4829C76O4891C84O4990C98O4576C105O5036",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Console.<computed> internal/console/constructor.js:166:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 75,
    "tm": 221779,
    "source": {
      "script": 25,
      "start": 5087,
      "end": 5897,
      "positions": "C0O5087C1O5118C7O5125C21O5190C37O5257C41O5227C58O5317C74O5384C78O5354C95O5438C105O5475C110O5475C126O5525C136O5559C141O5555C158O5640C164O5655C174O5689C179O5685C197O5704C203O5722C215O5752C228O5771C234O5789C245O5819C258O5833C264O5853C276O5883C287O5125C294O5896",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createWriteErrorHandler internal/console/constructor.js:190:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 76,
    "tm": 222096,
    "source": {
      "script": 25,
      "start": 6013,
      "end": 6886,
      "positions": "C13O6013C14O6043C18O6883",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 77,
    "tm": 222293,
    "source": {
      "script": 26,
      "start": 0,
      "end": 2214,
      "positions": "C0O0C5O2214",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 78,
    "tm": 222474,
    "source": {
      "script": 26,
      "start": 0,
      "end": 2214,
      "positions": "C40O0C41O36C47O23C54O25C60O56C61O56C63O1987C64O1987C66O2003C74O2025C80O2054C86O2079C119O2018C124O2213",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set consoleFromVM internal/util/inspector.js:63:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 79,
    "tm": 222595,
    "source": {
      "script": 26,
      "start": 2170,
      "end": 2208,
      "positions": "C0O2170C1O2183C3O2197C10O2207",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrapConsole internal/util/inspector.js:37:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 80,
    "tm": 222678,
    "source": {
      "script": 26,
      "start": 1217,
      "end": 1915,
      "positions": "C0O1217C1O1279C9O1279C17O1261C24O1263C30O1337C36O1337C42O1337C83O1323C114O1312C115O1323C118O1556C124O1556C134O1621C142O1703C149O1772C160O1621C165O1607C171O1858C173O1894C176O1879C274O1914",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "exposeNamespace internal/bootstrap/node.js:438:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 81,
    "tm": 222962,
    "source": {
      "script": 7,
      "start": 15605,
      "end": 15787,
      "positions": "C0O15605C1O15642C7O15649C13O15672C21O15762C31O15649C37O15786",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 82,
    "tm": 224228,
    "source": {
      "script": 27,
      "start": 0,
      "end": 41805,
      "positions": "C0O0C5O41805",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 83,
    "tm": 227339,
    "source": {
      "script": 27,
      "start": 0,
      "end": 41805,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/querystring.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 84,
    "tm": 228041,
    "source": {
      "script": 28,
      "start": 0,
      "end": 2859,
      "positions": "C0O0C5O2859",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/querystring.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 85,
    "tm": 228337,
    "source": {
      "script": 28,
      "start": 0,
      "end": 2859,
      "positions": "C14O0C15O45C19O45C25O71C33O23C40O25C46O99C59O99C66O129C69O134C73O134C78O116C79O149C85O173C104O194C114O194C119O190C124O208C130O208C134O167C137O161C141O143C150O245C156O2794C164O2816C170O2830C176O2843C182O2809C187O2858",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/constants.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 86,
    "tm": 228775,
    "source": {
      "script": 29,
      "start": 0,
      "end": 1504,
      "positions": "C0O0C5O1504",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/constants.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 87,
    "tm": 228919,
    "source": {
      "script": 29,
      "start": 0,
      "end": 1504,
      "positions": "C0O0C1O43C9O52C14O68C25O1473C39O83C44O1503",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " path.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 88,
    "tm": 230033,
    "source": {
      "script": 30,
      "start": 0,
      "end": 43189,
      "positions": "C0O0C5O43189",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " path.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 89,
    "tm": 232980,
    "source": {
      "script": 30,
      "start": 0,
      "end": 43189,
      "positions": "C78O0C79O1205C83O1205C89O1231C97O1178C104O1180C110O1435C114O1435C122O1246C129O1251C135O1272C141O1293C147O1314C153O1335C159O1348C165O1371C171O1395C177O1410C183O1494C187O1494C195O1473C202O1475C208O4284C214O4324C222O8867C230O11710C238O12098C246O14440C254O18032C262O19098C270O21517C278O24244C286O26338C299O26338C309O26361C319O4284C321O31062C327O31102C335O32034C343O32638C351O32777C359O33215C367O35500C375O35586C383O36245C391O38649C399O40380C412O40380C422O40402C432O31062C434O42908C446O42934C452O42920C456O42944C468O42970C474O42956C478O43037C486O43061C490O43053C494O43080C502O43104C506O43096C510O43125C514O43150C522O43159C536O43140C541O43188",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defineIDLClass internal/url.js:847:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 90,
    "tm": 233679,
    "source": {
      "script": 27,
      "start": 24622,
      "end": 25319,
      "positions": "C0O24622C1O24706C7O24713C13O24735C18O24742C32O24840C39O24713C44O24939C50O24939C56O24939C97O24925C128O24914C129O24925C132O24957C138O24964C144O24986C152O25085C165O24964C266O25133C272O25133C278O25133C319O25119C350O25108C351O25119C354O25168C360O25175C366O25197C374O25297C387O25175C489O25318",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "exposeInterface internal/bootstrap/node.js:448:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 91,
    "tm": 234017,
    "source": {
      "script": 7,
      "start": 15866,
      "end": 16048,
      "positions": "C0O15866C1O15903C7O15910C13O15933C21O16023C31O15910C37O16047",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/encoding.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 92,
    "tm": 234579,
    "source": {
      "script": 31,
      "start": 0,
      "end": 16490,
      "positions": "C0O0C5O16490",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/encoding.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 93,
    "tm": 235989,
    "source": {
      "script": 31,
      "start": 0,
      "end": 16490,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeTextDecoderICU internal/encoding.js:366:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 94,
    "tm": 236575,
    "source": {
      "script": 31,
      "start": 10517,
      "end": 12204,
      "positions": "C11O10517C12O10581C22O10581C30O10531C37O10546C43O10560C84O12182C86O12201",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 95,
    "tm": 236962,
    "source": {
      "script": 32,
      "start": 0,
      "end": 8560,
      "positions": "C0O0C5O8560",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 96,
    "tm": 237596,
    "source": {
      "script": 32,
      "start": 0,
      "end": 8560,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 97,
    "tm": 238069,
    "source": {
      "script": 33,
      "start": 0,
      "end": 1166,
      "positions": "C0O0C5O1166",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 98,
    "tm": 238215,
    "source": {
      "script": 33,
      "start": 0,
      "end": 1166,
      "positions": "C35O0C36O1091C44O1113C50O1122C56O1131C62O1142C68O1153C74O1106C79O1165",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 99,
    "tm": 238662,
    "source": {
      "script": 34,
      "start": 0,
      "end": 17947,
      "positions": "C0O0C5O17947",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/timers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 100,
    "tm": 239969,
    "source": {
      "script": 34,
      "start": 0,
      "end": 17947,
      "positions": "C189O0C190O3499C196O3480C203O3482C209O3488C215O3598C219O3598C227O3521C234O3526C240O3544C246O3563C252O3579C258O3819C262O3819C270O3634C277O3639C283O3668C289O3683C295O3702C301O3760C307O3773C313O3788C319O3802C325O3919C334O3919C338O3919C340O3971C349O3971C353O3971C355O4053C359O4053C365O4079C373O4001C380O4006C386O4031C392O4115C396O4115C404O4094C411O4096C417O4160C421O4160C425O4160C427O4215C431O4215C437O4274C441O4274C449O4260C456O4262C462O4323C466O4323C472O4356C482O4357C487O4323C489O4460C490O4460C492O4482C494O4482C496O4510C498O4510C500O4583C506O4583C508O4617C513O4624C517O4617C519O4660C528O4660C532O4660C534O4765C538O4765C543O4765C545O4806C548O4806C550O4832C551O4832C553O5081C561O5081C566O5081C568O5333C577O5333C582O5326C584O6750C588O6758C598O6776C608O6784C612O6970C616O6978C626O6996C630O7108C634O7116C644O7132C648O7245C652O7253C662O7267C666O7389C670O7397C680O7414C684O7849C688O7860C698O7878C708O7886C712O8331C716O8345C726O8362C730O8688C734O8702C744O8719C748O17481C756O17503C760O17529C769O17529C779O17594C785O17614C791O17642C797O17654C803O17665C809O17687C815O17707C821O17728C827O17747C831O17790C839O17797C845O17810C851O17826C863O17851C869O17862C875O17878C881O17895C887O17914C893O17930C899O17496C904O17946",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 101,
    "tm": 240387,
    "source": {
      "script": 35,
      "start": 0,
      "end": 3002,
      "positions": "C0O0C5O3002",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 102,
    "tm": 240752,
    "source": {
      "script": 35,
      "start": 0,
      "end": 3002,
      "positions": "C17O0C18O34C27O34C31O34C33O68C42O68C46O68C48O106C57O106C61O106C63O144C72O144C76O144C78O497C91O795C158O512C163O3001",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 103,
    "tm": 240950,
    "source": {
      "script": 36,
      "start": 0,
      "end": 2029,
      "positions": "C0O0C5O2029",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 104,
    "tm": 241126,
    "source": {
      "script": 36,
      "start": 0,
      "end": 2029,
      "positions": "C42O0C43O36C47O36C55O23C62O25C68O211C69O211C71O242C75O242C77O1970C85O1992C91O2005C97O1985C102O2028",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglog internal/util/debuglog.js:55:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 105,
    "tm": 241255,
    "source": {
      "script": 36,
      "start": 1683,
      "end": 1966,
      "positions": "C12O1683C13O1698C14O1698C16O1708C20O1963",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ImmediateList internal/timers.js:242:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 106,
    "tm": 241342,
    "source": {
      "script": 34,
      "start": 8150,
      "end": 8199,
      "positions": "C0O8150C1O8158C2O8168C6O8179C7O8189C12O8198",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "PriorityQueue internal/priority_queue.js:15:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 107,
    "tm": 241425,
    "source": {
      "script": 35,
      "start": 550,
      "end": 788,
      "positions": "C0O550C1O583C5O620C7O625C13O635C17O654C21O692C23O697C29O711C33O733C35O738C39O751C50O747C55O745C59O767C61O772C66O779C71O787",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defineOperation internal/bootstrap/node.js:458:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 108,
    "tm": 241648,
    "source": {
      "script": 7,
      "start": 16135,
      "end": 16298,
      "positions": "C0O16135C1O16163C7O16170C13O16193C21O16282C31O16170C37O16297",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 109,
    "tm": 242046,
    "source": {
      "script": 37,
      "start": 0,
      "end": 6625,
      "positions": "C0O0C5O6625",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 110,
    "tm": 242495,
    "source": {
      "script": 37,
      "start": 0,
      "end": 6625,
      "positions": "C101O0C102O34C108O23C115O25C121O63C129O63C133O63C135O188C143O188C151O89C166O101C173O108C179O135C185O359C193O359C201O225C208O230C214O251C220O282C226O304C232O324C238O344C244O522C252O522C260O488C267O490C273O2622C277O2622C279O6399C287O6421C293O6435C299O6449C305O6464C309O6506C318O6544C324O6584C330O6414C335O6624",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createOnGlobalUncaughtException internal/process/execution.js:122:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 111,
    "tm": 242702,
    "source": {
      "script": 37,
      "start": 3851,
      "end": 6175,
      "positions": "C0O3851C1O4077C5O6172",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/warning.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 112,
    "tm": 242888,
    "source": {
      "script": 38,
      "start": 0,
      "end": 4039,
      "positions": "C0O0C5O4039",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/process/warning.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 113,
    "tm": 243175,
    "source": {
      "script": 38,
      "start": 0,
      "end": 4039,
      "positions": "C64O0C65O50C73O50C79O76C87O23C94O25C100O109C101O109C103O118C104O118C106O127C107O127C109O559C110O559C112O3986C120O4008C126O4022C132O4001C137O4038",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupTaskQueue internal/process/task_queues.js:172:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 114,
    "tm": 244957,
    "source": {
      "script": 21,
      "start": 4712,
      "end": 4964,
      "positions": "C0O4712C1O4778C7O4778C10O4857C20O4857C24O4906C32O4922C38O4939C44O4959",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "listenForRejections internal/process/promises.js:247:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 115,
    "tm": 245035,
    "source": {
      "script": 22,
      "start": 8121,
      "end": 8179,
      "positions": "C0O8121C1O8129C11O8129C16O8178",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getTimerCallbacks internal/timers.js:390:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 116,
    "tm": 245122,
    "source": {
      "script": 34,
      "start": 12103,
      "end": 17477,
      "positions": "C30O12103C31O12369C37O12369C42O12369C44O17418C52O17432C58O17455C64O17474",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 117,
    "tm": 245302,
    "source": {
      "script": 39,
      "start": 0,
      "end": 498,
      "positions": "C0O0C5O498",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 118,
    "tm": 245441,
    "source": {
      "script": 39,
      "start": 0,
      "end": 498,
      "positions": "C0O0C1O60C5O60C13O23C20O28C26O108C29O108C33O163C37O163C43O206C46O486C52O486C57O497",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 119,
    "tm": 246155,
    "source": {
      "script": 40,
      "start": 0,
      "end": 15468,
      "positions": "C0O0C5O15468",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 120,
    "tm": 247368,
    "source": {
      "script": 40,
      "start": 0,
      "end": 15468,
      "positions": "C152O0C153O49C159O23C166O25C172O33C178O92C186O92C194O71C201O73C207O141C215O141C223O128C230O130C236O203C244O203C250O229C258O167C265O169C271O15124C279O15146C285O15169C291O15192C297O15216C303O15234C309O15265C315O15292C321O15316C327O15347C333O15370C339O15398C345O15422C351O15443C357O15139C362O15467",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/options.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 121,
    "tm": 247613,
    "source": {
      "script": 41,
      "start": 0,
      "end": 330,
      "positions": "C0O0C5O330",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/options.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 122,
    "tm": 247686,
    "source": {
      "script": 41,
      "start": 0,
      "end": 330,
      "positions": "C14O0C15O40C19O40C27O23C34O25C40O98C47O75C54O77C60O86C66O264C74O286C80O298C86O310C92O279C97O329",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prepareMainThreadExecution internal/bootstrap/pre_execution.js:9:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 123,
    "tm": 248277,
    "source": {
      "script": 40,
      "start": 275,
      "end": 2247,
      "positions": "C0O275C12O375C16O375C20O411C24O411C27O441C31O441C34O467C38O467C41O675C45O687C51O691C57O716C61O724C75O781C81O785C87O754C91O745C95O951C105O955C111O1039C119O1039C127O1008C134O1010C140O1134C148O1134C156O1099C163O1101C169O1166C173O1225C177O1225C180O1288C184O1288C187O1386C191O1386C194O1409C198O1409C201O1470C205O1470C208O1800C212O1800C215O1878C219O1878C222O2080C226O2080C229O2109C233O2109C236O2138C240O2138C243O2164C247O2164C250O2190C254O2190C257O2215C261O2215C265O2246",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "patchProcessObject internal/bootstrap/pre_execution.js:66:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 124,
    "tm": 248486,
    "source": {
      "script": 40,
      "start": 2278,
      "end": 3815,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve path.js:130:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 125,
    "tm": 248883,
    "source": {
      "script": 30,
      "start": 4331,
      "end": 8860,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateString internal/validators.js:110:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 126,
    "tm": 249124,
    "source": {
      "script": 15,
      "start": 3310,
      "end": 3422,
      "positions": "C0O3310C1O3329C7O3365C25O3371C30O3365C32O3421",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isPathSeparator path.js:38:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 127,
    "tm": 249177,
    "source": {
      "script": 30,
      "start": 1553,
      "end": 1635,
      "positions": "C0O1553C1O1565C3O1581C5O1577C12O1612C14O1608C17O1632",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isWindowsDeviceRoot path.js:46:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 128,
    "tm": 249226,
    "source": {
      "script": 30,
      "start": 1750,
      "end": 1895,
      "positions": "C0O1750C1O1762C3O1778C5O1775C12O1806C14O1803C21O1846C23O1843C30O1874C32O1871C35O1892",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "cwd internal/process/main_thread_only.js:41:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 129,
    "tm": 249289,
    "source": {
      "script": 18,
      "start": 1011,
      "end": 1075,
      "positions": "C0O1011C1O1021C5O1041C11O1041C19O1031C25O1053C29O1070",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeString path.js:52:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 130,
    "tm": 249441,
    "source": {
      "script": 30,
      "start": 1985,
      "end": 3826,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addReadOnlyProcessAlias internal/bootstrap/pre_execution.js:103:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 131,
    "tm": 249644,
    "source": {
      "script": 40,
      "start": 3851,
      "end": 4087,
      "positions": "C0O3851C18O3904C24O3904C30O3931C32O3949C38O3956C48O3980C56O4046C62O4065C69O3956C75O4086",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionValue internal/options.js:6:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 132,
    "tm": 249707,
    "source": {
      "script": 41,
      "start": 138,
      "end": 260,
      "positions": "C0O138C1O167C7O175C13O175C20O191C22O211C23O228C24O251C28O257",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupTraceCategoryState internal/bootstrap/pre_execution.js:207:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 133,
    "tm": 249796,
    "source": {
      "script": 40,
      "start": 6800,
      "end": 7031,
      "positions": "C0O6800C1O6843C9O6843C17O6814C24O6816C30O6916C38O6916C46O6885C53O6887C59O6959C63O6984C69O6959C74O7030",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toggleTraceCategoryState internal/process/per_thread.js:337:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 134,
    "tm": 250009,
    "source": {
      "script": 17,
      "start": 10294,
      "end": 10601,
      "positions": "C0O10294C1O10319C5O10349C11O10385C19O10417C25O10461C31O10462C39O10406C45O10488C51O10509C57O10509C63O10529C69O10562C75O10583C81O10583C86O10600",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupInspectorHooks internal/bootstrap/pre_execution.js:213:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 135,
    "tm": 250117,
    "source": {
      "script": 40,
      "start": 7063,
      "end": 7629,
      "positions": "C0O7063C1O7412C9O7416C15O7441C21O7510C29O7510C37O7469C44O7478C50O7493C56O7557C64O7557C70O7585C76O7586C83O7628",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 136,
    "tm": 250263,
    "source": {
      "script": 42,
      "start": 0,
      "end": 2003,
      "positions": "C0O0C5O2003",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 137,
    "tm": 250436,
    "source": {
      "script": 42,
      "start": 0,
      "end": 2003,
      "positions": "C41O0C42O21C43O21C45O32C46O32C48O1957C56O1979C62O1990C68O1972C73O2002",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupWarningHandler internal/bootstrap/pre_execution.js:115:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 138,
    "tm": 250561,
    "source": {
      "script": 40,
      "start": 4119,
      "end": 4328,
      "positions": "C0O4119C1O4157C9O4157C17O4133C24O4140C30O4197C40O4202C50O4250C56O4254C64O4271C69O4287C73O4295C83O4295C90O4327",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addListener events.js:283:58",
    "type": "JS",
    "kind": "Unopt",
    "func": 139,
    "tm": 250646,
    "source": {
      "script": 10,
      "start": 8859,
      "end": 8933,
      "positions": "C0O8859C1O8881C17O8888C22O8930",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_addListener events.js:221:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 140,
    "tm": 250801,
    "source": {
      "script": 10,
      "start": 6703,
      "end": 8798,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkListener events.js:62:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 141,
    "tm": 250934,
    "source": {
      "script": 10,
      "start": 2105,
      "end": 2237,
      "positions": "C0O2105C1O2121C7O2164C26O2170C31O2164C33O2236",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupDebugEnv internal/bootstrap/pre_execution.js:162:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 142,
    "tm": 251000,
    "source": {
      "script": 40,
      "start": 5578,
      "end": 5793,
      "positions": "C0O5578C1O5586C9O5586C15O5619C25O5647C31O5651C37O5620C42O5667C52O5671C58O5716C66O5716C72O5753C78O5766C84O5767C89O5792",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDebugEnv internal/util/debuglog.js:12:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 143,
    "tm": 251092,
    "source": {
      "script": 36,
      "start": 336,
      "end": 590,
      "positions": "C0O336C1O352C6O359C12O368C16O409C32O409C40O454C56O455C64O483C80O484C88O512C94O513C100O533C111O564C130O549C139O547C146O589",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupSignalHandlers internal/bootstrap/pre_execution.js:169:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 144,
    "tm": 251167,
    "source": {
      "script": 40,
      "start": 5825,
      "end": 6130,
      "positions": "C0O5825C1O5874C9O5874C17O5839C24O5846C30O5994C37O5929C44O5936C50O5965C56O6021C60O6029C70O6029C76O6075C80O6083C90O6083C97O6129",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createSignalHandlers internal/process/main_thread_only.js:125:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 145,
    "tm": 251241,
    "source": {
      "script": 18,
      "start": 3252,
      "end": 4196,
      "positions": "C20O3252C21O3280C26O3280C31O3280C33O4123C41O4137C47O4166C53O4193",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emit events.js:160:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 146,
    "tm": 251406,
    "source": {
      "script": 10,
      "start": 5009,
      "end": 6677,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "startListeningIfSignal internal/process/main_thread_only.js:129:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 147,
    "tm": 251569,
    "source": {
      "script": 18,
      "start": 3392,
      "end": 3898,
      "positions": "C0O3392C1O3406C7O3410C15O3429C19O3441C25O3441C32O3461C40O3496C50O3505C56O3535C66O3503C74O3564C82O3564C89O3592C95O3592C99O3610C105O3634C111O3639C129O3639C134O3624C138O3690C148O3697C153O3729C159O3729C166O3751C168O3776C174O3776C178O3794C190O3800C195O3794C196O3858C202O3870C208O3870C215O3897",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isSignal internal/process/main_thread_only.js:120:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 148,
    "tm": 251673,
    "source": {
      "script": 18,
      "start": 3096,
      "end": 3177,
      "positions": "C0O3096C1O3109C9O3145C15O3152C19O3160C20O3174",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReport internal/bootstrap/pre_execution.js:146:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 149,
    "tm": 251753,
    "source": {
      "script": 40,
      "start": 5167,
      "end": 5552,
      "positions": "C11O5167C12O5175C24O5180C30O5228C31O5235C32O5263C42O5263C50O5250C57O5252C63O5338C73O5338C81O5308C88O5310C94O5367C102O5374C118O5389C124O5464C132O5374C138O5551",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReportSignalHandlers internal/bootstrap/pre_execution.js:183:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 150,
    "tm": 252001,
    "source": {
      "script": 40,
      "start": 6270,
      "end": 6441,
      "positions": "C0O6270C1O6278C11O6283C17O6331C18O6338C19O6378C27O6378C35O6355C42O6357C48O6419C52O6440",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers internal/bootstrap/pre_execution.js:193:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 151,
    "tm": 252104,
    "source": {
      "script": 40,
      "start": 6490,
      "end": 6764,
      "positions": "C8O6490C9O6513C21O6513C27O6559C29O6577C30O6584C31O6590C41O6590C47O6620C53O6621C58O6682C68O6682C76O6658C83O6660C89O6702C95O6710C101O6713C107O6710C114O6763",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupChildProcessIpcChannel internal/bootstrap/pre_execution.js:318:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 152,
    "tm": 252198,
    "source": {
      "script": 40,
      "start": 10478,
      "end": 10847,
      "positions": "C0O10478C1O10486C5O10498C11O10502C17O10541C25O10541C31O10587C40O10604C46O10608C56O10587C63O10635C64O10645C69O10635C73O10729C77O10744C87O10772C95O10772C101O10796C107O10797C112O10818C116O10833C122O10818C127O10846",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializePolicy internal/bootstrap/pre_execution.js:342:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 153,
    "tm": 252392,
    "source": {
      "script": 40,
      "start": 11157,
      "end": 12990,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeClusterIPC internal/bootstrap/pre_execution.js:333:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 154,
    "tm": 252553,
    "source": {
      "script": 40,
      "start": 10880,
      "end": 11128,
      "positions": "C0O10880C1O10888C5O10900C13O10904C22O10919C28O10923C34O10962C42O10962C48O10995C54O10995C58O11086C62O11101C73O11127",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDeprecations internal/bootstrap/pre_execution.js:231:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 155,
    "tm": 252728,
    "source": {
      "script": 40,
      "start": 7860,
      "end": 10438,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeCJSLoader internal/bootstrap/pre_execution.js:391:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 156,
    "tm": 252890,
    "source": {
      "script": 40,
      "start": 13022,
      "end": 13085,
      "positions": "C0O13022C1O13030C9O13030C15O13068C21O13069C26O13084",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 157,
    "tm": 254008,
    "source": {
      "script": 43,
      "start": 0,
      "end": 36100,
      "positions": "C0O0C5O36100",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 158,
    "tm": 256699,
    "source": {
      "script": 43,
      "start": 0,
      "end": 36100,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 159,
    "tm": 257453,
    "source": {
      "script": 44,
      "start": 0,
      "end": 7921,
      "positions": "C0O0C5O7921",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 160,
    "tm": 258199,
    "source": {
      "script": 44,
      "start": 0,
      "end": 7921,
      "positions": "C115O0C116O110C124O110C132O97C139O99C145O144C153O144C159O177C169O178C174O144C176O232C184O232C192O209C199O211C205O220C211O261C219O261C223O261C225O304C233O304C241O283C248O285C254O372C262O372C270O340C277O345C283O439C289O420C296O422C302O428C308O604C313O604C318O604C320O733C325O733C330O733C332O776C340O776C348O751C355O753C361O768C367O824C375O824C383O799C390O801C396O859C397O859C399O5665C404O5671C410O5681C414O5665C416O5748C422O7805C430O7827C436O7851C442O7873C448O7892C454O7820C459O7920",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " fs.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 161,
    "tm": 259870,
    "source": {
      "script": 45,
      "start": 0,
      "end": 53781,
      "positions": "C0O0C5O53781",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " fs.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 162,
    "tm": 263923,
    "source": {
      "script": 45,
      "start": 0,
      "end": 53781,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 163,
    "tm": 265352,
    "source": {
      "script": 46,
      "start": 0,
      "end": 17519,
      "positions": "C0O0C5O17519",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 164,
    "tm": 266976,
    "source": {
      "script": 46,
      "start": 0,
      "end": 17519,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 165,
    "tm": 267710,
    "source": {
      "script": 47,
      "start": 0,
      "end": 4620,
      "positions": "C0O0C5O4620",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 166,
    "tm": 268259,
    "source": {
      "script": 47,
      "start": 0,
      "end": 4620,
      "positions": "C71O0C72O36C78O23C85O25C91O71C95O71C99O71C101O105C105O105C111O148C115O148C119O148C121O276C125O276C133O182C148O194C155O201C161O222C167O249C173O333C179O313C186O315C192O364C196O364C200O364C202O480C206O480C214O397C221O402C227O416C233O431C239O452C245O532C254O532C258O532C260O572C269O572C273O572C275O612C284O612C288O612C290O655C299O655C303O655C305O707C314O707C318O707C320O768C329O768C333O768C399O803C401O3370C411O3389C417O3400C422O3407C438O3438C444O3448C455O3370C460O4561C468O4583C474O4591C480O4603C486O4576C491O4619",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 167,
    "tm": 269085,
    "source": {
      "script": 48,
      "start": 0,
      "end": 6110,
      "positions": "C0O0C5O6110",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 168,
    "tm": 269530,
    "source": {
      "script": 48,
      "start": 0,
      "end": 6110,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 169,
    "tm": 270495,
    "source": {
      "script": 49,
      "start": 0,
      "end": 30844,
      "positions": "C0O0C5O30844",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " url.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 170,
    "tm": 272638,
    "source": {
      "script": 49,
      "start": 0,
      "end": 30844,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/idna.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 171,
    "tm": 272957,
    "source": {
      "script": 50,
      "start": 0,
      "end": 273,
      "positions": "C0O0C5O273",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/idna.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 172,
    "tm": 273025,
    "source": {
      "script": 50,
      "start": 0,
      "end": 273,
      "positions": "C0O0C1O17C5O21C11O46C17O92C21O92C29O67C36O69C42O78C48O119C56O138C62O147C68O134C74O204C78O204C86O179C93O181C99O190C105O228C113O247C119O256C125O243C130O272",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeMap internal/per_context/primordials.js:65:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 173,
    "tm": 273192,
    "source": {
      "script": 4,
      "start": 2216,
      "end": 2216,
      "positions": "C6O2216C7O2216C13O2216C18O2216",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " vm.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 174,
    "tm": 273569,
    "source": {
      "script": 51,
      "start": 0,
      "end": 13015,
      "positions": "C0O0C5O13015",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " vm.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 175,
    "tm": 274503,
    "source": {
      "script": 51,
      "start": 0,
      "end": 13015,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._initPaths internal/modules/cjs/loader.js:1070:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 176,
    "tm": 275082,
    "source": {
      "script": 43,
      "start": 33956,
      "end": 35018,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeESMLoader internal/bootstrap/pre_execution.js:395:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 177,
    "tm": 275369,
    "source": {
      "script": 40,
      "start": 13117,
      "end": 14520,
      "positions": "C0O13117C1O13201C9O13201C17O13250C21O13246C26O13244C30O13298C40O13298C46O13373C56O13373C62O13421C68O13448C70O13478C74O13512C78O13520C95O13520C100O13747C108O13747C116O13648C123O13657C129O13700C135O13796C143O13796C149O14006C155O13964C159O14079C165O14040C169O14137C179O14137C185O14308C187O14369C195O14369C203O14339C210O14341C216O14402C220O14402C224O14468C234O14493C240O14493C246O14468C253O14519",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeWeakMap internal/per_context/primordials.js:69:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 178,
    "tm": 275512,
    "source": {
      "script": 4,
      "start": 2301,
      "end": 2301,
      "positions": "C6O2301C7O2301C13O2301C18O2301",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadPreloadModules internal/bootstrap/pre_execution.js:436:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 179,
    "tm": 275584,
    "source": {
      "script": 40,
      "start": 14818,
      "end": 15120,
      "positions": "C0O14818C1O14907C11O14907C17O14939C19O14976C26O14983C31O15035C39O15035C47O15001C54O15010C60O15080C65O15119",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeFrozenIntrinsics internal/bootstrap/pre_execution.js:428:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 180,
    "tm": 275668,
    "source": {
      "script": 40,
      "start": 14559,
      "end": 14787,
      "positions": "C0O14559C1O14567C11O14571C17O14617C21O14625C35O14625C41O14739C49O14739C55O14776C59O14786",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.runMain internal/modules/cjs/loader.js:1011:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 181,
    "tm": 275750,
    "source": {
      "script": 43,
      "start": 32279,
      "end": 32699,
      "positions": "C0O32279C1O32342C7O32374C13O32383C19O32397C31O32397C38O32495C50O32501C55O32638C56O32645C57O32654C61O32661C71O32675C79O32679C90O32661C96O32698",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._load internal/modules/cjs/loader.js:668:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 182,
    "tm": 276026,
    "source": {
      "script": 43,
      "start": 21795,
      "end": 24021,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveFilename internal/modules/cjs/loader.js:739:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 183,
    "tm": 276268,
    "source": {
      "script": 43,
      "start": 24060,
      "end": 26035,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NativeModule.canBeRequiredByUsers internal/bootstrap/loaders.js:199:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 184,
    "tm": 276426,
    "source": {
      "script": 6,
      "start": 6376,
      "end": 6469,
      "positions": "C0O6376C1O6398C5O6411C11O6415C17O6415C24O6427C26O6445C30O6466",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveLookupPaths internal/modules/cjs/loader.js:622:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 185,
    "tm": 276537,
    "source": {
      "script": 43,
      "start": 20117,
      "end": 21365,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/debuglog.js:57:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 186,
    "tm": 276671,
    "source": {
      "script": 36,
      "start": 1723,
      "end": 1962,
      "positions": "C3O1723C6O1740C12O1876C22O1884C30O1882C36O1915C42O1942C47O1942C54O1942C60O1961",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglogImpl internal/util/debuglog.js:34:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 187,
    "tm": 276748,
    "source": {
      "script": 36,
      "start": 1025,
      "end": 1440,
      "positions": "C9O1025C10O1036C14O1046C20O1046C24O1040C26O1064C36O1074C41O1102C49O1120C59O1120C73O1152C79O1160C83O1152C85O1172C97O1172C101O1205C115O1212C119O1217C127O1383C140O1395C144O1418C154O1431C157O1437",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^$",
    "timestamp": 276892,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "Module._findPath internal/modules/cjs/loader.js:460:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 188,
    "tm": 277031,
    "source": {
      "script": 43,
      "start": 14655,
      "end": 17187,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isAbsolute path.js:352:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 189,
    "tm": 277205,
    "source": {
      "script": 30,
      "start": 11720,
      "end": 12091,
      "positions": "C0O11720C1O11734C11O11734C16O11786C22O11799C23O11807C28O11821C29O11834C30O11860C39O11860C46O11880C50O11887C58O11955C67O11969C73O12010C83O12010C92O12028C94O12024C103O12070C113O12070C120O12049C124O12086",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "(?:^|\\/)\\.?\\.$",
    "timestamp": 277329,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "resolveExports internal/modules/cjs/loader.js:371:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 190,
    "tm": 277488,
    "source": {
      "script": 43,
      "start": 11017,
      "end": 13016,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stat internal/modules/cjs/loader.js:115:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 191,
    "tm": 277677,
    "source": {
      "script": 43,
      "start": 3921,
      "end": 4234,
      "positions": "C0O3921C1O3937C7O3953C13O3953C20O3984C26O4030C32O4040C38O4040C45O4060C47O4086C49O4100C50O4124C56O4124C62O4157C68O4181C74O4191C80O4191C86O4217C88O4231",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toNamespacedPath path.js:549:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 192,
    "tm": 277778,
    "source": {
      "script": 30,
      "start": 18048,
      "end": 19091,
      "positions": "C0O18048C1O18114C7O18151C9O18163C10O18180C17O18187C22O18203C24O18213C25O18249C31O18255C37O18255C44O18294C52O18301C57O18314C59O18326C60O18351C69O18351C78O18369C80O18365C85O18444C95O18444C104O18462C106O18458C111O18520C121O18520C128O18544C130O18557C132O18553C139O18588C141O18584C146O18688C150O18723C160O18723C169O18734C172O18767C176O18804C185O18804C192O18771C198O18851C208O18851C217O18869C219O18865C224O18912C234O18912C243O18930C245O18926C250O19027C256O19044C260O19059C261O19074C263O19086",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toRealPath internal/modules/cjs/loader.js:333:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 193,
    "tm": 278112,
    "source": {
      "script": 43,
      "start": 9877,
      "end": 9993,
      "positions": "C0O9877C1O9896C7O9906C13O9919C21O9940C25O9951C33O9970C40O9906C46O9990",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "realpathSync fs.js:1448:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 194,
    "tm": 278462,
    "source": {
      "script": 45,
      "start": 40735,
      "end": 44784,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptions internal/fs/utils.js:196:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 195,
    "tm": 278788,
    "source": {
      "script": 46,
      "start": 4255,
      "end": 4793,
      "positions": "C0O4255C1O4286C15O4380C17O4402C18O4413C24O4453C30O4498C32O4522C36O4538C43O4574C49O4614C70O4620C75O4614C76O4710C84O4719C89O4738C93O4761C99O4738C103O4775C105O4790",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assertEncoding internal/fs/utils.js:73:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 196,
    "tm": 278861,
    "source": {
      "script": 46,
      "start": 1399,
      "end": 1527,
      "positions": "C0O1399C1O1415C7O1432C11O1439C17O1439C24O1468C32O1474C37O1468C39O1526",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toPathIfFileURL internal/url.js:1385:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 197,
    "tm": 278917,
    "source": {
      "script": 27,
      "start": 40585,
      "end": 40787,
      "positions": "C0O40585C1O40606C8O40650C10O40649C17O40689C19O40688C26O40703C28O40702C33O40723C35O40744C36O40748C40O40755C44O40784",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hidden internal/errors.js:243:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 198,
    "tm": 279027,
    "source": {
      "script": 8,
      "start": 7144,
      "end": 7511,
      "positions": "C6O7144C10O7249C13O7261C21O7305C25O7321C33O7338C39O7382C49O7389C69O7426C72O7441C77O7462C84O7478C108O7510C110O7510",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:523:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 199,
    "tm": 279141,
    "source": {
      "script": 46,
      "start": 14933,
      "end": 15213,
      "positions": "C0O14933C16O14967C24O15000C28O15000C34O15027C40O15058C54O15033C59O15027C60O15126C75O15126C82O15165C84O15195C86O15195C88O15212",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:234:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 200,
    "tm": 279256,
    "source": {
      "script": 46,
      "start": 5594,
      "end": 6167,
      "positions": "C0O5594C18O5659C24O5713C30O5713C36O5810C42O5833C46O5862C48O5884C58O5884C67O5915C69O5941C78O5941C85O5962C86O5969C87O5992C105O5992C112O6111C116O6134C118O6134C119O6153C121O6164",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array internal/util/types.js:19:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 201,
    "tm": 279360,
    "source": {
      "script": 12,
      "start": 551,
      "end": 626,
      "positions": "C0O551C1O564C7O571C15O606C18O623",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "splitRoot fs.js:1406:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 202,
    "tm": 279474,
    "source": {
      "script": 45,
      "start": 39630,
      "end": 39680,
      "positions": "C0O39630C1O39643C7O39662C13O39662C21O39671C24O39675",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*",
    "timestamp": 279635,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "handleErrorFromBinding internal/fs/utils.js:215:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 203,
    "tm": 280474,
    "source": {
      "script": 46,
      "start": 4828,
      "end": 5449,
      "positions": "C0O4828C1O4847C7O4911C13O4911C19O4988C24O4994C34O4994C40O5047C42O5047C43O5074C49O5360C54O5366C60O5388C70O5366C76O5435C80O5425C82O5448",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextPart fs.js:1433:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 204,
    "tm": 280577,
    "source": {
      "script": 45,
      "start": 40353,
      "end": 40588,
      "positions": "C0O40353C1O40380C5O40376C10O40367C11O40415C17O40415C24O40481C26O40492C28O40488C35O40522C37O40518C42O40551C44O40560C45O40390C54O40573C56O40583",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFileType fs.js:165:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 205,
    "tm": 280780,
    "source": {
      "script": 45,
      "start": 4495,
      "end": 4674,
      "positions": "C0O4495C1O4621C3O4634C10O4650C12O4648C19O4658C22O4671",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "encodeRealpathResult fs.js:1419:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 206,
    "tm": 281261,
    "source": {
      "script": 45,
      "start": 39928,
      "end": 40208,
      "positions": "C0O39928C1O39951C5O39976C11O39996C19O40005C24O40022C26O40036C27O40057C33O40064C39O40064C46O40093C54O40102C59O40123C61O40139C62O40173C68O40190C74O40173C79O40200",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadNativeModule internal/modules/cjs/helpers.js:19:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 207,
    "tm": 281382,
    "source": {
      "script": 48,
      "start": 657,
      "end": 885,
      "positions": "C0O657C1O715C7O728C13O732C19O732C26O750C28O766C38O766C43O816C49O816C54O866C56O877C58O884",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module internal/modules/cjs/loader.js:132:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 208,
    "tm": 281467,
    "source": {
      "script": 43,
      "start": 4436,
      "end": 4667,
      "positions": "C0O4436C16O4459C18O4467C22O4476C24O4488C28O4493C34O4493C39O4486C43O4509C44O4522C48O4531C50O4543C54O4556C67O4556C72O4596C73O4610C77O4621C78O4633C82O4645C84O4659C89O4666",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dirname path.js:582:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 209,
    "tm": 281680,
    "source": {
      "script": 30,
      "start": 19105,
      "end": 21510,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "updateChildren internal/modules/cjs/loader.js:126:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 210,
    "tm": 282013,
    "source": {
      "script": 43,
      "start": 4261,
      "end": 4417,
      "positions": "C0O4261C1O4305C5O4322C11O4335C15O4353C17O4370C23O4370C30O4402C36O4402C42O4416",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.load internal/modules/cjs/loader.js:804:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 211,
    "tm": 282169,
    "source": {
      "script": 43,
      "start": 26138,
      "end": 27232,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assert internal/assert.js:10:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 212,
    "tm": 282336,
    "source": {
      "script": 13,
      "start": 180,
      "end": 320,
      "positions": "C0O180C1O202C5O252C9O252C14O270C16O276C21O270C23O319",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._nodeModulePaths internal/modules/cjs/loader.js:541:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 213,
    "tm": 282461,
    "source": {
      "script": 43,
      "start": 17446,
      "end": 18886,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "findLongestRegisteredExtension internal/modules/cjs/loader.js:353:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 214,
    "tm": 282654,
    "source": {
      "script": 43,
      "start": 10418,
      "end": 10827,
      "positions": "C0O10418C1O10447C7O10452C13O10452C20O10479C23O10504C26O10531C29O10558C39O10558C49O10584C54O10537C55O10599C57O10618C62O10628C63O10638C68O10645C70O10717C76O10717C83O10736C87O10747C95O10758C100O10778C102O10802C106O10811C108O10824",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "basename path.js:668:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 215,
    "tm": 282821,
    "source": {
      "script": 30,
      "start": 21525,
      "end": 24237,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._extensions..js internal/modules/cjs/loader.js:965:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 216,
    "tm": 283010,
    "source": {
      "script": 43,
      "start": 30980,
      "end": 31306,
      "positions": "C0O30980C1O31004C7O31040C17O31040C24O31076C28O31076C34O31109C36O31124C44O31129C49O31152C57O31158C62O31152C63O31220C69O31223C79O31223C87O31265C95O31274C99O31274C105O31265C112O31305",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFileSync fs.js:339:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 217,
    "tm": 283173,
    "source": {
      "script": 45,
      "start": 8851,
      "end": 10262,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEncoding buffer.js:505:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 218,
    "tm": 283325,
    "source": {
      "script": 14,
      "start": 14647,
      "end": 14782,
      "positions": "C0O14647C1O14663C7O14711C14O14718C22O14737C26O14737C31O14765C32O14779",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeEncoding internal/util.js:106:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 219,
    "tm": 283383,
    "source": {
      "script": 9,
      "start": 3116,
      "end": 3224,
      "positions": "C0O3116C1O3127C8O3150C15O3168C20O3181C22O3195C23O3199C27O3206C31O3221",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint32 internal/validators.js:22:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 220,
    "tm": 283433,
    "source": {
      "script": 15,
      "start": 459,
      "end": 506,
      "positions": "C0O459C1O472C3O496C6O485C9O503",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "openSync fs.js:431:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 221,
    "tm": 283554,
    "source": {
      "script": 45,
      "start": 11237,
      "end": 11630,
      "positions": "C0O11237C1O11262C7O11269C13O11316C21O11330C27O11316C33O11348C52O11355C59O11404C67O11406C74O11432C80O11440C88O11445C92O11456C98O11456C117O11440C124O11581C130O11581C134O11613C136O11627",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:535:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 222,
    "tm": 283654,
    "source": {
      "script": 46,
      "start": 15260,
      "end": 15399,
      "positions": "C0O15260C16O15316C22O15316C28O15351C34O15351C39O15384C41O15396",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stringToFlags internal/fs/utils.js:422:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 223,
    "tm": 283778,
    "source": {
      "script": 46,
      "start": 11907,
      "end": 13079,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parseMode internal/validators.js:41:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 224,
    "tm": 284025,
    "source": {
      "script": 15,
      "start": 1163,
      "end": 1637,
      "positions": "C0O1163C1O1187C5O1191C11O1215C13O1228C14O1239C20O1277C39O1277C44O1331C50O1369C56O1383C62O1383C69O1405C77O1450C89O1411C94O1405C95O1473C104O1480C109O1499C110O1510C119O1557C121O1568C122O1579C130O1624C142O1585C147O1579",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync fs.js:302:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 225,
    "tm": 284238,
    "source": {
      "script": 45,
      "start": 8013,
      "end": 8231,
      "positions": "C0O8013C1O8045C4O8066C10O8074C28O8074C35O8119C43O8143C45O8160C51O8163C57O8163C62O8183C68O8189C72O8183C73O8215C75O8228",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryCreateBuffer fs.js:312:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 226,
    "tm": 284345,
    "source": {
      "script": 45,
      "start": 8259,
      "end": 8557,
      "positions": "C0O8259C1O8297C4O8310C10O8332C12O8343C14O8341C19O8364C27O8370C32O8364C33O8415C39O8431C45O8431C52O8455C69O8461C70O8490C78O8504C80O8514C86O8517C92O8517C108O8540C110O8554",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocUnsafe buffer.js:345:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 227,
    "tm": 284411,
    "source": {
      "script": 14,
      "start": 10656,
      "end": 10714,
      "positions": "C0O10656C1O10668C7O10668C11O10689C15O10696C19O10711",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " buffer.js:319:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 228,
    "tm": 284471,
    "source": {
      "script": 14,
      "start": 9862,
      "end": 10090,
      "positions": "C0O9862C1O9877C7O9914C26O9920C31O9914C32O9978C33O9989C40O10005C42O10002C47O10025C53O10057C68O10031C73O10025C75O10089",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocate buffer.js:370:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 229,
    "tm": 284547,
    "source": {
      "script": 14,
      "start": 11386,
      "end": 11714,
      "positions": "C0O11386C1O11398C2O11407C7O11420C13O11427C18O11444C19O11453C23O11472C27O11481C30O11462C35O11496C37O11508C43O11519C45O11517C48O11505C53O11539C57O11539C60O11568C68O11583C74O11594C83O11568C90O11618C98O11632C105O11629C111O11643C115O11643C118O11661C120O11670C121O11679C125O11686C129O11711",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alignPool buffer.js:134:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 230,
    "tm": 284630,
    "source": {
      "script": 14,
      "start": 3662,
      "end": 3772,
      "positions": "C0O3662C1O3698C5O3713C10O3727C21O3738C27O3751C37O3761C44O3771",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryReadSync fs.js:327:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 231,
    "tm": 284696,
    "source": {
      "script": 45,
      "start": 8581,
      "end": 8826,
      "positions": "C0O8581C1O8631C4O8644C10O8669C16O8684C34O8684C41O8721C58O8727C59O8756C67O8770C69O8780C75O8783C81O8783C97O8806C99O8823",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readSync fs.js:482:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 232,
    "tm": 284793,
    "source": {
      "script": 45,
      "start": 12703,
      "end": 13367,
      "positions": "C0O12703C1O12747C17O12747C22O12778C28O12778C32O12807C39O12823C46O12841C47O12852C52O12866C53O12875C54O12897C61O12908C66O12922C85O12928C90O12922C91O13054C97O13102C109O13054C114O13120C119O13132C125O13132C132O13162C136O13194C139O13216C145O13224C172O13224C179O13318C185O13318C189O13350C191O13364",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:76:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 233,
    "tm": 284943,
    "source": {
      "script": 15,
      "start": 2112,
      "end": 2708,
      "positions": "C0O2112C39O2255C43O2260C49O2285C55O2327C73O2333C78O2327C79O2398C84O2410C90O2410C97O2439C115O2445C120O2439C121O2510C133O2549C148O2562C162O2516C167O2510C168O2589C170O2599C177O2614C182O2630C194O2669C209O2682C223O2636C228O2630C230O2707",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInt32 internal/validators.js:18:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 234,
    "tm": 285014,
    "source": {
      "script": 15,
      "start": 393,
      "end": 438,
      "positions": "C0O393C1O406C3O430C6O419C9O435",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:134:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 235,
    "tm": 285068,
    "source": {
      "script": 15,
      "start": 4041,
      "end": 4277,
      "positions": "C0O4041C16O4075C22O4080C28O4114C34O4145C48O4120C53O4114C55O4276",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/fs/utils.js:498:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 236,
    "tm": 285141,
    "source": {
      "script": 46,
      "start": 14087,
      "end": 14490,
      "positions": "C0O14087C1O14128C2O14139C9O14153C14O14179C30O14264C41O14185C46O14179C47O14301C48O14312C55O14326C62O14335C67O14360C83O14458C97O14366C102O14360C104O14489",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "closeSync fs.js:397:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 237,
    "tm": 285252,
    "source": {
      "script": 45,
      "start": 10459,
      "end": 10590,
      "positions": "C0O10459C1O10469C17O10469C22O10514C25O10521C31O10529C46O10529C51O10559C57O10559C62O10589",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString buffer.js:741:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 238,
    "tm": 285367,
    "source": {
      "script": 14,
      "start": 22571,
      "end": 23163,
      "positions": "C3O22571C4O22613C11O22620C16O22646C25O22664C31O22646C37O22672C38O22700C44O22713C45O22723C50O22734C55O22753C57O22763C62O22776C64O22786C65O22800C72O22817C78O22846C83O22858C90O22882C97O22897C99O22905C104O22920C106O22930C107O22936C111O22981C117O22981C123O23003C124O23021C128O23021C134O23050C136O23078C144O23084C149O23078C150O23136C168O23136C173O23160",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEncodingOps buffer.js:644:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 239,
    "tm": 285514,
    "source": {
      "script": 14,
      "start": 19408,
      "end": 20981,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "slice buffer.js:573:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 240,
    "tm": 285691,
    "source": {
      "script": 14,
      "start": 16551,
      "end": 16597,
      "positions": "C0O16551C1O16576C7O16576C13O16597",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stripBOM internal/modules/cjs/helpers.js:107:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 241,
    "tm": 285749,
    "source": {
      "script": 48,
      "start": 3320,
      "end": 3434,
      "positions": "C0O3320C1O3347C10O3347C23O3361C28O3398C38O3398C45O3416C47O3431",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._compile internal/modules/cjs/loader.js:865:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 242,
    "tm": 286058,
    "source": {
      "script": 43,
      "start": 28064,
      "end": 30908,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stripShebang internal/modules/cjs/helpers.js:117:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 243,
    "tm": 286296,
    "source": {
      "script": 48,
      "start": 3515,
      "end": 4081,
      "positions": "C0O3515C1O3563C10O3563C19O3573C24O3592C34O3592C43O3602C48O3688C62O3688C70O3711C72O3721C77O3736C79O3746C80O3764C88O3777C93O3764C102O3782C107O3799C113O4041C119O4041C126O4063C128O4078",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeCacheSourceMap internal/source_map/source_map_cache.js:23:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 244,
    "tm": 286437,
    "source": {
      "script": 44,
      "start": 912,
      "end": 2041,
      "positions": "C0O912C1O956C7O1005C17O1030C25O1028C31O1078C35O1092C41O1096C49O1116C53O1141C54O1148C55O1156C61O1180C67O1191C73O1228C81O1247C85O1247C91O1239C101O1237C112O1386C124O1396C130O1386C134O1409C135O1416C136O1449C148O1449C155O1517C157O1535C161O1567C167O1585C173O1589C181O1619C185O1649C191O1656C203O1717C209O1724C215O1689C224O1585C232O1869C238O1887C244O1891C250O1923C256O1930C268O1991C274O1998C280O1963C289O1887C296O2040",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 245,
    "tm": 286591,
    "source": {
      "script": 52,
      "start": 0,
      "end": 198,
      "positions": "C0O0C5O198",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 246,
    "tm": 286661,
    "source": {
      "script": 52,
      "start": 0,
      "end": 198,
      "positions": "C0O0C1O13C5O13C11O49C16O56C26O56C33O128C42O197C58O144C68O133C72O133C88O115C89O157C95O165C101O157C120O197C131O197",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeRequireFunction internal/modules/cjs/helpers.js:32:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 247,
    "tm": 286832,
    "source": {
      "script": 48,
      "start": 1168,
      "end": 3111,
      "positions": "C24O1168C25O1205C29O1209C33O1205C35O1231C38O1243C55O1295C61O1271C68O1273C74O1282C80O1322C86O1326C98O1342C102O1322C104O1351C114O2488C120O2729C122O2745C126O2892C128O2906C132O2920C138O2943C142O2933C146O3011C150O3039C154O3030C158O3057C162O3080C166O3071C170O3093C172O3108",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "require internal/modules/cjs/helpers.js:73:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 248,
    "tm": 286933,
    "source": {
      "script": 48,
      "start": 2514,
      "end": 2562,
      "positions": "C0O2514C1O2530C5O2541C11O2541C16O2555",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.require internal/modules/cjs/loader.js:841:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 249,
    "tm": 287000,
    "source": {
      "script": 43,
      "start": 27363,
      "end": 27666,
      "positions": "C0O27363C1O27373C11O27373C16O27402C18O27409C23O27424C42O27430C47O27424C48O27542C58O27554C67O27572C71O27586C86O27586C108O27643C118O27655C140O27665C142O27665",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NativeModule.compileForPublicLoader internal/bootstrap/loaders.js:214:57",
    "type": "JS",
    "kind": "Unopt",
    "func": 250,
    "tm": 287112,
    "source": {
      "script": 6,
      "start": 6866,
      "end": 7329,
      "positions": "C0O6866C1O6901C7O7042C16O7085C35O7048C40O7042C41O7120C47O7120C51O7134C55O7174C61O7195C63O7213C67O7220C73O7230C79O7220C84O7211C88O7257C94O7257C98O7283C104O7283C108O7318C112O7326",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 251,
    "tm": 287939,
    "source": {
      "script": 53,
      "start": 0,
      "end": 29046,
      "positions": "C0O0C5O29046",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 252,
    "tm": 290097,
    "source": {
      "script": 53,
      "start": 0,
      "end": 29046,
      "positions": "C312O0C313O1197C319O1178C326O1180C332O1186C338O1408C342O1408C350O1219C365O1231C372O1238C378O1269C384O1296C390O1323C396O1346C402O1387C408O1455C412O1455C416O1455C418O1512C422O1512C430O1492C437O1497C443O1594C447O1594C455O1545C462O1550C468O1572C474O1643C478O1643C482O1643C484O1684C488O1684C492O1684C494O1751C498O1751C506O1719C513O1724C519O1735C525O1796C529O1796C535O1827C543O1777C550O1779C556O1859C565O1859C569O1859C571O1902C575O1902C581O1930C585O1902C587O2580C593O1944C600O1973C606O1985C612O1994C618O2011C624O2025C630O2039C636O2077C642O2090C648O2108C654O2126C660O2139C666O2155C672O2171C678O2187C684O2204C690O2230C696O2250C702O2272C708O2292C714O2359C720O2368C726O2380C732O2389C738O2401C744O2407C750O2415C756O2425C762O2440C768O2498C774O2524C780O2551C786O2648C796O2669C808O2702C820O2742C832O2777C844O2815C856O2858C868O2898C880O2937C892O2980C903O3017C907O3024C913O3024C920O3052C923O3066C927O3058C932O3038C933O3096C935O3101C940O3110C942O3121C949O3129C953O3076C962O5770C968O5770C972O5770C974O6527C980O6527C984O6527C986O8515C990O8522C1000O8546C1010O8567C1016O8522C1022O8580C1026O8587C1040O8587C1046O8627C1050O8634C1060O8658C1076O8729C1084O8634C1089O9083C1093O9090C1103O9114C1119O9192C1131O9319C1140O9192C1149O9389C1161O9496C1170O9389C1179O9090C1184O9570C1188O9579C1198O9595C1202O9831C1206O9840C1216O9857C1220O10324C1222O10324C1224O10337C1227O10364C1238O10365C1248O10377C1258O10386C1268O10428C1278O10442C1288O10456C1295O10492C1332O10479C1363O10468C1364O10479C1367O10513C1373O10524C1383O10535C1483O10825C1485O10825C1487O10860C1492O10860C1499O10906C1536O10893C1567O10882C1568O10893C1571O10929C1579O10963C1585O10963C1590O10954C1594O10992C1600O11005C1611O11029C1719O11053C1723O11062C1733O11078C1741O11517C1745O11526C1755O11542C1763O11618C1767O11627C1777O11646C1785O11716C1789O11725C1799O11746C1807O12330C1811O12339C1821O12363C1829O18145C1840O18157C1850O18185C1860O18209C1870O18145C1872O20869C1876O20876C1886O20896C1900O20916C1906O20876C1918O20929C1922O20936C1936O20936C1948O21505C1952O21510C1966O21527C1974O22129C1978O22136C1988O22159C2002O22175C2012O22136C2024O22188C2028O22195C2042O22195C2054O22359C2058O22366C2068O22389C2082O22405C2092O22366C2104O22418C2108O22425C2122O22425C2134O22577C2138O22584C2148O22604C2162O22620C2172O22584C2184O22633C2188O22640C2202O22640C2214O22797C2218O22804C2228O22826C2242O22842C2252O22804C2264O22855C2268O22862C2282O22862C2294O23096C2298O23103C2308O23129C2322O23145C2332O23103C2344O23158C2348O23165C2362O23165C2374O23344C2378O23351C2388O23377C2402O23393C2412O23351C2424O23406C2428O23413C2442O23413C2454O23572C2458O23579C2468O23600C2482O23616C2492O23579C2504O23629C2508O23636C2522O23636C2534O24129C2548O24143C2558O24143C2570O24158C2586O24159C2601O24129C2611O24124C2613O24277C2623O24309C2633O24277C2643O24277C2645O24344C2656O24356C2666O24398C2676O24437C2686O24344C2688O25612C2692O25619C2702O25641C2716O25657C2726O25619C2738O25670C2742O25677C2756O25677C2768O25869C2772O25876C2782O25906C2796O25924C2806O25876C2818O25937C2822O25944C2836O25944C2848O26152C2852O26159C2862O26191C2876O26209C2886O26159C2898O26222C2902O26229C2916O26229C2928O26604C2932O26611C2942O26634C2952O26639C2975O26664C2987O26705C2999O26611C3009O26755C3020O26777C3030O26789C3040O26801C3050O26810C3060O26821C3070O26836C3080O26851C3090O26861C3100O26880C3115O26997C3140O27054C3165O27103C3190O27154C3215O27206C3240O27269C3265O27322C3290O27375C3315O27425C3340O27482C3365O27533C3390O27588C3415O27642C3440O27705C3465O27767C3490O27838C3515O27906C3540O27981C3560O26770C3568O28037C3572O28044C3582O28068C3605O28097C3625O28140C3645O28186C3665O28235C3685O28278C3705O28317C3725O28357C3745O28405C3765O28464C3781O28512C3792O28575C3810O28601C3823O28667C3833O28667C3861O28044C3873O28784C3877O28791C3887O28791C3899O28823C3902O28837C3910O28829C3918O28809C3919O28867C3921O28872C3929O28890C3943O28890C3955O28912C3957O28925C3961O28932C3967O28954C3977O28963C3992O29011C4009O28932C4019O28847C4031O29045",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_transform.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 253,
    "tm": 290975,
    "source": {
      "script": 54,
      "start": 0,
      "end": 7907,
      "positions": "C0O0C5O7907",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_transform.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 254,
    "tm": 291699,
    "source": {
      "script": 54,
      "start": 0,
      "end": 7907,
      "positions": "C44O0C45O3582C51O3569C58O3571C64O3598C66O3613C70O3767C74O3767C80O3793C88O3633C95O3638C101O3669C107O3695C113O3734C119O3817C123O3817C127O3817C129O3852C139O3877C149O3895C155O3852C161O3915C175O3915C181O5587C185O5597C195O5612C199O6214C203O6224C213O6245C217O6341C221O6351C231O6368C235O6867C239O6877C249O6893C253O7286C257O7296C267O7315C272O7906",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_duplex.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 255,
    "tm": 292026,
    "source": {
      "script": 55,
      "start": 0,
      "end": 5133,
      "positions": "C0O0C5O5133",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_duplex.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 256,
    "tm": 292590,
    "source": {
      "script": 55,
      "start": 0,
      "end": 5133,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_readable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 257,
    "tm": 293521,
    "source": {
      "script": 56,
      "start": 0,
      "end": 38883,
      "positions": "C0O0C5O38883",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_readable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 258,
    "tm": 296265,
    "source": {
      "script": 56,
      "start": 0,
      "end": 38883,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 259,
    "tm": 296933,
    "source": {
      "script": 57,
      "start": 0,
      "end": 2654,
      "positions": "C0O0C5O2654",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 260,
    "tm": 297175,
    "source": {
      "script": 57,
      "start": 0,
      "end": 2654,
      "positions": "C8O0C9O1191C13O1191C21O1178C28O1180C34O1228C38O1228C44O1279C48O1279C54O1447C58O1464C64O1462C71O1503C75O1521C79O1519C83O1551C87O1569C91O1567C95O1599C99O1615C103O1613C107O1643C111O1662C115O1660C119O1693C123O1714C127O1712C131O1749C133O1765C137O1778C139O1794C143O1841C145O1855C149O1868C153O1891C159O1921C163O1889C167O1963C173O1971C183O1971C190O1980C200O1981C207O1994C208O2005C214O2009C221O2025C228O2029C233O2040C235O2067C251O2124C255O2124C259O2124C261O2157C265O2184C288O2492C294O2520C298O2547C303O2653",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 261,
    "tm": 297464,
    "source": {
      "script": 58,
      "start": 0,
      "end": 2318,
      "positions": "C0O0C5O2318",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 262,
    "tm": 297662,
    "source": {
      "script": 58,
      "start": 0,
      "end": 2318,
      "positions": "C60O0C61O137C62O137C64O162C72O162C80O151C87O153C93O272C101O272C107O298C115O195C122O200C128O225C134O246C140O2290C142O2305C147O2317",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 263,
    "tm": 297946,
    "source": {
      "script": 59,
      "start": 0,
      "end": 3345,
      "positions": "C0O0C5O3345",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 264,
    "tm": 298206,
    "source": {
      "script": 59,
      "start": 0,
      "end": 3345,
      "positions": "C26O0C27O210C31O210C37O236C45O148C52O153C58O178C64O262C68O262C76O251C83O253C89O3322C91O3337C96O3344",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 265,
    "tm": 298378,
    "source": {
      "script": 60,
      "start": 0,
      "end": 2149,
      "positions": "C0O0C5O2149",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 266,
    "tm": 298630,
    "source": {
      "script": 60,
      "start": 0,
      "end": 2149,
      "positions": "C14O0C15O36C21O23C28O25C34O63C38O63C42O63C44O134C50O156C60O170C66O134C72O190C82O190C88O228C98O243C102O2123C104O2138C109O2148",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_writable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 267,
    "tm": 299210,
    "source": {
      "script": 61,
      "start": 0,
      "end": 22424,
      "positions": "C0O0C5O22424",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_writable.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 268,
    "tm": 301041,
    "source": {
      "script": 61,
      "start": 0,
      "end": 22424,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 269,
    "tm": 301489,
    "source": {
      "script": 62,
      "start": 0,
      "end": 3279,
      "positions": "C0O0C5O3279",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 270,
    "tm": 301757,
    "source": {
      "script": 62,
      "start": 0,
      "end": 3279,
      "positions": "C45O0C46O3211C54O3233C60O3245C66O3259C72O3226C77O3278",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 271,
    "tm": 301983,
    "source": {
      "script": 63,
      "start": 0,
      "end": 889,
      "positions": "C0O0C5O889",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/state.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 272,
    "tm": 302111,
    "source": {
      "script": 63,
      "start": 0,
      "end": 889,
      "positions": "C29O0C30O34C36O23C43O25C49O84C53O84C59O110C67O56C74O58C80O817C88O839C94O860C100O832C105O888",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_passthrough.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 273,
    "tm": 302336,
    "source": {
      "script": 64,
      "start": 0,
      "end": 1783,
      "positions": "C0O0C5O1783",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " _stream_passthrough.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 274,
    "tm": 302493,
    "source": {
      "script": 64,
      "start": 0,
      "end": 1783,
      "positions": "C14O0C15O1324C21O1311C28O1313C34O1340C36O1355C40O1391C44O1391C48O1391C50O1429C60O1456C70O1477C76O1429C82O1497C96O1497C102O1691C106O1703C116O1724C121O1782",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 275,
    "tm": 302774,
    "source": {
      "script": 65,
      "start": 0,
      "end": 3913,
      "positions": "C0O0C5O3913",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 276,
    "tm": 303103,
    "source": {
      "script": 65,
      "start": 0,
      "end": 3913,
      "positions": "C11O0C12O36C16O36C24O23C31O25C37O76C41O76C49O62C56O64C62O113C123O2015C128O2015C152O3713C156O3713C183O128C188O3912",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "from buffer.js:270:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 277,
    "tm": 303800,
    "source": {
      "script": 14,
      "start": 8131,
      "end": 9028,
      "positions": "C0O8131C1O8170C7O8206C11O8213C16O8249C17O8255C27O8311C33O8315C39O8347C52O8354C57O8403C58O8433C64O8450C70O8450C76O8466C84O8523C89O8541C93O8555C108O8555C113O8595C114O8613C118O8613C124O8637C126O8651C128O8660C129O8685C134O8692C138O8684C145O8730C149O8744C155O8755C160O8762C164O8754C173O8774C186O8744C191O8864C192O8882C213O8888C218O8882",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromArrayBuffer buffer.js:429:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 278,
    "tm": 303985,
    "source": {
      "script": 14,
      "start": 12947,
      "end": 13650,
      "positions": "C0O12947C1O13014C5O13051C10O13084C12O13097C16O13115C21O13126C27O13126C34O13152C37O13200C45O13211C50O13230C51O13244C56O13254C68O13260C73O13254C74O13305C78O13338C85O13423C87O13432C91O13446C92O13457C97O13471C99O13482C104O13504C116O13510C121O13504C124O13571C127O13600C144O13607C149O13647",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:768:64",
    "type": "JS",
    "kind": "Unopt",
    "func": 279,
    "tm": 304220,
    "source": {
      "script": 53,
      "start": 24163,
      "end": 24240,
      "positions": "C0O24163C1O24188C11O24188C20O24218C26O24227C32O24237",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createConvenienceMethod zlib.js:752:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 280,
    "tm": 304383,
    "source": {
      "script": 53,
      "start": 23700,
      "end": 24096,
      "positions": "C9O23700C10O23718C14O23735C18O23846C19O23864C23O24088",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createProperty zlib.js:832:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 281,
    "tm": 306422,
    "source": {
      "script": 53,
      "start": 26299,
      "end": 26448,
      "positions": "C9O26299C10O26311C16O26380C26O26445",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get internal/bootstrap/pre_execution.js:307:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 282,
    "tm": 306740,
    "source": {
      "script": 40,
      "start": 10295,
      "end": 10329,
      "positions": "C0O10295C1O10307C5O10322",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromString buffer.js:404:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 283,
    "tm": 306853,
    "source": {
      "script": 14,
      "start": 12304,
      "end": 12753,
      "positions": "C0O12304C1O12332C4O12340C10O12385C17O12392C22O12417C29O12424C34O12438C40O12445C45O12462C46O12468C52O12486C58O12497C63O12536C67O12542C73O12573C75O12603C83O12609C88O12603C89O12661C96O12668C101O12682C107O12689C112O12706C113O12715C117O12722C122O12750",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromStringFast buffer.js:385:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 284,
    "tm": 306972,
    "source": {
      "script": 14,
      "start": 11741,
      "end": 12281,
      "positions": "C0O11741C1O11779C7O11779C14O11804C18O11826C22O11835C25O11815C30O11848C36O11884C42O11855C47O11897C48O11903C50O11917C56O11928C58O11926C61O11914C66O11946C70O11946C73O11971C81O11986C87O11997C96O11971C103O12040C124O12040C131O12072C133O12083C138O12169C146O12188C152O12199C161O12173C168O12228C176O12242C183O12239C189O12253C193O12253C196O12269C198O12278",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "write buffer.js:572:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 285,
    "tm": 307105,
    "source": {
      "script": 14,
      "start": 16473,
      "end": 16537,
      "positions": "C0O16473C1O16507C19O16507C24O16537",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "asyncBufferWrapper zlib.js:758:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 286,
    "tm": 307181,
    "source": {
      "script": 53,
      "start": 23898,
      "end": 24087,
      "positions": "C0O23898C1O23932C7O23975C10O24001C13O24028C25O24046C38O24035C43O24080",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Deflate zlib.js:695:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 287,
    "tm": 307241,
    "source": {
      "script": 53,
      "start": 22015,
      "end": 22127,
      "positions": "C0O22015C1O22027C3O22038C8O22064C14O22071C19O22089C20O22093C24O22098C32O22115C42O22098C48O22126",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Zlib zlib.js:593:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 288,
    "tm": 307387,
    "source": {
      "script": 53,
      "start": 18335,
      "end": 20867,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase zlib.js:221:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 289,
    "tm": 307609,
    "source": {
      "script": 53,
      "start": 6919,
      "end": 8513,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Transform _stream_transform.js:106:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 290,
    "tm": 307911,
    "source": {
      "script": 54,
      "start": 4519,
      "end": 5359,
      "positions": "C0O4519C1O4534C3O4545C8O4573C14O4580C19O4603C20O4609C26O4616C32O4616C38O4642C48O4703C54O4703C65O4663C69O5013C76O5033C80O5047C84O5086C92O5145C96O5135C100O5182C108O5233C112O5223C116O5329C130O5329C137O5358",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Duplex _stream_duplex.js:49:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 291,
    "tm": 308033,
    "source": {
      "script": 55,
      "start": 1952,
      "end": 2412,
      "positions": "C0O1952C1O1967C3O1978C8O2003C14O2010C19O2030C20O2036C26O2045C32O2045C38O2069C44O2078C50O2078C56O2102C57O2121C61O2134C65O2166C72O2175C77O2193C78O2207C82O2235C89O2244C94O2262C95O2276C99O2304C106O2318C111O2338C112O2357C116O2378C130O2378C137O2411",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable _stream_readable.js:154:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 292,
    "tm": 308194,
    "source": {
      "script": 56,
      "start": 6045,
      "end": 6647,
      "positions": "C0O6045C1O6060C3O6071C8O6098C14O6105C19O6127C20O6285C22O6301C26O6308C30O6290C35O6321C50O6343C55O6341C59O6405C60O6419C64O6432C68O6471C76O6520C80O6510C84O6552C92O6607C96O6597C100O6626C106O6633C112O6633C118O6646",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stream internal/streams/legacy.js:7:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 293,
    "tm": 308269,
    "source": {
      "script": 60,
      "start": 100,
      "end": 125,
      "positions": "C0O100C1O108C7O111C13O111C19O124",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:208:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 294,
    "tm": 308344,
    "source": {
      "script": 53,
      "start": 6547,
      "end": 6847,
      "positions": "C0O6547C1O6591C7O6596C14O6638C16O6649C17O6662C19O6673C26O6691C31O6709C43O6782C58O6798C72O6715C77O6709C78O6828C80O6842",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:180:43",
    "type": "JS",
    "kind": "Unopt",
    "func": 295,
    "tm": 308420,
    "source": {
      "script": 53,
      "start": 5786,
      "end": 6236,
      "positions": "C0O5786C1O5827C5O5860C6O5873C7O5884C12O5895C18O5895C25O5920C26O5932C27O5964C32O5975C38O5975C45O5997C46O6010C47O6045C53O6084C71O6090C76O6084C77O6173C95O6179C100O6173",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ReadableState _stream_readable.js:75:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 296,
    "tm": 308720,
    "source": {
      "script": 56,
      "start": 3029,
      "end": 6024,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getHighWaterMark internal/streams/state.js:16:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 297,
    "tm": 308961,
    "source": {
      "script": 63,
      "start": 412,
      "end": 813,
      "positions": "C0O412C1O467C14O467C21O519C24O543C29O555C35O555C43O577C48O604C60O651C74O657C79O651C80O707C86O719C92O719C97O730C98O761C102O798C108O768C112O810",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "highWaterMarkFrom internal/streams/state.js:7:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 298,
    "tm": 309040,
    "source": {
      "script": 63,
      "start": 147,
      "end": 291,
      "positions": "C0O147C1O198C8O230C16O251C20O269C26O288",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultHighWaterMark internal/streams/state.js:12:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 299,
    "tm": 309087,
    "source": {
      "script": 63,
      "start": 327,
      "end": 383,
      "positions": "C0O327C1O345C13O380",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "BufferList internal/streams/buffer_list.js:7:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 300,
    "tm": 309156,
    "source": {
      "script": 65,
      "start": 163,
      "end": 240,
      "positions": "C0O163C1O173C2O183C6O196C7O206C11O219C12O231C17O239",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable _stream_writable.js:208:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 301,
    "tm": 309323,
    "source": {
      "script": 61,
      "start": 7514,
      "end": 8733,
      "positions": "C0O7514C1O8098C3O8115C7O8122C11O8104C16O8136C22O8170C32O8170C40O8197C46O8204C51O8226C52O8232C67O8254C72O8252C76O8317C77O8331C81O8344C85O8383C93O8434C97O8424C101O8467C109O8520C113O8510C117O8554C125O8609C129O8599C133O8644C141O8695C145O8685C149O8712C155O8719C161O8719C167O8732",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "WritableState _stream_writable.js:59:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 302,
    "tm": 309480,
    "source": {
      "script": 61,
      "start": 2174,
      "end": 6343,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.on _stream_readable.js:866:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 303,
    "tm": 309749,
    "source": {
      "script": 56,
      "start": 28309,
      "end": 29234,
      "positions": "C0O28309C1O28335C7O28342C13O28352C19O28355C34O28355C41O28397C47O28418C49O28425C54O28610C64O28610C72O28636C75O28603C79O28731C86O28739C91O28762C97O28762C103O28782C105O28789C110O28823C116O28844C122O28872C125O28917C131O28896C135O28932C136O28946C140O28962C141O28984C145O29000C155O29027C161O29041C167O29000C172O29068C178O29087C182O29087C188O29132C194O29152C198O29160C208O29160C214O29220C216O29231",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "once events.js:312:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 304,
    "tm": 309979,
    "source": {
      "script": 10,
      "start": 9731,
      "end": 9849,
      "positions": "C0O9731C1O9753C5O9753C9O9788C28O9797C35O9788C41O9834C43O9846",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_onceWrap events.js:304:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 305,
    "tm": 310047,
    "source": {
      "script": 10,
      "start": 9455,
      "end": 9684,
      "positions": "C0O9455C1O9499C8O9523C14O9534C20O9542C26O9548C33O9579C37O9591C43O9591C50O9607C52O9624C56O9639C58O9652C62O9666C64O9681",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "zlibBuffer zlib.js:89:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 306,
    "tm": 310171,
    "source": {
      "script": 53,
      "start": 3162,
      "end": 3885,
      "positions": "C0O3162C1O3194C7O3235C26O3241C31O3235C32O3412C38O3416C46O3452C50O3459C56O3459C65O3486C69O3493C73O3482C78O3511C84O3527C90O3539C96O3554C102O3573C108O3527C117O3596C123O3600C129O3633C135O3649C141O3649C148O3671C149O3686C153O3697C154O3710C158O3718C160O3728C164O3750C178O3750C184O3790C198O3790C204O3832C218O3832C224O3870C230O3870C236O3884",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "listenerCount events.js:464:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 307,
    "tm": 310284,
    "source": {
      "script": 10,
      "start": 14104,
      "end": 14386,
      "positions": "C0O14104C1O14136C7O14150C9O14202C11O14208C16O14223C20O14270C22O14279C23O14292C27O14349C31O14356C32O14374C33O14383",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.resume _stream_readable.js:951:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 308,
    "tm": 310352,
    "source": {
      "script": 56,
      "start": 31228,
      "end": 31554,
      "positions": "C0O31228C1O31255C7O31285C13O31301C23O31301C27O31461C32O31452C36O31485C40O31485C45O31514C46O31527C50O31539C52O31551",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resume _stream_readable.js:965:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 309,
    "tm": 310434,
    "source": {
      "script": 56,
      "start": 31574,
      "end": 31714,
      "positions": "C0O31574C1O31606C7O31630C8O31652C12O31665C16O31673C32O31673C38O31713",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 310,
    "tm": 310555,
    "source": {
      "script": 21,
      "start": 2692,
      "end": 3622,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty internal/fixed_queue.js:91:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 311,
    "tm": 310677,
    "source": {
      "script": 23,
      "start": 3721,
      "end": 3763,
      "positions": "C0O3721C1O3743C7O3748C13O3748C17O3758",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty internal/fixed_queue.js:63:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 312,
    "tm": 310721,
    "source": {
      "script": 23,
      "start": 3139,
      "end": 3186,
      "positions": "C0O3139C1O3161C7O3174C11O3165C14O3181",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:49:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 313,
    "tm": 310779,
    "source": {
      "script": 21,
      "start": 1159,
      "end": 1219,
      "positions": "C0O1159C1O1172C9O1181C15O1202C22O1200C27O1218",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "newAsyncId internal/async_hooks.js:262:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 314,
    "tm": 310828,
    "source": {
      "script": 20,
      "start": 10204,
      "end": 10257,
      "positions": "C0O10204C1O10212C9O10237C20O10252C26O10254",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultTriggerAsyncId internal/async_hooks.js:278:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 315,
    "tm": 310877,
    "source": {
      "script": 20,
      "start": 10663,
      "end": 10926,
      "positions": "C0O10663C1O10701C9O10717C11O10716C16O10812C17O10838C22O10848C30O10871C32O10870C35O10890C36O10894C38O10923",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initHooksExist internal/async_hooks.js:308:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 316,
    "tm": 310937,
    "source": {
      "script": 20,
      "start": 11749,
      "end": 11796,
      "positions": "C0O11749C1O11757C9O11782C11O11781C17O11789C20O11793",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push internal/fixed_queue.js:95:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 317,
    "tm": 310991,
    "source": {
      "script": 23,
      "start": 3773,
      "end": 4040,
      "positions": "C0O3773C1O3796C7O3801C13O3801C19O3963C27O3979C31O3975C38O3973C44O3956C48O4019C54O4024C60O4024C66O4039",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFull internal/fixed_queue.js:67:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 318,
    "tm": 311045,
    "source": {
      "script": 23,
      "start": 3198,
      "end": 3261,
      "positions": "C0O3198C1O3222C5O3226C12O3233C14O3231C19O3249C23O3240C26O3256",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push internal/fixed_queue.js:71:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 319,
    "tm": 311094,
    "source": {
      "script": 23,
      "start": 3271,
      "end": 3357,
      "positions": "C0O3271C1O3290C7O3300C15O3305C19O3335C23O3339C30O3346C32O3344C35O3327C40O3356",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_getMaxListeners events.js:104:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 320,
    "tm": 311163,
    "source": {
      "script": 10,
      "start": 3365,
      "end": 3493,
      "positions": "C0O3365C1O3386C7O3420C11O3440C15O3460C16O3476C20O3490",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get events.js:70:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 321,
    "tm": 311208,
    "source": {
      "script": 10,
      "start": 2339,
      "end": 2381,
      "positions": "C0O2339C1O2349C3O2376",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable.end _stream_writable.js:581:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 322,
    "tm": 311295,
    "source": {
      "script": 61,
      "start": 18303,
      "end": 18857,
      "positions": "C0O18303C1O18349C7O18370C13O18410C16O18427C19O18446C24O18473C30O18516C33O18536C36O18563C44O18616C50O18616C56O18682C62O18697C64O18710C68O18725C74O18725C78O18794C84O18807C97O18807C102O18842C104O18854",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable.write _stream_writable.js:278:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 323,
    "tm": 311410,
    "source": {
      "script": 61,
      "start": 9784,
      "end": 10574,
      "positions": "C0O9784C1O9830C7O9859C10O9890C19O9904C23O9911C29O9911C36O10007C40O10039C42O10028C47O10055C53O10070C59O10070C66O10108C72O10151C75O10171C78O10198C82O10214C88O10243C92O10280C98O10302C104O10337C108O10362C114O10375C118O10375C125O10408C145O10421C152O10464C158O10479C162O10488C184O10494C191O10560C193O10571",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "writeOrBuffer _stream_writable.js:381:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 324,
    "tm": 311550,
    "source": {
      "script": 61,
      "start": 12728,
      "end": 13701,
      "positions": "C0O12728C1O12777C5O12811C18O12811C25O12853C27O12863C32O12886C35O12907C39O12935C44O12986C54O13009C60O13022C68O13038C71O13035C75O13066C81O13081C85O13073C90O13172C92O13187C93O13203C97O13226C103O13243C109O13275C115O13301C123O13338C129O13352C135O13369C141O13393C147O13327C151O13428C155O13465C159O13457C165O13537C169O13529C173O13570C180O13597C186O13620C211O13620C216O13687C218O13698",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "doWrite _stream_writable.js:421:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 325,
    "tm": 311674,
    "source": {
      "script": 61,
      "start": 13721,
      "end": 14095,
      "positions": "C0O13721C1O13776C3O13791C7O13801C9O13815C13O13824C14O13838C18O13849C19O13860C23O13881C29O13903C37O13915C47O13911C54O13903C61O13955C65O13979C71O14000C77O13979C85O14030C91O14060C106O14030C111O14073C112O14084C117O14094",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Transform._write _stream_transform.js:167:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 326,
    "tm": 311882,
    "source": {
      "script": 54,
      "start": 6378,
      "end": 6718,
      "positions": "C0O6378C1O6421C7O6441C9O6452C13O6461C15O6475C19O6487C21O6504C25O6527C31O6562C37O6590C43O6619C49O6647C55O6659C59O6654C64O6686C70O6695C76O6686C82O6717",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Transform._read _stream_transform.js:184:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 327,
    "tm": 311985,
    "source": {
      "script": 54,
      "start": 6903,
      "end": 7279,
      "positions": "C0O6903C1O6928C7O6957C13O6984C19O7005C20O7021C24O7039C30O7053C36O7068C42O7086C51O7039C58O7247C59O7264C64O7278",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase._transform zlib.js:370:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 328,
    "tm": 312073,
    "source": {
      "script": 53,
      "start": 11756,
      "end": 12325,
      "positions": "C0O11756C1O11804C7O11964C9O11981C11O11980C18O12014C20O12032C22O12031C27O12128C33O12155C39O12168C45O12181C51O12198C55O12188C60O12217C64O12254C70O12229C77O12281C93O12281C99O12324",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "processChunk zlib.js:477:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 329,
    "tm": 312173,
    "source": {
      "script": 53,
      "start": 14856,
      "end": 15440,
      "positions": "C0O14856C1O14910C7O14922C17O14922C22O14966C24O14980C28O14992C30O15002C34O15040C40O15058C44O15051C47O15033C51O15102C55O15094C59O15117C60O15130C64O15138C66O15155C70O15180C79O15278C85O15324C91O15364C97O15410C112O15180C118O15439",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "endWritable _stream_writable.js:671:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 330,
    "tm": 312995,
    "source": {
      "script": 61,
      "start": 20553,
      "end": 20799,
      "positions": "C0O20553C1O20578C2O20591C6O20602C10O20602C15O20633C19O20658C25O20675C29O20683C35O20683C42O20721C52O20721C58O20749C59O20761C63O20772C64O20788C69O20798",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "finishMaybe _stream_writable.js:650:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 331,
    "tm": 313114,
    "source": {
      "script": 61,
      "start": 19979,
      "end": 20529,
      "positions": "C0O19979C1O20013C5O20013C11O20035C13O20052C17O20052C22O20093C29O20103C34O20119C35O20134C39O20156C49O20156C54O20191C60O20365C66O20390C68O20413C74O20435C80O20468C86O20468C90O20514C92O20526",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "needFinish _stream_writable.js:619:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 332,
    "tm": 313190,
    "source": {
      "script": 61,
      "start": 19166,
      "end": 19341,
      "positions": "C0O19166C1O19193C7O19220C14O19227C19O19253C26O19299C33O19329C38O19338",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "once events.js:312:44",
    "type": "JS",
    "kind": "Opt",
    "func": 304,
    "tm": 355585,
    "source": {
      "script": 10,
      "start": 9731,
      "end": 9849,
      "positions
      "inlined": "F0O9788F1O28355I0F2O9797F3O9753F4O8888I1F5O8066I4F3O6786I4F6O28762I0F7O28610I0F8O31485I7",
      "fns": [
        303,
        139,
        305,
        141,
        140,
        320,
        308,
        307,
        309
      ]
    }
  },
  {
    "name": "hidden internal/errors.js:243:25",
    "type": "JS",
    "kind": "Opt",
    "func": 198,
    "tm": 366525,
    "source": {
      "script": 8,
      "start": 7144,
      "end": 7511,
      "positions": "C0O7144C54O7261C99O7321C139O7382C185O7389C191O7441C218O7389C236O7441C255O7462C267O7478C312O7510C323O7478C361O7510C363O7144C423O7478C481O7261",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase zlib.js:221:18",
    "type": "JS",
    "kind": "Opt",
    "func": 289,
    "tm": 375986,
    "source": {
      "script": 20,
      "start": 10663,
      "end": 10926,
      "positions": "C0O10663C46O10716C71O10838C85O10923C196O10870C200O10890C309O10663C353O10923C430O10890",
      "inlined": "",
      "fns": []
    },
    "deopt": {
      "tm": 898233,
      "inliningId": 3,
      "scriptOffset": 9788,
      "posText": "<events.js:315:8> inlined at <zlib.js:267:8>",
      "reason": "(unknown)",
      "bailoutType": "lazy"
    }
  },
  {
    "name": "Stream internal/streams/legacy.js:7:16",
    "type": "JS",
    "kind": "Opt",
    "func": 293,
    "tm": 378221,
    "source": {
      "script": 60,
      "start": 100,
      "end": 125,
      "positions": "C0O100C50O1554I0C80O2730I1C160O2767I1C174O2775I1C229O2845I1C404O2836I1C449O2882I1C492O2923I1C613O2916I1C756O124C767O100C852O2923I1",
      "inlined": "F0O111F1O1554I0",
      "fns": [
        29,
        30
      ]
    }
  },
  {
    "name": "_onceWrap events.js:304:19",
    "type": "JS",
    "kind": "Opt",
    "func": 305,
    "tm": 384155,
    "source": {
      "script": 10,
      "start": 9455,
      "end": 9684,
      "positions": "C0O9455C92O9499C145O9523C153O9534C171O9542C189O9548C207O9591C301O9624C356O9652C360O9681C370O9455",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.on _stream_readable.js:866:33",
    "type": "JS",
    "kind": "Opt",
    "func": 303,
    "tm": 428322,
    "source": {
      "script": 23,
      "start": 3773,
      "end": 4040,
      "positions": "C0O3773C50O3796C87O3226I0C91O3240I0C95O3226I0C99O3231I0C106O3801C133O3975C174O3973C223O3956C281O4019C285O3290I1C289O3300I1C293O3305I1C360O3339I1C364O3344I1C371O3305I1C417O3327I1C425O4039C436O3773C476O3305I1",
      "inlined": "F0O3801F1O4024",
      "fns": [
        318,
        319
      ]
    },
    "deopt": {
      "tm": 898128,
      "inliningId": -1,
      "scriptOffset": 28309,
      "posText": "<_stream_readable.js:866:33>",
      "reason": "(unknown)",
      "bailoutType": "lazy"
    }
  },
  {
    "name": "Zlib zlib.js:593:14",
    "type": "JS",
    "kind": "Opt",
    "func": 288,
    "tm": 479082,
    "source": {
      "script": 53,
      "start": 18335,
      "end": 20867,
      "positions
      "inlined": "F0O20760F1O7118I0F1O7155I0F2O8243I0F3O19427F3O19282F3O19146F3O18983F4O8451I0",
      "fns": [
        289,
        212,
        227,
        198,
        304
      ]
    }
  },
  {
    "name": "WritableState _stream_writable.js:59:23",
    "type": "JS",
    "kind": "Opt",
    "func": 302,
    "tm": 484491,
    "source": {
      "script": 10,
      "start": 2711,
      "end": 2953,
      "positions": "C0O2711C50O2730C130O2767C144O2775C199O2845C374O2836C419O2882C462O2923C583O2916C726O2952C737O2711C822O2923",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkListener events.js:62:23",
    "type": "JS",
    "kind": "Opt",
    "func": 141,
    "tm": 498376,
    "source": {
      "script": 10,
      "start": 2105,
      "end": 2237,
      "positions": "C0O2105C50O2121C83O2236C94O2170C106O2105",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ReadableState _stream_readable.js:75:23",
    "type": "JS",
    "kind": "Opt",
    "func": 296,
    "tm": 530825,
    "source": {
      "script": 56,
      "start": 3029,
      "end": 6024,
      "positions
      "inlined": "F0O4229F1O3934F2O467I1F3O768I1",
      "fns": [
        300,
        297,
        298,
        299
      ]
    }
  },
  {
    "name": "endWritable _stream_writable.js:671:21",
    "type": "JS",
    "kind": "Opt",
    "func": 330,
    "tm": 532212,
    "source": {
      "script": 61,
      "start": 20553,
      "end": 20799,
      "positions": "C0O20553C50O20591C91O19220I1C95O19227I1C112O20633C191O20761C195O20788C236O20798C247O20658C263O19253I1C283O20553C323O20633",
      "inlined": "F0O20602F1O20013I0",
      "fns": [
        331,
        332
      ]
    }
  },
  {
    "name": " zlib.js:208:3",
    "type": "JS",
    "kind": "Opt",
    "func": 294,
    "tm": 535512,
    "source": {
      "script": 53,
      "start": 6547,
      "end": 6847,
      "positions": "C0O6547C50O7261I0C97O7321I0C140O5827I1C196O5884I1C196O5895I1C217O7441I0C243O7389I0C261O7441I0C280O7462I0C294O7478I0C384O6596C457O6649C468O6673C480O6547C528O6596C581O7478I0C635O7261I0",
      "inlined": "F0O6596F1O7389I0",
      "fns": [
        198,
        295
      ]
    }
  },
  {
    "name": "Transform._write _stream_transform.js:167:38",
    "type": "JS",
    "kind": "Opt",
    "func": 326,
    "tm": 542709,
    "source": {
      "script": 54,
      "start": 6378,
      "end": 6718,
      "positions": "C0O6378C50O6421C88O6452C127O6475C166O6504C204O6527C277O6562C281O6590C350O6619C419O6654C435O6695C439O6957I0C453O7021I0C461O7086I0C465O11804I1C472O11980I1C492O12128I1C496O12155I1C574O12168I1C638O12181I1C650O14910I2C654O14980I2C740O15002I2C924O15040I2C934O15058I2C941O15051I2C963O15033I2C1010O15102I2C1024O15094I2C1083O15130I2C1194O15155I2C1236O15324I2C1271O15180I2C1328O6717C1339O7264I0C1351O6378C1391O6527C1485O6590C1681O6619C1877O12155I1C2105O12168I1",
      "inlined": "F0O6686F1O7039I0F2O12281I1F3O14922I2",
      "fns": [
        327,
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 568983,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "type": "JS",
    "kind": "Opt",
    "func": 310,
    "tm": 578298,
    "source": {
      "script": 10,
      "start": 9455,
      "end": 9684,
      "positions": "C0O9455C92O9499C166O9523C174O9534C214O9542C253O9548C292O9591C450O9624C568O9652C593O9681C603O9455",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FastBuffer internal/buffer.js:940:1",
    "type": "JS",
    "kind": "Opt",
    "func": 46,
    "tm": 580499,
    "source": {
      "script": 16,
      "start": 26831,
      "end": 26831,
      "positions": "C0O26831",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createUnsafeBuffer buffer.js:118:28",
    "type": "JS",
    "kind": "Opt",
    "func": 45,
    "tm": 580848,
    "source": {
      "script": 14,
      "start": 3377,
      "end": 3493,
      "positions": "C0O3377C50O26831I0C97O3401C125O26831I0C194O3427C201O3481C253O3492C265O3481C303O3492C305O3377C408O26831I0",
      "inlined": "F0O3427",
      "fns": [
        46
      ]
    }
  },
  {
    "name": "Buffer buffer.js:244:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 333,
    "tm": 705975,
    "source": {
      "script": 14,
      "start": 7394,
      "end": 7722,
      "positions": "C0O7394C1O7431C5O7431C8O7479C14O7515C20O7566C39O7572C44O7566C45O7635C49O7649C55O7649C60O7660C61O7669C65O7683C80O7683C85O7719",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "zlibBuffer zlib.js:89:20",
    "type": "JS",
    "kind": "Opt",
    "func": 306,
    "tm": 706149,
    "source": {
      "script": 53,
      "start": 3162,
      "end": 3885,
      "positions
      "inlined": "F0O3870F1O3832F2O28355I1F1O3790F2O28355I3F1O3750F2O28355I5F3O18807I0F4O28762I5F5O28610I5",
      "fns": [
        322,
        303,
        139,
        330,
        308,
        307
      ]
    }
  },
  {
    "name": "asyncBufferWrapper zlib.js:758:39",
    "type": "JS",
    "kind": "Opt",
    "func": 286,
    "tm": 778476,
    "source": {
      "script": 53,
      "start": 23898,
      "end": 24087,
      "positions
      "inlined": "F0O24035F1O24046F2O22098I1F3O3870I0F4O18807I3",
      "fns": [
        306,
        287,
        288,
        322,
        330
      ]
    }
  },
  {
    "name": "Writable.write _stream_writable.js:278:36",
    "type": "JS",
    "kind": "Opt",
    "func": 323,
    "tm": 798495,
    "source": {
      "script": 61,
      "start": 9784,
      "end": 10574,
      "positions
      "inlined": "F0O9911F1O10494F2O13620I1F3O571I0F4O14030I2F5O6686I4F6O7039I5F7O12281I6F8O14922I7",
      "fns": [
        201,
        324,
        325,
        60,
        326,
        327,
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 858375,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable _stream_writable.js:208:18",
    "type": "JS",
    "kind": "Opt",
    "func": 301,
    "tm": 907552,
    "source": {
      "script": 61,
      "start": 7514,
      "end": 8733,
      "positions
      "inlined": "F0O8719F1O111I0F2O8254F3O3094I2F4O467I3F5O768I3F6O1554I1",
      "fns": [
        293,
        29,
        302,
        297,
        298,
        299,
        30
      ]
    }
  },
  {
    "name": "_addListener events.js:221:22",
    "type": "JS",
    "kind": "Opt",
    "func": 140,
    "tm": 913220,
    "source": {
      "script": 10,
      "start": 6703,
      "end": 8798,
      "positions": "C0O6703C50O2121I2C85O6832C164O6844C178O7119C231O7162C243O7456C278O7474C295O7657C333O7799C418O7657C428O7920C438O8000C450O7951C462O7799C511O7820C597O7833C601O7843C609O7788C654O3386I0C692O2349I1C709O8103C729O8119C757O8126C766O8143C778O7799C835O7810C847O7600C883O7617C962O7626C970O8795C977O6910C992O2170I2C1008O6703C1056O7799",
      "inlined": "F0O8066F1O3440I0F2O6786",
      "fns": [
        320,
        321,
        141
      ]
    }
  },
  {
    "name": "ZlibBase zlib.js:221:18",
    "type": "JS",
    "kind": "Opt",
    "func": 289,
    "tm": 944460,
    "source": {
      "script": 53,
      "start": 6919,
      "end": 8513,
      "positions
      "inlined": "F0O7118F0O7155F1O8243F2O8451F3O8003F4O7659F4O7541F4O7265F5O7389I7F6O7389I6F6O7389I5F4O6596I10F7O9753I3",
      "fns": [
        212,
        227,
        304,
        290,
        198,
        295,
        294,
        141
      ]
    }
  },
  {
    "name": "isEmpty internal/fixed_queue.js:91:10",
    "type": "JS",
    "kind": "Opt",
    "func": 311,
    "tm": 945565,
    "source": {
      "script": 23,
      "start": 3721,
      "end": 3763,
      "positions": "C0O3721C50O3743C87O3165I0C95O3758C120O3721",
      "inlined": "F0O3748",
      "fns": [
        312
      ]
    }
  },
  {
    "name": "addListener events.js:283:58",
    "type": "JS",
    "kind": "Opt",
    "func": 139,
    "tm": 958336,
    "source": {
      "script": 10,
      "start": 8859,
      "end": 8933,
      "positions": "C0O8859C50O2121I3C85O6832I0C164O6844I0C178O7119I0C253O7162I0C265O7456I0C316O7474I0C326O7657I0C396O7820I0C524O7833I0C549O7843I0C578O7788I0C639O3386I1C677O2349I2C694O8103I0C722O8119I0C750O8126I0C767O8143I0C779O8000I0C795O7600I0C847O7617I0C926O7626I0C934O8930C941O6910I0C956O2170I3C972O8859",
      "inlined": "F0O8888F1O8066I0F2O3440I1F3O6786I0",
      "fns": [
        140,
        320,
        321,
        141
      ]
    }
  },
  {
    "name": "Duplex _stream_duplex.js:49:16",
    "type": "JS",
    "kind": "Opt",
    "func": 291,
    "tm": 985009,
    "source": {
      "script": 55,
      "start": 1952,
      "end": 2412,
      "positions
      "inlined": "F0O2078F1O8719I0F2O111I1F3O2045F1O6633I3F2O111I4F4O6343I3F5O4229I6F6O3934I6F7O467I8F8O768I8",
      "fns": [
        301,
        293,
        29,
        292,
        296,
        300,
        297,
        298,
        299
      ]
    }
  },
  {
    "name": "Readable _stream_readable.js:154:18",
    "type": "JS",
    "kind": "Opt",
    "func": 292,
    "tm": 987594,
    "source": {
      "script": 56,
      "start": 6045,
      "end": 6647,
      "positions
      "inlined": "F0O6633F1O111I0F2O6343F3O4229I2F4O3934I2F5O467I4F6O768I4F7O1554I1",
      "fns": [
        293,
        29,
        296,
        300,
        297,
        298,
        299,
        30
      ]
    }
  },
  {
    "name": "Readable.on _stream_readable.js:866:33",
    "type": "JS",
    "kind": "Opt",
    "func": 303,
    "tm": 1019625,
    "source": {
      "script": 56,
      "start": 28309,
      "end": 29234,
      "positions
      "inlined": "F0O28355F1O8888I0F2O8066I1F3O3440I2F4O6786I1F5O28762F6O28610F7O31485I5F8O31301I5",
      "fns": [
        139,
        140,
        320,
        321,
        141,
        308,
        307,
        309,
        186
      ]
    }
  },
  {
    "name": "push internal/fixed_queue.js:71:7",
    "type": "JS",
    "kind": "Opt",
    "func": 319,
    "tm": 1145077,
    "source": {
      "script": 23,
      "start": 3271,
      "end": 3357,
      "positions": "C0O3271C50O3290C87O3300C91O3305C157O3339C161O3344C168O3305C213O3327C221O3356C232O3271C272O3305",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 1191810,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "WritableState _stream_writable.js:59:23",
    "type": "JS",
    "kind": "Opt",
    "func": 302,
    "tm": 1192873,
    "source": {
      "script": 61,
      "start": 2174,
      "end": 6343,
      "positions
      "inlined": "F0O3094F1O467I0F2O768I0",
      "fns": [
        297,
        298,
        299
      ]
    }
  },
  {
    "name": " buffer.js:319:36",
    "type": "JS",
    "kind": "Opt",
    "func": 228,
    "tm": 1198221,
    "source": {
      "script": 14,
      "start": 9862,
      "end": 10090,
      "positions": "C0O9862C50O9877C89O9920C101O9989C120O10002C139O10057C151O10089C162O9862",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "type": "JS",
    "kind": "Opt",
    "func": 310,
    "tm": 1245854,
    "source": {
      "script": 21,
      "start": 2692,
      "end": 3622,
      "positions
      "inlined": "F0O3236F1O3748I0F2O3298F3O3509F4O3602F5O3801I4F6O3338F7O4024I4",
      "fns": [
        311,
        312,
        314,
        316,
        317,
        318,
        315,
        319
      ]
    }
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:1:1",
    "type": "JS",
    "kind": "Opt",
    "func": 246,
    "tm": 1327151,
    "source": {
      "script": 52,
      "start": 0,
      "end": 198,
      "positions": "C0O0C98O197C177O144C233O133C335O115C348O157C426O165C501O157C536O24001I0C754O22038I2C791O18983I3C905O19183I3C939O19146I3C1022O19319I3C1056O19282I3C1140O19464I3C1174O19427I3C1244O19576I3C1293O19978I3C1337O20247I3C1397O20245I3C1504O20282I3C1699O20760I3C1771O20826I3C1858O20853I3C1918O3416I1C1978O3459I1C2028O3482I1C2061O3600I1C2180O3686I1C2218O3710I1C2229O3728I1C2300O3750I1C2365O3790I1C2454O3832I1C2540O18370I4C2643O3870I1C2670O18349I4C2674O18563I4C2708O18616I4C2756O18682I4C2797O18794I4C2868O20591I5C2876O20602I5C2922O20633I5C3005O20761I5C3040O20788I5C3082O197C3093O20703I3C3126O3527I1C3150O18710I4C3176O20658I5C3202O3649I1C3221O197C3334O115C3512O20282I3C3569O3600I1C3635O18794I4C3735O20633I5",
      "inlined": "F0O157F1O24035I0F2O24046I0F3O22098I2F4O3870I1F5O18807I4",
      "fns": [
        286,
        306,
        287,
        288,
        322,
        330
      ]
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 1542564,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "needFinish _stream_writable.js:619:20",
    "type": "JS",
    "kind": "Opt",
    "func": 332,
    "tm": 1623403,
    "source": {
      "script": 61,
      "start": 19166,
      "end": 19341,
      "positions": "C0O19166C50O19193C147O19220C151O19227C167O19338C178O19253C190O19338C192O19166C232O19193",
      "inlined": "",
      "fns": []
    },
    "deopt": {
      "tm": 6818751,
      "inliningId": -1,
      "scriptOffset": 19253,
      "posText": "<_stream_writable.js:622:17>",
      "reason": "Insufficient type feedback for generic named access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 1923743,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 2319946,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocate buffer.js:370:18",
    "type": "JS",
    "kind": "Opt",
    "func": 229,
    "tm": 2631377,
    "source": {
      "script": 14,
      "start": 11386,
      "end": 11714,
      "positions": "C0O11386C50O11407C74O11472C92O11481C106O11462C113O11481C116O11462C125O26831I1C172O3401I0C199O26831I1C264O3427I0C271O3481I0C328O11711C340O3481I0C376O11711C378O11496C395O11508C418O11519C428O11517C440O11427C452O11386C555O26831I1C575O11519C630O11508",
      "inlined": "F0O11686F1O3427I0",
      "fns": [
        45,
        46
      ]
    },
    "deopt": {
      "tm": 7139287,
      "inliningId": -1,
      "scriptOffset": 11517,
      "posText": "<buffer.js:375:26>",
      "reason": "Insufficient type feedback for binary operation",
      "bailoutType": "soft"
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 2719755,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 3142274,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 3628951,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 4190756,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 4649283,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 5137656,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 5850255,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 6425277,
    "source": {
      "script": 23,
      "start": 3018,
      "end": 3126,
      "positions": "C0O3018C1O3028C2O3040C6O3050C7O3059C11O3085C18O3091C24O3081C29O3079C33O3104C34O3114C39O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " zlib.js:180:43",
    "type": "JS",
    "kind": "Opt",
    "func": 295,
    "tm": 6433709,
    "source": {
      "script": 53,
      "start": 5786,
      "end": 6236,
      "positions": "C0O5786C50O5827C64O5884C96O5895C108O5873C119O5786",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "finishMaybe _stream_writable.js:650:21",
    "type": "JS",
    "kind": "Opt",
    "func": 331,
    "tm": 6496066,
    "source": {
      "script": 61,
      "start": 19979,
      "end": 20529,
      "positions": "C0O19979C50O19193I0C147O19220I0C151O19227I0C176O19253I0C188O20035C262O20526C272O20052C284O19979C324O19193I0C392O20035",
      "inlined": "F0O20013",
      "fns": [
        332
      ]
    },
    "deopt": {
      "tm": 6818970,
      "inliningId": 0,
      "scriptOffset": 19253,
      "posText": "<_stream_writable.js:622:17> inlined at <_stream_writable.js:651:16>",
      "reason": "Insufficient type feedback for generic named access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 334,
    "tm": 6767860,
    "source": {
      "script": 21,
      "start": 1567,
      "end": 2527,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shift internal/fixed_queue.js:104:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 335,
    "tm": 6768137,
    "source": {
      "script": 23,
      "start": 4051,
      "end": 4285,
      "positions": "C0O4051C1O4079C7O4108C13O4108C19O4131C25O4131C31O4149C37O4250C41O4243C45O4268C47O4280",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shift internal/fixed_queue.js:76:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 336,
    "tm": 6768252,
    "source": {
      "script": 23,
      "start": 3368,
      "end": 3585,
      "positions": "C0O3368C1O3400C7O3410C11O3404C16O3424C18O3459C19O3471C20O3482C26O3492C33O3500C37O3538C41O3545C48O3552C50O3550C53O3530C57O3564C59O3580",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitBeforeScript internal/async_hooks.js:345:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 337,
    "tm": 6768557,
    "source": {
      "script": 20,
      "start": 12847,
      "end": 13314,
      "positions": "C0O12847C1O13104C9O13104C14O13144C22O13144C27O13200C31O13200C36O13244C44O13266C46O13265C52O13275C57O13285C63O13285C68O13313",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateAsyncId internal/async_hooks.js:114:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 338,
    "tm": 6768681,
    "source": {
      "script": 20,
      "start": 5457,
      "end": 5697,
      "positions": "C0O5457C1O5529C9O5551C11O5550C17O5559C22O5565C23O5572C24O5578C29O5590C35O5590C44O5624C49O5637C55O5652C67O5648C74O5637C79O5696",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "pushAsyncIds internal/async_hooks.js:394:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 339,
    "tm": 6768846,
    "source": {
      "script": 20,
      "start": 14201,
      "end": 14693,
      "positions": "C0O14201C1O14247C9O14265C11O14264C16O14294C23O14301C27O14312C33O14328C37O14298C42O14341C48O14348C53O14387C54O14391C60O14402C68O14425C75O14432C81O14448C83O14447C86O14430C90O14471C96O14482C104O14505C107O14509C114O14516C120O14532C122O14531C125O14514C129O14553C137O14571C146O14584C150O14591C158O14607C164O14626C168O14640C176O14656C182O14673C187O14692",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resume_ _stream_readable.js:972:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 340,
    "tm": 6769043,
    "source": {
      "script": 56,
      "start": 31734,
      "end": 31980,
      "positions": "C0O31734C1O31755C11O31777C17O31755C22O31801C28O31824C37O31824C42O31843C43O31865C47O31884C57O31884C62O31903C66O31903C70O31930C76O31948C82O31969C91O31969C97O31979",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.read _stream_readable.js:399:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 341,
    "tm": 6769373,
    "source": {
      "script": 56,
      "start": 13396,
      "end": 17631,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "howMuchToRead _stream_readable.js:381:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 342,
    "tm": 6769871,
    "source": {
      "script": 56,
      "start": 12890,
      "end": 13288,
      "positions": "C0O12890C1O12906C2O12912C7O12927C14O12934C19O12949C25O12962C26O12971C27O12985C33O13002C35O13011C36O13015C41O13026C47O13026C54O13092C60O13109C66O13137C72O13144C78O13144C84O13151C88O13159C89O13190C93O13197C94O13221C98O13212C103O13234C105O13243C106O13260C112O13274C119O13285",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emit events.js:160:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 146,
    "tm": 6770322,
    "source": {
      "script": 10,
      "start": 5009,
      "end": 6677,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "flow _stream_readable.js:996:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 343,
    "tm": 6770481,
    "source": {
      "script": 56,
      "start": 32303,
      "end": 32441,
      "positions": "C0O32303C1O32338C7O32357C17O32377C23O32357C28O32403C34O32421C40O32421C46O32390C51O32440",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "destroyHooksExist internal/async_hooks.js:316:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 344,
    "tm": 6770552,
    "source": {
      "script": 20,
      "start": 11902,
      "end": 11952,
      "positions": "C0O11902C1O11910C9O11935C11O11934C17O11945C20O11949",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitAfterScript internal/async_hooks.js:359:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 345,
    "tm": 6770616,
    "source": {
      "script": 20,
      "start": 13344,
      "end": 13496,
      "positions": "C0O13344C1O13359C9O13359C14O13401C22O13423C24O13422C30O13431C35O13441C41O13441C45O13472C49O13472C54O13495",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "popAsyncIds internal/async_hooks.js:407:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 346,
    "tm": 6770748,
    "source": {
      "script": 20,
      "start": 14782,
      "end": 15361,
      "positions": "C0O14782C1O14817C9O14835C11O14834C16O14853C17O14869C22O14876C23O14889C24O14895C32O14917C34O14916C40O14925C47O14939C53O14955C55O14954C62O14974C67O15058C73O15065C77O15087C78O15113C80O15125C85O15133C93O15149C99O15170C103O15181C111O15199C114O15196C117O15168C121O15213C129O15229C135O15248C139O15259C147O15277C150O15286C153O15274C156O15246C160O15295C168O15313C174O15327C178O15340C179O15354C182O15358",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/util/debuglog.js:57:18",
    "type": "JS",
    "kind": "Opt",
    "func": 186,
    "tm": 6774690,
    "source": {
      "script": 36,
      "start": 1723,
      "end": 1962,
      "positions": "C0O1723C54O1740C82O1915C92O1942C104O1961C115O1876C127O1884C139O1723C187O1740",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "destroyHooksExist internal/async_hooks.js:316:27",
    "type": "JS",
    "kind": "Opt",
    "func": 344,
    "tm": 6775488,
    "source": {
      "script": 20,
      "start": 11902,
      "end": 11952,
      "positions": "C0O11902C46O11934C56O11949C93O11902",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitAfterScript internal/async_hooks.js:359:25",
    "type": "JS",
    "kind": "Opt",
    "func": 345,
    "tm": 6779149,
    "source": {
      "script": 20,
      "start": 13344,
      "end": 13496,
      "positions": "C0O13344C50O5550I1C60O5559I1C80O5590I1C232O5624I1C310O5648I1C326O13431C336O14834I0C340O14869I0C350O14925I0C385O14954I0C407O14974I0C451O5624I1C460O14974I0C472O15065I0C484O15125I0C498O15199I0C510O15196I0C546O15168I0C551O15286I0C561O15274I0C577O15246I0C583O15327I0C587O13495C598O13441C610O13344",
      "inlined": "F0O13472F1O13359",
      "fns": [
        346,
        338
      ]
    }
  },
  {
    "name": "validateAsyncId internal/async_hooks.js:114:25",
    "type": "JS",
    "kind": "Opt",
    "func": 338,
    "tm": 6782115,
    "source": {
      "script": 20,
      "start": 5457,
      "end": 5697,
      "positions": "C0O5457C50O5550C60O5559C80O5590C228O5624C304O5696C315O5648C327O5572C333O5457",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.read _stream_readable.js:399:35",
    "type": "JS",
    "kind": "Opt",
    "func": 341,
    "tm": 6786678,
    "source": {
      "script": 56,
      "start": 13396,
      "end": 17631,
      "positions
      "inlined": "F0O16068F0O15862F1O14495F0O13405F2O16680F0O16430F0O16366F3O7039I4F4O12281I7F5O14922I8",
      "fns": [
        186,
        342,
        327,
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "Transform._read _stream_transform.js:184:37",
    "type": "JS",
    "kind": "Opt",
    "func": 327,
    "tm": 6787039,
    "source": {
      "script": 54,
      "start": 6903,
      "end": 7279,
      "positions": "C0O6903C50O6928C88O6957C106O6984C176O7021C184O7068C188O7086C192O11804I0C199O11980I0C220O12128I0C224O12155I0C305O12168I0C369O12181I0C381O14910I1C385O14980I1C467O15002I1C654O15040I1C664O15058I1C671O15051I1C693O15033I1C740O15102I1C756O15094I1C815O15130I1C929O15155I1C971O15324I1C1006O15180I1C1062O7264C1070O7278C1081O6903C1121O6984C1232O12155I0C1444O12168I0",
      "inlined": "F0O7039F1O12281I0F2O14922I1",
      "fns": [
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "pushAsyncIds internal/async_hooks.js:394:22",
    "type": "JS",
    "kind": "Opt",
    "func": 339,
    "tm": 6790041,
    "source": {
      "script": 20,
      "start": 14201,
      "end": 14693,
      "positions": "C0O14201C50O14264C73O14294C94O14328C108O14298C117O14447C143O14430C169O14509C179O14531C186O14514C202O14571C208O14584C211O14626C283O14673C353O14692C364O14348C384O14201",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shift internal/fixed_queue.js:76:8",
    "type": "JS",
    "kind": "Opt",
    "func": 336,
    "tm": 6790542,
    "source": {
      "script": 23,
      "start": 3368,
      "end": 3585,
      "positions": "C0O3368C50O3400C87O3404C146O3424C160O3500C164O3545C168O3550C175O3500C190O3530C198O3580C208O3471C214O3368",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitBeforeScript internal/async_hooks.js:345:26",
    "type": "JS",
    "kind": "Opt",
    "func": 337,
    "tm": 6790960,
    "source": {
      "script": 20,
      "start": 12847,
      "end": 13314,
      "positions": "C0O12847C50O5550I2C60O5559I2C80O5590I2C232O5624I2C310O5648I2C326O5559I1C336O5590I1C486O5624I1C562O5648I1C578O14264I0C582O14294I0C604O14328I0C619O14298I0C628O14447I0C653O14430I0C679O14509I0C689O14531I0C695O14514I0C711O14571I0C719O14584I0C723O5590I1C735O14626I0C791O5624I2C800O14626I0C805O14673I0C862O5624I1C871O14673I0C877O13275C887O13313C898O13285C910O14348I0C922O12847",
      "inlined": "F0O13200F1O13144F1O13104",
      "fns": [
        339,
        338
      ]
    }
  },
  {
    "name": "flow _stream_readable.js:996:14",
    "type": "JS",
    "kind": "Opt",
    "func": 343,
    "tm": 6792338,
    "source": {
      "script": 56,
      "start": 32303,
      "end": 32441,
      "positions": "C0O32303C50O32338C87O32377C91O1740I0C130O1915I0C140O1942I0C152O32403C214O32421C266O32390C288O32403C404O32421C454O32390C472O32440C483O1884I0C495O32303C535O32403C593O32390C627O32403C745O32390C790O1740I0",
      "inlined": "F0O32357",
      "fns": [
        186
      ]
    }
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "type": "JS",
    "kind": "Opt",
    "func": 334,
    "tm": 6804853,
    "source": {
      "script": 21,
      "start": 1567,
      "end": 2527,
      "positions
      "inlined": "F0O2279F1O2351F2O2008F3O1682F4O1618F5O4131I4F6O31903I2F7O31884I2F8O31755I2F9O4108I4F10O13144I3F8O32357I6",
      "fns": [
        344,
        345,
        340,
        337,
        335,
        312,
        343,
        146,
        186,
        336,
        338
      ]
    },
    "deopt": {
      "tm": 6815918,
      "inliningId": -1,
      "scriptOffset": 2383,
      "posText": "<internal/process/task_queues.js:93:5>",
      "reason": "Insufficient type feedback for call",
      "bailoutType": "soft"
    }
  },
  {
    "name": "resume_ _stream_readable.js:972:17",
    "type": "JS",
    "kind": "Opt",
    "func": 340,
    "tm": 6805231,
    "source": {
      "script": 56,
      "start": 31734,
      "end": 31980,
      "positions": "C0O31734C50O31777C88O1740I2C123O1915I2C133O1942I2C145O31884C161O31801C230O31824C300O31865C335O31884C369O5089I1C373O5101I1C383O6349I1C436O6362I1C446O6413I1C477O6455I1C489O6520I1C501O32338I0C529O32377I0C533O1740I3C571O1915I3C581O1942I3C593O32403I0C655O32421I0C705O32390I0C720O32403I0C826O32421I0C882O32390I0C900O31930C989O31948C1059O31969C1095O31979C1106O1884I3C1125O1884I2C1141O31734C1181O31801C1328O32403I0C1396O32390I0C1430O32403I0C1528O32390I0C1562O31930C1614O31948C1678O1740I3C1733O1740I2",
      "inlined": "F0O31903F1O31884F2O31755F2O32357I0",
      "fns": [
        343,
        146,
        186
      ]
    }
  },
  {
    "name": "popAsyncIds internal/async_hooks.js:407:21",
    "type": "JS",
    "kind": "Opt",
    "func": 346,
    "tm": 6808182,
    "source": {
      "script": 20,
      "start": 14782,
      "end": 15361,
      "positions": "C0O14782C50O14834C73O14869C82O14925C121O14954C143O14974C213O15065C225O15125C238O15199C250O15196C286O15168C291O15286C301O15274C317O15246C323O15327C327O15358C354O14889C360O14782",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "processPromiseRejections internal/process/promises.js:163:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 347,
    "tm": 6816200,
    "source": {
      "script": 22,
      "start": 5285,
      "end": 7167,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:49:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 313,
    "tm": 6816389,
    "source": {
      "script": 21,
      "start": 1159,
      "end": 1219,
      "positions": "C0O1159C1O1172C9O1181C15O1202C22O1200C27O1218",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasRejectionToWarn internal/process/promises.js:48:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 348,
    "tm": 6816451,
    "source": {
      "script": 22,
      "start": 1502,
      "end": 1564,
      "positions": "C0O1502C1O1515C9O1524C15O1547C22O1545C27O1563",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "processCallback zlib.js:497:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 349,
    "tm": 6816654,
    "source": {
      "script": 53,
      "start": 15468,
      "end": 17854,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get _stream_duplex.js:141:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 350,
    "tm": 6816859,
    "source": {
      "script": 55,
      "start": 4534,
      "end": 4739,
      "positions": "C0O4534C1O4553C7O4599C13O4638C14O4651C15O4676C21O4691C27O4709C33O4724C37O4734",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "slice buffer.js:1059:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 351,
    "tm": 6817111,
    "source": {
      "script": 14,
      "start": 31978,
      "end": 32270,
      "positions": "C0O31978C1O32019C7O32030C11O32038C18O32073C26O32099C37O32162C39O32166C46O32180C54O32196C60O32223C66O32236C74O32247C84O32203C89O32267",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "adjustOffset buffer.js:1042:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 352,
    "tm": 6817213,
    "source": {
      "script": 14,
      "start": 31505,
      "end": 31935,
      "positions": "C0O31505C1O31679C7O31693C13O31693C20O31711C21O31722C26O31736C27O31745C28O31754C29O31765C34O31777C36O31787C44O31800C45O31814C55O31831C56O31840C58O31851C63O31868C65O31882C66O31891C71O31905C77O31905C89O31932",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Transform.push _stream_transform.js:148:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 353,
    "tm": 6817403,
    "source": {
      "script": 54,
      "start": 5622,
      "end": 5752,
      "positions": "C0O5622C1O5650C8O5680C12O5692C18O5706C24O5716C30O5721C45O5721C50O5749",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.push _stream_readable.js:222:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 354,
    "tm": 6817470,
    "source": {
      "script": 56,
      "start": 8024,
      "end": 8104,
      "positions": "C0O8024C1O8047C17O8054C22O8101",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readableAddChunk _stream_readable.js:231:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 355,
    "tm": 6817649,
    "source": {
      "script": 56,
      "start": 8319,
      "end": 10770,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "chunkInvalid _stream_readable.js:323:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 356,
    "tm": 6817955,
    "source": {
      "script": 56,
      "start": 11276,
      "end": 11531,
      "positions": "C0O11276C1O11296C7O11308C13O11308C30O11412C36O11431C57O11438C62O11523C64O11530",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addChunk _stream_readable.js:305:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 357,
    "tm": 6818066,
    "source": {
      "script": 56,
      "start": 10791,
      "end": 11251,
      "positions": "C0O10791C1O10841C7O10858C14O10865C19O10881C25O10894C26O10911C30O10928C40O10928C48O10998C54O11020C67O11043C74O11011C78O11056C82O11085C88O11092C94O11092C101O11131C107O11138C113O11138C118O11168C124O11189C128O11189C132O11219C136O11219C142O11250",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "zlibBufferOnData zlib.js:109:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 358,
    "tm": 6818184,
    "source": {
      "script": 53,
      "start": 3914,
      "end": 4047,
      "positions": "C0O3914C1O3937C7O3951C18O3967C24O3964C30O3993C36O4001C42O4001C47O4017C53O4037C60O4028C65O4046",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeReadMore _stream_readable.js:598:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 359,
    "tm": 6818391,
    "source": {
      "script": 56,
      "start": 20059,
      "end": 20198,
      "positions": "C0O20059C1O20091C7O20111C8O20129C12O20142C16O20150C32O20150C38O20197",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "afterTransform _stream_transform.js:80:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 360,
    "tm": 6818519,
    "source": {
      "script": 54,
      "start": 3978,
      "end": 4495,
      "positions": "C0O3978C1O4010C7O4030C8O4046C12O4074C18O4088C20O4124C32O4142C36O4138C43O4124C49O4167C50O4178C51O4192C55O4203C56O4214C60O4227C65O4310C71O4310C76O4327C80O4356C86O4375C87O4386C91O4405C97O4424C103O4436C107O4431C112O4463C118O4472C124O4463C130O4494",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onwrite _stream_writable.js:459:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 361,
    "tm": 6818658,
    "source": {
      "script": 61,
      "start": 14852,
      "end": 15651,
      "positions": "C0O14852C1O14891C7O14929C13O14955C19O14969C23O15004C29O15010C34O15004C35O15044C36O15058C40O15070C41O15084C45O15095C51O15117C58O15108C62O15130C63O15145C67O15155C71O15168C90O15168C97O15309C101O15309C107O15337C113O15355C115O15388C121O15414C127O15449C133O15475C137O15475C142O15517C146O15536C150O15544C169O15544C176O15606C189O15606C195O15650",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "afterWrite _stream_writable.js:493:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 362,
    "tm": 6818874,
    "source": {
      "script": 61,
      "start": 15674,
      "end": 15945,
      "positions": "C0O15674C1O15724C8O15742C15O15761C22O15768C27O15788C33O15802C35O15824C36O15840C40O15861C50O15861C55O15884C61O15899C65O15906C68O15915C72O15915C78O15944",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nop _stream_writable.js:57:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 363,
    "tm": 6818939,
    "source": {
      "script": 61,
      "start": 2143,
      "end": 2148,
      "positions": "C0O2143C2O2147",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prefinish _stream_writable.js:637:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 364,
    "tm": 6819117,
    "source": {
      "script": 61,
      "start": 19614,
      "end": 19955,
      "positions": "C0O19614C1O19646C7O19668C13O19706C21O19738C27O19758C33O19773C37O19784C38O19802C42O19817C46O19825C62O19825C69O19882C70O19900C74O19922C84O19922C90O19954",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prefinish _stream_transform.js:138:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 365,
    "tm": 6819273,
    "source": {
      "script": 54,
      "start": 5381,
      "end": 5583,
      "positions": "C9O5381C10O5389C14O5405C26O5436C32O5451C38O5469C42O5474C54O5474C61O5552C77O5552C83O5582",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase._flush zlib.js:306:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 366,
    "tm": 6819344,
    "source": {
      "script": 53,
      "start": 9867,
      "end": 9933,
      "positions": "C0O9867C1O9888C9O9899C13O9906C22O9906C39O9888C45O9932",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alloc buffer.js:332:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 367,
    "tm": 6819420,
    "source": {
      "script": 14,
      "start": 10213,
      "end": 10451,
      "positions": "C0O10213C1O10241C7O10241C11O10262C16O10293C22O10307C27O10331C31O10331C37O10362C44O10393C59O10369C64O10411C65O10420C73O10427C78O10448",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maxFlush zlib.js:325:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 368,
    "tm": 6819499,
    "source": {
      "script": 53,
      "start": 10565,
      "end": 10625,
      "positions": "C0O10565C1O10577C9O10594C16O10600C22O10610C25O10598C36O10622",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "type": "JS",
    "kind": "Opt",
    "func": 334,
    "tm": 6829310,
    "source": {
      "script": 21,
      "start": 1567,
      "end": 2527,
      "positions
      "inlined": "F0O2279F1O2419F2O3748I1F3O2351F4O2008F5O1682F6O1618F2O4131I6F7O31903I4F8O31884I4F9O31755I4F10O4108I6F11O13144I5",
      "fns": [
        344,
        311,
        312,
        345,
        340,
        337,
        335,
        343,
        146,
        186,
        336,
        338
      ]
    },
    "deopt": {
      "tm": 6829608,
      "inliningId": -1,
      "scriptOffset": 2008,
      "posText": "<internal/process/task_queues.js:80:21>",
      "reason": "wrong call target",
      "bailoutType": "eager"
    }
  },
  {
    "name": "maybeReadMore_ _stream_readable.js:605:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 369,
    "tm": 6829846,
    "source": {
      "script": 56,
      "start": 20225,
      "end": 22033,
      "positions": "C0O20225C1O21688C7O21706C13O21732C19O21747C23O21739C28O21782C34O21799C41O21806C46O21674C47O21840C53O21853C63O21853C67O21896C76O21896C81O21928C85O21918C90O21989C95O22004C96O22022C101O22032",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty internal/fixed_queue.js:63:10",
    "type": "JS",
    "kind": "Opt",
    "func": 312,
    "tm": 6843119,
    "source": {
      "script": 23,
      "start": 3139,
      "end": 3186,
      "positions": "C0O3139C50O3161C83O3165C91O3181C116O3139",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initHooksExist internal/async_hooks.js:308:24",
    "type": "JS",
    "kind": "Opt",
    "func": 316,
    "tm": 6843862,
    "source": {
      "script": 20,
      "start": 11749,
      "end": 11796,
      "positions": "C0O11749C46O11781C56O11793C92O11749",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/per_context/primordials.js:24:10",
    "type": "JS",
    "kind": "Opt",
    "func": 60,
    "tm": 6852616,
    "source": {
      "script": 4,
      "start": 1105,
      "end": 1160,
      "positions": "C0O1105C53O1127C93O1160C100O1105",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emit events.js:160:44",
    "type": "JS",
    "kind": "Opt",
    "func": 146,
    "tm": 6856268,
    "source": {
      "script": 10,
      "start": 5009,
      "end": 6677,
      "positions": "C0O5009C50O5050C86O5089C124O5050C145O5101C155O5132C165O5161C177O5191C187O5223C198O5285C208O6349C238O6362C248O6413C282O6455C318O6674C327O6520C339O6407C348O5327C360O5009",
      "inlined": "",
      "fns": []
    },
    "deopt": {
      "tm": 7136859,
      "inliningId": -1,
      "scriptOffset": 6520,
      "posText": "<events.js:212:25>",
      "reason": "Insufficient type feedback for generic named access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "Readable.read _stream_readable.js:399:35",
    "type": "JS",
    "kind": "Opt",
    "func": 341,
    "tm": 6867408,
    "source": {
      "script": 56,
      "start": 13396,
      "end": 17631,
      "positions
      "inlined": "F0O16068F0O15862F1O14495F0O13405F2O16680F0O16430F0O16366F3O7039I4F4O12281I7F5O14922I8",
      "fns": [
        186,
        342,
        327,
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "newAsyncId internal/async_hooks.js:262:20",
    "type": "JS",
    "kind": "Opt",
    "func": 314,
    "tm": 6871573,
    "source": {
      "script": 20,
      "start": 10204,
      "end": 10257,
      "positions": "C0O10204C46O10237C89O10252C94O10254C192O10204",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shift internal/fixed_queue.js:104:8",
    "type": "JS",
    "kind": "Opt",
    "func": 335,
    "tm": 6875694,
    "source": {
      "script": 23,
      "start": 4051,
      "end": 4285,
      "positions": "C0O4051C50O4079C87O3400I1C91O3404I1C150O3424I1C164O3500I1C168O3545I1C172O3550I1C179O3500I1C194O3530I1C214O3165I0C222O4131C231O4149C245O4243C289O4280C299O4051",
      "inlined": "F0O4131F1O4108",
      "fns": [
        312,
        336
      ]
    }
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "type": "JS",
    "kind": "Opt",
    "func": 334,
    "tm": 6879911,
    "source": {
      "script": 21,
      "start": 1567,
      "end": 2527,
      "positions
      "inlined": "F0O2279F1O2419F2O3748I1F3O2464F4O2495F5O1618F2O4131I5F6O4108I5F7O2351F8O1682F9O13200I9F10O13144I9F10O13104I9F11O13472I8F10O13359I8",
      "fns": [
        344,
        311,
        312,
        313,
        348,
        335,
        336,
        345,
        337,
        339,
        338,
        346
      ]
    },
    "deopt": {
      "tm": 7140204,
      "inliningId": -1,
      "scriptOffset": 1974,
      "posText": "<internal/process/task_queues.js:79:34>",
      "reason": "Insufficient type feedback for generic keyed access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "isFull internal/fixed_queue.js:67:9",
    "type": "JS",
    "kind": "Opt",
    "func": 318,
    "tm": 6883696,
    "source": {
      "script": 23,
      "start": 3198,
      "end": 3261,
      "positions": "C0O3198C50O3222C83O3226C86O3240C90O3226C93O3231C99O3256C124O3198",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "needFinish _stream_writable.js:619:20",
    "type": "JS",
    "kind": "Opt",
    "func": 332,
    "tm": 6890650,
    "source": {
      "script": 61,
      "start": 19166,
      "end": 19341,
      "positions": "C0O19166C50O19193C147O19227C159O19338C170O19253C191O19338C193O19299C257O19338C259O19329C349O19338C377O19166C417O19193C459O19299C535O19329",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "type": "JS",
    "kind": "Opt",
    "func": 310,
    "tm": 6895733,
    "source": {
      "script": 21,
      "start": 2692,
      "end": 3622,
      "positions
      "inlined": "F0O3236F1O3748I0F2O3252F3O3298F4O3509F5O3602F6O3801I5F7O3338F8O4024I5",
      "fns": [
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        315,
        319
      ]
    },
    "deopt": {
      "tm": 7138330,
      "inliningId": -1,
      "scriptOffset": 2927,
      "posText": "<internal/process/task_queues.js:111:30>",
      "reason": "Insufficient type feedback for generic keyed access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "processCallback zlib.js:497:25",
    "type": "JS",
    "kind": "Opt",
    "func": 349,
    "tm": 6901708,
    "source": {
      "script": 53,
      "start": 15468,
      "end": 17854,
      "positions
      "inlined": "F0O16286F1O5721I0F2O16198F3O32203I2F4O32099I2F4O32038I2F5O16380F5O15873",
      "fns": [
        353,
        354,
        351,
        46,
        352,
        350
      ]
    }
  },
  {
    "name": "maybeReadMore _stream_readable.js:598:23",
    "type": "JS",
    "kind": "Opt",
    "func": 359,
    "tm": 6906669,
    "source": {
      "script": 56,
      "start": 20059,
      "end": 20198,
      "positions
      "inlined": "F0O20150F1O3236I0F2O3748I1F3O3252I0F4O3298I0F5O3509I0F6O3602I0F7O3801I6F8O3338I0F9O4024I6",
      "fns": [
        310,
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        315,
        319
      ]
    }
  },
  {
    "name": "prefinish _stream_transform.js:138:19",
    "type": "JS",
    "kind": "Opt",
    "func": 365,
    "tm": 6911775,
    "source": {
      "script": 54,
      "start": 5381,
      "end": 5583,
      "positions
      "inlined": "F0O5474F1O9888I0F2O9906I0F3O10427I2F4O12281I1F5O14922I4F6O10241I2F7O7389I6F8O12229I1",
      "fns": [
        366,
        328,
        367,
        46,
        329,
        212,
        198,
        228,
        368
      ]
    }
  },
  {
    "name": "readableAddChunk _stream_readable.js:231:26",
    "type": "JS",
    "kind": "Opt",
    "func": 355,
    "tm": 6917884,
    "source": {
      "script": 56,
      "start": 8319,
      "end": 10770,
      "positions
      "inlined": "F0O10311F1O9225F2O11308I1F3O8362F4O11219I0F5O10928I0F6O571I2",
      "fns": [
        357,
        356,
        201,
        186,
        359,
        146,
        60
      ]
    },
    "deopt": {
      "tm": 7136096,
      "inliningId": -1,
      "scriptOffset": 9135,
      "posText": "<_stream_readable.js:256:5>",
      "reason": "Insufficient type feedback for call",
      "bailoutType": "soft"
    }
  },
  {
    "name": "zlibBufferOnData zlib.js:109:26",
    "type": "JS",
    "kind": "Opt",
    "func": 358,
    "tm": 6922398,
    "source": {
      "script": 53,
      "start": 3914,
      "end": 4047,
      "positions": "C0O3914C50O3937C151O3993C202O3951C280O3967C288O3964C315O4037C365O4028C376O4046C387O3914C427O3937",
      "inlined": "",
      "fns": []
    },
    "deopt": {
      "tm": 7135620,
      "inliningId": -1,
      "scriptOffset": 3993,
      "posText": "<zlib.js:113:10>",
      "reason": "Insufficient type feedback for generic named access",
      "bailoutType": "soft"
    }
  },
  {
    "name": "maybeReadMore_ _stream_readable.js:605:24",
    "type": "JS",
    "kind": "Opt",
    "func": 369,
    "tm": 6929381,
    "source": {
      "script": 56,
      "start": 20225,
      "end": 22033,
      "positions": "C0O20225C50O21688C153O21706C223O21732C227O21747C231O21739C238O21918C245O21739C258O21782C270O21674C283O1740I0C317O1915I0C327O1942I0C339O21896C410O21928C434O22022C445O22032C456O1884I0C468O20225C508O21688C595O21706C685O21674C748O1740I0",
      "inlined": "F0O21853",
      "fns": [
        186
      ]
    }
  },
  {
    "name": "afterWrite _stream_writable.js:493:20",
    "type": "JS",
    "kind": "Opt",
    "func": 362,
    "tm": 6936207,
    "source": {
      "script": 61,
      "start": 15674,
      "end": 15945,
      "positions": "C0O15674C50O15724C148O15884C165O15899C176O15906C199O19227I2C225O19253I2C254O19299I2C329O19329I2C417O20035I1C437O20052I1C479O20093I1C503O20103I1C520O20134I1C528O20156I1C609O20191I1C701O20365I1C713O15944C724O15742C736O15674C776O15724C860O19299I2C1000O19329I2C1087O20191I1",
      "inlined": "F0O15906F1O15915F2O20013I1",
      "fns": [
        363,
        331,
        332
      ]
    }
  },
  {
    "name": "Transform._read _stream_transform.js:184:37",
    "type": "JS",
    "kind": "Opt",
    "func": 327,
    "tm": 6940391,
    "source": {
      "script": 54,
      "start": 6903,
      "end": 7279,
      "positions": "C0O6903C50O6928C88O6957C106O6984C176O7021C184O7068C188O7086C192O11804I0C199O11980I0C220O12128I0C224O12155I0C301O12168I0C365O12198I0C370O12188I0C395O12254I0C402O12229I0C447O14910I1C479O14980I1C646O15002I1C900O15040I1C910O15058I1C917O15051I1C939O15033I1C1032O15102I1C1056O15094I1C1176O15130I1C1476O15155I1C1596O15278I1C1604O15324I1C1632O15410I1C1659O15180I1C1715O7264C1723O7278C1734O6903C1774O6984C1885O12155I0C2105O12168I0",
      "inlined": "F0O7039F1O12281I0F2O14922I1",
      "fns": [
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "onwrite _stream_writable.js:459:17",
    "type": "JS",
    "kind": "Opt",
    "func": 361,
    "tm": 6945164,
    "source": {
      "script": 61,
      "start": 14852,
      "end": 15651,
      "positions
      "inlined": "F0O15606F1O15906I0F2O15309F3O15915I0F2O20013I3",
      "fns": [
        362,
        363,
        332,
        331
      ]
    }
  },
  {
    "name": "processPromiseRejections internal/process/promises.js:163:34",
    "type": "JS",
    "kind": "Opt",
    "func": 347,
    "tm": 6949644,
    "source": {
      "script": 22,
      "start": 5285,
      "end": 7167,
      "positions": "C0O5285C50O5354C80O5361C93O5408C102O5627C122O5648C148O5638C161O5702C173O7164C199O5371C212O5472C224O5285C264O5638C314O5371",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "afterTransform _stream_transform.js:80:24",
    "type": "JS",
    "kind": "Opt",
    "func": 360,
    "tm": 6959727,
    "source": {
      "script": 54,
      "start": 3978,
      "end": 4495,
      "positions
      "inlined": "F0O4463F1O7039I0F2O12281I1F3O14922I2",
      "fns": [
        327,
        328,
        329,
        212
      ]
    }
  },
  {
    "name": "prefinish _stream_writable.js:637:19",
    "type": "JS",
    "kind": "Opt",
    "func": 364,
    "tm": 6984285,
    "source": {
      "script": 61,
      "start": 19614,
      "end": 19955,
      "positions": "C0O19614C50O19646C157O19668C227O19706C261O19900C272O5089I0C276O5101I0C286O6349I0C339O6362I0C349O6413I0C383O6455I0C419O6520I0C431O19954C442O19614C482O19646C526O19668",
      "inlined": "F0O19922",
      "fns": [
        146
      ]
    }
  },
  {
    "name": " _stream_transform.js:140:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 370,
    "tm": 7135903,
    "source": {
      "script": 54,
      "start": 5481,
      "end": 5532,
      "positions": "C0O5481C1O5504C17O5504C23O5531",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "done _stream_transform.js:205:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 371,
    "tm": 7136013,
    "source": {
      "script": 54,
      "start": 7438,
      "end": 7905,
      "positions": "C0O7438C1O7462C5O7489C15O7489C21O7507C22O7513C27O7598C33O7598C38O7706C44O7721C50O7734C56O7740C61O7734C62O7791C68O7807C74O7826C80O7832C85O7826C86O7891C95O7891C100O7902",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onEofChunk _stream_readable.js:529:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 372,
    "tm": 7136268,
    "source": {
      "script": 56,
      "start": 17655,
      "end": 18478,
      "positions": "C0O17655C1O17676C11O17676C15O17710C21O17717C22O17724C23O17738C29O17772C35O17780C41O17780C47O17792C49O17811C55O17834C61O17841C67O17841C72O17861C78O17883C91O17906C98O17874C102O17929C103O17941C107O17964C113O18150C117O18150C123O18249C124O18268C128O18282C129O18304C133O18448C137O18448C142O18477",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitReadable_ _stream_readable.js:570:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 373,
    "tm": 7136546,
    "source": {
      "script": 56,
      "start": 19046,
      "end": 19678,
      "positions": "C0O19046C1O19081C7O19100C17O19129C23O19146C29O19160C35O19100C40O19182C46O19202C52O19218C58O19240C68O19240C73O19263C74O19285C78O19585C88O19608C95O19628C101O19644C105O19635C108O19571C112O19662C116O19662C121O19677",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "endReadable _stream_readable.js:1166:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 374,
    "tm": 7136659,
    "source": {
      "script": 56,
      "start": 37073,
      "end": 37282,
      "positions": "C0O37073C1O37108C7O37129C17O37156C23O37129C28O37183C34O37202C35O37214C39O37227C43O37235C59O37235C65O37281",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "endReadableNT _stream_readable.js:1176:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 375,
    "tm": 7136777,
    "source": {
      "script": 56,
      "start": 37308,
      "end": 37887,
      "positions": "C0O37308C1O37329C11O37358C17O37376C23O37329C28O37450C34O37470C41O37477C46O37491C47O37508C51O37521C52O37537C56O37558C66O37558C71O37588C77O37756C83O37779C85O37802C91O37824C97O37853C103O37853C108O37886",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "arrayClone events.js:484:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 376,
    "tm": 7137000,
    "source": {
      "script": 10,
      "start": 14546,
      "end": 14659,
      "positions": "C0O14546C1O14573C8O14573C15O14603C18O14608C20O14608C25O14590C26O14623C28O14636C31O14631C35O14615C44O14644C46O14656",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onceWrapper events.js:294:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 377,
    "tm": 7137106,
    "source": {
      "script": 10,
      "start": 9181,
      "end": 9433,
      "positions": "C3O9181C4O9199C10O9218C16O9225C22O9245C28O9256C34O9225C40O9270C41O9281C45O9308C52O9315C57O9341C63O9350C69O9360C75O9350C80O9368C81O9386C87O9395C93O9406C99O9395C105O9425C107O9432",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.removeListener _stream_readable.js:896:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 378,
    "tm": 7137213,
    "source": {
      "script": 56,
      "start": 29340,
      "end": 29860,
      "positions": "C0O29340C1O29366C7O29373C13O29383C19O29398C34O29398C41O29423C43O29430C48O29787C52O29795C62O29795C68O29846C70O29857",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "removeListener events.js:329:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 379,
    "tm": 7137372,
    "source": {
      "script": 10,
      "start": 10228,
      "end": 11649,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase.close zlib.js:360:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 380,
    "tm": 7137550,
    "source": {
      "script": 53,
      "start": 11552,
      "end": 11613,
      "positions": "C0O11552C1O11568C5O11568C10O11600C16O11600C21O11612",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_close zlib.js:574:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 381,
    "tm": 7137615,
    "source": {
      "script": 53,
      "start": 17873,
      "end": 18117,
      "positions": "C0O17873C1O17897C5O17916C9O17924C15O17924C20O18038C26O18052C27O18059C28O18072C34O18080C40O18080C44O18092C45O18107C50O18116",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "destroy internal/streams/destroy.js:5:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 382,
    "tm": 7137973,
    "source": {
      "script": 62,
      "start": 168,
      "end": 1701,
      "positions": "C13O168C14O209C18O214C28O242C34O257C40O297C44O302C54O330C60O345C66O361C72O386C74O412C78O429C82O429C88O450C92O468C96O478C102O505C108O513C127O513C134O561C138O571C144O586C150O611C154O616C161O644C165O661C171O669C190O669C195O726C197O738C198O900C202O909C208O932C212O937C219O962C223O1057C227O1066C233O1089C237O1094C244O1119C248O1137C252O1142C260O1151C271O1142C277O1686C279O1698",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase._destroy zlib.js:365:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 383,
    "tm": 7138172,
    "source": {
      "script": 53,
      "start": 11656,
      "end": 11711,
      "positions": "C0O11656C1O11677C5O11677C9O11694C14O11710",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/streams/destroy.js:38:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 384,
    "tm": 7138253,
    "source": {
      "script": 62,
      "start": 1164,
      "end": 1678,
      "positions": "C0O1164C1O1180C7O1191C9O1205C13O1215C19O1242C25O1250C44O1250C51O1306C55O1316C61O1331C67O1356C71O1361C78O1389C82O1406C88O1414C107O1414C114O1481C120O1489C136O1489C144O1539C148O1556C154O1564C170O1564C176O1600C180O1600C186O1630C192O1638C208O1638C215O1677",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "zlibBufferOnEnd zlib.js:122:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 385,
    "tm": 7138807,
    "source": {
      "script": 53,
      "start": 4167,
      "end": 4613,
      "positions": "C0O4167C1O4208C9O4217C11O4214C16O4236C22O4242C31O4289C38O4295C43O4309C49O4322C58O4322C67O4365C73O4391C81O4398C87O4410C94O4416C98O4423C104O4441C110O4423C118O4463C124O4463C128O4475C132O4494C138O4494C145O4520C151O4537C168O4556C178O4537C186O4596C195O4596C202O4612",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "concat buffer.js:511:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 386,
    "tm": 7138987,
    "source": {
      "script": 14,
      "start": 14866,
      "end": 16081,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:76:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 233,
    "tm": 7139159,
    "source": {
      "script": 15,
      "start": 2112,
      "end": 2708,
      "positions": "C0O2112C39O2255C43O2260C49O2285C55O2327C73O2333C78O2327C79O2398C84O2410C90O2410C97O2439C115O2445C120O2439C121O2510C133O2549C148O2562C162O2516C167O2510C168O2589C170O2599C177O2614C182O2630C194O2669C209O2682C223O2636C228O2630C230O2707",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInt32 internal/validators.js:18:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 234,
    "tm": 7139244,
    "source": {
      "script": 15,
      "start": 393,
      "end": 438,
      "positions": "C0O393C1O406C3O430C6O419C9O435",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:49:29",
    "type": "JS",
    "kind": "Opt",
    "func": 313,
    "tm": 7139435,
    "source": {
      "script": 21,
      "start": 1159,
      "end": 1219,
      "positions": "C0O1159C46O1202C136O1200C158O1218C169O1159C213O1202",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alignPool buffer.js:134:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 230,
    "tm": 7139527,
    "source": {
      "script": 14,
      "start": 3662,
      "end": 3772,
      "positions": "C0O3662C1O3698C5O3713C10O3727C21O3738C27O3751C37O3761C44O3771",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_copy buffer.js:176:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 387,
    "tm": 7139720,
    "source": {
      "script": 14,
      "start": 5032,
      "end": 6791,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toInteger buffer.js:166:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 388,
    "tm": 7140029,
    "source": {
      "script": 14,
      "start": 4802,
      "end": 5014,
      "positions": "C0O4802C1O4823C3O4827C7O4834C12O4846C18O4846C25O4870C30O4877C34O4867C39O4909C44O4916C48O4906C53O4941C55O4952C61O4957C72O4969C76O4974C82O4974C87O4984C88O4993C90O5011",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:7:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 389,
    "tm": 7140157,
    "source": {
      "script": 52,
      "start": 174,
      "end": 193,
      "positions": "C0O174C2O192",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitCloseNT internal/streams/destroy.js:64:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 390,
    "tm": 7140343,
    "source": {
      "script": 62,
      "start": 1822,
      "end": 2006,
      "positions": "C0O1822C1O1843C7O1867C13O1882C19O1898C20O1905C21O1918C27O1942C33O1957C39O1973C40O1980C41O1989C51O1989C57O2005",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array internal/util/types.js:19:22",
    "type": "JS",
    "kind": "Opt",
    "func": 201,
    "tm": 7172694,
    "source": {
      "script": 12,
      "start": 551,
      "end": 626,
      "positions": "C0O551C46O1127I0C237O623C267O551",
      "inlined": "F0O571",
      "fns": [
        60
      ]
    }
  },
  {
    "name": "Transform.push _stream_transform.js:148:36",
    "type": "JS",
    "kind": "Opt",
    "func": 353,
    "tm": 7190013,
    "source": {
      "script": 54,
      "start": 5622,
      "end": 5752,
      "positions": "C0O5622C50O5650C87O5680C95O5721C125O8054I0C168O5749C175O5622",
      "inlined": "F0O5721",
      "fns": [
        354
      ]
    }
  },
  {
    "name": "createPool buffer.js:127:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 44,
    "tm": 7190436,
    "source": {
      "script": 14,
      "start": 3516,
      "end": 3625,
      "positions": "C0O3516C1O3524C5O3542C13O3533C19O3555C25O3586C29O3567C35O3595C43O3565C49O3607C54O3618C61O3624",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get _stream_duplex.js:141:6",
    "type": "JS",
    "kind": "Opt",
    "func": 350,
    "tm": 7226525,
    "source": {
      "script": 55,
      "start": 4534,
      "end": 4739,
      "positions": "C0O4534C50O4553C87O4691C154O4709C166O4734C173O4534C213O4691",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "destroy internal/streams/destroy.js:5:17",
    "type": "JS",
    "kind": "Opt",
    "func": 382,
    "tm": 7241285,
    "source": {
      "script": 62,
      "start": 168,
      "end": 1701,
      "positions": "C0O168C167O214C201O257C208O302C212O345C216O450C315O361C381O386C442O412C519O450C528O738C538O478C550O429C562O1151C588O962C599O1119C603O18038I2C680O18080I2C746O18107I2C794O1180I1C802O1539I1C904O1180I1C914O1191I1C990O1205I1C994O1215I1C1010O1539I1C1020O1638I1C1152O2692I3C1189O2808I3C1363O2910I3C1507O2927I3C1554O3743I4C1568O3165I5C1576O3236I3C1589O1200I6C1612O10237I7C1655O10252I7C1660O10716I11C1665O10838I11C1679O10870I11C1699O3388I3C1709O3414I3C1716O3455I3C1723O3476I3C1758O3491I3C1819O11781I8C1829O3509I3C1853O3226I10C1857O3231I10C1864O3801I9C1898O3975I9C1936O3973I9C1985O3956I9C2030O4019I9C2034O3290I12C2038O3300I12C2042O3305I12C2109O3339I12C2113O3344I12C2120O3305I12C2166O3327I12C2179O3532I3C2194O1686C2202O1698C2207O1564I1C2315O168C2385O450C2580O361C2760O386C2932O412C3056O18038I2C3164O1539I1C3261O1191I1C3478O2808I3C3601O3305I12",
      "inlined": "F0O1142F1O11694I0F2O11677I0F3O1638I1F4O3236I3F5O3748I4F6O3252I3F7O3298I3F8O3509I3F9O3602I3F10O3801I9F11O3338I3F12O4024I9",
      "fns": [
        383,
        384,
        381,
        310,
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        315,
        319
      ]
    }
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "type": "JS",
    "kind": "Opt",
    "func": 334,
    "tm": 7249449,
    "source": {
      "script": 21,
      "start": 1567,
      "end": 2527,
      "positions": "C0O1567C64O1588C196O1618C206O4079I5C210O3400I7C214O3404I7C258O3424I7C268O3500I7C272O3545I7C276O3550I7C283O3500I7C298O3530I7C317O3165I6C325O4131I5C338O4149I5C352O4243I5C396O1656C408O1610C478O1598C491O1656C527O5590I12C604O1706C610O5550I12C620O5559I12C644O5590I12C688O5624I12C713O5559I11C723O5590I11C820O5624I11C842O14264I10C845O14294I10C865O14328I10C883O14298I10C891O14447I10C916O14430I10C941O14509I10C950O14531I10C956O14514I10C971O14571I10C977O14584I10C980O14626I10C985O14673I10C991O13275I9C1001O1780C1005O1808C1019O1930C1104O1974C1122O1961C1200O2021C1218O2030C1274O2008C1290O2204C1308O11934I0C1318O2279C1335O2311C1355O5559I14C1365O5590I14C1409O5624I14C1432O13431I8C1442O14834I13C1446O14869I13C1456O14925I13C1493O14954I13C1515O14974I13C1536O15125I13C1550O15199I13C1562O15196I13C1595O15168I13C1600O15286I13C1610O15274I13C1626O15246I13C1632O15327I13C1671O2383C1716O3743I1C1730O3165I2C1738O2419C1747O2432C1856O1200I3C1880O1545I4C1885O2526C1896O5648I12C1908O5648I11C1920O2204C1932O5648I14C1949O15065I13C1961O13441I8C1979O2311C2034O2077C2046O2142C2058O1841C2070O13285I9C2082O14348I10C2094O1567C2131O1588C2226O1610C2412O1598C2525O2432",
      "inlined": "F0O2279F1O2419F2O3748I1F3O2464F4O2495F5O1618F2O4131I5F6O4108I5F7O2351F8O1682F9O13200I9F10O13144I9F10O13104I9F11O13472I8F10O13359I8",
      "fns": [
        344,
        311,
        312,
        313,
        348,
        335,
        336,
        345,
        337,
        339,
        338,
        346
      ]
    }
  },
  {
    "name": "isEmpty internal/fixed_queue.js:91:10",
    "type": "JS",
    "kind": "Opt",
    "func": 311,
    "tm": 7265438,
    "source": {
      "script": 23,
      "start": 3721,
      "end": 3763,
      "positions": "C0O3721C50O3743C87O3165I0C95O3758C120O3721",
      "inlined": "F0O3748",
      "fns": [
        312
      ]
    }
  },
  {
    "name": "push internal/fixed_queue.js:95:7",
    "type": "JS",
    "kind": "Opt",
    "func": 317,
    "tm": 7306283,
    "source": {
      "script": 23,
      "start": 3773,
      "end": 4040,
      "positions": "C0O3773C50O3796C87O3226I0C91O3240I0C95O3226I0C99O3231I0C106O3801C133O3975C174O3973C223O3956C281O4019C285O3290I1C289O3300I1C293O3305I1C360O3339I1C364O3344I1C371O3305I1C417O3327I1C425O4039C436O3773C476O3305I1",
      "inlined": "F0O3801F1O4024",
      "fns": [
        318,
        319
      ]
    }
  },
  {
    "name": "_copy buffer.js:176:15",
    "type": "JS",
    "kind": "Opt",
    "func": 387,
    "tm": 7311353,
    "source": {
      "script": 14,
      "start": 5032,
      "end": 6791,
      "positions": "C0O5032C50O1127I4C260O5096C280O5123C333O5129C345O1127I3C543O5207C556O5234C606O5240C618O5315C632O4827I2C639O4906I2C648O4827I2C658O4846I2C708O4867I2C733O4906I2C758O4952I2C779O5449C798O5467C818O5535C832O5621C844O5755C858O5847C870O5810C908O5999C938O5989C958O6021C974O6292C983O6276C992O6747C1044O6788C1059O6336C1071O6049C1075O5032C1153O4952I2",
      "inlined": "F0O5096F0O5207F1O5401F2O571I1F2O571I0",
      "fns": [
        201,
        388,
        60
      ]
    }
  },
  {
    "name": "emit events.js:160:44",
    "type": "JS",
    "kind": "Opt",
    "func": 146,
    "tm": 7333889,
    "source": {
      "script": 10,
      "start": 5009,
      "end": 6677,
      "positions": "C0O5009C50O5050C86O5089C124O5050C145O5101C155O5132C165O5161C177O5191C187O5223C198O5285C208O6349C238O6362C248O6520C258O6413C294O6455C335O6520C369O6551C414O6600C440O6582C453O6634C523O6619C576O6609C583O6619C621O6600C649O6582C662O6634C712O6674C721O6407C730O5327C742O5009C790O6582",
      "inlined": "",
      "fns": []
    },
    "deopt": {
      "tm": 11111217,
      "inliningId": -1,
      "scriptOffset": 5050,
      "posText": "<events.js:161:23>",
      "reason": "wrong instance type",
      "bailoutType": "eager"
    }
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "type": "JS",
    "kind": "Opt",
    "func": 310,
    "tm": 7340967,
    "source": {
      "script": 21,
      "start": 2692,
      "end": 3622,
      "positions
      "inlined": "F0O3236F1O3748I0F2O3252F3O3298F4O3509F5O3602F6O3801I5F7O3338F8O4024I5",
      "fns": [
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        315,
        319
      ]
    }
  },
  {
    "name": "arrayClone events.js:484:20",
    "type": "JS",
    "kind": "Opt",
    "func": 376,
    "tm": 7399162,
    "source": {
      "script": 10,
      "start": 14546,
      "end": 14659,
      "positions": "C0O14546C50O14573C288O14608C297O14590C310O14636C367O14631C416O14615C420O14636C445O14631C472O14608C481O14590C495O14656C505O14546C545O14573C688O14590",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readableAddChunk _stream_readable.js:231:26",
    "type": "JS",
    "kind": "Opt",
    "func": 355,
    "tm": 7417249,
    "source": {
      "script": 56,
      "start": 8319,
      "end": 10770,
      "positions
      "inlined": "F0O8362F1O10311F2O9225F3O11308I2F4O11219I1F5O10928I1F6O571I3F7O9135F0O17676I7",
      "fns": [
        186,
        357,
        356,
        201,
        359,
        146,
        60,
        372
      ]
    }
  },
  {
    "name": "processCallback zlib.js:497:25",
    "type": "JS",
    "kind": "Opt",
    "func": 349,
    "tm": 7463159,
    "source": {
      "script": 53,
      "start": 15468,
      "end": 17854,
      "positions
      "inlined": "F0O16286F1O5721I0F2O16198F3O32203I2F4O32099I2F4O32038I2F5O16380F5O15873",
      "fns": [
        353,
        354,
        351,
        46,
        352,
        350
      ]
    }
  },
  {
    "name": "concat buffer.js:511:32",
    "type": "JS",
    "kind": "Opt",
    "func": 386,
    "tm": 7466064,
    "source": {
      "script": 14,
      "start": 14866,
      "end": 16081,
      "positions
      "inlined": "F0O15303F1O15415F2O15677F1O5096I2F1O5207I2F3O571I1F4O5401I2F3O571I4F3O571I3F5O15235F5O10668I0",
      "fns": [
        227,
        201,
        387,
        60,
        388,
        198
      ]
    }
  },
  {
    "name": "removeListener events.js:329:28",
    "type": "JS",
    "kind": "Opt",
    "func": 379,
    "tm": 7535191,
    "source": {
      "script": 10,
      "start": 10228,
      "end": 11649,
      "positions": "C0O10228C50O2121I0C87O10339C123O10355C137O10431C174O10446C184O10510C219O10531C239O10540C253O10829C276O10927C284O10934C294O10902C307O10966C325O10970C360O10941C365O10994C400O10941C403O10994C416O10934C425O10902C438O10966C455O10970C511O11059C582O11164C596O11217C606O11276C630O11377C642O11330C654O11240C780O11435C790O11442C804O11479C822O11473C857O11506C908O11552C925O11192C936O11642C942O10565C954O10491C960O10402C966O2170I0C978O10228C1018O10902C1231O11240",
      "inlined": "F0O10285",
      "fns": [
        141
      ]
    }
  },
  {
    "name": "endReadable _stream_readable.js:1166:21",
    "type": "JS",
    "kind": "Opt",
    "func": 374,
    "tm": 7564480,
    "source": {
      "script": 56,
      "start": 37073,
      "end": 37282,
      "positions
      "inlined": "F0O37235F1O3236I0F2O3748I1F3O3252I0F4O3298I0F5O3509I0F6O3602I0F7O3801I6F8O3338I0F9O37129F10O4024I6",
      "fns": [
        310,
        311,
        312,
        313,
        314,
        316,
        317,
        318,
        315,
        186,
        319
      ]
    }
  },
  {
    "name": "emitCloseNT internal/streams/destroy.js:64:21",
    "type": "JS",
    "kind": "Opt",
    "func": 390,
    "tm": 7625399,
    "source": {
      "script": 62,
      "start": 1822,
      "end": 2006,
      "positions": "C0O1822C50O1843C88O1882C156O1918C160O1957C228O5089I0C232O5101I0C242O6349I0C295O6362I0C305O6413I0C351O6455I0C387O6520I0C421O6551I0C466O6600I0C492O6582I0C505O6634I0C575O6619I0C624O6609I0C631O6619I0C664O6600I0C692O6582I0C705O6634I0C752O2005C763O1980C769O1905C775O1822C815O1882C859O1957C915O6582I0",
      "inlined": "F0O1989",
      "fns": [
        146
      ]
    }
  },
  {
    "name": "Readable.removeListener _stream_readable.js:896:45",
    "type": "JS",
    "kind": "Opt",
    "func": 378,
    "tm": 7650422,
    "source": {
      "script": 56,
      "start": 29340,
      "end": 29860,
      "positions": "C0O29340C50O29398C80O2121I1C117O10339I0C153O10355I0C167O10431I0C223O10446I0C233O10510I0C268O10531I0C288O10540I0C302O10829I0C325O10927I0C333O10934I0C343O10902I0C356O10966I0C374O10970I0C409O10941I0C414O10994I0C448O10941I0C451O10994I0C464O10934I0C473O10902I0C486O10966I0C503O10970I0C559O11059I0C630O11164I0C644O11217I0C654O11276I0C678O11377I0C690O11330I0C702O11240I0C828O11435I0C838O11442I0C852O11479I0C870O11473I0C924O11506I0C991O11552I0C1008O10565I0C1020O29430C1075O29857C1086O29795C1098O2170I1C1114O29340C1154O10902I0C1367O11240I0",
      "inlined": "F0O29398F1O10285I0",
      "fns": [
        379,
        141
      ]
    }
  },
  {
    "name": "_close zlib.js:574:16",
    "type": "JS",
    "kind": "Opt",
    "func": 381,
    "tm": 7652295,
    "source": {
      "script": 53,
      "start": 17873,
      "end": 18117,
      "positions": "C0O17873C50O17897C130O18038C234O18080C305O18107C337O18116C348O18059C354O17924C370O17873C410O17897C457O18038",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alignPool buffer.js:134:19",
    "type": "JS",
    "kind": "Opt",
    "func": 230,
    "tm": 7692604,
    "source": {
      "script": 14,
      "start": 3662,
      "end": 3772,
      "positions": "C0O3662C50O3698C77O3713C99O3727C142O3738C163O3751C212O3761C238O3771C249O3662C300O3761C350O3751C397O3738C444O3727C491O3698",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "zlibBufferOnData zlib.js:109:26",
    "type": "JS",
    "kind": "Opt",
    "func": 358,
    "tm": 7699038,
    "source": {
      "script": 53,
      "start": 3914,
      "end": 4047,
      "positions": "C0O3914C50O3937C151O4001C299O3951C409O3967C434O3964C461O4037C511O4028C522O4046C533O3914C573O3937C641O4001",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ZlibBase.close zlib.js:360:36",
    "type": "JS",
    "kind": "Opt",
    "func": 380,
    "tm": 7704172,
    "source": {
      "script": 53,
      "start": 11552,
      "end": 11613,
      "positions": "C0O11552C50O17897I2C130O18038I2C242O18080I2C319O18107I2C406O168I0C490O214I0C494O257I0C502O302I0C506O345I0C510O361I0C579O386I0C645O962I0C657O1119I0C661O18038I4C731O18080I4C796O18107I4C828O1180I3C836O1539I3C913O1638I3C1055O11612C1066O1564I3C1137O17924I2C1149O11552C1189O17897I2C1236O18038I2C1383O361I0C1521O386I0C1657O18038I4C1747O1539I3",
      "inlined": "F0O11600F1O1142I0F2O11568F3O11694I1F2O11677I1",
      "fns": [
        382,
        383,
        381,
        384
      ]
    }
  },
  {
    "name": "Readable.read _stream_readable.js:399:35",
    "type": "JS",
    "kind": "Opt",
    "func": 341,
    "tm": 7723445,
    "source": {
      "script": 56,
      "start": 13396,
      "end": 17631,
      "positions
      "inlined": "F0O14495F1O13405F1O16068F1O15862F2O14653F3O37235I4F4O3236I5F5O3748I6F6O3298I5F7O3509I5F8O3602I5F9O3801I10",
      "fns": [
        342,
        186,
        374,
        310,
        311,
        312,
        314,
        316,
        317,
        318
      ]
    }
  },
  {
    "name": "zlibBufferOnEnd zlib.js:122:25",
    "type": "JS",
    "kind": "Opt",
    "func": 385,
    "tm": 7802033,
    "source": {
      "script": 53,
      "start": 4167,
      "end": 4613,
      "positions
      "inlined": "F0O4463F1O4423F2O15303I1F3O15415I1F4O15677I1F3O5096I4F3O5207I4F5O571I3F5O571I6F5O571I5",
      "fns": [
        380,
        386,
        227,
        201,
        387,
        60
      ]
    }
  },
  {
    "name": "allocate buffer.js:370:18",
    "type": "JS",
    "kind": "Opt",
    "func": 229,
    "tm": 7835978,
    "source": {
      "script": 14,
      "start": 11386,
      "end": 11714,
      "positions
      "inlined": "F0O11568F1O11686F0O3427I1F2O11643",
      "fns": [
        46,
        45,
        230
      ]
    }
  },
  {
    "name": "emitReadable_ _stream_readable.js:570:23",
    "type": "JS",
    "kind": "Opt",
    "func": 373,
    "tm": 7840371,
    "source": {
      "script": 56,
      "start": 19046,
      "end": 19678,
      "positions
      "inlined": "F0O19662F1O19240F2O19100F2O32357I0",
      "fns": [
        343,
        146,
        186
      ]
    }
  },
  {
    "name": "onceWrapper events.js:294:21",
    "type": "JS",
    "kind": "Opt",
    "func": 377,
    "tm": 8005619,
    "source": {
      "script": 10,
      "start": 9181,
      "end": 9433,
      "positions
      "inlined": "F0O9225F1O29398I0F2O10285I1",
      "fns": [
        378,
        379,
        141
      ]
    }
  },
  {
    "name": "endReadableNT _stream_readable.js:1176:23",
    "type": "JS",
    "kind": "Opt",
    "func": 375,
    "tm": 8020528,
    "source": {
      "script": 56,
      "start": 37308,
      "end": 37887,
      "positions": "C0O37308C50O37358C88O37376C92O1740I1C126O1915I1C136O1942I1C148O37450C214O37477C228O37508C236O37537C278O5089I0C282O5101I0C292O6349I0C345O6362I0C355O6413I0C401O6455I0C437O6520I0C471O6551I0C516O6600I0C542O6582I0C555O6634I0C625O6619I0C672O6609I0C679O6619I0C712O6600I0C740O6582I0C753O6634I0C800O37588C892O37756C904O37886C915O1884I1C927O37308C967O37450C1055O6582I0C1163O37588C1227O1740I1",
      "inlined": "F0O37558F1O37329",
      "fns": [
        146,
        186
      ]
    }
  },
  {
    "name": "toInteger buffer.js:166:19",
    "type": "JS",
    "kind": "Opt",
    "func": 388,
    "tm": 8076319,
    "source": {
      "script": 14,
      "start": 4802,
      "end": 5014,
      "positions": "C0O4802C50O4827C58O4906C66O4827C79O4846C129O4867C154O4906C179O4952C188O4984C202O5011C208O4802C248O4952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " internal/validators.js:76:3",
    "type": "JS",
    "kind": "Opt",
    "func": 233,
    "tm": 8297486,
    "source": {
      "script": 15,
      "start": 2112,
      "end": 2708,
      "positions": "C0O2112C119O430I0C133O2599C151O2614C174O2707C194O2669C232O2112",
      "inlined": "F0O2260",
      "fns": [
        234
      ]
    }
  },
  {
    "name": "done _stream_transform.js:205:14",
    "type": "JS",
    "kind": "Opt",
    "func": 371,
    "tm": 8413265,
    "source": {
      "script": 54,
      "start": 7438,
      "end": 7905,
      "positions": "C0O7438C50O7462C129O7598C145O7513C175O7706C209O7721C223O7740C235O7791C239O7807C305O7832C317O5680I0C325O5721I0C355O8054I1C400O7902C407O7598C453O7489C469O7438C509O7462C554O7807",
      "inlined": "F0O7891F1O5721I0",
      "fns": [
        353,
        354
      ]
    }
  },
  {
    "name": " _stream_transform.js:140:17",
    "type": "JS",
    "kind": "Opt",
    "func": 370,
    "tm": 8762575,
    "source": {
      "script": 54,
      "start": 5481,
      "end": 5532,
      "positions": "C0O5481C54O5504C86O7462I0C173O7706I0C185O7513I0C215O7706I0C249O7721I0C263O7740I0C275O7791I0C279O7807I0C344O7832I0C356O5680I1C364O5721I1C394O8054I2C444O5531C455O7598I0C501O7489I0C513O5481C553O7462I0C651O7807I0",
      "inlined": "F0O5504F1O7891I0F2O5721I1",
      "fns": [
        371,
        353,
        354
      ]
    }
  },
  {
    "name": "maybeReadMore_ _stream_readable.js:605:24",
    "type": "JS",
    "kind": "Opt",
    "func": 369,
    "tm": 9954705,
    "source": {
      "script": 56,
      "start": 20225,
      "end": 22033,
      "positions": "C0O20225C50O21688C153O21706C223O21732C227O21747C231O21739C238O21918C245O21739C258O21782C270O21674C283O21853C341O21896C410O21928C434O22022C445O22032C456O20225C496O21688C583O21706C673O21674",
      "inlined": "",
      "fns": []
    }
  }
],
  "functions": [
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "codes": [
      1573
    ]
  },
  {
    "name": " internal/bootstrap/loaders.js:1:1",
    "codes": [
      1574
    ]
  },
  {
    "name": "SafeSet internal/per_context/primordials.js:73:3",
    "codes": [
      1575
    ]
  },
  {
    "name": "internalBinding internal/bootstrap/loaders.js:128:45",
    "codes": [
      1576
    ]
  },
  {
    "name": "NativeModule internal/bootstrap/loaders.js:149:22",
    "codes": [
      1577
    ]
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "codes": [
      1578
    ]
  },
  {
    "name": " internal/bootstrap/node.js:1:1",
    "codes": [
      1579
    ]
  },
  {
    "name": "setupPrepareStackTrace internal/bootstrap/node.js:300:32",
    "codes": [
      1580
    ]
  },
  {
    "name": "nativeModuleRequire internal/bootstrap/loaders.js:183:29",
    "codes": [
      1581
    ]
  },
  {
    "name": "NativeModule.compile internal/bootstrap/loaders.js:272:42",
    "codes": [
      1582
    ]
  },
  {
    "name": " internal/errors.js:1:1",
    "codes": [
      1583
    ]
  },
  {
    "name": " internal/errors.js:1:1",
    "codes": [
      1584
    ]
  },
  {
    "name": "E internal/errors.js:286:11",
    "codes": [
      1585
    ]
  },
  {
    "name": "makeNodeErrorWithCode internal/errors.js:212:31",
    "codes": [
      1586
    ]
  },
  {
    "name": " internal/errors.js:297:26",
    "codes": [
      1587
    ]
  },
  {
    "name": "makeSystemErrorWithCode internal/errors.js:204:33",
    "codes": [
      1588
    ]
  },
  {
    "name": " internal/util.js:1:1",
    "codes": [
      1589
    ]
  },
  {
    "name": " internal/util.js:1:1",
    "codes": [
      1590
    ]
  },
  {
    "name": "setupProcessObject internal/bootstrap/node.js:319:28",
    "codes": [
      1591
    ]
  },
  {
    "name": " events.js:1:1",
    "codes": [
      1592
    ]
  },
  {
    "name": " events.js:1:1",
    "codes": [
      1593
    ]
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "codes": [
      1594
    ]
  },
  {
    "name": " internal/util/inspect.js:1:1",
    "codes": [
      1595
    ]
  },
  {
    "name": " internal/util/types.js:1:1",
    "codes": [
      1596
    ]
  },
  {
    "name": " internal/util/types.js:1:1",
    "codes": [
      1597
    ]
  },
  {
    "name": "uncurryThis internal/per_context/primordials.js:23:21",
    "codes": [
      1598
    ]
  },
  {
    "name": " internal/assert.js:1:1",
    "codes": [
      1599
    ]
  },
  {
    "name": " internal/assert.js:1:1",
    "codes": [
      1600
    ]
  },
  {
    "name": " internal/util/inspect.js:97:45",
    "codes": [
      1601
    ]
  },
  {
    "name": "EventEmitter events.js:43:22",
    "codes": [
      1603
    ]
  },
  {
    "name": "EventEmitter.init events.js:83:29",
    "codes": [
      1604
    ]
  },
  {
    "name": "setupGlobalProxy internal/bootstrap/node.js:364:26",
    "codes": [
      1605
    ]
  },
  {
    "name": "makeGetter internal/bootstrap/node.js:372:22",
    "codes": [
      1606
    ]
  },
  {
    "name": "deprecate internal/util.js:46:19",
    "codes": [
      1607
    ]
  },
  {
    "name": "makeSetter internal/bootstrap/node.js:378:22",
    "codes": [
      1608
    ]
  },
  {
    "name": "setupBuffer internal/bootstrap/node.js:403:21",
    "codes": [
      1609
    ]
  },
  {
    "name": " buffer.js:1:1",
    "codes": [
      1610
    ]
  },
  {
    "name": " buffer.js:1:1",
    "codes": [
      1611
    ]
  },
  {
    "name": " internal/validators.js:1:1",
    "codes": [
      1612
    ]
  },
  {
    "name": " internal/validators.js:1:1",
    "codes": [
      1613
    ]
  },
  {
    "name": "hideStackFrames internal/errors.js:242:25",
    "codes": [
      1614
    ]
  },
  {
    "name": " internal/buffer.js:1:1",
    "codes": [
      1615
    ]
  },
  {
    "name": " internal/buffer.js:1:1",
    "codes": [
      1616
    ]
  },
  {
    "name": "addBufferPrototypeMethods internal/buffer.js:942:35",
    "codes": [
      1617
    ]
  },
  {
    "name": "createPool buffer.js:127:20",
    "codes": [
      1618,
      2063
    ]
  },
  {
    "name": "createUnsafeBuffer buffer.js:118:28",
    "codes": [
      1619,
      1926
    ]
  },
  {
    "name": "FastBuffer internal/buffer.js:940:1",
    "codes": [
      1620,
      1925
    ]
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "codes": [
      1621
    ]
  },
  {
    "name": " internal/process/per_thread.js:1:1",
    "codes": [
      1622
    ]
  },
  {
    "name": " internal/process/main_thread_only.js:1:1",
    "codes": [
      1623
    ]
  },
  {
    "name": " internal/process/main_thread_only.js:1:1",
    "codes": [
      1624
    ]
  },
  {
    "name": "wrapProcessMethods internal/process/main_thread_only.js:22:28",
    "codes": [
      1625
    ]
  },
  {
    "name": "wrapProcessMethods internal/process/per_thread.js:33:28",
    "codes": [
      1626
    ]
  },
  {
    "name": " internal/process/stdio.js:1:1",
    "codes": [
      1627
    ]
  },
  {
    "name": " internal/process/stdio.js:1:1",
    "codes": [
      1628
    ]
  },
  {
    "name": "getMainThreadStdio internal/process/stdio.js:21:28",
    "codes": [
      1629
    ]
  },
  {
    "name": "setupProcessStdio internal/bootstrap/node.js:339:27",
    "codes": [
      1630
    ]
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "codes": [
      1631
    ]
  },
  {
    "name": " internal/async_hooks.js:1:1",
    "codes": [
      1632
    ]
  },
  {
    "name": "emitHookFactory internal/async_hooks.js:182:25",
    "codes": [
      1633
    ]
  },
  {
    "name": " internal/per_context/primordials.js:24:10",
    "codes": [
      1634,
      2015
    ]
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "codes": [
      1635
    ]
  },
  {
    "name": " internal/process/task_queues.js:1:1",
    "codes": [
      1636
    ]
  },
  {
    "name": " internal/process/promises.js:1:1",
    "codes": [
      1637
    ]
  },
  {
    "name": " internal/process/promises.js:1:1",
    "codes": [
      1638
    ]
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "codes": [
      1639
    ]
  },
  {
    "name": " internal/fixed_queue.js:1:1",
    "codes": [
      1640
    ]
  },
  {
    "name": "FixedQueue internal/fixed_queue.js:87:14",
    "codes": [
      1641
    ]
  },
  {
    "name": "FixedCircularBuffer internal/fixed_queue.js:56:14",
    "codes": [
      1642,
      1923,
      1931,
      1941,
      1946,
      1948,
      1949,
      1951,
      1952,
      1953,
      1954,
      1955,
      1956,
      1957,
      1958
    ]
  },
  {
    "name": "createGlobalConsole internal/bootstrap/node.js:420:29",
    "codes": [
      1643
    ]
  },
  {
    "name": " internal/console/global.js:1:1",
    "codes": [
      1644
    ]
  },
  {
    "name": " internal/console/global.js:1:1",
    "codes": [
      1645
    ]
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "codes": [
      1646
    ]
  },
  {
    "name": " internal/console/constructor.js:1:1",
    "codes": [
      1647
    ]
  },
  {
    "name": "Console.<computed> internal/console/constructor.js:141:47",
    "codes": [
      1648
    ]
  },
  {
    "name": "Console.<computed> internal/console/constructor.js:166:46",
    "codes": [
      1649
    ]
  },
  {
    "name": "createWriteErrorHandler internal/console/constructor.js:190:33",
    "codes": [
      1650
    ]
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "codes": [
      1651
    ]
  },
  {
    "name": " internal/util/inspector.js:1:1",
    "codes": [
      1652
    ]
  },
  {
    "name": "set consoleFromVM internal/util/inspector.js:63:20",
    "codes": [
      1653
    ]
  },
  {
    "name": "wrapConsole internal/util/inspector.js:37:21",
    "codes": [
      1654
    ]
  },
  {
    "name": "exposeNamespace internal/bootstrap/node.js:438:25",
    "codes": [
      1655
    ]
  },
  {
    "name": " internal/url.js:1:1",
    "codes": [
      1656
    ]
  },
  {
    "name": " internal/url.js:1:1",
    "codes": [
      1657
    ]
  },
  {
    "name": " internal/querystring.js:1:1",
    "codes": [
      1658
    ]
  },
  {
    "name": " internal/querystring.js:1:1",
    "codes": [
      1659
    ]
  },
  {
    "name": " internal/constants.js:1:1",
    "codes": [
      1660
    ]
  },
  {
    "name": " internal/constants.js:1:1",
    "codes": [
      1661
    ]
  },
  {
    "name": " path.js:1:1",
    "codes": [
      1662
    ]
  },
  {
    "name": " path.js:1:1",
    "codes": [
      1663
    ]
  },
  {
    "name": "defineIDLClass internal/url.js:847:24",
    "codes": [
      1664
    ]
  },
  {
    "name": "exposeInterface internal/bootstrap/node.js:448:25",
    "codes": [
      1665
    ]
  },
  {
    "name": " internal/encoding.js:1:1",
    "codes": [
      1666
    ]
  },
  {
    "name": " internal/encoding.js:1:1",
    "codes": [
      1667
    ]
  },
  {
    "name": "makeTextDecoderICU internal/encoding.js:366:28",
    "codes": [
      1668
    ]
  },
  {
    "name": " timers.js:1:1",
    "codes": [
      1669
    ]
  },
  {
    "name": " timers.js:1:1",
    "codes": [
      1670
    ]
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "codes": [
      1671
    ]
  },
  {
    "name": " internal/linkedlist.js:1:1",
    "codes": [
      1672
    ]
  },
  {
    "name": " internal/timers.js:1:1",
    "codes": [
      1673
    ]
  },
  {
    "name": " internal/timers.js:1:1",
    "codes": [
      1674
    ]
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "codes": [
      1675
    ]
  },
  {
    "name": " internal/priority_queue.js:1:1",
    "codes": [
      1676
    ]
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "codes": [
      1677
    ]
  },
  {
    "name": " internal/util/debuglog.js:1:1",
    "codes": [
      1678
    ]
  },
  {
    "name": "debuglog internal/util/debuglog.js:55:18",
    "codes": [
      1679
    ]
  },
  {
    "name": "ImmediateList internal/timers.js:242:23",
    "codes": [
      1680
    ]
  },
  {
    "name": "PriorityQueue internal/priority_queue.js:15:14",
    "codes": [
      1681
    ]
  },
  {
    "name": "defineOperation internal/bootstrap/node.js:458:25",
    "codes": [
      1682
    ]
  },
  {
    "name": " internal/process/execution.js:1:1",
    "codes": [
      1683
    ]
  },
  {
    "name": " internal/process/execution.js:1:1",
    "codes": [
      1684
    ]
  },
  {
    "name": "createOnGlobalUncaughtException internal/process/execution.js:122:41",
    "codes": [
      1685
    ]
  },
  {
    "name": " internal/process/warning.js:1:1",
    "codes": [
      1686
    ]
  },
  {
    "name": " internal/process/warning.js:1:1",
    "codes": [
      1687
    ]
  },
  {
    "name": "setupTaskQueue internal/process/task_queues.js:172:17",
    "codes": [
      1688
    ]
  },
  {
    "name": "listenForRejections internal/process/promises.js:247:29",
    "codes": [
      1689
    ]
  },
  {
    "name": "getTimerCallbacks internal/timers.js:390:27",
    "codes": [
      1690
    ]
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "codes": [
      1691
    ]
  },
  {
    "name": " internal/main/run_main_module.js:1:1",
    "codes": [
      1692
    ]
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "codes": [
      1693
    ]
  },
  {
    "name": " internal/bootstrap/pre_execution.js:1:1",
    "codes": [
      1694
    ]
  },
  {
    "name": " internal/options.js:1:1",
    "codes": [
      1695
    ]
  },
  {
    "name": " internal/options.js:1:1",
    "codes": [
      1696
    ]
  },
  {
    "name": "prepareMainThreadExecution internal/bootstrap/pre_execution.js:9:36",
    "codes": [
      1697
    ]
  },
  {
    "name": "patchProcessObject internal/bootstrap/pre_execution.js:66:28",
    "codes": [
      1698
    ]
  },
  {
    "name": "resolve path.js:130:10",
    "codes": [
      1699
    ]
  },
  {
    "name": "validateString internal/validators.js:110:24",
    "codes": [
      1700
    ]
  },
  {
    "name": "isPathSeparator path.js:38:25",
    "codes": [
      1701
    ]
  },
  {
    "name": "isWindowsDeviceRoot path.js:46:29",
    "codes": [
      1702
    ]
  },
  {
    "name": "cwd internal/process/main_thread_only.js:41:15",
    "codes": [
      1703
    ]
  },
  {
    "name": "normalizeString path.js:52:25",
    "codes": [
      1704
    ]
  },
  {
    "name": "addReadOnlyProcessAlias internal/bootstrap/pre_execution.js:103:33",
    "codes": [
      1705
    ]
  },
  {
    "name": "getOptionValue internal/options.js:6:24",
    "codes": [
      1706
    ]
  },
  {
    "name": "setupTraceCategoryState internal/bootstrap/pre_execution.js:207:33",
    "codes": [
      1707
    ]
  },
  {
    "name": "toggleTraceCategoryState internal/process/per_thread.js:337:34",
    "codes": [
      1708
    ]
  },
  {
    "name": "setupInspectorHooks internal/bootstrap/pre_execution.js:213:29",
    "codes": [
      1709
    ]
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "codes": [
      1710
    ]
  },
  {
    "name": " internal/inspector_async_hook.js:1:1",
    "codes": [
      1711
    ]
  },
  {
    "name": "setupWarningHandler internal/bootstrap/pre_execution.js:115:29",
    "codes": [
      1712
    ]
  },
  {
    "name": "addListener events.js:283:58",
    "codes": [
      1713,
      1936
    ]
  },
  {
    "name": "_addListener events.js:221:22",
    "codes": [
      1714,
      1933
    ]
  },
  {
    "name": "checkListener events.js:62:23",
    "codes": [
      1715,
      1918
    ]
  },
  {
    "name": "setupDebugEnv internal/bootstrap/pre_execution.js:162:23",
    "codes": [
      1716
    ]
  },
  {
    "name": "initializeDebugEnv internal/util/debuglog.js:12:28",
    "codes": [
      1717
    ]
  },
  {
    "name": "setupSignalHandlers internal/bootstrap/pre_execution.js:169:29",
    "codes": [
      1718
    ]
  },
  {
    "name": "createSignalHandlers internal/process/main_thread_only.js:125:30",
    "codes": [
      1719
    ]
  },
  {
    "name": "emit events.js:160:44",
    "codes": [
      1720,
      1970,
      2016,
      2070
    ]
  },
  {
    "name": "startListeningIfSignal internal/process/main_thread_only.js:129:34",
    "codes": [
      1721
    ]
  },
  {
    "name": "isSignal internal/process/main_thread_only.js:120:18",
    "codes": [
      1722
    ]
  },
  {
    "name": "initializeReport internal/bootstrap/pre_execution.js:146:26",
    "codes": [
      1723
    ]
  },
  {
    "name": "initializeReportSignalHandlers internal/bootstrap/pre_execution.js:183:40",
    "codes": [
      1724
    ]
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers internal/bootstrap/pre_execution.js:193:46",
    "codes": [
      1725
    ]
  },
  {
    "name": "setupChildProcessIpcChannel internal/bootstrap/pre_execution.js:318:37",
    "codes": [
      1726
    ]
  },
  {
    "name": "initializePolicy internal/bootstrap/pre_execution.js:342:26",
    "codes": [
      1727
    ]
  },
  {
    "name": "initializeClusterIPC internal/bootstrap/pre_execution.js:333:30",
    "codes": [
      1728
    ]
  },
  {
    "name": "initializeDeprecations internal/bootstrap/pre_execution.js:231:32",
    "codes": [
      1729
    ]
  },
  {
    "name": "initializeCJSLoader internal/bootstrap/pre_execution.js:391:29",
    "codes": [
      1730
    ]
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "codes": [
      1731
    ]
  },
  {
    "name": " internal/modules/cjs/loader.js:1:1",
    "codes": [
      1732
    ]
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "codes": [
      1733
    ]
  },
  {
    "name": " internal/source_map/source_map_cache.js:1:1",
    "codes": [
      1734
    ]
  },
  {
    "name": " fs.js:1:1",
    "codes": [
      1735
    ]
  },
  {
    "name": " fs.js:1:1",
    "codes": [
      1736
    ]
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "codes": [
      1737
    ]
  },
  {
    "name": " internal/fs/utils.js:1:1",
    "codes": [
      1738
    ]
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "codes": [
      1739
    ]
  },
  {
    "name": " internal/fs/dir.js:1:1",
    "codes": [
      1740
    ]
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "codes": [
      1741
    ]
  },
  {
    "name": " internal/modules/cjs/helpers.js:1:1",
    "codes": [
      1742
    ]
  },
  {
    "name": " url.js:1:1",
    "codes": [
      1743
    ]
  },
  {
    "name": " url.js:1:1",
    "codes": [
      1744
    ]
  },
  {
    "name": " internal/idna.js:1:1",
    "codes": [
      1745
    ]
  },
  {
    "name": " internal/idna.js:1:1",
    "codes": [
      1746
    ]
  },
  {
    "name": "SafeMap internal/per_context/primordials.js:65:3",
    "codes": [
      1747
    ]
  },
  {
    "name": " vm.js:1:1",
    "codes": [
      1748
    ]
  },
  {
    "name": " vm.js:1:1",
    "codes": [
      1749
    ]
  },
  {
    "name": "Module._initPaths internal/modules/cjs/loader.js:1070:29",
    "codes": [
      1750
    ]
  },
  {
    "name": "initializeESMLoader internal/bootstrap/pre_execution.js:395:29",
    "codes": [
      1751
    ]
  },
  {
    "name": "SafeWeakMap internal/per_context/primordials.js:69:3",
    "codes": [
      1752
    ]
  },
  {
    "name": "loadPreloadModules internal/bootstrap/pre_execution.js:436:28",
    "codes": [
      1753
    ]
  },
  {
    "name": "initializeFrozenIntrinsics internal/bootstrap/pre_execution.js:428:36",
    "codes": [
      1754
    ]
  },
  {
    "name": "Module.runMain internal/modules/cjs/loader.js:1011:26",
    "codes": [
      1755
    ]
  },
  {
    "name": "Module._load internal/modules/cjs/loader.js:668:24",
    "codes": [
      1756
    ]
  },
  {
    "name": "Module._resolveFilename internal/modules/cjs/loader.js:739:35",
    "codes": [
      1757
    ]
  },
  {
    "name": "NativeModule.canBeRequiredByUsers internal/bootstrap/loaders.js:199:45",
    "codes": [
      1758
    ]
  },
  {
    "name": "Module._resolveLookupPaths internal/modules/cjs/loader.js:622:38",
    "codes": [
      1759
    ]
  },
  {
    "name": " internal/util/debuglog.js:57:18",
    "codes": [
      1760,
      1975
    ]
  },
  {
    "name": "debuglogImpl internal/util/debuglog.js:34:22",
    "codes": [
      1761
    ]
  },
  {
    "name": "Module._findPath internal/modules/cjs/loader.js:460:28",
    "codes": [
      1763
    ]
  },
  {
    "name": "isAbsolute path.js:352:13",
    "codes": [
      1764
    ]
  },
  {
    "name": "resolveExports internal/modules/cjs/loader.js:371:24",
    "codes": [
      1766
    ]
  },
  {
    "name": "stat internal/modules/cjs/loader.js:115:14",
    "codes": [
      1767
    ]
  },
  {
    "name": "toNamespacedPath path.js:549:19",
    "codes": [
      1768
    ]
  },
  {
    "name": "toRealPath internal/modules/cjs/loader.js:333:20",
    "codes": [
      1769
    ]
  },
  {
    "name": "realpathSync fs.js:1448:22",
    "codes": [
      1770
    ]
  },
  {
    "name": "getOptions internal/fs/utils.js:196:20",
    "codes": [
      1771
    ]
  },
  {
    "name": "assertEncoding internal/fs/utils.js:73:24",
    "codes": [
      1772
    ]
  },
  {
    "name": "toPathIfFileURL internal/url.js:1385:25",
    "codes": [
      1773
    ]
  },
  {
    "name": "hidden internal/errors.js:243:25",
    "codes": [
      1774,
      1911
    ]
  },
  {
    "name": " internal/fs/utils.js:523:38",
    "codes": [
      1775
    ]
  },
  {
    "name": " internal/fs/utils.js:234:35",
    "codes": [
      1776
    ]
  },
  {
    "name": "isUint8Array internal/util/types.js:19:22",
    "codes": [
      1777,
      2061
    ]
  },
  {
    "name": "splitRoot fs.js:1406:33",
    "codes": [
      1778
    ]
  },
  {
    "name": "handleErrorFromBinding internal/fs/utils.js:215:32",
    "codes": [
      1780
    ]
  },
  {
    "name": "nextPart fs.js:1433:31",
    "codes": [
      1781
    ]
  },
  {
    "name": "isFileType fs.js:165:20",
    "codes": [
      1782
    ]
  },
  {
    "name": "encodeRealpathResult fs.js:1419:30",
    "codes": [
      1783
    ]
  },
  {
    "name": "loadNativeModule internal/modules/cjs/helpers.js:19:26",
    "codes": [
      1784
    ]
  },
  {
    "name": "Module internal/modules/cjs/loader.js:132:16",
    "codes": [
      1785
    ]
  },
  {
    "name": "dirname path.js:582:10",
    "codes": [
      1786
    ]
  },
  {
    "name": "updateChildren internal/modules/cjs/loader.js:126:24",
    "codes": [
      1787
    ]
  },
  {
    "name": "Module.load internal/modules/cjs/loader.js:804:33",
    "codes": [
      1788
    ]
  },
  {
    "name": "assert internal/assert.js:10:16",
    "codes": [
      1789
    ]
  },
  {
    "name": "Module._nodeModulePaths internal/modules/cjs/loader.js:541:37",
    "codes": [
      1790
    ]
  },
  {
    "name": "findLongestRegisteredExtension internal/modules/cjs/loader.js:353:40",
    "codes": [
      1791
    ]
  },
  {
    "name": "basename path.js:668:11",
    "codes": [
      1792
    ]
  },
  {
    "name": "Module._extensions..js internal/modules/cjs/loader.js:965:37",
    "codes": [
      1793
    ]
  },
  {
    "name": "readFileSync fs.js:339:22",
    "codes": [
      1794
    ]
  },
  {
    "name": "isEncoding buffer.js:505:40",
    "codes": [
      1795
    ]
  },
  {
    "name": "normalizeEncoding internal/util.js:106:27",
    "codes": [
      1796
    ]
  },
  {
    "name": "isUint32 internal/validators.js:22:18",
    "codes": [
      1797
    ]
  },
  {
    "name": "openSync fs.js:431:18",
    "codes": [
      1798
    ]
  },
  {
    "name": " internal/fs/utils.js:535:42",
    "codes": [
      1799
    ]
  },
  {
    "name": "stringToFlags internal/fs/utils.js:422:23",
    "codes": [
      1800
    ]
  },
  {
    "name": "parseMode internal/validators.js:41:19",
    "codes": [
      1801
    ]
  },
  {
    "name": "tryStatSync fs.js:302:21",
    "codes": [
      1802
    ]
  },
  {
    "name": "tryCreateBuffer fs.js:312:25",
    "codes": [
      1803
    ]
  },
  {
    "name": "allocUnsafe buffer.js:345:42",
    "codes": [
      1804
    ]
  },
  {
    "name": " buffer.js:319:36",
    "codes": [
      1805,
      1943
    ]
  },
  {
    "name": "allocate buffer.js:370:18",
    "codes": [
      1806,
      1950,
      2086
    ]
  },
  {
    "name": "alignPool buffer.js:134:19",
    "codes": [
      1807,
      2056,
      2081
    ]
  },
  {
    "name": "tryReadSync fs.js:327:21",
    "codes": [
      1808
    ]
  },
  {
    "name": "readSync fs.js:482:18",
    "codes": [
      1809
    ]
  },
  {
    "name": " internal/validators.js:76:3",
    "codes": [
      1810,
      2053,
      2091
    ]
  },
  {
    "name": "isInt32 internal/validators.js:18:17",
    "codes": [
      1811,
      2054
    ]
  },
  {
    "name": " internal/validators.js:134:40",
    "codes": [
      1812
    ]
  },
  {
    "name": " internal/fs/utils.js:498:3",
    "codes": [
      1813
    ]
  },
  {
    "name": "closeSync fs.js:397:19",
    "codes": [
      1814
    ]
  },
  {
    "name": "toString buffer.js:741:46",
    "codes": [
      1815
    ]
  },
  {
    "name": "getEncodingOps buffer.js:644:24",
    "codes": [
      1816
    ]
  },
  {
    "name": "slice buffer.js:573:12",
    "codes": [
      1817
    ]
  },
  {
    "name": "stripBOM internal/modules/cjs/helpers.js:107:18",
    "codes": [
      1818
    ]
  },
  {
    "name": "Module._compile internal/modules/cjs/loader.js:865:37",
    "codes": [
      1819
    ]
  },
  {
    "name": "stripShebang internal/modules/cjs/helpers.js:117:22",
    "codes": [
      1820
    ]
  },
  {
    "name": "maybeCacheSourceMap internal/source_map/source_map_cache.js:23:29",
    "codes": [
      1821
    ]
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:1:1",
    "codes": [
      1822
    ]
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:1:1",
    "codes": [
      1823,
      1945
    ]
  },
  {
    "name": "makeRequireFunction internal/modules/cjs/helpers.js:32:29",
    "codes": [
      1824
    ]
  },
  {
    "name": "require internal/modules/cjs/helpers.js:73:31",
    "codes": [
      1825
    ]
  },
  {
    "name": "Module.require internal/modules/cjs/loader.js:841:36",
    "codes": [
      1826
    ]
  },
  {
    "name": "NativeModule.compileForPublicLoader internal/bootstrap/loaders.js:214:57",
    "codes": [
      1827
    ]
  },
  {
    "name": " zlib.js:1:1",
    "codes": [
      1828
    ]
  },
  {
    "name": " zlib.js:1:1",
    "codes": [
      1829
    ]
  },
  {
    "name": " _stream_transform.js:1:1",
    "codes": [
      1830
    ]
  },
  {
    "name": " _stream_transform.js:1:1",
    "codes": [
      1831
    ]
  },
  {
    "name": " _stream_duplex.js:1:1",
    "codes": [
      1832
    ]
  },
  {
    "name": " _stream_duplex.js:1:1",
    "codes": [
      1833
    ]
  },
  {
    "name": " _stream_readable.js:1:1",
    "codes": [
      1834
    ]
  },
  {
    "name": " _stream_readable.js:1:1",
    "codes": [
      1835
    ]
  },
  {
    "name": " stream.js:1:1",
    "codes": [
      1836
    ]
  },
  {
    "name": " stream.js:1:1",
    "codes": [
      1837
    ]
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "codes": [
      1838
    ]
  },
  {
    "name": " internal/streams/pipeline.js:1:1",
    "codes": [
      1839
    ]
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "codes": [
      1840
    ]
  },
  {
    "name": " internal/streams/end-of-stream.js:1:1",
    "codes": [
      1841
    ]
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "codes": [
      1842
    ]
  },
  {
    "name": " internal/streams/legacy.js:1:1",
    "codes": [
      1843
    ]
  },
  {
    "name": " _stream_writable.js:1:1",
    "codes": [
      1844
    ]
  },
  {
    "name": " _stream_writable.js:1:1",
    "codes": [
      1845
    ]
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "codes": [
      1846
    ]
  },
  {
    "name": " internal/streams/destroy.js:1:1",
    "codes": [
      1847
    ]
  },
  {
    "name": " internal/streams/state.js:1:1",
    "codes": [
      1848
    ]
  },
  {
    "name": " internal/streams/state.js:1:1",
    "codes": [
      1849
    ]
  },
  {
    "name": " _stream_passthrough.js:1:1",
    "codes": [
      1850
    ]
  },
  {
    "name": " _stream_passthrough.js:1:1",
    "codes": [
      1851
    ]
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "codes": [
      1852
    ]
  },
  {
    "name": " internal/streams/buffer_list.js:1:1",
    "codes": [
      1853
    ]
  },
  {
    "name": "from buffer.js:270:28",
    "codes": [
      1854
    ]
  },
  {
    "name": "fromArrayBuffer buffer.js:429:25",
    "codes": [
      1855
    ]
  },
  {
    "name": " zlib.js:768:64",
    "codes": [
      1856
    ]
  },
  {
    "name": "createConvenienceMethod zlib.js:752:33",
    "codes": [
      1857
    ]
  },
  {
    "name": "createProperty zlib.js:832:24",
    "codes": [
      1858
    ]
  },
  {
    "name": "get internal/bootstrap/pre_execution.js:307:8",
    "codes": [
      1859
    ]
  },
  {
    "name": "fromString buffer.js:404:20",
    "codes": [
      1860
    ]
  },
  {
    "name": "fromStringFast buffer.js:385:24",
    "codes": [
      1861
    ]
  },
  {
    "name": "write buffer.js:572:12",
    "codes": [
      1862
    ]
  },
  {
    "name": "asyncBufferWrapper zlib.js:758:39",
    "codes": [
      1863,
      1929
    ]
  },
  {
    "name": "Deflate zlib.js:695:17",
    "codes": [
      1864
    ]
  },
  {
    "name": "Zlib zlib.js:593:14",
    "codes": [
      1865,
      1916
    ]
  },
  {
    "name": "ZlibBase zlib.js:221:18",
    "codes": [
      1866,
      1912,
      1934
    ]
  },
  {
    "name": "Transform _stream_transform.js:106:19",
    "codes": [
      1867
    ]
  },
  {
    "name": "Duplex _stream_duplex.js:49:16",
    "codes": [
      1868,
      1937
    ]
  },
  {
    "name": "Readable _stream_readable.js:154:18",
    "codes": [
      1869,
      1938
    ]
  },
  {
    "name": "Stream internal/streams/legacy.js:7:16",
    "codes": [
      1870,
      1913
    ]
  },
  {
    "name": " zlib.js:208:3",
    "codes": [
      1871,
      1921
    ]
  },
  {
    "name": " zlib.js:180:43",
    "codes": [
      1872,
      1959
    ]
  },
  {
    "name": "ReadableState _stream_readable.js:75:23",
    "codes": [
      1873,
      1919
    ]
  },
  {
    "name": "getHighWaterMark internal/streams/state.js:16:26",
    "codes": [
      1874
    ]
  },
  {
    "name": "highWaterMarkFrom internal/streams/state.js:7:27",
    "codes": [
      1875
    ]
  },
  {
    "name": "getDefaultHighWaterMark internal/streams/state.js:12:33",
    "codes": [
      1876
    ]
  },
  {
    "name": "BufferList internal/streams/buffer_list.js:7:14",
    "codes": [
      1877
    ]
  },
  {
    "name": "Writable _stream_writable.js:208:18",
    "codes": [
      1878,
      1932
    ]
  },
  {
    "name": "WritableState _stream_writable.js:59:23",
    "codes": [
      1879,
      1917,
      1942
    ]
  },
  {
    "name": "Readable.on _stream_readable.js:866:33",
    "codes": [
      1880,
      1915,
      1939
    ]
  },
  {
    "name": "once events.js:312:44",
    "codes": [
      1881,
      1910
    ]
  },
  {
    "name": "_onceWrap events.js:304:19",
    "codes": [
      1882,
      1914
    ]
  },
  {
    "name": "zlibBuffer zlib.js:89:20",
    "codes": [
      1883,
      1928
    ]
  },
  {
    "name": "listenerCount events.js:464:23",
    "codes": [
      1884
    ]
  },
  {
    "name": "Readable.resume _stream_readable.js:951:37",
    "codes": [
      1885
    ]
  },
  {
    "name": "resume _stream_readable.js:965:16",
    "codes": [
      1886
    ]
  },
  {
    "name": "nextTick internal/process/task_queues.js:101:18",
    "codes": [
      1887,
      1924,
      1944,
      2023,
      2071
    ]
  },
  {
    "name": "isEmpty internal/fixed_queue.js:91:10",
    "codes": [
      1888,
      1935,
      2067
    ]
  },
  {
    "name": "isEmpty internal/fixed_queue.js:63:10",
    "codes": [
      1889,
      2013
    ]
  },
  {
    "name": "setHasTickScheduled internal/process/task_queues.js:49:29",
    "codes": [
      1890,
      1989,
      2055
    ]
  },
  {
    "name": "newAsyncId internal/async_hooks.js:262:20",
    "codes": [
      1891,
      2018
    ]
  },
  {
    "name": "getDefaultTriggerAsyncId internal/async_hooks.js:278:34",
    "codes": [
      1892
    ]
  },
  {
    "name": "initHooksExist internal/async_hooks.js:308:24",
    "codes": [
      1893,
      2014
    ]
  },
  {
    "name": "push internal/fixed_queue.js:95:7",
    "codes": [
      1894,
      2068
    ]
  },
  {
    "name": "isFull internal/fixed_queue.js:67:9",
    "codes": [
      1895,
      2021
    ]
  },
  {
    "name": "push internal/fixed_queue.js:71:7",
    "codes": [
      1896,
      1940
    ]
  },
  {
    "name": "_getMaxListeners events.js:104:26",
    "codes": [
      1897
    ]
  },
  {
    "name": "get events.js:70:16",
    "codes": [
      1898
    ]
  },
  {
    "name": "Writable.end _stream_writable.js:581:34",
    "codes": [
      1899
    ]
  },
  {
    "name": "Writable.write _stream_writable.js:278:36",
    "codes": [
      1900,
      1930
    ]
  },
  {
    "name": "writeOrBuffer _stream_writable.js:381:23",
    "codes": [
      1901
    ]
  },
  {
    "name": "doWrite _stream_writable.js:421:17",
    "codes": [
      1902
    ]
  },
  {
    "name": "Transform._write _stream_transform.js:167:38",
    "codes": [
      1903,
      1922
    ]
  },
  {
    "name": "Transform._read _stream_transform.js:184:37",
    "codes": [
      1904,
      1980,
      2031
    ]
  },
  {
    "name": "ZlibBase._transform zlib.js:370:41",
    "codes": [
      1905
    ]
  },
  {
    "name": "processChunk zlib.js:477:22",
    "codes": [
      1906
    ]
  },
  {
    "name": "endWritable _stream_writable.js:671:21",
    "codes": [
      1907,
      1920
    ]
  },
  {
    "name": "finishMaybe _stream_writable.js:650:21",
    "codes": [
      1908,
      1960
    ]
  },
  {
    "name": "needFinish _stream_writable.js:619:20",
    "codes": [
      1909,
      1947,
      2022
    ]
  },
  {
    "name": "Buffer buffer.js:244:16",
    "codes": [
      1927
    ]
  },
  {
    "name": "processTicksAndRejections internal/process/task_queues.js:65:35",
    "codes": [
      1961,
      1985,
      2011,
      2020,
      2066
    ]
  },
  {
    "name": "shift internal/fixed_queue.js:104:8",
    "codes": [
      1962,
      2019
    ]
  },
  {
    "name": "shift internal/fixed_queue.js:76:8",
    "codes": [
      1963,
      1982
    ]
  },
  {
    "name": "emitBeforeScript internal/async_hooks.js:345:26",
    "codes": [
      1964,
      1983
    ]
  },
  {
    "name": "validateAsyncId internal/async_hooks.js:114:25",
    "codes": [
      1965,
      1978
    ]
  },
  {
    "name": "pushAsyncIds internal/async_hooks.js:394:22",
    "codes": [
      1966,
      1981
    ]
  },
  {
    "name": "resume_ _stream_readable.js:972:17",
    "codes": [
      1967,
      1986
    ]
  },
  {
    "name": "Readable.read _stream_readable.js:399:35",
    "codes": [
      1968,
      1979,
      2017,
      2084
    ]
  },
  {
    "name": "howMuchToRead _stream_readable.js:381:23",
    "codes": [
      1969
    ]
  },
  {
    "name": "flow _stream_readable.js:996:14",
    "codes": [
      1971,
      1984
    ]
  },
  {
    "name": "destroyHooksExist internal/async_hooks.js:316:27",
    "codes": [
      1972,
      1976
    ]
  },
  {
    "name": "emitAfterScript internal/async_hooks.js:359:25",
    "codes": [
      1973,
      1977
    ]
  },
  {
    "name": "popAsyncIds internal/async_hooks.js:407:21",
    "codes": [
      1974,
      1987
    ]
  },
  {
    "name": "processPromiseRejections internal/process/promises.js:163:34",
    "codes": [
      1988,
      2033
    ]
  },
  {
    "name": "setHasRejectionToWarn internal/process/promises.js:48:31",
    "codes": [
      1990
    ]
  },
  {
    "name": "processCallback zlib.js:497:25",
    "codes": [
      1991,
      2024,
      2074
    ]
  },
  {
    "name": "get _stream_duplex.js:141:6",
    "codes": [
      1992,
      2064
    ]
  },
  {
    "name": "slice buffer.js:1059:40",
    "codes": [
      1993
    ]
  },
  {
    "name": "adjustOffset buffer.js:1042:22",
    "codes": [
      1994
    ]
  },
  {
    "name": "Transform.push _stream_transform.js:148:36",
    "codes": [
      1995,
      2062
    ]
  },
  {
    "name": "Readable.push _stream_readable.js:222:35",
    "codes": [
      1996
    ]
  },
  {
    "name": "readableAddChunk _stream_readable.js:231:26",
    "codes": [
      1997,
      2027,
      2073
    ]
  },
  {
    "name": "chunkInvalid _stream_readable.js:323:22",
    "codes": [
      1998
    ]
  },
  {
    "name": "addChunk _stream_readable.js:305:18",
    "codes": [
      1999
    ]
  },
  {
    "name": "zlibBufferOnData zlib.js:109:26",
    "codes": [
      2000,
      2028,
      2082
    ]
  },
  {
    "name": "maybeReadMore _stream_readable.js:598:23",
    "codes": [
      2001,
      2025
    ]
  },
  {
    "name": "afterTransform _stream_transform.js:80:24",
    "codes": [
      2002,
      2034
    ]
  },
  {
    "name": "onwrite _stream_writable.js:459:17",
    "codes": [
      2003,
      2032
    ]
  },
  {
    "name": "afterWrite _stream_writable.js:493:20",
    "codes": [
      2004,
      2030
    ]
  },
  {
    "name": "nop _stream_writable.js:57:13",
    "codes": [
      2005
    ]
  },
  {
    "name": "prefinish _stream_writable.js:637:19",
    "codes": [
      2006,
      2035
    ]
  },
  {
    "name": "prefinish _stream_transform.js:138:19",
    "codes": [
      2007,
      2026
    ]
  },
  {
    "name": "ZlibBase._flush zlib.js:306:37",
    "codes": [
      2008
    ]
  },
  {
    "name": "alloc buffer.js:332:30",
    "codes": [
      2009
    ]
  },
  {
    "name": "maxFlush zlib.js:325:18",
    "codes": [
      2010
    ]
  },
  {
    "name": "maybeReadMore_ _stream_readable.js:605:24",
    "codes": [
      2012,
      2029,
      2094
    ]
  },
  {
    "name": " _stream_transform.js:140:17",
    "codes": [
      2036,
      2093
    ]
  },
  {
    "name": "done _stream_transform.js:205:14",
    "codes": [
      2037,
      2092
    ]
  },
  {
    "name": "onEofChunk _stream_readable.js:529:20",
    "codes": [
      2038
    ]
  },
  {
    "name": "emitReadable_ _stream_readable.js:570:23",
    "codes": [
      2039,
      2087
    ]
  },
  {
    "name": "endReadable _stream_readable.js:1166:21",
    "codes": [
      2040,
      2077
    ]
  },
  {
    "name": "endReadableNT _stream_readable.js:1176:23",
    "codes": [
      2041,
      2089
    ]
  },
  {
    "name": "arrayClone events.js:484:20",
    "codes": [
      2042,
      2072
    ]
  },
  {
    "name": "onceWrapper events.js:294:21",
    "codes": [
      2043,
      2088
    ]
  },
  {
    "name": "Readable.removeListener _stream_readable.js:896:45",
    "codes": [
      2044,
      2079
    ]
  },
  {
    "name": "removeListener events.js:329:28",
    "codes": [
      2045,
      2076
    ]
  },
  {
    "name": "ZlibBase.close zlib.js:360:36",
    "codes": [
      2046,
      2083
    ]
  },
  {
    "name": "_close zlib.js:574:16",
    "codes": [
      2047,
      2080
    ]
  },
  {
    "name": "destroy internal/streams/destroy.js:5:17",
    "codes": [
      2048,
      2065
    ]
  },
  {
    "name": "ZlibBase._destroy zlib.js:365:39",
    "codes": [
      2049
    ]
  },
  {
    "name": " internal/streams/destroy.js:38:30",
    "codes": [
      2050
    ]
  },
  {
    "name": "zlibBufferOnEnd zlib.js:122:25",
    "codes": [
      2051,
      2085
    ]
  },
  {
    "name": "concat buffer.js:511:32",
    "codes": [
      2052,
      2075
    ]
  },
  {
    "name": "_copy buffer.js:176:15",
    "codes": [
      2057,
      2069
    ]
  },
  {
    "name": "toInteger buffer.js:166:19",
    "codes": [
      2058,
      2090
    ]
  },
  {
    "name": " C:\\coding\\md-code\\blockchain-demo\\node\\zip.js:7:25",
    "codes": [
      2059
    ]
  },
  {
    "name": "emitCloseNT internal/streams/destroy.js:64:21",
    "codes": [
      2060,
      2078
    ]
  }
],
  "ticks": [
    {
  "tm": 156083,
  "vm": 6,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 157823,
  "vm": 6,
  "s": [
    0,
    7107235
  ]
},
    {
  "tm": 171089,
  "vm": 6,
  "s": [
    1,
    641012
  ]
},
    {
  "tm": 171116,
  "vm": 6,
  "s": [
    0,
    15029484
  ]
},
    {
  "tm": 171127,
  "vm": 6,
  "s": [
    1,
    644292
  ]
},
    {
  "tm": 171138,
  "vm": 6,
  "s": [
    0,
    15471473
  ]
},
    {
  "tm": 171660,
  "vm": 6,
  "s": [
    1,
    641012
  ]
},
    {
  "tm": 171684,
  "vm": 6,
  "s": [
    1,
    641012
  ]
},
    {
  "tm": 172081,
  "vm": 6,
  "s": [
    1,
    239827
  ]
},
    {
  "tm": 173789,
  "vm": 5,
  "s": [
    0,
    5704707
  ]
},
    {
  "tm": 176241,
  "vm": 3,
  "s": [
    0,
    15328643
  ]
},
    {
  "tm": 177847,
  "vm": 5,
  "s": [
    0,
    9385344
  ]
},
    {
  "tm": 180090,
  "vm": 3,
  "s": [
    1,
    111507
  ]
},
    {
  "tm": 181843,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1580,
    44,
    1579,
    87
  ]
},
    {
  "tm": 185104,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1580,
    44,
    1579,
    87
  ]
},
    {
  "tm": 186454,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1580,
    44,
    1579,
    87
  ]
},
    {
  "tm": 187826,
  "vm": 0,
  "s": [
    0,
    14839024,
    1582,
    129,
    1581,
    78,
    1580,
    44,
    1579,
    87
  ]
},
    {
  "tm": 189827,
  "vm": 5,
  "s": [
    0,
    1780176,
    0,
    9742240,
    1576,
    30,
    1590,
    297,
    1582,
    101,
    1581,
    78,
    1579,
    143
  ]
},
    {
  "tm": 192100,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1591,
    9,
    1579,
    164
  ]
},
    {
  "tm": 197465,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1593,
    232,
    1582,
    101,
    1581,
    78,
    1591,
    9,
    1579,
    164
  ]
},
    {
  "tm": 197501,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1593,
    232,
    1582,
    101,
    1581,
    78,
    1591,
    9,
    1579,
    164
  ]
},
    {
  "tm": 197945,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1593,
    232,
    1582,
    101,
    1581,
    78,
    1591,
    9,
    1579,
    164
  ]
},
    {
  "tm": 199823,
  "vm": 3,
  "s": [
    0,
    8012220,
    0,
    6226032,
    1603,
    17,
    1591,
    72,
    1579,
    164
  ]
},
    {
  "tm": 203694,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1609,
    9,
    1579,
    170
  ]
},
    {
  "tm": 203802,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1609,
    9,
    1579,
    170
  ]
},
    {
  "tm": 205815,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1611,
    723,
    1582,
    101,
    1581,
    78,
    1609,
    9,
    1579,
    170
  ]
},
    {
  "tm": 208391,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1611,
    723,
    1582,
    101,
    1581,
    78,
    1609,
    9,
    1579,
    170
  ]
},
    {
  "tm": 209984,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    199
  ]
},
    {
  "tm": 212030,
  "vm": 3,
  "s": [
    0,
    633634,
    0,
    6226032,
    1579,
    320
  ]
},
    {
  "tm": 213860,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    1130
  ]
},
    {
  "tm": 215970,
  "vm": 0,
  "s": [
    0,
    7205280,
    0,
    9491664,
    1633,
    61,
    1632,
    710,
    1582,
    101,
    1581,
    78,
    1579,
    1130
  ]
},
    {
  "tm": 218246,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1636,
    421,
    1582,
    101,
    1581,
    78,
    1579,
    1184
  ]
},
    {
  "tm": 220920,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1645,
    30,
    1582,
    101,
    1581,
    78,
    1643,
    9,
    1579,
    1263
  ]
},
    {
  "tm": 222071,
  "vm": 3,
  "s": [
    0,
    15471932,
    0,
    6226032,
    1645,
    367,
    1582,
    101,
    1581,
    78,
    1643,
    9,
    1579,
    1263
  ]
},
    {
  "tm": 223966,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 227180,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 227889,
  "vm": 5,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1657,
    444,
    1582,
    101,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 229938,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1657,
    680,
    1582,
    101,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 232939,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1657,
    680,
    1582,
    101,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 233868,
  "vm": 3,
  "s": [
    1,
    641012,
    0,
    6226032,
    1657,
    1910,
    1582,
    101,
    1581,
    78,
    1579,
    1291
  ]
},
    {
  "tm": 235926,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    1388
  ]
},
    {
  "tm": 237986,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1670,
    171,
    1582,
    101,
    1581,
    78,
    1579,
    1485
  ]
},
    {
  "tm": 239901,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1670,
    181,
    1582,
    101,
    1581,
    78,
    1579,
    1485
  ]
},
    {
  "tm": 241900,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1579,
    2075
  ]
},
    {
  "tm": 243834,
  "vm": 1,
  "s": [
    0,
    8413744
  ]
},
    {
  "tm": 245865,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1692,
    5
  ]
},
    {
  "tm": 247883,
  "vm": 6,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1694,
    186,
    1582,
    101,
    1581,
    78,
    1692,
    5
  ]
},
    {
  "tm": 249972,
  "vm": 3,
  "s": [
    0,
    15325582,
    0,
    6226032,
    1697,
    24,
    1692,
    29
  ]
},
    {
  "tm": 251964,
  "vm": 3,
  "s": [
    0,
    9784407,
    0,
    6226032,
    1697,
    198,
    1692,
    29
  ]
},
    {
  "tm": 253934,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 256549,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 258119,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 263541,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1734,
    219,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 263580,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1734,
    219,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 263880,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1734,
    219,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 266822,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1736,
    1114,
    1582,
    101,
    1581,
    78,
    1734,
    219,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 268211,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1736,
    1257,
    1582,
    101,
    1581,
    78,
    1734,
    219,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 269931,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1742,
    309,
    1582,
    101,
    1581,
    78,
    1734,
    262,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 272604,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1742,
    309,
    1582,
    101,
    1581,
    78,
    1734,
    262,
    1582,
    101,
    1581,
    78,
    1732,
    371,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 274464,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1732,
    464,
    1582,
    101,
    1581,
    78,
    1730,
    9,
    1697,
    240,
    1692,
    29
  ]
},
    {
  "tm": 275963,
  "vm": 2,
  "s": [
    1,
    290738,
    0,
    6226032,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 277937,
  "vm": 3,
  "s": [
    0,
    6950583,
    0,
    6226032,
    1767,
    13,
    1763,
    245,
    1757,
    394,
    1756,
    140,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 280011,
  "vm": 6,
  "s": [
    0,
    1614768,
    0,
    9742240,
    1770,
    263,
    1769,
    40,
    1763,
    335,
    1757,
    394,
    1756,
    140,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 281981,
  "vm": 3,
  "s": [
    0,
    15159230,
    0,
    6226032,
    1785,
    34,
    1756,
    239,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 283990,
  "vm": 3,
  "s": [
    0,
    15474954,
    0,
    6226032,
    1798,
    27,
    1794,
    65,
    1793,
    79,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 285920,
  "vm": 2,
  "s": [
    0,
    8790442,
    0,
    6226032,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 287897,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 289924,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 291833,
  "vm": 6,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 296089,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1833,
    63,
    1582,
    101,
    1581,
    78,
    1831,
    123,
    1582,
    101,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 296136,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1833,
    63,
    1582,
    101,
    1581,
    78,
    1831,
    123,
    1582,
    101,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 297883,
  "vm": 2,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1837,
    48,
    1582,
    101,
    1581,
    78,
    1835,
    251,
    1582,
    101,
    1581,
    78,
    1833,
    63,
    1582,
    101,
    1581,
    78,
    1831,
    123,
    1582,
    101,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 300887,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1837,
    87,
    1582,
    101,
    1581,
    78,
    1835,
    251,
    1582,
    101,
    1581,
    78,
    1833,
    63,
    1582,
    101,
    1581,
    78,
    1831,
    123,
    1582,
    101,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 301858,
  "vm": 3,
  "s": [
    0,
    1382608,
    0,
    9742240,
    1582,
    69,
    1581,
    78,
    1845,
    241,
    1582,
    101,
    1581,
    78,
    1837,
    87,
    1582,
    101,
    1581,
    78,
    1835,
    251,
    1582,
    101,
    1581,
    78,
    1833,
    63,
    1582,
    101,
    1581,
    78,
    1831,
    123,
    1582,
    101,
    1581,
    78,
    1829,
    412,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 303935,
  "vm": 3,
  "s": [
    0,
    9384189,
    0,
    6226032,
    1829,
    1585,
    1582,
    101,
    1827,
    47,
    1784,
    49,
    1756,
    207,
    1826,
    86,
    1825,
    11,
    1823,
    5,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 305843,
  "vm": 1,
  "s": [
    0,
    8418592
  ]
},
    {
  "tm": 307828,
  "vm": 2,
  "s": [
    0,
    6664867,
    0,
    6033968,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 309934,
  "vm": 3,
  "s": [
    0,
    15471473,
    0,
    6226032,
    1867,
    130,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 311819,
  "vm": 3,
  "s": [
    0,
    4107814,
    0,
    6226032,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 313833,
  "vm": 0,
  "s": [
    0,
    7516482,
    0,
    8291392,
    1714,
    9,
    1713,
    17,
    1880,
    34,
    1881,
    35,
    1866,
    403,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 315798,
  "vm": 0,
  "s": [
    0,
    14087250,
    1879,
    228,
    1878,
    67,
    1868,
    50,
    1867,
    32,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 317802,
  "vm": 0,
  "s": [
    0,
    14839441,
    1900,
    42,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 319929,
  "vm": 0,
  "s": [
    0,
    14792137,
    1873,
    0,
    1869,
    50,
    1868,
    32,
    1867,
    32,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 321819,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 323833,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 325793,
  "vm": 0,
  "s": [
    0,
    14770544,
    1774,
    0,
    1865,
    237,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 327842,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 329882,
  "vm": 0,
  "s": [
    0,
    14770373,
    1604,
    0,
    1603,
    17,
    1870,
    13,
    1869,
    112,
    1868,
    32,
    1867,
    32,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 331803,
  "vm": 0,
  "s": [
    0,
    14853947,
    1905,
    11,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 333832,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 335794,
  "vm": 0,
  "s": [
    0,
    13903934,
    1867,
    130,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 337821,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 339800,
  "vm": 0,
  "s": [
    0,
    13903196,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 341864,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 343838,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 345812,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 347893,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 349797,
  "vm": 4,
  "s": [
    0,
    6943193,
    0,
    6226320,
    1866,
    403,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 351825,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 353807,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 355824,
  "vm": 4,
  "s": [
    0,
    7862627,
    0,
    6125664,
    1866,
    0,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 357862,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 359866,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 361807,
  "vm": 0,
  "s": [
    0,
    7005107,
    0,
    6026608,
    1887,
    339,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 363814,
  "vm": 0,
  "s": [
    0,
    13903880,
    1880,
    34,
    1867,
    130,
    1866,
    297,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 365803,
  "vm": 0,
  "s": [
    0,
    14131638,
    1910,
    1081,
    1866,
    403,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 367858,
  "vm": 4,
  "s": [
    0,
    13147266,
    0,
    6226320,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 369829,
  "vm": 0,
  "s": [
    0,
    14439100,
    1864,
    3,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 371795,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 373816,
  "vm": 0,
  "s": [
    0,
    8750192,
    0,
    9709680,
    0,
    14374933,
    1620,
    13,
    1619,
    26,
    1806,
    125,
    1804,
    15,
    1866,
    349,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 375855,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 377787,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 379862,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 381867,
  "vm": 1,
  "s": [
    0,
    8423722
  ]
},
    {
  "tm": 383798,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 385826,
  "vm": 0,
  "s": [
    0,
    14126700,
    1906,
    55,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 387815,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 389811,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 391790,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 393783,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 395800,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 397819,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 399791,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 401793,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 403781,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 405795,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 407802,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 409796,
  "vm": 1,
  "s": [
    1,
    644292
  ]
},
    {
  "tm": 411819,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 413874,
  "vm": 0,
  "s": [
    1,
    655799,
    0,
    9709680,
    0,
    14374933,
    1620,
    13,
    1619,
    26,
    1806,
    125,
    1912,
    2783,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 415815,
  "vm": 0,
  "s": [
    1912,
    1949,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 417780,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 419843,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 421879,
  "vm": 0,
  "s": [
    0,
    7203988,
    0,
    6026608,
    1887,
    315,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 423788,
  "vm": 4,
  "s": [
    0,
    4106385,
    0,
    6226320,
    1912,
    3138,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 425798,
  "vm": 0,
  "s": [
    0,
    14856928,
    1904,
    64,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 427810,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 429887,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 431790,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 433903,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 435817,
  "vm": 0,
  "s": [
    0,
    8579551,
    0,
    9709680,
    0,
    14374933,
    1620,
    13,
    1619,
    26,
    1806,
    125,
    1912,
    2783,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 437793,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 439797,
  "vm": 1,
  "s": [
    0,
    15520154
  ]
},
    {
  "tm": 441791,
  "vm": 0,
  "s": [
    0,
    14787563,
    1900,
    0,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 443846,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 445816,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 447910,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1865,
    338,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 449808,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 451786,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 453868,
  "vm": 0,
  "s": [
    0,
    14840464,
    1878,
    77,
    1868,
    50,
    1912,
    1925,
    1865,
    446,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 455833,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 457847,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 459783,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 461939,
  "vm": 0,
  "s": [
    0,
    14787583,
    1887,
    364,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 463828,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 465822,
  "vm": 1,
  "s": [
    0,
    8598088
  ]
},
    {
  "tm": 467834,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 469821,
  "vm": 4,
  "s": [
    0,
    12977101,
    0,
    6226320,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 471819,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 473805,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 475786,
  "vm": 6,
  "s": [
    0,
    1171152,
    0,
    9742240,
    1865,
    399,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 477838,
  "vm": 0,
  "s": [
    0,
    14794736,
    1906,
    30,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 479907,
  "vm": 0,
  "s": [
    0,
    14787507,
    1868,
    57,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 481853,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 483804,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 485786,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 487846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 489871,
  "vm": 0,
  "s": [
    0,
    13876794,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 491800,
  "vm": 0,
  "s": [
    0,
    7831615,
    0,
    9742240,
    1883,
    123,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 493821,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    0,
    14374933,
    1620,
    13,
    1619,
    26,
    1806,
    125,
    1916,
    3372,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 495829,
  "vm": 1,
  "s": [
    0,
    8597978
  ]
},
    {
  "tm": 497846,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 499794,
  "vm": 0,
  "s": [
    1,
    681613,
    0,
    6026608,
    1887,
    328,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 501860,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 503824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 505817,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 507817,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 509816,
  "vm": 0,
  "s": [
    0,
    8685354,
    0,
    6022448,
    1915,
    834,
    1883,
    198,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 511795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 513810,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1916,
    1908,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 515787,
  "vm": 0,
  "s": [
    0,
    13877013,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 517796,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    1904,
    51,
    1903,
    76,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 519796,
  "vm": 0,
  "s": [
    0,
    14102546,
    1915,
    1123,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 521799,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 523826,
  "vm": 1,
  "s": [
    0,
    8351237
  ]
},
    {
  "tm": 525863,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 527839,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 529820,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 531822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 533800,
  "vm": 4,
  "s": [
    0,
    9290019,
    0,
    6226320,
    1911,
    185,
    1916,
    2860,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 535837,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 537821,
  "vm": 0,
  "s": [
    0,
    14840817,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 539811,
  "vm": 4,
  "s": [
    0,
    12619835,
    0,
    6226320,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 541801,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 543846,
  "vm": 0,
  "s": [
    1,
    247572,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 545789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 547810,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220132400,
    1922,
    1328,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 549786,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 551798,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 553824,
  "vm": 1,
  "s": [
    0,
    8597978
  ]
},
    {
  "tm": 556049,
  "vm": 0,
  "s": [
    0,
    14827776,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 557816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 559859,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 561814,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 563838,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 565870,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 567791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 569829,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 571800,
  "vm": 0,
  "s": [
    0,
    13877540,
    1868,
    50,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 573856,
  "vm": 4,
  "s": [
    0,
    12618021,
    0,
    6226320,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 575865,
  "vm": 0,
  "s": [
    0,
    7330933,
    0,
    6026608,
    1887,
    315,
    1915,
    1793,
    1883,
    178,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 577816,
  "vm": 0,
  "s": [
    0,
    1300720,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 579830,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 581847,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 583820,
  "vm": 0,
  "s": [
    1,
    247572,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 586358,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 587938,
  "vm": 1,
  "s": [
    1,
    244160
  ]
},
    {
  "tm": 589917,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 591863,
  "vm": 1,
  "s": [
    0,
    11896208
  ]
},
    {
  "tm": 593830,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 595832,
  "vm": 0,
  "s": [
    0,
    13876203,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 597830,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 599921,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220132400,
    1922,
    1328,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 601821,
  "vm": 0,
  "s": [
    0,
    14820826,
    1867,
    76,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 603860,
  "vm": 0,
  "s": [
    1,
    261143,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 605834,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 607836,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220132400,
    1922,
    1328,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 609801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 611836,
  "vm": 0,
  "s": [
    0,
    13876794,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 613909,
  "vm": 0,
  "s": [
    0,
    14106864,
    1869,
    50,
    1868,
    32,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 615843,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 617893,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 619832,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 621815,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 623813,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1916,
    1908,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 625975,
  "vm": 0,
  "s": [
    0,
    14126446,
    1869,
    55,
    1868,
    32,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 627873,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 629808,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 631841,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 633818,
  "vm": 0,
  "s": [
    0,
    534886,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 635837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 637826,
  "vm": 0,
  "s": [
    1,
    244056,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 639818,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 641809,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220132400,
    1922,
    1328,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1899,
    50,
    1883,
    230,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 643825,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 645857,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 647837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 649823,
  "vm": 0,
  "s": [
    0,
    8628404,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1916,
    3372,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 651827,
  "vm": 0,
  "s": [
    0,
    8628432,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 653915,
  "vm": 0,
  "s": [
    0,
    1300737,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 655998,
  "vm": 0,
  "s": [
    0,
    2210624,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 657867,
  "vm": 1,
  "s": [
    0,
    8350891
  ]
},
    {
  "tm": 659850,
  "vm": 0,
  "s": [
    1,
    247572,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 661880,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 663858,
  "vm": 0,
  "s": [
    0,
    14840526,
    1805,
    0,
    1911,
    185,
    1916,
    3325,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 665859,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 667824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 669862,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1916,
    3372,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 671827,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 673822,
  "vm": 0,
  "s": [
    1,
    244056,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 675821,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 677828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 679972,
  "vm": 0,
  "s": [
    0,
    14126650,
    1878,
    72,
    1868,
    50,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 681953,
  "vm": 0,
  "s": [
    0,
    13923867,
    1915,
    834,
    1867,
    130,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 683828,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 685831,
  "vm": 0,
  "s": [
    1,
    651396,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1916,
    3372,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 687816,
  "vm": 0,
  "s": [
    0,
    14788183,
    1869,
    60,
    1868,
    32,
    1867,
    32,
    1916,
    2926,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 690062,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 691804,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 693878,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 696021,
  "vm": 1,
  "s": [
    0,
    15331063
  ]
},
    {
  "tm": 697858,
  "vm": 4,
  "s": [
    0,
    12183346,
    0,
    6226320,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 699862,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 701824,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 703813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 705821,
  "vm": 4,
  "s": [
    1,
    641524,
    0,
    6125664,
    1911,
    395,
    1916,
    2589,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 707852,
  "vm": 0,
  "s": [
    1,
    303873,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 709821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 711822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 713924,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 715874,
  "vm": 0,
  "s": [
    1,
    243525,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 717832,
  "vm": 0,
  "s": [
    0,
    14787511,
    1714,
    248,
    1928,
    1559,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 719798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 721824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 723844,
  "vm": 0,
  "s": [
    0,
    13877023,
    1928,
    1434,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 725790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 727819,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 730748,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 731853,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 733897,
  "vm": 0,
  "s": [
    0,
    8631053,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 735873,
  "vm": 0,
  "s": [
    0,
    2210744,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 737847,
  "vm": 1,
  "s": [
    0,
    8615136
  ]
},
    {
  "tm": 739822,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 741881,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 743826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 745821,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 747869,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 749801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 751861,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220132528,
    1922,
    1328,
    1902,
    106,
    1901,
    211,
    1900,
    184,
    1928,
    1742,
    1863,
    38,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 753835,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 755825,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 757845,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 759852,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 761895,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 763965,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 765832,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 767811,
  "vm": 0,
  "s": [
    0,
    8628314,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 769887,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 771831,
  "vm": 4,
  "s": [
    1,
    240160,
    0,
    6226320,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 773804,
  "vm": 0,
  "s": [
    1,
    246613,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 775867,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 777851,
  "vm": 0,
  "s": [
    1,
    289717,
    -1,
    1010220132872,
    1916,
    2184,
    1864,
    42,
    1863,
    25,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 779851,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 781859,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 783855,
  "vm": 0,
  "s": [
    0,
    14853902,
    1868,
    57,
    1912,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 785807,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 787806,
  "vm": 0,
  "s": [
    0,
    13923932,
    1915,
    834,
    1912,
    2318,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 789802,
  "vm": 4,
  "s": [
    0,
    12080861,
    0,
    6226320,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 791814,
  "vm": 0,
  "s": [
    1,
    285506,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 793852,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 795818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 797835,
  "vm": 0,
  "s": [
    1,
    222734,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 799809,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 801856,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 803847,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 805791,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 807812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 809833,
  "vm": 0,
  "s": [
    1,
    318330,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 811836,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 813856,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 815807,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 817841,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 819846,
  "vm": 0,
  "s": [
    0,
    13885690,
    1878,
    67,
    1868,
    50,
    1912,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 821843,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 823799,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 825854,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 827826,
  "vm": 0,
  "s": [
    0,
    8696119,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 829929,
  "vm": 0,
  "s": [
    0,
    8621561,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 831796,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 833812,
  "vm": 1,
  "s": [
    0,
    8502073
  ]
},
    {
  "tm": 835864,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 837814,
  "vm": 0,
  "s": [
    1912,
    5476,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 839798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 841785,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 843820,
  "vm": 0,
  "s": [
    1,
    244056,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 845831,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 847820,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 849829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 851832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 853854,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 855795,
  "vm": 0,
  "s": [
    1,
    248735,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 857823,
  "vm": 0,
  "s": [
    0,
    7126815,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 859847,
  "vm": 0,
  "s": [
    0,
    8621759,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 861805,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1912,
    2783,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 863847,
  "vm": 1,
  "s": [
    0,
    8502094
  ]
},
    {
  "tm": 865938,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 867961,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 869864,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 871839,
  "vm": 0,
  "s": [
    1,
    286052,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 873825,
  "vm": 0,
  "s": [
    0,
    7464633,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 875816,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 877830,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 879800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 881795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 883785,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 885793,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 887791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 889840,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 891864,
  "vm": 0,
  "s": [
    1930,
    8,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 893806,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 895878,
  "vm": 1,
  "s": [
    0,
    8615600
  ]
},
    {
  "tm": 897816,
  "vm": 1,
  "s": [
    0,
    8916553
  ]
},
    {
  "tm": 899871,
  "vm": 4,
  "s": [
    0,
    12094407,
    0,
    6226320,
    1868,
    50,
    1867,
    32,
    1866,
    297,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 901848,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 903787,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1804,
    15,
    1866,
    349,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 905854,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 907800,
  "vm": 4,
  "s": [
    1,
    285717,
    0,
    6125664,
    1866,
    0,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 909793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 911792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 913822,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 915889,
  "vm": 0,
  "s": [
    1,
    303873,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 917841,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 919841,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1804,
    15,
    1866,
    349,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 921841,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 923816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 925810,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1804,
    15,
    1866,
    349,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 927814,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 929805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 931838,
  "vm": 1,
  "s": [
    0,
    8616231
  ]
},
    {
  "tm": 933815,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 935869,
  "vm": 4,
  "s": [
    0,
    12295878,
    0,
    6226320,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 937857,
  "vm": 0,
  "s": [
    1,
    266940,
    0,
    6026608,
    1887,
    315,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 939815,
  "vm": 0,
  "s": [
    0,
    14821296,
    1866,
    111,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 941803,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 943792,
  "vm": 0,
  "s": [
    0,
    7153986,
    0,
    6026608,
    1887,
    315,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 945834,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 947810,
  "vm": 0,
  "s": [
    1,
    303873,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 949800,
  "vm": 0,
  "s": [
    1932,
    305,
    1868,
    50,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 951790,
  "vm": 0,
  "s": [
    0,
    14788916,
    1880,
    0,
    1929,
    2329,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 953785,
  "vm": 0,
  "s": [
    0,
    14770211,
    1887,
    0,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 955782,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 957796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 959839,
  "vm": 0,
  "s": [
    1,
    247572,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 961809,
  "vm": 0,
  "s": [
    0,
    14856912,
    1880,
    105,
    1934,
    2423,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 963841,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 965808,
  "vm": 0,
  "s": [
    1,
    111488,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 967916,
  "vm": 0,
  "s": [
    0,
    8639428,
    0,
    6125664,
    1934,
    3487,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 969846,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 971813,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 973802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 975816,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 977789,
  "vm": 4,
  "s": [
    0,
    9290016,
    0,
    6226320,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 979838,
  "vm": 4,
  "s": [
    0,
    6943193,
    0,
    6226320,
    1868,
    32,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 981809,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 983815,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 985806,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 987851,
  "vm": 4,
  "s": [
    0,
    570492,
    0,
    6125664,
    1934,
    3487,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 989798,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 991790,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 993824,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 995832,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 997840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 999810,
  "vm": 0,
  "s": [
    0,
    13903196,
    1879,
    92,
    1937,
    1931,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1001816,
  "vm": 0,
  "s": [
    1937,
    90,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1003972,
  "vm": 0,
  "s": [
    0,
    8510736,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1006199,
  "vm": 0,
  "s": [
    0,
    8628344,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1007858,
  "vm": 0,
  "s": [
    1,
    234326,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1009888,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1011812,
  "vm": 1,
  "s": [
    0,
    8900400
  ]
},
    {
  "tm": 1013835,
  "vm": 4,
  "s": [
    0,
    4106309,
    0,
    6226320,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1015842,
  "vm": 0,
  "s": [
    1924,
    138,
    1934,
    3191,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1017824,
  "vm": 0,
  "s": [
    0,
    7182109,
    0,
    6026608,
    1887,
    328,
    1886,
    32,
    1885,
    40,
    1880,
    97,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1019958,
  "vm": 4,
  "s": [
    0,
    15325582,
    0,
    6125664,
    1934,
    3487,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1021846,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1023846,
  "vm": 0,
  "s": [
    0,
    14792141,
    1879,
    292,
    1937,
    1931,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1025811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1027833,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1029836,
  "vm": 0,
  "s": [
    0,
    3958597,
    0,
    6026608,
    1887,
    339,
    1939,
    1878,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1031831,
  "vm": 0,
  "s": [
    0,
    14778672,
    1908,
    0,
    1929,
    2767,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1033813,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1035818,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1037831,
  "vm": 0,
  "s": [
    0,
    1170723,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1039819,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1041837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1043797,
  "vm": 0,
  "s": [
    1,
    304086,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1046185,
  "vm": 0,
  "s": [
    0,
    13875976,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1048763,
  "vm": 0,
  "s": [
    0,
    8579487,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1049992,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1052844,
  "vm": 0,
  "s": [
    0,
    8395396,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1054818,
  "vm": 0,
  "s": [
    1,
    48199,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1056809,
  "vm": 0,
  "s": [
    0,
    2210710,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1058808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1060808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1062819,
  "vm": 0,
  "s": [
    0,
    10009059,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1064845,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1066840,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1068810,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1070848,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1072818,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1929,
    1144,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1074807,
  "vm": 0,
  "s": [
    0,
    6880168,
    0,
    6026608,
    1887,
    315,
    1939,
    1878,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1076834,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1078801,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1080853,
  "vm": 0,
  "s": [
    0,
    14830135,
    1879,
    142,
    1937,
    1931,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1082822,
  "vm": 0,
  "s": [
    1,
    247412,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1084807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1086816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1088807,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1090876,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1092833,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1094829,
  "vm": 0,
  "s": [
    0,
    8653764,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1096977,
  "vm": 1,
  "s": [
    0,
    7126340
  ]
},
    {
  "tm": 1099167,
  "vm": 1,
  "s": [
    0,
    8916527
  ]
},
    {
  "tm": 1100815,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1102836,
  "vm": 0,
  "s": [
    0,
    1146977,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1104802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1106801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1108827,
  "vm": 0,
  "s": [
    1,
    247576,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1110809,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1113254,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1114828,
  "vm": 0,
  "s": [
    1929,
    1453,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1116825,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1118826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1120821,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1122820,
  "vm": 0,
  "s": [
    0,
    10096659,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1124805,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1126818,
  "vm": 0,
  "s": [
    0,
    8687498,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1128938,
  "vm": 0,
  "s": [
    0,
    8623250,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1130855,
  "vm": 0,
  "s": [
    0,
    7038897,
    0,
    6022448,
    1939,
    919,
    1929,
    2329,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1132830,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1134824,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1136829,
  "vm": 0,
  "s": [
    0,
    8579599,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1138808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1140832,
  "vm": 0,
  "s": [
    0,
    13876794,
    1929,
    2767,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1142824,
  "vm": 0,
  "s": [
    0,
    2193309,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1144811,
  "vm": 0,
  "s": [
    1,
    111778,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1146829,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1148822,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1150812,
  "vm": 0,
  "s": [
    0,
    9744435,
    0,
    9742240,
    1929,
    1144,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1152806,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1154804,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1156819,
  "vm": 0,
  "s": [
    0,
    15464217,
    0,
    6026608,
    1887,
    328,
    1939,
    1878,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1158823,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1160818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1162842,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1164837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1166827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1168797,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1170799,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1172817,
  "vm": 0,
  "s": [
    1,
    263824,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1175737,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1176810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1178828,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1180815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1182908,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1184807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1186801,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1188801,
  "vm": 4,
  "s": [
    0,
    12128076,
    0,
    6226320,
    1937,
    1931,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1190796,
  "vm": 4,
  "s": [
    0,
    12634578,
    0,
    6226320,
    1887,
    405,
    1939,
    1878,
    1929,
    2243,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1192823,
  "vm": 4,
  "s": [
    1,
    244056,
    0,
    6125664,
    1934,
    3487,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1194796,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1196807,
  "vm": 0,
  "s": [
    1,
    244056,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1198807,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1200797,
  "vm": 0,
  "s": [
    0,
    8821927,
    0,
    6022448,
    1939,
    919,
    1929,
    2329,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1202791,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1204788,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1206789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1208793,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1210811,
  "vm": 0,
  "s": [
    0,
    8821817,
    0,
    6022448,
    1939,
    919,
    1929,
    2329,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1213518,
  "vm": 0,
  "s": [
    0,
    1141472,
    -1,
    1010220133056,
    1930,
    2459,
    1929,
    2595,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1214829,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1216817,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1218800,
  "vm": 0,
  "s": [
    0,
    8657187,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1220795,
  "vm": 0,
  "s": [
    0,
    2210692,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1222801,
  "vm": 1,
  "s": [
    0,
    8483679
  ]
},
    {
  "tm": 1224814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1226795,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1228846,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1230809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1232801,
  "vm": 0,
  "s": [
    0,
    1172228,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1234796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1236796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1238812,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1240810,
  "vm": 0,
  "s": [
    1,
    261418,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1242811,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1244801,
  "vm": 0,
  "s": [
    1,
    243585,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1246814,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1248795,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1250800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1252896,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1254793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1256797,
  "vm": 0,
  "s": [
    1934,
    8,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1258816,
  "vm": 0,
  "s": [
    0,
    8628391,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1260815,
  "vm": 0,
  "s": [
    0,
    8619776,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1262814,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1264810,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 1266821,
  "vm": 0,
  "s": [
    0,
    8388138,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1268810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1270799,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1929,
    1144,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1272793,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1274806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1276795,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1278860,
  "vm": 0,
  "s": [
    0,
    14106981,
    1942,
    826,
    1937,
    1931,
    1934,
    1925,
    1929,
    1565,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1280820,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1282830,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1284813,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1286794,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1929,
    1144,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1288789,
  "vm": 0,
  "s": [
    0,
    6032752,
    0,
    6032752,
    0,
    14652759,
    1929,
    1864,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1290803,
  "vm": 0,
  "s": [
    0,
    8627987,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1292812,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1294804,
  "vm": 0,
  "s": [
    0,
    8619728,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1296897,
  "vm": 0,
  "s": [
    0,
    8579429,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1298815,
  "vm": 0,
  "s": [
    0,
    7126777,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1300837,
  "vm": 0,
  "s": [
    0,
    1300737,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1302836,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1304865,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1306876,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1308840,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1310873,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1312825,
  "vm": 1,
  "s": [
    1,
    495709
  ]
},
    {
  "tm": 1314861,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1316798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1318852,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133240,
    1929,
    1416,
    1823,
    101,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1320871,
  "vm": 4,
  "s": [
    0,
    13473286,
    0,
    6225104,
    1823,
    127,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1322828,
  "vm": 4,
  "s": [
    0,
    13770185,
    0,
    6225104,
    1823,
    127,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1324835,
  "vm": 4,
  "s": [
    0,
    13557736,
    0,
    6225104,
    1823,
    127,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1326825,
  "vm": 4,
  "s": [
    0,
    15281422,
    0,
    6225104,
    1823,
    127,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1328866,
  "vm": 0,
  "s": [
    0,
    13925460,
    1939,
    919,
    1934,
    2423,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1330829,
  "vm": 0,
  "s": [
    1,
    261041,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1332827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1334815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1336799,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1338792,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1340791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1342838,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1344853,
  "vm": 0,
  "s": [
    0,
    8639507,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1346960,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1348809,
  "vm": 0,
  "s": [
    1,
    244062,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1350822,
  "vm": 0,
  "s": [
    0,
    8628361,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1352808,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1354825,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1356797,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1358831,
  "vm": 1,
  "s": [
    0,
    5117825
  ]
},
    {
  "tm": 1360840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1362898,
  "vm": 0,
  "s": [
    1942,
    1216,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1364820,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1366805,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1368849,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1370867,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1372835,
  "vm": 0,
  "s": [
    0,
    14091865,
    1934,
    2423,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1374841,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1376821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1378851,
  "vm": 0,
  "s": [
    0,
    13875982,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1380824,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1382862,
  "vm": 0,
  "s": [
    1,
    247568,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1384806,
  "vm": 0,
  "s": [
    0,
    8628439,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1386814,
  "vm": 0,
  "s": [
    0,
    8628391,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1388797,
  "vm": 0,
  "s": [
    0,
    8577118,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1390807,
  "vm": 0,
  "s": [
    0,
    8653764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1392843,
  "vm": 1,
  "s": [
    0,
    8404484
  ]
},
    {
  "tm": 1394955,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1396958,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1398824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1400842,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1402844,
  "vm": 1,
  "s": [
    1,
    264064
  ]
},
    {
  "tm": 1404843,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1406826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1408831,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1410808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1412816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1414855,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1416826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1418810,
  "vm": 0,
  "s": [
    1,
    305252,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1420801,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1422818,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1424798,
  "vm": 0,
  "s": [
    0,
    14834928,
    1806,
    0,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1426818,
  "vm": 0,
  "s": [
    0,
    8658340,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1428811,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1430833,
  "vm": 0,
  "s": [
    0,
    8628304,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1432823,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1434817,
  "vm": 0,
  "s": [
    0,
    8653591,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1436958,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1438876,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1440839,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1442951,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1444800,
  "vm": 1,
  "s": [
    1,
    234614
  ]
},
    {
  "tm": 1446842,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1448808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1450837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1452853,
  "vm": 0,
  "s": [
    0,
    14787839,
    1806,
    0,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1454795,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1456788,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1458790,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1460807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1462855,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1464831,
  "vm": 0,
  "s": [
    0,
    7101312,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1466854,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1468832,
  "vm": 0,
  "s": [
    0,
    7126509,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1470815,
  "vm": 0,
  "s": [
    0,
    8653764,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1472814,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1474806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1476822,
  "vm": 0,
  "s": [
    0,
    7225327,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1478900,
  "vm": 1,
  "s": [
    0,
    8912877
  ]
},
    {
  "tm": 1480895,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1482821,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1484895,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1486940,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1488839,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1490839,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1492856,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1494808,
  "vm": 0,
  "s": [
    0,
    2273421,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1496813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1498866,
  "vm": 0,
  "s": [
    0,
    1149621,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1500893,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1502864,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1504807,
  "vm": 0,
  "s": [
    1,
    303873,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1506850,
  "vm": 0,
  "s": [
    0,
    8792204,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1508837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1510815,
  "vm": 1,
  "s": [
    0,
    7126611
  ]
},
    {
  "tm": 1512801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1514831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1516814,
  "vm": 0,
  "s": [
    1,
    289793,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1518811,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1520812,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1522832,
  "vm": 0,
  "s": [
    0,
    8628404,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1524835,
  "vm": 0,
  "s": [
    1,
    48079,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1526960,
  "vm": 0,
  "s": [
    0,
    8657172,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1528833,
  "vm": 1,
  "s": [
    0,
    8615571
  ]
},
    {
  "tm": 1530844,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1532819,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1534798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1536830,
  "vm": 0,
  "s": [
    1,
    290764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1538835,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1540880,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1542840,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1544816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1546834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1548895,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1550831,
  "vm": 0,
  "s": [
    -1,
    2243531152248,
    1937,
    1752,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1552844,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1554818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1556854,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1558805,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1560862,
  "vm": 0,
  "s": [
    0,
    8653852,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1562820,
  "vm": 0,
  "s": [
    0,
    8653728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1564892,
  "vm": 0,
  "s": [
    0,
    8639424,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1566844,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1568991,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1570980,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1572883,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1574979,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1576868,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1578805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1580875,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1582859,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1584827,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1586795,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1588839,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1590832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1592789,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1594785,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1596876,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1598801,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1600871,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1602831,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1604801,
  "vm": 0,
  "s": [
    0,
    8653613,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1606824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1608827,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1610851,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1612800,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1614809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1616801,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1618827,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1620839,
  "vm": 0,
  "s": [
    1,
    261143,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1622799,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1624829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1626802,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1628856,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1630878,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1632839,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1634861,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1636823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1638818,
  "vm": 0,
  "s": [
    0,
    13906812,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1640850,
  "vm": 0,
  "s": [
    0,
    8912337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1642821,
  "vm": 0,
  "s": [
    0,
    8579618,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1644818,
  "vm": 0,
  "s": [
    0,
    8653652,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1646838,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1648817,
  "vm": 0,
  "s": [
    0,
    8579445,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1650822,
  "vm": 0,
  "s": [
    0,
    8628395,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1652932,
  "vm": 0,
  "s": [
    0,
    8878134,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1654961,
  "vm": 0,
  "s": [
    0,
    2210747,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1656858,
  "vm": 1,
  "s": [
    0,
    8351003
  ]
},
    {
  "tm": 1658965,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1660832,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1662813,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1664815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1666875,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1668873,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1670821,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1672855,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1674867,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1676907,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1678879,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1680840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1682805,
  "vm": 0,
  "s": [
    1,
    294082,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1684818,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1686795,
  "vm": 0,
  "s": [
    0,
    14705305,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1688791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1690829,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1692817,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1694809,
  "vm": 0,
  "s": [
    1,
    234326,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1696821,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1698885,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1700822,
  "vm": 0,
  "s": [
    0,
    8628451,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1702873,
  "vm": 0,
  "s": [
    0,
    8628407,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1704913,
  "vm": 1,
  "s": [
    0,
    9419250
  ]
},
    {
  "tm": 1706886,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 1708853,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1710814,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1712824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1714847,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1716846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1718834,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1720826,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1722794,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1724834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1726868,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1728789,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1730860,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1732864,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1734811,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1736849,
  "vm": 0,
  "s": [
    0,
    8579623,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1738813,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1740809,
  "vm": 0,
  "s": [
    0,
    8628310,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1742820,
  "vm": 0,
  "s": [
    0,
    8623086,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1744823,
  "vm": 0,
  "s": [
    0,
    8912352,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1747453,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1748875,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1750821,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1752824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1754803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1756824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1758841,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1760818,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1762877,
  "vm": 0,
  "s": [
    1,
    242667,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1764878,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1766950,
  "vm": 0,
  "s": [
    0,
    15281443,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1768893,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1770799,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1772792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1774794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1776836,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1778844,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1781134,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1782859,
  "vm": 0,
  "s": [
    0,
    14831107,
    1806,
    0,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1784878,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1786831,
  "vm": 0,
  "s": [
    0,
    8653652,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1788816,
  "vm": 0,
  "s": [
    0,
    8653735,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1790803,
  "vm": 0,
  "s": [
    0,
    8619683,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1792828,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1794849,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1796867,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1798824,
  "vm": 1,
  "s": [
    0,
    8912352
  ]
},
    {
  "tm": 1800816,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1802825,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1804832,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1806821,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1808799,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1810826,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1812811,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1814808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1816826,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1818810,
  "vm": 0,
  "s": [
    1,
    220208,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1820800,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1822807,
  "vm": 0,
  "s": [
    1,
    318327,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1824806,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1826800,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1828822,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1830868,
  "vm": 0,
  "s": [
    0,
    10010803,
    -1,
    1010220133352,
    1945,
    2106,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1832896,
  "vm": 0,
  "s": [
    0,
    14822128,
    1806,
    0,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1834812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1836807,
  "vm": 0,
  "s": [
    0,
    10116341,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1838808,
  "vm": 0,
  "s": [
    1,
    495680,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1840856,
  "vm": 0,
  "s": [
    0,
    8653780,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1842854,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1844869,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1846841,
  "vm": 0,
  "s": [
    0,
    8628304,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1848802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1850893,
  "vm": 1,
  "s": [
    0,
    8623266
  ]
},
    {
  "tm": 1852853,
  "vm": 1,
  "s": [
    0,
    8524416
  ]
},
    {
  "tm": 1854867,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1856815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1858877,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1860939,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1862814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1864880,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 1866822,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1868811,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1870827,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1872819,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1874804,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1876828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1878823,
  "vm": 0,
  "s": [
    0,
    7329344,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1880830,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1882831,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1884800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1886806,
  "vm": 0,
  "s": [
    1,
    643316,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1888792,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1890877,
  "vm": 0,
  "s": [
    0,
    8639473,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1892829,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1894809,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1896880,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1898837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1900825,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1902820,
  "vm": 0,
  "s": [
    0,
    7141950,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1904814,
  "vm": 1,
  "s": [
    0,
    8726341
  ]
},
    {
  "tm": 1906846,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1908844,
  "vm": 0,
  "s": [
    0,
    8799013,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1910976,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1912865,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1914982,
  "vm": 0,
  "s": [
    -1,
    2243531151968,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1916843,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1918825,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1920799,
  "vm": 0,
  "s": [
    0,
    14100432,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1922795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1924790,
  "vm": 0,
  "s": [
    1,
    289717,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1926804,
  "vm": 0,
  "s": [
    0,
    14704788,
    1945,
    1397,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1928808,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1930865,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1932836,
  "vm": 0,
  "s": [
    1,
    289717,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1934795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1936814,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1938853,
  "vm": 0,
  "s": [
    0,
    7225403,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1940835,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1942846,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1944851,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1946845,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1948801,
  "vm": 1,
  "s": [
    0,
    8553911
  ]
},
    {
  "tm": 1950874,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1952835,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1954891,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1956865,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1958838,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 1960831,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 1962841,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1964892,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1966824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1968865,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1970796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1972815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1974788,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1976828,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1978793,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1980808,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1982800,
  "vm": 0,
  "s": [
    1,
    248658,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1984798,
  "vm": 0,
  "s": [
    1,
    651396,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1986825,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1988848,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1990846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1992809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1994855,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1996829,
  "vm": 0,
  "s": [
    1,
    48048,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 1998887,
  "vm": 0,
  "s": [
    0,
    2210702,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2000978,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2002978,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2004842,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2006838,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2008978,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2010970,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2012806,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2014800,
  "vm": 1,
  "s": [
    0,
    534886
  ]
},
    {
  "tm": 2016831,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2018796,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2020828,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2022832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2024804,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2026800,
  "vm": 0,
  "s": [
    0,
    7464437,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2028839,
  "vm": 0,
  "s": [
    1,
    495933,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2030857,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2032820,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2034841,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2036822,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2038877,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2040811,
  "vm": 0,
  "s": [
    0,
    8628484,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2042809,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2044803,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2046889,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2048839,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2050802,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2052845,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2054812,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2056813,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2058799,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2060793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2062883,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2064828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2066818,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2068801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2070808,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2072807,
  "vm": 0,
  "s": [
    0,
    485984,
    0,
    6119808,
    1934,
    4103,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2074799,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2076789,
  "vm": 0,
  "s": [
    1945,
    609,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2078900,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2080839,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2082819,
  "vm": 0,
  "s": [
    0,
    14109563,
    1937,
    1102,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2084815,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2086824,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2088813,
  "vm": 0,
  "s": [
    0,
    8653874,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2090816,
  "vm": 0,
  "s": [
    0,
    8628395,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2092814,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2094816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2096823,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2098836,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2100824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2102824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2104823,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2106823,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2108827,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2110806,
  "vm": 0,
  "s": [
    1,
    285796,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2112799,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2114800,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2116858,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2118841,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2120824,
  "vm": 0,
  "s": [
    0,
    8798776,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2122807,
  "vm": 0,
  "s": [
    0,
    1141507,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2124798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2126826,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2128828,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2130809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2132798,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2134810,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2136812,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2138810,
  "vm": 0,
  "s": [
    0,
    8579487,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2140815,
  "vm": 0,
  "s": [
    0,
    8653629,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2142807,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2144808,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2146807,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 2148829,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2150823,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2152919,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2154824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2156828,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2158824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2160844,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2162793,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2164816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2166797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2168825,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2170821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2172816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2174814,
  "vm": 0,
  "s": [
    0,
    1172232,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2176831,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2178790,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2180796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2182811,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2184796,
  "vm": 0,
  "s": [
    0,
    9040604,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2186802,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2188801,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2190795,
  "vm": 0,
  "s": [
    0,
    8577046,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2192793,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2194800,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2196824,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2198812,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2200797,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2202809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2204793,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2206810,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2208852,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2210820,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2212863,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2214814,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2216799,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2218841,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2220882,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2222846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2224849,
  "vm": 0,
  "s": [
    0,
    13876794,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2226818,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2228819,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2230831,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2232868,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2234874,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2236806,
  "vm": 0,
  "s": [
    0,
    8628223,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2238843,
  "vm": 0,
  "s": [
    0,
    8623182,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2240807,
  "vm": 0,
  "s": [
    0,
    8628420,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2242820,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2244886,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2246827,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2248844,
  "vm": 0,
  "s": [
    0,
    8628395,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2250864,
  "vm": 1,
  "s": [
    0,
    8502099
  ]
},
    {
  "tm": 2252810,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2254816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2256833,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2258826,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2260829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2262868,
  "vm": 0,
  "s": [
    1947,
    8,
    1945,
    2922,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2264857,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2266850,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2268827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2270833,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2272825,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2274822,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2276814,
  "vm": 0,
  "s": [
    0,
    8639507,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2278801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2280814,
  "vm": 0,
  "s": [
    0,
    8628391,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2282806,
  "vm": 0,
  "s": [
    0,
    8653780,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2284805,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2286865,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2288830,
  "vm": 0,
  "s": [
    0,
    8628395,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2290972,
  "vm": 0,
  "s": [
    0,
    1300737,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2292917,
  "vm": 0,
  "s": [
    0,
    8878139,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2294880,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2296921,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2298839,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2300894,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2302958,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2304956,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2306816,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2308842,
  "vm": 0,
  "s": [
    0,
    1149621,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2310847,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2312822,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2314825,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2316812,
  "vm": 0,
  "s": [
    0,
    8750176,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2318812,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2320840,
  "vm": 0,
  "s": [
    1945,
    1658,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2322826,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2324850,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2326852,
  "vm": 0,
  "s": [
    1,
    643316,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2328785,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2330840,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2332816,
  "vm": 0,
  "s": [
    0,
    8628420,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2334834,
  "vm": 0,
  "s": [
    0,
    14830832,
    1806,
    0,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2336835,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2338838,
  "vm": 0,
  "s": [
    0,
    8653897,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2340844,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2342795,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2344864,
  "vm": 0,
  "s": [
    0,
    8623072,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2346912,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2348885,
  "vm": 0,
  "s": [
    0,
    1300758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2350993,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2352995,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2355019,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2356908,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2358914,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2361003,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2362868,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2364849,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2366950,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2368797,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2370831,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2372800,
  "vm": 0,
  "s": [
    0,
    13916662,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2374832,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2376791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2378894,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2380806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2382825,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2384787,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2386877,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2388822,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2390815,
  "vm": 0,
  "s": [
    0,
    8579459,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2392816,
  "vm": 0,
  "s": [
    0,
    13874829,
    1939,
    919,
    1934,
    2423,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2394843,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2396822,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2398844,
  "vm": 0,
  "s": [
    0,
    8579434,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2400894,
  "vm": 0,
  "s": [
    0,
    8912352,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2402855,
  "vm": 0,
  "s": [
    0,
    1300758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2404880,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2406899,
  "vm": 1,
  "s": [
    0,
    8616083
  ]
},
    {
  "tm": 2408808,
  "vm": 0,
  "s": [
    0,
    13875918,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2410815,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2412809,
  "vm": 0,
  "s": [
    1,
    242451,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2414833,
  "vm": 0,
  "s": [
    1,
    681368,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2416836,
  "vm": 0,
  "s": [
    0,
    9742765,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2418784,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2420806,
  "vm": 0,
  "s": [
    1934,
    1834,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2422818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2424860,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2426812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2428852,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2430840,
  "vm": 0,
  "s": [
    0,
    9041936,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2432812,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2434847,
  "vm": 0,
  "s": [
    0,
    7225194,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2436842,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2438817,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2440819,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2442806,
  "vm": 0,
  "s": [
    0,
    8653601,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2444925,
  "vm": 0,
  "s": [
    0,
    8662464,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2446862,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2448873,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2450874,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2452898,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2454995,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2456931,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2458862,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2460835,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2462851,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2464900,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2466970,
  "vm": 0,
  "s": [
    0,
    13885694,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2468904,
  "vm": 0,
  "s": [
    1,
    248070,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2470888,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2472834,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2474795,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2476905,
  "vm": 0,
  "s": [
    0,
    14106915,
    1939,
    346,
    1934,
    2423,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2478852,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2480821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2482805,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2484787,
  "vm": 0,
  "s": [
    0,
    8382999,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2486808,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2488865,
  "vm": 0,
  "s": [
    0,
    8653512,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2490820,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2492811,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2494808,
  "vm": 0,
  "s": [
    0,
    8577060,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2496820,
  "vm": 0,
  "s": [
    1,
    286009,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2498815,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2500873,
  "vm": 1,
  "s": [
    0,
    8615655
  ]
},
    {
  "tm": 2502873,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2504814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2506873,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2508836,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2510858,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2512812,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2514855,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2516804,
  "vm": 1,
  "s": [
    0,
    8493983
  ]
},
    {
  "tm": 2518839,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2520850,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2522799,
  "vm": 0,
  "s": [
    1,
    260549,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2524799,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2526908,
  "vm": 0,
  "s": [
    0,
    8804959,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2528821,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2530852,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2532872,
  "vm": 0,
  "s": [
    1934,
    2680,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2534793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2536797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2538809,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2540792,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2542852,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2544807,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2546991,
  "vm": 0,
  "s": [
    0,
    8628404,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2548848,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2550812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2552848,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2554844,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2556804,
  "vm": 0,
  "s": [
    0,
    8628407,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2558933,
  "vm": 0,
  "s": [
    0,
    8912398,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2560918,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2562796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2564831,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2566816,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2568833,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2570846,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2572831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2574900,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2576888,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2578919,
  "vm": 0,
  "s": [
    0,
    8821927,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2580821,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2582842,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2584824,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2586855,
  "vm": 0,
  "s": [
    0,
    2153678,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2588810,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2590816,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2592805,
  "vm": 0,
  "s": [
    0,
    8623250,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2594868,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1926,
    188,
    1806,
    125,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2596804,
  "vm": 0,
  "s": [
    0,
    8653874,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2598862,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2600809,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2602860,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2604937,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2606789,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2608919,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2610828,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2612801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2614804,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2616894,
  "vm": 1,
  "s": [
    0,
    8615564
  ]
},
    {
  "tm": 2618831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2620835,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2622824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2624837,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2626844,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2628834,
  "vm": 0,
  "s": [
    1934,
    1919,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2630838,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2632885,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2634849,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2636840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2638828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2640868,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2642800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2644799,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2646835,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2648803,
  "vm": 0,
  "s": [
    0,
    2192805,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2650802,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2652801,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2654838,
  "vm": 0,
  "s": [
    0,
    8639431,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2656928,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2658874,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2660948,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2662834,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2664985,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2666954,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2668856,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2670809,
  "vm": 1,
  "s": [
    0,
    8486832
  ]
},
    {
  "tm": 2672859,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2674849,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2676831,
  "vm": 0,
  "s": [
    0,
    7329501,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2678780,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2680814,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2682809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2684790,
  "vm": 0,
  "s": [
    0,
    13903876,
    1945,
    2922,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2686785,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2688789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2690781,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2692798,
  "vm": 0,
  "s": [
    0,
    1141507,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2694802,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2696822,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2698818,
  "vm": 0,
  "s": [
    0,
    8628427,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2700830,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2702811,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2704811,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2706813,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2708855,
  "vm": 0,
  "s": [
    0,
    8887726,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2710803,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2712865,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2714847,
  "vm": 0,
  "s": [
    0,
    13877534,
    1934,
    2842,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2716800,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2718803,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2720845,
  "vm": 1,
  "s": [
    0,
    8395955
  ]
},
    {
  "tm": 2722861,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2724826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2726786,
  "vm": 0,
  "s": [
    0,
    8835936,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2728810,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2730877,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2732824,
  "vm": 0,
  "s": [
    0,
    14704650,
    1945,
    1397,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2734836,
  "vm": 0,
  "s": [
    0,
    13881791,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2736828,
  "vm": 0,
  "s": [
    0,
    8577090,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2738804,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2740815,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2742836,
  "vm": 0,
  "s": [
    0,
    8395260,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2744838,
  "vm": 0,
  "s": [
    0,
    8653770,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2746881,
  "vm": 0,
  "s": [
    0,
    8653852,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2748848,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2750845,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2752925,
  "vm": 1,
  "s": [
    0,
    8597966
  ]
},
    {
  "tm": 2754840,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2756866,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2758911,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2760959,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2762802,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2764880,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2766836,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2768877,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2770920,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2772865,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2774853,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2776919,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2778917,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2780860,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2782857,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2784826,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2786814,
  "vm": 0,
  "s": [
    0,
    13923867,
    1939,
    919,
    1934,
    3243,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2788835,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2790834,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2792809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2794790,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2796843,
  "vm": 0,
  "s": [
    1939,
    80,
    1945,
    2540,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2798834,
  "vm": 0,
  "s": [
    0,
    8579490,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2800844,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2802838,
  "vm": 0,
  "s": [
    0,
    8628447,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2804809,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2806866,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2808815,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2810797,
  "vm": 1,
  "s": [
    0,
    7126340
  ]
},
    {
  "tm": 2812845,
  "vm": 1,
  "s": [
    1,
    244056
  ]
},
    {
  "tm": 2814849,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2816803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2818802,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2820862,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2822848,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2824921,
  "vm": 0,
  "s": [
    1,
    259120,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2826827,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2828857,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2830840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2832805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2834841,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2836801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2838794,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2840808,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2842821,
  "vm": 0,
  "s": [
    0,
    8628407,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2844805,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2846847,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2848869,
  "vm": 0,
  "s": [
    0,
    8653652,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2850809,
  "vm": 0,
  "s": [
    0,
    8628439,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2852841,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2854809,
  "vm": 0,
  "s": [
    0,
    8395270,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2856893,
  "vm": 1,
  "s": [
    0,
    8615606
  ]
},
    {
  "tm": 2858821,
  "vm": 1,
  "s": [
    0,
    8615136
  ]
},
    {
  "tm": 2860808,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2862848,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2864811,
  "vm": 1,
  "s": [
    0,
    7126395
  ]
},
    {
  "tm": 2866797,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2868796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2870794,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2872837,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2874809,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2876787,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2878841,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2880837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2882853,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2884847,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2886844,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2888809,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2890808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2892804,
  "vm": 0,
  "s": [
    0,
    8653697,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2894818,
  "vm": 0,
  "s": [
    0,
    8628432,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2896929,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2898828,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2900865,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2902850,
  "vm": 0,
  "s": [
    0,
    8628310,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2904931,
  "vm": 1,
  "s": [
    0,
    8912864
  ]
},
    {
  "tm": 2906826,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2908877,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2910835,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2912811,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2914855,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2916824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2918826,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2920833,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2922906,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2924838,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2926834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2928816,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2930890,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2932827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2934794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2936792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2938790,
  "vm": 0,
  "s": [
    0,
    8821927,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2940807,
  "vm": 0,
  "s": [
    0,
    13903202,
    1934,
    825,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2942805,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2944790,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2946841,
  "vm": 0,
  "s": [
    1,
    249335,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2948811,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2950871,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2952807,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2954806,
  "vm": 0,
  "s": [
    0,
    8579429,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2956816,
  "vm": 0,
  "s": [
    1,
    242451,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2958817,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2960818,
  "vm": 0,
  "s": [
    0,
    8653508,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2963384,
  "vm": 0,
  "s": [
    0,
    8628420,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2964821,
  "vm": 0,
  "s": [
    0,
    8623086,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2966923,
  "vm": 1,
  "s": [
    1,
    681334
  ]
},
    {
  "tm": 2968835,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2970830,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2972829,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 2974817,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 2976850,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2978821,
  "vm": 0,
  "s": [
    0,
    7101853,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2980869,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2982832,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2984797,
  "vm": 0,
  "s": [
    1911,
    517,
    1945,
    1244,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2986786,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2988791,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2990806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2992818,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2994788,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2996829,
  "vm": 0,
  "s": [
    0,
    13919363,
    1939,
    919,
    1934,
    3243,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 2998801,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3000810,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3002809,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3004814,
  "vm": 0,
  "s": [
    0,
    8628391,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3006807,
  "vm": 0,
  "s": [
    0,
    8579490,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3008801,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3010805,
  "vm": 0,
  "s": [
    0,
    8628474,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3013293,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3014837,
  "vm": 0,
  "s": [
    0,
    8628443,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3016804,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3018849,
  "vm": 0,
  "s": [
    0,
    8912352,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3020852,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3022951,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3024945,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3026948,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3028925,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3030851,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3032946,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3034827,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3036897,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3038887,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3040891,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3042834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3044830,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3046843,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3048864,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3050821,
  "vm": 0,
  "s": [
    1939,
    101,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3052846,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3054823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3056864,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3058915,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3060846,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3062808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3064843,
  "vm": 0,
  "s": [
    0,
    8350973,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3066814,
  "vm": 0,
  "s": [
    0,
    7225255,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3068809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3070808,
  "vm": 0,
  "s": [
    0,
    8579466,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3072806,
  "vm": 0,
  "s": [
    0,
    8579470,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3074846,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3076805,
  "vm": 0,
  "s": [
    0,
    8656832,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3078820,
  "vm": 0,
  "s": [
    0,
    7225410,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3080931,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3082836,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3084869,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3086877,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3088839,
  "vm": 1,
  "s": [
    0,
    8597957
  ]
},
    {
  "tm": 3090883,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3092929,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3094951,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3096846,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3098826,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3100901,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3102877,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3104821,
  "vm": 1,
  "s": [
    0,
    8616103
  ]
},
    {
  "tm": 3106803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3108816,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3110845,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3112823,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3114809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3116806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3118869,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3120805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3122853,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3124794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3126832,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3128819,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3130844,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3132821,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3134813,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3136827,
  "vm": 0,
  "s": [
    0,
    8653897,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3138811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3140840,
  "vm": 0,
  "s": [
    0,
    8623072,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3142864,
  "vm": 0,
  "s": [
    0,
    8623072,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3144824,
  "vm": 0,
  "s": [
    0,
    8628412,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3147076,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3148862,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3150896,
  "vm": 0,
  "s": [
    0,
    8639473,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3152927,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3154961,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3156953,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3158850,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3160904,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3162801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3164853,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3166837,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3168842,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3170840,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3172868,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3174838,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3176818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3178828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3180801,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3182852,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3184819,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3186836,
  "vm": 0,
  "s": [
    1,
    242735,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3188790,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3190803,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3192830,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3194791,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3196818,
  "vm": 0,
  "s": [
    0,
    8395382,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3198819,
  "vm": 0,
  "s": [
    1,
    240160,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3200812,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3202828,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3204847,
  "vm": 0,
  "s": [
    1945,
    657,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3206817,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3208807,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3210819,
  "vm": 0,
  "s": [
    0,
    8579482,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3213552,
  "vm": 0,
  "s": [
    0,
    8395277,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3214858,
  "vm": 0,
  "s": [
    0,
    8653652,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3216887,
  "vm": 0,
  "s": [
    0,
    2194628,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3218826,
  "vm": 0,
  "s": [
    0,
    8728202,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3220906,
  "vm": 0,
  "s": [
    0,
    2210702,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3222876,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3224954,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3226878,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3228957,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3230944,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3232857,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3234952,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3236948,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3238895,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3240883,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3242840,
  "vm": 0,
  "s": [
    1,
    303873,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3244837,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3246853,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3248812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3250832,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3252838,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3254828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3256810,
  "vm": 0,
  "s": [
    -1,
    2243531152084,
    1937,
    2122,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3258797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3260803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3262889,
  "vm": 0,
  "s": [
    0,
    8798776,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3264812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3266878,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3268810,
  "vm": 0,
  "s": [
    0,
    8627968,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3270809,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3272811,
  "vm": 0,
  "s": [
    0,
    8623268,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3274826,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3276815,
  "vm": 0,
  "s": [
    1934,
    50,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3278807,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3280815,
  "vm": 0,
  "s": [
    0,
    1171656,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3282814,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3284857,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3286935,
  "vm": 0,
  "s": [
    1,
    48156,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3288923,
  "vm": 0,
  "s": [
    1,
    48174,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3290800,
  "vm": 1,
  "s": [
    0,
    8597971
  ]
},
    {
  "tm": 3292953,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3294890,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3296943,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3298949,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3300861,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3302949,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3304959,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3306954,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3308822,
  "vm": 1,
  "s": [
    1,
    240301
  ]
},
    {
  "tm": 3310868,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3312833,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3314852,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3316823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3318811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3320812,
  "vm": 0,
  "s": [
    1,
    258443,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3322830,
  "vm": 0,
  "s": [
    1,
    290764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3324789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3326842,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3328857,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3330808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3332809,
  "vm": 1,
  "s": [
    0,
    8396308
  ]
},
    {
  "tm": 3334805,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3336803,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3338800,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3340802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3342797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3344806,
  "vm": 0,
  "s": [
    0,
    7224629,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3346812,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3348958,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3350864,
  "vm": 0,
  "s": [
    0,
    8728202,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3352944,
  "vm": 1,
  "s": [
    0,
    4333268
  ]
},
    {
  "tm": 3354868,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3356795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3358795,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3360792,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3362923,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3364838,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3366783,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3368910,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3370859,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3372902,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3374846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3376841,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3378860,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3380805,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3382806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3384806,
  "vm": 0,
  "s": [
    0,
    8621748,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3386806,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3388803,
  "vm": 0,
  "s": [
    0,
    8628344,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3390814,
  "vm": 0,
  "s": [
    0,
    8628344,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3392807,
  "vm": 0,
  "s": [
    0,
    8653821,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3394801,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3396804,
  "vm": 0,
  "s": [
    0,
    8791861,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3398969,
  "vm": 1,
  "s": [
    0,
    8615648
  ]
},
    {
  "tm": 3400849,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3402874,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3404870,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3406952,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3408949,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3410834,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3412814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3414814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3416825,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3418792,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3420833,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3422832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3424834,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3426815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3428785,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3430800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3432824,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3434789,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3436790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3438791,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3440808,
  "vm": 0,
  "s": [
    0,
    13903241,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3442828,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3444789,
  "vm": 0,
  "s": [
    0,
    14704650,
    1945,
    1397,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3446837,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3448815,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3450806,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3452839,
  "vm": 0,
  "s": [
    0,
    8653770,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3454803,
  "vm": 0,
  "s": [
    0,
    2201680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3456796,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3458813,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3460957,
  "vm": 0,
  "s": [
    0,
    8912364,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3462840,
  "vm": 0,
  "s": [
    0,
    2210744,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3464869,
  "vm": 0,
  "s": [
    0,
    1300758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3466805,
  "vm": 1,
  "s": [
    0,
    8385812
  ]
},
    {
  "tm": 3468853,
  "vm": 1,
  "s": [
    0,
    8351038
  ]
},
    {
  "tm": 3470829,
  "vm": 1,
  "s": [
    0,
    8350738
  ]
},
    {
  "tm": 3472886,
  "vm": 1,
  "s": [
    0,
    4334885
  ]
},
    {
  "tm": 3474951,
  "vm": 1,
  "s": [
    0,
    7126378
  ]
},
    {
  "tm": 3476948,
  "vm": 1,
  "s": [
    0,
    8351188
  ]
},
    {
  "tm": 3478829,
  "vm": 1,
  "s": [
    0,
    8351073
  ]
},
    {
  "tm": 3481001,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3482838,
  "vm": 1,
  "s": [
    0,
    8351018
  ]
},
    {
  "tm": 3484829,
  "vm": 1,
  "s": [
    0,
    7126358
  ]
},
    {
  "tm": 3486813,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3488854,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3490839,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3492864,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3494827,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3496806,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3498812,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3500793,
  "vm": 0,
  "s": [
    1934,
    2691,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3502814,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3504791,
  "vm": 0,
  "s": [
    0,
    8750192,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3506781,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3508787,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3510788,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3512937,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3514823,
  "vm": 0,
  "s": [
    0,
    13874957,
    -1,
    2243531153230,
    1937,
    1752,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3516808,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3518842,
  "vm": 0,
  "s": [
    0,
    7126715,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3520809,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3522834,
  "vm": 0,
  "s": [
    0,
    8653525,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3524806,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3526813,
  "vm": 0,
  "s": [
    0,
    7224827,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3528805,
  "vm": 0,
  "s": [
    0,
    8628439,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3530813,
  "vm": 0,
  "s": [
    0,
    8912352,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3532802,
  "vm": 1,
  "s": [
    1,
    240293
  ]
},
    {
  "tm": 3534809,
  "vm": 0,
  "s": [
    0,
    1074832,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3536814,
  "vm": 1,
  "s": [
    0,
    7126371
  ]
},
    {
  "tm": 3538792,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3540797,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3542823,
  "vm": 0,
  "s": [
    0,
    14073712,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3544839,
  "vm": 0,
  "s": [
    1,
    298078,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3546803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3548891,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3550839,
  "vm": 0,
  "s": [
    0,
    14109557,
    1937,
    1102,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3552822,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3554850,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3556842,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3558834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3560825,
  "vm": 0,
  "s": [
    0,
    2156928,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3562830,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3564805,
  "vm": 0,
  "s": [
    0,
    8912364,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3566975,
  "vm": 0,
  "s": [
    0,
    8579487,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3568805,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3570794,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3572794,
  "vm": 1,
  "s": [
    1,
    681393
  ]
},
    {
  "tm": 3574811,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3576827,
  "vm": 0,
  "s": [
    0,
    8623014,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3578805,
  "vm": 0,
  "s": [
    0,
    8619698,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3580834,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3583387,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3584795,
  "vm": 1,
  "s": [
    0,
    8912352
  ]
},
    {
  "tm": 3586815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3588852,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3590827,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3592822,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3594843,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3596912,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3598822,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3600814,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3602807,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3604810,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3606825,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3608840,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3610848,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3612869,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3614822,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3616853,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3618823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3620822,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3622851,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3624805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3626839,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3628829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3630839,
  "vm": 0,
  "s": [
    0,
    9966208,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3632818,
  "vm": 0,
  "s": [
    1924,
    8,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3634814,
  "vm": 0,
  "s": [
    0,
    15464181,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3636857,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3638827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3640827,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3642824,
  "vm": 0,
  "s": [
    0,
    8653581,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3644815,
  "vm": 0,
  "s": [
    0,
    8621759,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3646955,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3648822,
  "vm": 0,
  "s": [
    0,
    8628314,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3650816,
  "vm": 0,
  "s": [
    0,
    8653874,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3652812,
  "vm": 0,
  "s": [
    0,
    8619680,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3654814,
  "vm": 0,
  "s": [
    0,
    8623182,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3656810,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3658816,
  "vm": 0,
  "s": [
    0,
    8619655,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3660837,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3662890,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3664868,
  "vm": 0,
  "s": [
    0,
    8728202,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3666817,
  "vm": 1,
  "s": [
    0,
    8615683
  ]
},
    {
  "tm": 3668809,
  "vm": 1,
  "s": [
    0,
    8351113
  ]
},
    {
  "tm": 3670812,
  "vm": 1,
  "s": [
    0,
    8345123
  ]
},
    {
  "tm": 3672818,
  "vm": 1,
  "s": [
    0,
    8351046
  ]
},
    {
  "tm": 3674824,
  "vm": 1,
  "s": [
    0,
    8345169
  ]
},
    {
  "tm": 3676803,
  "vm": 1,
  "s": [
    0,
    8351018
  ]
},
    {
  "tm": 3678812,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3680813,
  "vm": 1,
  "s": [
    0,
    8354085
  ]
},
    {
  "tm": 3682832,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3684825,
  "vm": 1,
  "s": [
    0,
    8720875
  ]
},
    {
  "tm": 3686824,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3688835,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3690832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3692823,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3694856,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3696813,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3698822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3700809,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3702813,
  "vm": 0,
  "s": [
    1,
    248070,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3704808,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3706817,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3708844,
  "vm": 0,
  "s": [
    1,
    244056,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3710815,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3712856,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3714833,
  "vm": 0,
  "s": [
    0,
    8912376,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3716816,
  "vm": 0,
  "s": [
    0,
    8579509,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3721375,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3721428,
  "vm": 0,
  "s": [
    0,
    8579490,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3722867,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3724810,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3726812,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3728812,
  "vm": 0,
  "s": [
    0,
    15343460,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3731485,
  "vm": 0,
  "s": [
    0,
    1300758,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3732818,
  "vm": 0,
  "s": [
    0,
    8619694,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3734813,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3736802,
  "vm": 0,
  "s": [
    0,
    8653785,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3738805,
  "vm": 1,
  "s": [
    0,
    8913790
  ]
},
    {
  "tm": 3740808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3742803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3744799,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3746810,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3748808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3750799,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3752808,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3754795,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3756801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3758824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3760803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 3762827,
  "vm": 1,
  "s": [
    0,
    8696057
  ]
},
    {
  "tm": 3764800,
  "vm": 1,
  "s": [
    0,
    8916527
  ]
},
    {
  "tm": 3766799,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3768803,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3770800,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3772830,
  "vm": 0,
  "s": [
    0,
    13919740,
    1939,
    919,
    1934,
    3243,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3774831,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3776807,
  "vm": 0,
  "s": [
    0,
    2153678,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3778793,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3780850,
  "vm": 0,
  "s": [
    0,
    8906516,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3782813,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3784796,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3786812,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3788805,
  "vm": 0,
  "s": [
    1930,
    233,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3790812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3792807,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3794804,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3796830,
  "vm": 0,
  "s": [
    0,
    8628310,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3798816,
  "vm": 0,
  "s": [
    0,
    8628420,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3800815,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3802816,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3804812,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3806804,
  "vm": 0,
  "s": [
    0,
    7303385,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3808810,
  "vm": 0,
  "s": [
    0,
    8395270,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3810822,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3812794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3814851,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3816797,
  "vm": 0,
  "s": [
    0,
    8662464,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3818804,
  "vm": 1,
  "s": [
    0,
    8615600
  ]
},
    {
  "tm": 3820798,
  "vm": 1,
  "s": [
    0,
    8696119
  ]
},
    {
  "tm": 3822798,
  "vm": 1,
  "s": [
    0,
    7126340
  ]
},
    {
  "tm": 3824805,
  "vm": 1,
  "s": [
    0,
    8345169
  ]
},
    {
  "tm": 3826826,
  "vm": 1,
  "s": [
    0,
    8351097
  ]
},
    {
  "tm": 3828805,
  "vm": 1,
  "s": [
    0,
    7126350
  ]
},
    {
  "tm": 3830822,
  "vm": 1,
  "s": [
    0,
    8354072
  ]
},
    {
  "tm": 3832822,
  "vm": 1,
  "s": [
    0,
    8345131
  ]
},
    {
  "tm": 3834807,
  "vm": 1,
  "s": [
    0,
    8354077
  ]
},
    {
  "tm": 3836799,
  "vm": 1,
  "s": [
    0,
    7126362
  ]
},
    {
  "tm": 3838800,
  "vm": 1,
  "s": [
    0,
    8350973
  ]
},
    {
  "tm": 3840806,
  "vm": 1,
  "s": [
    0,
    8354090
  ]
},
    {
  "tm": 3842810,
  "vm": 1,
  "s": [
    0,
    7126350
  ]
},
    {
  "tm": 3844809,
  "vm": 1,
  "s": [
    0,
    8606682
  ]
},
    {
  "tm": 3846812,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3848809,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3850805,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3852798,
  "vm": 0,
  "s": [
    1921,
    4,
    1945,
    905,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3854814,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3856817,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3858818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3860807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3862829,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3864818,
  "vm": 0,
  "s": [
    1,
    303873,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3866820,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3868810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3870832,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3872815,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3874825,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3876824,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3880089,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3881267,
  "vm": 0,
  "s": [
    0,
    8628474,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3887345,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3887401,
  "vm": 0,
  "s": [
    0,
    8628479,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3887434,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3888865,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3890810,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3893190,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3898132,
  "vm": 0,
  "s": [
    0,
    8653672,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3900503,
  "vm": 0,
  "s": [
    0,
    8623072,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3902125,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3903825,
  "vm": 1,
  "s": [
    0,
    8912358
  ]
},
    {
  "tm": 3905834,
  "vm": 1,
  "s": [
    0,
    8402756
  ]
},
    {
  "tm": 3907809,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 3909819,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3911813,
  "vm": 1,
  "s": [
    0,
    8350968
  ]
},
    {
  "tm": 3913856,
  "vm": 1,
  "s": [
    0,
    8351242
  ]
},
    {
  "tm": 3915806,
  "vm": 1,
  "s": [
    0,
    8350811
  ]
},
    {
  "tm": 3917806,
  "vm": 1,
  "s": [
    0,
    8353275
  ]
},
    {
  "tm": 3919825,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3921821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3923802,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3925819,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3927808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3929862,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3931801,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3933793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3936063,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3937823,
  "vm": 0,
  "s": [
    1945,
    272,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3939798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3941802,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3943805,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3945800,
  "vm": 0,
  "s": [
    0,
    8382999,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3947816,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3949805,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3952149,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3954634,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3956687,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3957824,
  "vm": 0,
  "s": [
    0,
    8628407,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3959811,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3961802,
  "vm": 0,
  "s": [
    0,
    8628416,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3963823,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3965814,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3967819,
  "vm": 0,
  "s": [
    0,
    8395387,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3969817,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3971813,
  "vm": 0,
  "s": [
    0,
    2210694,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3973806,
  "vm": 0,
  "s": [
    0,
    1300720,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 3975804,
  "vm": 1,
  "s": [
    1,
    681393
  ]
},
    {
  "tm": 3977805,
  "vm": 1,
  "s": [
    0,
    8355205
  ]
},
    {
  "tm": 3979796,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3981791,
  "vm": 1,
  "s": [
    0,
    7126683
  ]
},
    {
  "tm": 3983800,
  "vm": 1,
  "s": [
    0,
    7126389
  ]
},
    {
  "tm": 3985781,
  "vm": 1,
  "s": [
    0,
    8350877
  ]
},
    {
  "tm": 3987795,
  "vm": 1,
  "s": [
    1,
    681393
  ]
},
    {
  "tm": 3989809,
  "vm": 1,
  "s": [
    0,
    8345169
  ]
},
    {
  "tm": 3991781,
  "vm": 1,
  "s": [
    0,
    8351232
  ]
},
    {
  "tm": 3993853,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 3995779,
  "vm": 1,
  "s": [
    0,
    8351086
  ]
},
    {
  "tm": 3997834,
  "vm": 1,
  "s": [
    0,
    8351038
  ]
},
    {
  "tm": 3999779,
  "vm": 1,
  "s": [
    0,
    8509987
  ]
},
    {
  "tm": 4001785,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4003788,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4005785,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4007792,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4009791,
  "vm": 6,
  "s": [
    0,
    6994800,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4011789,
  "vm": 0,
  "s": [
    1,
    249356,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4013807,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4015801,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4017803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4019851,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4021786,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4023812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4025795,
  "vm": 0,
  "s": [
    0,
    14131650,
    1939,
    670,
    1945,
    2540,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4027805,
  "vm": 0,
  "s": [
    0,
    8577090,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4029816,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4031807,
  "vm": 0,
  "s": [
    0,
    7126336,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4033797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4035809,
  "vm": 0,
  "s": [
    1,
    222645,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4037837,
  "vm": 0,
  "s": [
    0,
    8653838,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4039878,
  "vm": 0,
  "s": [
    0,
    8623104,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4044695,
  "vm": 0,
  "s": [
    0,
    8395387,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4045053,
  "vm": 0,
  "s": [
    0,
    8628404,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4047148,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4048889,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4050833,
  "vm": 1,
  "s": [
    0,
    8726341
  ]
},
    {
  "tm": 4052833,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4054819,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4056807,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4058818,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4060822,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4062825,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4064821,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4066823,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4068818,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4070819,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4072820,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4074793,
  "vm": 1,
  "s": [
    0,
    8897925
  ]
},
    {
  "tm": 4076797,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4078822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4080926,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4082856,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4084828,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4086824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4088857,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4090869,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4092901,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4094879,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4096846,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4098807,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4100847,
  "vm": 0,
  "s": [
    1,
    244056,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4102828,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4104807,
  "vm": 0,
  "s": [
    0,
    8628425,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4106806,
  "vm": 0,
  "s": [
    0,
    8628310,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4108810,
  "vm": 0,
  "s": [
    0,
    8619743,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4110817,
  "vm": 0,
  "s": [
    0,
    8395387,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4112807,
  "vm": 0,
  "s": [
    0,
    8653508,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4114808,
  "vm": 0,
  "s": [
    0,
    8628397,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4116815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4118839,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4120876,
  "vm": 1,
  "s": [
    1,
    269888
  ]
},
    {
  "tm": 4122872,
  "vm": 1,
  "s": [
    0,
    8353800
  ]
},
    {
  "tm": 4124928,
  "vm": 1,
  "s": [
    0,
    8351149
  ]
},
    {
  "tm": 4126961,
  "vm": 1,
  "s": [
    0,
    8350971
  ]
},
    {
  "tm": 4128830,
  "vm": 1,
  "s": [
    0,
    8351031
  ]
},
    {
  "tm": 4130817,
  "vm": 1,
  "s": [
    0,
    7126395
  ]
},
    {
  "tm": 4132898,
  "vm": 1,
  "s": [
    0,
    8345127
  ]
},
    {
  "tm": 4134858,
  "vm": 1,
  "s": [
    0,
    8350775
  ]
},
    {
  "tm": 4136944,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4138860,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4140841,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4142818,
  "vm": 0,
  "s": [
    1,
    261053,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4144813,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4146852,
  "vm": 0,
  "s": [
    1,
    290809,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4148843,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4150834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4152812,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4154807,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4156808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4158790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4160793,
  "vm": 0,
  "s": [
    0,
    8804830,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4162823,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4164801,
  "vm": 0,
  "s": [
    0,
    8579429,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4166790,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4168859,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4170819,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4172811,
  "vm": 0,
  "s": [
    0,
    8623031,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4174793,
  "vm": 0,
  "s": [
    0,
    8653652,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4176828,
  "vm": 0,
  "s": [
    1,
    243585,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4178811,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4180826,
  "vm": 0,
  "s": [
    0,
    8579482,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4182930,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 4184861,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 4186808,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4188806,
  "vm": 0,
  "s": [
    0,
    13882046,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4190904,
  "vm": 3,
  "s": [
    0,
    648128,
    0,
    6226032,
    1944,
    1138,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4192826,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4194890,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4196905,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4198813,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4200837,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4202873,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4204799,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4206818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4208873,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4210855,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4212804,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4214815,
  "vm": 0,
  "s": [
    0,
    8656133,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4216842,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4218848,
  "vm": 0,
  "s": [
    0,
    8628361,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4220812,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4222825,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4224859,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4226808,
  "vm": 0,
  "s": [
    0,
    8619672,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4228839,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4230815,
  "vm": 0,
  "s": [
    0,
    7225468,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4232821,
  "vm": 0,
  "s": [
    0,
    8579429,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4234934,
  "vm": 1,
  "s": [
    0,
    8449637
  ]
},
    {
  "tm": 4236868,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4238826,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4240963,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4242953,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4244865,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4246896,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4248888,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4250954,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4252920,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4254861,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4256787,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 4258876,
  "vm": 0,
  "s": [
    0,
    1149621,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4260830,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4262821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4264873,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4266856,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4268881,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4270805,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4272833,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4274810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4276850,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4278865,
  "vm": 0,
  "s": [
    1,
    303873,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4280814,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4282828,
  "vm": 0,
  "s": [
    1950,
    8,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4284824,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4286820,
  "vm": 0,
  "s": [
    1,
    243686,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4288809,
  "vm": 0,
  "s": [
    1,
    290764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4290823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4292845,
  "vm": 0,
  "s": [
    1944,
    736,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4294807,
  "vm": 0,
  "s": [
    1,
    240160,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4296818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4298883,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4304438,
  "vm": 0,
  "s": [
    1,
    291078,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4305849,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4307827,
  "vm": 0,
  "s": [
    0,
    8639431,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4309943,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4311807,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4313938,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4315824,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4317850,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4319806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4321810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4323840,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4325808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4327829,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4329812,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4331861,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4333840,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4335829,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4337806,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4339853,
  "vm": 0,
  "s": [
    0,
    14114147,
    1937,
    1102,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4341855,
  "vm": 0,
  "s": [
    0,
    8722909,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4343811,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4345808,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4347856,
  "vm": 0,
  "s": [
    0,
    8623260,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4349804,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4351815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4353804,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4355804,
  "vm": 0,
  "s": [
    0,
    8579594,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4357822,
  "vm": 0,
  "s": [
    0,
    8644273,
    0,
    13875041,
    1945,
    4188,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4359804,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4361838,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4363820,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4365842,
  "vm": 0,
  "s": [
    0,
    8628304,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4367889,
  "vm": 1,
  "s": [
    0,
    8406119
  ]
},
    {
  "tm": 4369809,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 4371816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4373806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4375806,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4377807,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4379814,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4381847,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4383798,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4385857,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4387803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4389786,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4391792,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4393790,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4395808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4397852,
  "vm": 0,
  "s": [
    1,
    289657,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4399835,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4401798,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4403803,
  "vm": 0,
  "s": [
    0,
    8619809,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4405801,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4407808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4409803,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4411804,
  "vm": 0,
  "s": [
    0,
    8628391,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4413862,
  "vm": 0,
  "s": [
    0,
    8628474,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4415843,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4417811,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4419793,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4421844,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4423789,
  "vm": 1,
  "s": [
    0,
    8615675
  ]
},
    {
  "tm": 4425795,
  "vm": 1,
  "s": [
    0,
    8911555
  ]
},
    {
  "tm": 4427809,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4429811,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4431810,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4433801,
  "vm": 0,
  "s": [
    1945,
    691,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4435796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4437794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4439791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4441836,
  "vm": 0,
  "s": [
    1945,
    657,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4443796,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4445790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4447830,
  "vm": 0,
  "s": [
    1,
    244056,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4450002,
  "vm": 0,
  "s": [
    0,
    1149657,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4451790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4453797,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4455796,
  "vm": 0,
  "s": [
    0,
    8639437,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4457833,
  "vm": 0,
  "s": [
    0,
    8653652,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4459808,
  "vm": 0,
  "s": [
    0,
    9996468,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4461809,
  "vm": 0,
  "s": [
    0,
    8628443,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4463824,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4465803,
  "vm": 0,
  "s": [
    0,
    8653683,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4467808,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4469844,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4471821,
  "vm": 0,
  "s": [
    0,
    8628404,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4473808,
  "vm": 0,
  "s": [
    0,
    8623072,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4475822,
  "vm": 0,
  "s": [
    0,
    8619637,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4477822,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4479797,
  "vm": 0,
  "s": [
    0,
    2210702,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4481796,
  "vm": 0,
  "s": [
    0,
    1300737,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4483785,
  "vm": 1,
  "s": [
    0,
    8615683
  ]
},
    {
  "tm": 4485787,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4487783,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4489781,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4491782,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4493781,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4495785,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4497815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4499781,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4501789,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4503788,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4505793,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4507801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4509792,
  "vm": 0,
  "s": [
    0,
    13873787,
    1944,
    2406,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4511790,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4513806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4515796,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4518054,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4519801,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4521800,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4523792,
  "vm": 0,
  "s": [
    1,
    289717,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4525778,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4527800,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4529806,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4531815,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4533792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4535801,
  "vm": 0,
  "s": [
    0,
    8621759,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4537810,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4539802,
  "vm": 0,
  "s": [
    0,
    8579429,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4541800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4543809,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4545796,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4547826,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4549830,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4551804,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4553802,
  "vm": 0,
  "s": [
    0,
    8628443,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4555806,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4557823,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4559800,
  "vm": 1,
  "s": [
    0,
    8913037
  ]
},
    {
  "tm": 4561794,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4563840,
  "vm": 0,
  "s": [
    1,
    246608,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4565820,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4567808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4569806,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4571806,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4573794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4575852,
  "vm": 0,
  "s": [
    1944,
    514,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4577805,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4579852,
  "vm": 1,
  "s": [
    0,
    8351086
  ]
},
    {
  "tm": 4581812,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4583795,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4585803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4587802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4589815,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4591819,
  "vm": 0,
  "s": [
    0,
    15159291,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4593805,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4595801,
  "vm": 0,
  "s": [
    0,
    7224809,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4598038,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4599817,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4601809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4603816,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4605819,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4607819,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4609810,
  "vm": 0,
  "s": [
    0,
    8628314,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4611807,
  "vm": 0,
  "s": [
    0,
    8653591,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4613974,
  "vm": 0,
  "s": [
    0,
    8628304,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4615813,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4617800,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4619801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4621782,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4623793,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4625782,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4627824,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4629884,
  "vm": 1,
  "s": [
    0,
    8916527
  ]
},
    {
  "tm": 4631826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4633815,
  "vm": 0,
  "s": [
    1,
    641504,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4635814,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4637790,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4639796,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4641808,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4643806,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4645792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4647816,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4649793,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4651805,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4653790,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4655800,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4657827,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4659789,
  "vm": 0,
  "s": [
    0,
    8639534,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4661798,
  "vm": 0,
  "s": [
    0,
    8628399,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4663841,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4665910,
  "vm": 0,
  "s": [
    0,
    2210692,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4667811,
  "vm": 0,
  "s": [
    0,
    8628337,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4669806,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4671803,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4673803,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4675805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4677803,
  "vm": 0,
  "s": [
    0,
    8628416,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4679933,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4681934,
  "vm": 0,
  "s": [
    0,
    8628397,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4683827,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4685813,
  "vm": 0,
  "s": [
    0,
    8912352,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4687819,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 4689809,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4691805,
  "vm": 0,
  "s": [
    0,
    14429533,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4693812,
  "vm": 0,
  "s": [
    1934,
    2253,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4695822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4697883,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4699834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4701842,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4703836,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4705807,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4707794,
  "vm": 0,
  "s": [
    1,
    261086,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4709812,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4711793,
  "vm": 0,
  "s": [
    1942,
    1914,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4713869,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4715801,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4717821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4719815,
  "vm": 0,
  "s": [
    0,
    8639485,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4722302,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4723857,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4725862,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4727806,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4730989,
  "vm": 0,
  "s": [
    1937,
    467,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4732814,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4734840,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4736830,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4738813,
  "vm": 0,
  "s": [
    1945,
    791,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4740827,
  "vm": 0,
  "s": [
    0,
    2194548,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4742807,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4744794,
  "vm": 1,
  "s": [
    0,
    8619733
  ]
},
    {
  "tm": 4746819,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4748817,
  "vm": 1,
  "s": [
    0,
    8350981
  ]
},
    {
  "tm": 4750809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4752810,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4754809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4756793,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4758802,
  "vm": 1,
  "s": [
    0,
    8615552
  ]
},
    {
  "tm": 4760811,
  "vm": 0,
  "s": [
    1,
    242704,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4762831,
  "vm": 0,
  "s": [
    1,
    247823,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4764857,
  "vm": 0,
  "s": [
    1,
    246994,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4766813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4769034,
  "vm": 0,
  "s": [
    0,
    2156948,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4770841,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4772815,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4774829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4776793,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4778787,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4780832,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4782836,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4784915,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4786791,
  "vm": 0,
  "s": [
    0,
    13873791,
    1942,
    2972,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4788788,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4790786,
  "vm": 0,
  "s": [
    0,
    8639485,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4792871,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4794802,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4796803,
  "vm": 0,
  "s": [
    0,
    8628462,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4798964,
  "vm": 0,
  "s": [
    0,
    8579462,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4800820,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4802809,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4804803,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4806798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4808813,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4810819,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4812804,
  "vm": 0,
  "s": [
    0,
    7126398,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4814824,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4816817,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4818839,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4820906,
  "vm": 1,
  "s": [
    0,
    8726318
  ]
},
    {
  "tm": 4822821,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 4824818,
  "vm": 1,
  "s": [
    0,
    8916527
  ]
},
    {
  "tm": 4826826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4828811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4830863,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4832827,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4834812,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4836822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4838828,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4840810,
  "vm": 0,
  "s": [
    1,
    247440,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4842791,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4844791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4846831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4848820,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4850805,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4852821,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4854802,
  "vm": 0,
  "s": [
    1,
    240160,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4856820,
  "vm": 0,
  "s": [
    0,
    8696119,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4858807,
  "vm": 0,
  "s": [
    0,
    8653785,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4860812,
  "vm": 0,
  "s": [
    0,
    8579482,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4862815,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4864912,
  "vm": 0,
  "s": [
    0,
    8653699,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4866819,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4868808,
  "vm": 0,
  "s": [
    0,
    8656824,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4870812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4872927,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4874815,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4876806,
  "vm": 0,
  "s": [
    1,
    263868,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4878809,
  "vm": 0,
  "s": [
    1,
    111778,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4880896,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4882832,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4884823,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4886807,
  "vm": 1,
  "s": [
    0,
    8912364
  ]
},
    {
  "tm": 4888804,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4890794,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 4892801,
  "vm": 1,
  "s": [
    0,
    15378264
  ]
},
    {
  "tm": 4894793,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4896806,
  "vm": 0,
  "s": [
    1,
    289667,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4898815,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4900809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4902829,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4904801,
  "vm": 1,
  "s": [
    0,
    8350968
  ]
},
    {
  "tm": 4906796,
  "vm": 0,
  "s": [
    1,
    244470,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4908800,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4910814,
  "vm": 0,
  "s": [
    1937,
    90,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4912820,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4914827,
  "vm": 0,
  "s": [
    0,
    6119456,
    0,
    6119456,
    1924,
    661,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4916834,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4918817,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4920795,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4922790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4924808,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4926811,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4928808,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4930981,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4932906,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4934939,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4936844,
  "vm": 0,
  "s": [
    0,
    8579470,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4938816,
  "vm": 0,
  "s": [
    -1,
    2243531152218,
    1937,
    1752,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4940821,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4943868,
  "vm": 0,
  "s": [
    1934,
    5498,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4945830,
  "vm": 0,
  "s": [
    0,
    8657000,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4948354,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4949812,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4951822,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4953807,
  "vm": 0,
  "s": [
    0,
    8639437,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4955804,
  "vm": 1,
  "s": [
    0,
    8350877
  ]
},
    {
  "tm": 4957817,
  "vm": 1,
  "s": [
    0,
    8916513
  ]
},
    {
  "tm": 4959807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4961804,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4963803,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4965820,
  "vm": 0,
  "s": [
    0,
    10011408,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4967822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4969815,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4971806,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4973790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4975800,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4977794,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4979901,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4981897,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4983821,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4985793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4987818,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4989797,
  "vm": 0,
  "s": [
    0,
    8404484,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4991816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4993807,
  "vm": 0,
  "s": [
    0,
    8619694,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4995870,
  "vm": 0,
  "s": [
    0,
    8628474,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4997838,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 4999850,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5001837,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5003809,
  "vm": 0,
  "s": [
    0,
    8653697,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5005813,
  "vm": 0,
  "s": [
    0,
    14778690,
    1908,
    0,
    1945,
    2922,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5007809,
  "vm": 0,
  "s": [
    0,
    1149677,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5009798,
  "vm": 0,
  "s": [
    0,
    8653636,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5011827,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5014395,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5016005,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5017827,
  "vm": 0,
  "s": [
    0,
    2210624,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5019800,
  "vm": 0,
  "s": [
    1,
    234326,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5021789,
  "vm": 0,
  "s": [
    1,
    48054,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5023785,
  "vm": 1,
  "s": [
    0,
    8912400
  ]
},
    {
  "tm": 5025800,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5027794,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5029849,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5031834,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5033822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5035814,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5037794,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5039798,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5041785,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5043793,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5045812,
  "vm": 0,
  "s": [
    0,
    14704650,
    1945,
    1397,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5047846,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5049822,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5051802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5053799,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5055807,
  "vm": 0,
  "s": [
    0,
    1179818,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5057786,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5059789,
  "vm": 0,
  "s": [
    0,
    8639534,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5061800,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5064335,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5065825,
  "vm": 0,
  "s": [
    0,
    8628332,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5067804,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5069803,
  "vm": 0,
  "s": [
    1,
    244056,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5071802,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5073809,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5075812,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5077824,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5080579,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5081840,
  "vm": 0,
  "s": [
    0,
    8653525,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5083816,
  "vm": 1,
  "s": [
    0,
    8653577
  ]
},
    {
  "tm": 5085802,
  "vm": 0,
  "s": [
    0,
    8912364,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5087789,
  "vm": 0,
  "s": [
    1,
    48174,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5089787,
  "vm": 0,
  "s": [
    0,
    8657334,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5091784,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5093815,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5095798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5097846,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5099818,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5101810,
  "vm": 0,
  "s": [
    0,
    15477984,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5103807,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5105794,
  "vm": 0,
  "s": [
    0,
    2193136,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5107808,
  "vm": 0,
  "s": [
    0,
    7862256,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5109801,
  "vm": 0,
  "s": [
    0,
    13885698,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5111792,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5113798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5115844,
  "vm": 0,
  "s": [
    1,
    289833,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5117819,
  "vm": 0,
  "s": [
    0,
    10007984,
    -1,
    1010220133352,
    1945,
    2106,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5119792,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5121788,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5123798,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5125809,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5127802,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5129847,
  "vm": 0,
  "s": [
    0,
    8653564,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5131809,
  "vm": 0,
  "s": [
    0,
    8653613,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5133827,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5135795,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5137817,
  "vm": 0,
  "s": [
    0,
    7319849,
    0,
    8289536,
    1956,
    11,
    1944,
    1138,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5139911,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5141805,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5143807,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5145801,
  "vm": 0,
  "s": [
    0,
    8619680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5147942,
  "vm": 0,
  "s": [
    0,
    9740998,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5149830,
  "vm": 0,
  "s": [
    0,
    8653652,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5151802,
  "vm": 1,
  "s": [
    0,
    8402756
  ]
},
    {
  "tm": 5153810,
  "vm": 1,
  "s": [
    0,
    8535505
  ]
},
    {
  "tm": 5155811,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5157800,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5159824,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5161808,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5163810,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5165808,
  "vm": 0,
  "s": [
    1,
    285429,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5167829,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5169803,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5171789,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5173801,
  "vm": 0,
  "s": [
    0,
    1181136,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5175834,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5177816,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5179813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5181819,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5183814,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5185797,
  "vm": 0,
  "s": [
    0,
    8545748,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5187804,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5189803,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5191807,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5193806,
  "vm": 0,
  "s": [
    0,
    8619776,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5195792,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5197849,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5199891,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5201818,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5203813,
  "vm": 0,
  "s": [
    0,
    8619708,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5205807,
  "vm": 0,
  "s": [
    0,
    8653642,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5207808,
  "vm": 0,
  "s": [
    0,
    8656806,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5209802,
  "vm": 0,
  "s": [
    0,
    8657012,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5211804,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5214534,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5215812,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5217809,
  "vm": 1,
  "s": [
    0,
    8913166
  ]
},
    {
  "tm": 5219806,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5221812,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5223813,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5225796,
  "vm": 0,
  "s": [
    1,
    244470,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5227819,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5229821,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5231812,
  "vm": 0,
  "s": [
    1,
    244062,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5233818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5235792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5237805,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5239797,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5241793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5243787,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5245792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5247831,
  "vm": 0,
  "s": [
    0,
    6022528,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5249819,
  "vm": 0,
  "s": [
    1,
    495889,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5251798,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5253855,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5255809,
  "vm": 0,
  "s": [
    0,
    8628304,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5257819,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5259887,
  "vm": 0,
  "s": [
    0,
    8653728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5261805,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5263802,
  "vm": 0,
  "s": [
    1,
    286009,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5265847,
  "vm": 0,
  "s": [
    0,
    8628479,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5267808,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5269802,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5271813,
  "vm": 0,
  "s": [
    0,
    8628427,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5274631,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5275812,
  "vm": 0,
  "s": [
    0,
    8579494,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5277841,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5279925,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5282246,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5283799,
  "vm": 0,
  "s": [
    1,
    48079,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5285787,
  "vm": 0,
  "s": [
    1,
    48048,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5287794,
  "vm": 1,
  "s": [
    0,
    8615606
  ]
},
    {
  "tm": 5289789,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5291812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5293807,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5295807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5297859,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5299823,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5301800,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5303794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5305792,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5307800,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5309797,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5311790,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5313843,
  "vm": 0,
  "s": [
    0,
    8804830,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5315824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5317794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5319787,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5321785,
  "vm": 0,
  "s": [
    0,
    2135012,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5324017,
  "vm": 0,
  "s": [
    0,
    8628310,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5325802,
  "vm": 0,
  "s": [
    0,
    8628439,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5327852,
  "vm": 0,
  "s": [
    0,
    8653685,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5329807,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5331819,
  "vm": 0,
  "s": [
    0,
    15478046,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5333808,
  "vm": 0,
  "s": [
    0,
    7126358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5335799,
  "vm": 0,
  "s": [
    0,
    8653780,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5337801,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5339808,
  "vm": 0,
  "s": [
    0,
    8654912,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5341806,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5343800,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5345806,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5347881,
  "vm": 0,
  "s": [
    0,
    13874770,
    1930,
    4986,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5349809,
  "vm": 0,
  "s": [
    0,
    8623266,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5351832,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5353804,
  "vm": 0,
  "s": [
    0,
    2210692,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5355794,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5357780,
  "vm": 1,
  "s": [
    0,
    8912352
  ]
},
    {
  "tm": 5359802,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5361802,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5363811,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5365826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5367803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5369811,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5371815,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5373811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5375810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5377839,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5379823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5381829,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5383875,
  "vm": 0,
  "s": [
    0,
    703862,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5385822,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5387826,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5389823,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5391838,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5393842,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5395831,
  "vm": 0,
  "s": [
    0,
    7038786,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5397832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5399888,
  "vm": 0,
  "s": [
    0,
    8639512,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5401826,
  "vm": 0,
  "s": [
    0,
    8653780,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5403821,
  "vm": 0,
  "s": [
    1942,
    8,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5405846,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5407831,
  "vm": 0,
  "s": [
    0,
    8628310,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5409803,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5411823,
  "vm": 0,
  "s": [
    1,
    248120,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5413804,
  "vm": 0,
  "s": [
    0,
    1769586,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5415870,
  "vm": 0,
  "s": [
    0,
    7464546,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5417870,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5419851,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5421818,
  "vm": 0,
  "s": [
    0,
    8631232,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5423821,
  "vm": 0,
  "s": [
    1937,
    552,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5425839,
  "vm": 0,
  "s": [
    0,
    8628391,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5434283,
  "vm": 0,
  "s": [
    0,
    8653764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5434810,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5436803,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5438809,
  "vm": 0,
  "s": [
    0,
    8649250,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5441012,
  "vm": 1,
  "s": [
    0,
    8726329
  ]
},
    {
  "tm": 5442817,
  "vm": 1,
  "s": [
    0,
    8597966
  ]
},
    {
  "tm": 5444858,
  "vm": 1,
  "s": [
    1,
    644292
  ]
},
    {
  "tm": 5447470,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5448893,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5450991,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5452891,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5454823,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5456878,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5458831,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5460816,
  "vm": 0,
  "s": [
    1,
    285950,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5464140,
  "vm": 1,
  "s": [
    0,
    8395955
  ]
},
    {
  "tm": 5465911,
  "vm": 0,
  "s": [
    1934,
    2532,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5467992,
  "vm": 0,
  "s": [
    0,
    11859008,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5469843,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5471864,
  "vm": 0,
  "s": [
    1,
    261045,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5473810,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5475797,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5477787,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5479804,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5481861,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5483804,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5485798,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5487819,
  "vm": 0,
  "s": [
    1930,
    0,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5489818,
  "vm": 0,
  "s": [
    0,
    8639485,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5491810,
  "vm": 0,
  "s": [
    0,
    8628391,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5493851,
  "vm": 0,
  "s": [
    0,
    8628409,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5495842,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5498370,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5504514,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5505837,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5507818,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5515208,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5516943,
  "vm": 0,
  "s": [
    0,
    8579466,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5518818,
  "vm": 0,
  "s": [
    0,
    8628391,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5520838,
  "vm": 0,
  "s": [
    0,
    1761937,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5522816,
  "vm": 0,
  "s": [
    0,
    8639557,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5524797,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5526794,
  "vm": 0,
  "s": [
    0,
    2210692,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5529144,
  "vm": 1,
  "s": [
    0,
    8912864
  ]
},
    {
  "tm": 5530877,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5532821,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5534845,
  "vm": 1,
  "s": [
    0,
    8916527
  ]
},
    {
  "tm": 5536844,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5539132,
  "vm": 0,
  "s": [
    1,
    249362,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5541301,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5542845,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5544806,
  "vm": 0,
  "s": [
    0,
    14787312,
    1872,
    0,
    1911,
    185,
    1934,
    825,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5548775,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5548853,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5551107,
  "vm": 0,
  "s": [
    0,
    8821760,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5552845,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5554821,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5556825,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5558812,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5560824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5562819,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5571165,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5571827,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5572011,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5572287,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5604999,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5605069,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5605104,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5605138,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5605172,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5605209,
  "vm": 0,
  "s": [
    0,
    8628425,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5612824,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5615977,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5619844,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5619986,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5621796,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5623834,
  "vm": 0,
  "s": [
    1,
    240160,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5625796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5628278,
  "vm": 0,
  "s": [
    0,
    8628354,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5629809,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5632305,
  "vm": 0,
  "s": [
    0,
    14114204,
    1937,
    1102,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5633841,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5635825,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5637818,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5639815,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5641811,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5643808,
  "vm": 0,
  "s": [
    1,
    48132,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5645808,
  "vm": 1,
  "s": [
    0,
    8615675
  ]
},
    {
  "tm": 5647839,
  "vm": 1,
  "s": [
    0,
    8544675
  ]
},
    {
  "tm": 5649864,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5651860,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5653827,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5655807,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5657820,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5659851,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5661868,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5664550,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5665848,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5667923,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5669835,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5671819,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5673801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5675841,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5677820,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5679803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5681873,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5683810,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5685829,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5687884,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5689811,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5691809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5693801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5695800,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5697854,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5699920,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5701847,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5703832,
  "vm": 1,
  "s": [
    0,
    8384099
  ]
},
    {
  "tm": 5705813,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5707919,
  "vm": 0,
  "s": [
    0,
    1146977,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5710488,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5711861,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5714510,
  "vm": 0,
  "s": [
    1934,
    1834,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5715886,
  "vm": 0,
  "s": [
    0,
    8730975,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5717866,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5719856,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5721839,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5723825,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5725843,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5727856,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5729814,
  "vm": 0,
  "s": [
    0,
    14106864,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5731898,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5733953,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5735822,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5737922,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5739798,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5741809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5743795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5745867,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5748186,
  "vm": 0,
  "s": [
    1,
    495870,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5749856,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5751825,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5753843,
  "vm": 0,
  "s": [
    1,
    303873,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5757247,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5759825,
  "vm": 0,
  "s": [
    0,
    8655363,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5762262,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5762999,
  "vm": 0,
  "s": [
    0,
    8653652,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5765599,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5766854,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5769979,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5770968,
  "vm": 0,
  "s": [
    0,
    2210628,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5772840,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5774824,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5776976,
  "vm": 0,
  "s": [
    0,
    13875969,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5778807,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5782204,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5786648,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5786867,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5788810,
  "vm": 0,
  "s": [
    1,
    286009,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5790815,
  "vm": 0,
  "s": [
    0,
    8628399,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5792820,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5794834,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5796809,
  "vm": 1,
  "s": [
    0,
    8913776
  ]
},
    {
  "tm": 5798811,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5800815,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5802820,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5804922,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5806829,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5808803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5810805,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5812817,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5814867,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5816817,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5818812,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5820798,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5824383,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5825805,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5827844,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5829803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5832134,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5833813,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5835836,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 5838524,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 5839816,
  "vm": 1,
  "s": [
    1,
    244056
  ]
},
    {
  "tm": 5841808,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5843805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5845812,
  "vm": 0,
  "s": [
    0,
    7465245,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5847812,
  "vm": 0,
  "s": [
    0,
    7862260,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5849814,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5851829,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5853807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5855793,
  "vm": 0,
  "s": [
    0,
    13880764,
    1934,
    2842,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5857820,
  "vm": 0,
  "s": [
    0,
    14100488,
    1939,
    1208,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5859794,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5861793,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5863816,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5865843,
  "vm": 0,
  "s": [
    0,
    15464126,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5867868,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5869812,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5871804,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5873813,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5875808,
  "vm": 0,
  "s": [
    0,
    8579490,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5877872,
  "vm": 0,
  "s": [
    0,
    1172039,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5879805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5882915,
  "vm": 0,
  "s": [
    1934,
    4464,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5883823,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5885845,
  "vm": 0,
  "s": [
    0,
    8628484,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5887893,
  "vm": 0,
  "s": [
    0,
    8628458,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5889811,
  "vm": 0,
  "s": [
    0,
    8657000,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5891799,
  "vm": 0,
  "s": [
    0,
    8653738,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5893908,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5895848,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5899383,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5899865,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5901990,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5903805,
  "vm": 0,
  "s": [
    0,
    7126617,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5905810,
  "vm": 0,
  "s": [
    0,
    8656133,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5907831,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5909816,
  "vm": 0,
  "s": [
    1942,
    1665,
    1937,
    1931,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5911808,
  "vm": 1,
  "s": [
    1,
    48048
  ]
},
    {
  "tm": 5914588,
  "vm": 1,
  "s": [
    0,
    8678745
  ]
},
    {
  "tm": 5915854,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5917920,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5919818,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5921817,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5923804,
  "vm": 0,
  "s": [
    1,
    289652,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5925802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5927792,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5929790,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5931910,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5933918,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5935808,
  "vm": 0,
  "s": [
    0,
    7465232,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5937793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5939786,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5941802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5943799,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5945810,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5948056,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5949832,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5951824,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5953821,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5955804,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5957805,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5959813,
  "vm": 0,
  "s": [
    0,
    8628399,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5961816,
  "vm": 0,
  "s": [
    1944,
    8,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5964730,
  "vm": 0,
  "s": [
    0,
    7126350,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5965811,
  "vm": 0,
  "s": [
    1,
    247835,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5967870,
  "vm": 0,
  "s": [
    0,
    8628344,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5969819,
  "vm": 0,
  "s": [
    0,
    8619680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5971813,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5973812,
  "vm": 0,
  "s": [
    0,
    8653785,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5975798,
  "vm": 5,
  "s": [
    -1,
    0
  ]
},
    {
  "tm": 5977810,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5979801,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5981947,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5983837,
  "vm": 0,
  "s": [
    0,
    9918423,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5985815,
  "vm": 0,
  "s": [
    0,
    8639485,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5987803,
  "vm": 0,
  "s": [
    0,
    8631028,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5989792,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5991777,
  "vm": 1,
  "s": [
    1,
    289753
  ]
},
    {
  "tm": 5993791,
  "vm": 1,
  "s": [
    0,
    8916557
  ]
},
    {
  "tm": 5995813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5997883,
  "vm": 0,
  "s": [
    0,
    15464124,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 5999835,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6001831,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6003820,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6005814,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6007816,
  "vm": 0,
  "s": [
    0,
    14787318,
    1872,
    0,
    1911,
    185,
    1934,
    825,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6009794,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6011810,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6013837,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6015821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6017813,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6019826,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6021790,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6023804,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6025795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6027801,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6029804,
  "vm": 0,
  "s": [
    0,
    13885235,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6031960,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6033826,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6035823,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6037837,
  "vm": 0,
  "s": [
    0,
    8579462,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6039808,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6041805,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6043809,
  "vm": 0,
  "s": [
    0,
    8579494,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6045801,
  "vm": 0,
  "s": [
    0,
    8579445,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6051780,
  "vm": 0,
  "s": [
    0,
    8656824,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6053903,
  "vm": 0,
  "s": [
    0,
    8628399,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6053993,
  "vm": 0,
  "s": [
    0,
    8628309,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6054211,
  "vm": 0,
  "s": [
    0,
    8623264,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6056319,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6057795,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6059809,
  "vm": 0,
  "s": [
    0,
    8628337,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6061818,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6063849,
  "vm": 0,
  "s": [
    0,
    8628427,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6065829,
  "vm": 0,
  "s": [
    0,
    8912364,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6067939,
  "vm": 0,
  "s": [
    1,
    234304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6069794,
  "vm": 0,
  "s": [
    0,
    2210744,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6071786,
  "vm": 1,
  "s": [
    0,
    8402756
  ]
},
    {
  "tm": 6073802,
  "vm": 1,
  "s": [
    0,
    8486852
  ]
},
    {
  "tm": 6075808,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6077795,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6079803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6081886,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6083831,
  "vm": 0,
  "s": [
    0,
    14092056,
    1945,
    2540,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6085811,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6087800,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6089817,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6091805,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6093788,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6095794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6097944,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6099824,
  "vm": 0,
  "s": [
    1930,
    692,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6101811,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6103802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6105807,
  "vm": 0,
  "s": [
    0,
    8668180,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6107792,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6109789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6111791,
  "vm": 0,
  "s": [
    0,
    8639534,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6114131,
  "vm": 0,
  "s": [
    0,
    8653530,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6115804,
  "vm": 1,
  "s": [
    0,
    8657012
  ]
},
    {
  "tm": 6118096,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6119842,
  "vm": 0,
  "s": [
    0,
    14114147,
    1937,
    1102,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6121812,
  "vm": 0,
  "s": [
    0,
    8799280,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6123810,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6125807,
  "vm": 0,
  "s": [
    0,
    8579470,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6127816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6129803,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6131887,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6133860,
  "vm": 0,
  "s": [
    0,
    8628479,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6136220,
  "vm": 0,
  "s": [
    0,
    8628404,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6138133,
  "vm": 0,
  "s": [
    0,
    8619733,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6139819,
  "vm": 0,
  "s": [
    0,
    8619680,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6141835,
  "vm": 0,
  "s": [
    0,
    8579502,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6143829,
  "vm": 0,
  "s": [
    0,
    8658398,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6145822,
  "vm": 0,
  "s": [
    0,
    8628347,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6147866,
  "vm": 0,
  "s": [
    0,
    8639485,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6149825,
  "vm": 1,
  "s": [
    1,
    306276
  ]
},
    {
  "tm": 6151821,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 6153815,
  "vm": 1,
  "s": [
    1,
    641524
  ]
},
    {
  "tm": 6155824,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6157811,
  "vm": 0,
  "s": [
    1,
    243686,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6159819,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6161828,
  "vm": 0,
  "s": [
    1,
    262148,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6163822,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6165828,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6167856,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6169822,
  "vm": 0,
  "s": [
    0,
    13876229,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6171796,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6173791,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6175787,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6177823,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6179797,
  "vm": 0,
  "s": [
    0,
    13923463,
    1939,
    919,
    1934,
    2423,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6181925,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6183857,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6185812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6187799,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6189789,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6191805,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6193811,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6195832,
  "vm": 0,
  "s": [
    0,
    8630409,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6199647,
  "vm": 0,
  "s": [
    0,
    8619708,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6201059,
  "vm": 0,
  "s": [
    0,
    8628361,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6203404,
  "vm": 0,
  "s": [
    0,
    8628474,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6204849,
  "vm": 0,
  "s": [
    1,
    285754,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6206810,
  "vm": 0,
  "s": [
    0,
    8619698,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6208804,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6210828,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6212807,
  "vm": 0,
  "s": [
    0,
    8619680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6216643,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6217836,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6219810,
  "vm": 0,
  "s": [
    0,
    8619680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6221932,
  "vm": 0,
  "s": [
    0,
    8653709,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6223808,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6225805,
  "vm": 0,
  "s": [
    0,
    8579487,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6227792,
  "vm": 1,
  "s": [
    0,
    8599744
  ]
},
    {
  "tm": 6229801,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6231925,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6233919,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6235818,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6237798,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6239787,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6241786,
  "vm": 1,
  "s": [
    0,
    8384099
  ]
},
    {
  "tm": 6243808,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6245822,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6248366,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6249815,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6251877,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6253827,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6255813,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6257803,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6259786,
  "vm": 0,
  "s": [
    1945,
    1956,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6261808,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6263813,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6265838,
  "vm": 0,
  "s": [
    0,
    13911016,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6267903,
  "vm": 0,
  "s": [
    1,
    111501,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6269796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6271791,
  "vm": 0,
  "s": [
    1,
    220218,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6273807,
  "vm": 0,
  "s": [
    1,
    286034,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6275789,
  "vm": 0,
  "s": [
    0,
    1141507,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6277824,
  "vm": 0,
  "s": [
    0,
    8639510,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6279815,
  "vm": 0,
  "s": [
    0,
    8628427,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6284454,
  "vm": 0,
  "s": [
    0,
    8656993,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6284519,
  "vm": 0,
  "s": [
    0,
    8628439,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6285820,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6287807,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6289798,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6291812,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6293804,
  "vm": 0,
  "s": [
    0,
    8628462,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6295808,
  "vm": 0,
  "s": [
    0,
    8653697,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6298035,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6299811,
  "vm": 0,
  "s": [
    0,
    8628310,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6301810,
  "vm": 0,
  "s": [
    0,
    8653652,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6303803,
  "vm": 0,
  "s": [
    1,
    318340,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6305818,
  "vm": 0,
  "s": [
    0,
    8628309,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6307835,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6309805,
  "vm": 0,
  "s": [
    0,
    8628310,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6311805,
  "vm": 0,
  "s": [
    0,
    8653709,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6313812,
  "vm": 0,
  "s": [
    0,
    8639485,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6315823,
  "vm": 1,
  "s": [
    0,
    8615685
  ]
},
    {
  "tm": 6317843,
  "vm": 1,
  "s": [
    1,
    681347
  ]
},
    {
  "tm": 6319799,
  "vm": 1,
  "s": [
    0,
    8763546
  ]
},
    {
  "tm": 6321823,
  "vm": 0,
  "s": [
    0,
    10005797,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6323812,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6325797,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6327796,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6329804,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6332506,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6333821,
  "vm": 0,
  "s": [
    1,
    303873,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6335809,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6337817,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6339812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6341793,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6343799,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6345810,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6347834,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6349834,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6351851,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6353809,
  "vm": 0,
  "s": [
    1,
    303866,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6355803,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6357789,
  "vm": 0,
  "s": [
    0,
    8639534,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6359810,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6361855,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6365794,
  "vm": 0,
  "s": [
    0,
    8619785,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6366009,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6367826,
  "vm": 0,
  "s": [
    0,
    8653573,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6369991,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6371822,
  "vm": 0,
  "s": [
    0,
    8654912,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6373803,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6375808,
  "vm": 0,
  "s": [
    0,
    8628395,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6377849,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6379805,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6382714,
  "vm": 0,
  "s": [
    1,
    258197,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6383835,
  "vm": 0,
  "s": [
    0,
    8619703,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6385821,
  "vm": 0,
  "s": [
    1,
    260544,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6387804,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6389805,
  "vm": 0,
  "s": [
    0,
    8628435,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6391806,
  "vm": 0,
  "s": [
    0,
    8653728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6393816,
  "vm": 0,
  "s": [
    0,
    8579482,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6395789,
  "vm": 1,
  "s": [
    0,
    8912398
  ]
},
    {
  "tm": 6397809,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6399799,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6401806,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6403803,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6405784,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6407778,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6409784,
  "vm": 1,
  "s": [
    1,
    220218
  ]
},
    {
  "tm": 6411797,
  "vm": 0,
  "s": [
    1,
    249446,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6413807,
  "vm": 0,
  "s": [
    1945,
    2103,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6415816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6417801,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6419796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6421788,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6423790,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6425791,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6427796,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6429788,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6431795,
  "vm": 0,
  "s": [
    1,
    48048,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6433850,
  "vm": 4,
  "s": [
    1,
    239823,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6435784,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6437782,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6439795,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6441802,
  "vm": 0,
  "s": [
    0,
    8639492,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6443804,
  "vm": 0,
  "s": [
    0,
    8628462,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6445811,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6447930,
  "vm": 0,
  "s": [
    0,
    8619672,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6449813,
  "vm": 0,
  "s": [
    0,
    15282688,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6451809,
  "vm": 0,
  "s": [
    0,
    8628344,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6453821,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6455832,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6457819,
  "vm": 0,
  "s": [
    0,
    8628361,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6459841,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6461867,
  "vm": 0,
  "s": [
    1,
    243573,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6463890,
  "vm": 0,
  "s": [
    0,
    8653897,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6465825,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6467821,
  "vm": 0,
  "s": [
    0,
    8619814,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6469811,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6471807,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6473849,
  "vm": 0,
  "s": [
    0,
    8619776,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6475908,
  "vm": 1,
  "s": [
    0,
    8913010
  ]
},
    {
  "tm": 6477837,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 6479822,
  "vm": 0,
  "s": [
    1937,
    968,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6481821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6483831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6485820,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6487816,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6489803,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6491810,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6493831,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6495808,
  "vm": 1,
  "s": [
    0,
    8396308
  ]
},
    {
  "tm": 6497829,
  "vm": 0,
  "s": [
    1937,
    437,
    1934,
    1925,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6499809,
  "vm": 0,
  "s": [
    0,
    13873814,
    1930,
    5334,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6501812,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6503819,
  "vm": 0,
  "s": [
    1944,
    580,
    1939,
    1878,
    1945,
    2365,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6505792,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6507804,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6509793,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6511802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6513794,
  "vm": 0,
  "s": [
    0,
    8639471,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6515814,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6517827,
  "vm": 0,
  "s": [
    0,
    8579470,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6519817,
  "vm": 0,
  "s": [
    0,
    8628304,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6521805,
  "vm": 0,
  "s": [
    1,
    247850,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6523804,
  "vm": 0,
  "s": [
    0,
    8628317,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6525811,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6527806,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6529805,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6531838,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6533811,
  "vm": 0,
  "s": [
    0,
    8628395,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6535802,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6537812,
  "vm": 0,
  "s": [
    0,
    8628320,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6539806,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6541814,
  "vm": 0,
  "s": [
    0,
    8653577,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6543807,
  "vm": 0,
  "s": [
    0,
    13874881,
    1945,
    4188,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6545799,
  "vm": 0,
  "s": [
    2,
    92768,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6547803,
  "vm": 0,
  "s": [
    0,
    1300737,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6549802,
  "vm": 1,
  "s": [
    1,
    248360
  ]
},
    {
  "tm": 6551790,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6553797,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6555795,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6557784,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6559790,
  "vm": 1,
  "s": [
    1,
    640884
  ]
},
    {
  "tm": 6561789,
  "vm": 1,
  "s": [
    1,
    644292
  ]
},
    {
  "tm": 6563812,
  "vm": 0,
  "s": [
    1934,
    1828,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6565815,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6567816,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6569794,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6571796,
  "vm": 1,
  "s": [
    0,
    7126395
  ]
},
    {
  "tm": 6573802,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6575799,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6577813,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6579803,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6581824,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6583809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6585796,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6587812,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6589792,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6591793,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6593800,
  "vm": 0,
  "s": [
    0,
    8404484,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6595822,
  "vm": 0,
  "s": [
    1,
    318508,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6597835,
  "vm": 0,
  "s": [
    0,
    8628358,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6599808,
  "vm": 0,
  "s": [
    0,
    8653591,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6601812,
  "vm": 0,
  "s": [
    0,
    8653764,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6603810,
  "vm": 0,
  "s": [
    0,
    8685344,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6605806,
  "vm": 0,
  "s": [
    0,
    7102048,
    0,
    6022448,
    1939,
    919,
    1945,
    2454,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6607822,
  "vm": 0,
  "s": [
    0,
    8628484,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6609811,
  "vm": 0,
  "s": [
    0,
    8628344,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6611812,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6613807,
  "vm": 0,
  "s": [
    0,
    8628456,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6615818,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6617827,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6619805,
  "vm": 0,
  "s": [
    0,
    8628404,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6621803,
  "vm": 0,
  "s": [
    0,
    8619785,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6623812,
  "vm": 0,
  "s": [
    0,
    8628320,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6625791,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    6125664,
    1934,
    3487,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6627808,
  "vm": 1,
  "s": [
    0,
    8350815
  ]
},
    {
  "tm": 6629796,
  "vm": 1,
  "s": [
    0,
    8916531
  ]
},
    {
  "tm": 6631830,
  "vm": 6,
  "s": [
    0,
    1178112,
    0,
    9742240,
    1945,
    1337,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6633821,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6635808,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6637826,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6639804,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133120,
    1930,
    2459,
    1945,
    2756,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6641809,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6643788,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6645793,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6647809,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6649788,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6651786,
  "vm": 0,
  "s": [
    1,
    261041,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6653783,
  "vm": 0,
  "s": [
    1,
    303866,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6655799,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6657782,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6659783,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6661794,
  "vm": 0,
  "s": [
    0,
    8577060,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6664061,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6665817,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6667809,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6669799,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6671802,
  "vm": 0,
  "s": [
    0,
    8656815,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6673802,
  "vm": 0,
  "s": [
    0,
    8628395,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6675806,
  "vm": 0,
  "s": [
    0,
    8619672,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6677807,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6679797,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6681806,
  "vm": 0,
  "s": [
    0,
    8619680,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6683805,
  "vm": 0,
  "s": [
    0,
    8628484,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6685810,
  "vm": 0,
  "s": [
    0,
    8653581,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6687799,
  "vm": 0,
  "s": [
    0,
    8628456,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6689800,
  "vm": 0,
  "s": [
    0,
    8579424,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6691794,
  "vm": 1,
  "s": [
    0,
    8615762
  ]
},
    {
  "tm": 6693794,
  "vm": 1,
  "s": [
    0,
    8615568
  ]
},
    {
  "tm": 6695803,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6697851,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6699835,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6701823,
  "vm": 0,
  "s": [
    1,
    247572,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6703814,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6705800,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6707826,
  "vm": 0,
  "s": [
    0,
    8804964,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6709796,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6711816,
  "vm": 0,
  "s": [
    0,
    15282665,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6713809,
  "vm": 0,
  "s": [
    1,
    290764,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6715823,
  "vm": 0,
  "s": [
    1,
    249305,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6717796,
  "vm": 0,
  "s": [
    0,
    2153671,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6719794,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6721793,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6723794,
  "vm": 0,
  "s": [
    1,
    247568,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6725787,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6727804,
  "vm": 0,
  "s": [
    0,
    8628435,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6729919,
  "vm": 0,
  "s": [
    0,
    8628317,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6731815,
  "vm": 0,
  "s": [
    0,
    8628425,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6733802,
  "vm": 0,
  "s": [
    0,
    8653638,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6735798,
  "vm": 0,
  "s": [
    0,
    8579487,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6737803,
  "vm": 0,
  "s": [
    0,
    8628310,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6739801,
  "vm": 0,
  "s": [
    0,
    7224827,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6741802,
  "vm": 0,
  "s": [
    0,
    8619698,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6743799,
  "vm": 0,
  "s": [
    0,
    8653577,
    0,
    9709680,
    1950,
    258,
    1934,
    2888,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6745801,
  "vm": 0,
  "s": [
    0,
    8619694,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6747851,
  "vm": 0,
  "s": [
    0,
    8628409,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6749814,
  "vm": 0,
  "s": [
    0,
    8628358,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6751799,
  "vm": 0,
  "s": [
    0,
    8623090,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6753808,
  "vm": 0,
  "s": [
    1911,
    0,
    1945,
    1022,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6755802,
  "vm": 0,
  "s": [
    0,
    8653728,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6758017,
  "vm": 0,
  "s": [
    0,
    8639507,
    0,
    6125664,
    1924,
    638,
    1934,
    3191,
    1945,
    1771,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6759790,
  "vm": 0,
  "s": [
    0,
    8652765,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6761782,
  "vm": 0,
  "s": [
    1,
    48069,
    -1,
    1010220133304,
    1945,
    1630,
    1819,
    701,
    1793,
    105,
    1788,
    113,
    1756,
    386,
    1755,
    90,
    1692,
    52
  ]
},
    {
  "tm": 6763803,
  "vm": 1,
  "s": [
    0,
    8913147
  ]
},
    {
  "tm": 6765793,
  "vm": 1,
  "s": [
    0,
    8911578
  ]
},
    {
  "tm": 6767808,
  "vm": 3,
  "s": [
    0,
    7983889
  ]
},
    {
  "tm": 6769810,
  "vm": 3,
  "s": [
    0,
    8021318,
    0,
    6226032,
    1968,
    228,
    1967,
    37,
    1961,
    142
  ]
},
    {
  "tm": 6771795,
  "vm": 0,
  "s": [
    0,
    13949520,
    1966,
    125,
    1964,
    31,
    1961,
    50
  ]
},
    {
  "tm": 6773798,
  "vm": 0,
  "s": [
    0,
    14854715,
    1760,
    0,
    1968,
    373,
    1971,
    40,
    1967,
    66,
    1961,
    142
  ]
},
    {
  "tm": 6775789,
  "vm": 4,
  "s": [
    0,
    12183344,
    0,
    6226320,
    1961,
    276
  ]
},
    {
  "tm": 6777791,
  "vm": 4,
  "s": [
    0,
    12975138,
    0,
    6226320,
    1967,
    37,
    1961,
    142
  ]
},
    {
  "tm": 6779786,
  "vm": 0,
  "s": [
    0,
    14770795,
    1968,
    11,
    1971,
    40,
    1967,
    66,
    1961,
    142
  ]
},
    {
  "tm": 6781825,
  "vm": 0,
  "s": [
    0,
    14787504,
    1969,
    47,
    1968,
    228,
    1971,
    40,
    1967,
    66,
    1961,
    142
  ]
},
    {
  "tm": 6783788,
  "vm": 4,
  "s": [
    0,
    12618335,
    0,
    6226320,
    1968,
    437,
    1967,
    37,
    1961,
    142
  ]
},
    {
  "tm": 6785800,
  "vm": 0,
  "s": [
    0,
    14822586,
    1967,
    0,
    1961,
    142
  ]
},
    {
  "tm": 6787815,
  "vm": 0,
  "s": [
    1979,
    375,
    1967,
    37,
    1961,
    142
  ]
},
    {
  "tm": 6789802,
  "vm": 0,
  "s": [
    0,
    14787572,
    1966,
    11,
    1964,
    31,
    1961,
    50
  ]
},
    {
  "tm": 6791806,
  "vm": 0,
  "s": [
    0,
    14830748,
    1970,
    12,
    1967,
    57,
    1961,
    142
  ]
},
    {
  "tm": 6793792,
  "vm": 0,
  "s": [
    0,
    14829774,
    1970,
    0,
    1967,
    57,
    1961,
    142
  ]
},
    {
  "tm": 6795792,
  "vm": 4,
  "s": [
    0,
    12602772,
    0,
    6225104,
    1961,
    280
  ]
},
    {
  "tm": 6797820,
  "vm": 4,
  "s": [
    0,
    13474359,
    0,
    6225104,
    1961,
    280
  ]
},
    {
  "tm": 6799798,
  "vm": 4,
  "s": [
    0,
    12619607,
    0,
    6225104,
    1961,
    280
  ]
},
    {
  "tm": 6801791,
  "vm": 4,
  "s": [
    0,
    13531853,
    0,
    6225104,
    1961,
    280
  ]
},
    {
  "tm": 6803789,
  "vm": 4,
  "s": [
    0,
    12922614,
    0,
    6225104,
    1961,
    280
  ]
},
    {
  "tm": 6805794,
  "vm": 0,
  "s": [
    0,
    14131768,
    1974,
    174,
    1985,
    120
  ]
},
    {
  "tm": 6807794,
  "vm": 0,
  "s": [
    1985,
    1429
  ]
},
    {
  "tm": 6809795,
  "vm": 0,
  "s": [
    1987,
    352,
    1985,
    120
  ]
},
    {
  "tm": 6811794,
  "vm": 0,
  "s": [
    1981,
    163,
    1985,
    1171
  ]
},
    {
  "tm": 6813807,
  "vm": 0,
  "s": [
    1979,
    1406,
    1985,
    1643
  ]
},
    {
  "tm": 6815819,
  "vm": 0,
  "s": [
    1985,
    1601
  ]
},
    {
  "tm": 6817904,
  "vm": 3,
  "s": [
    0,
    15471490,
    0,
    6226032,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6819791,
  "vm": 4,
  "s": [
    0,
    12987238
  ]
},
    {
  "tm": 6821789,
  "vm": 4,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 6823783,
  "vm": 4,
  "s": [
    0,
    13653228
  ]
},
    {
  "tm": 6825792,
  "vm": 4,
  "s": [
    0,
    12618040
  ]
},
    {
  "tm": 6827783,
  "vm": 4,
  "s": [
    0,
    4109622
  ]
},
    {
  "tm": 6829786,
  "vm": 2,
  "s": [
    0,
    2013920,
    0,
    6226032,
    1961,
    142
  ]
},
    {
  "tm": 6831816,
  "vm": 0,
  "s": [
    0,
    14856375,
    2001,
    0,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6833789,
  "vm": 5,
  "s": [
    0,
    9062513
  ]
},
    {
  "tm": 6835789,
  "vm": 0,
  "s": [
    0,
    14830833,
    1993,
    26,
    1991,
    136
  ]
},
    {
  "tm": 6837802,
  "vm": 0,
  "s": [
    0,
    14845916,
    1887,
    296,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6839790,
  "vm": 0,
  "s": [
    0,
    14127499,
    1968,
    399,
    2012,
    76,
    1961,
    142
  ]
},
    {
  "tm": 6841807,
  "vm": 0,
  "s": [
    0,
    14787960,
    1968,
    38,
    2012,
    76,
    1961,
    142
  ]
},
    {
  "tm": 6843793,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    2008,
    39,
    2007,
    54,
    1970,
    291,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    1991,
    378
  ]
},
    {
  "tm": 6845819,
  "vm": 0,
  "s": [
    0,
    14787504,
    1904,
    0,
    2002,
    124,
    1991,
    378
  ]
},
    {
  "tm": 6847857,
  "vm": 6,
  "s": [
    0,
    1149989
  ]
},
    {
  "tm": 6849823,
  "vm": 0,
  "s": [
    0,
    13949526,
    1887,
    113,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6851815,
  "vm": 4,
  "s": [
    0,
    12959569,
    0,
    6226320,
    1777,
    7,
    1998,
    13,
    1997,
    180,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6853792,
  "vm": 0,
  "s": [
    0,
    14787546,
    1904,
    0,
    2002,
    124,
    1991,
    378
  ]
},
    {
  "tm": 6855803,
  "vm": 0,
  "s": [
    0,
    14770580,
    2002,
    0,
    1991,
    378
  ]
},
    {
  "tm": 6857788,
  "vm": 4,
  "s": [
    0,
    12980622,
    0,
    6226320,
    2012,
    76,
    1961,
    142
  ]
},
    {
  "tm": 6859808,
  "vm": 0,
  "s": [
    0,
    14854192,
    2012,
    0,
    1961,
    142
  ]
},
    {
  "tm": 6861793,
  "vm": 0,
  "s": [
    0,
    13903192,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6863815,
  "vm": 0,
  "s": [
    0,
    14788200,
    2007,
    0,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    1991,
    378
  ]
},
    {
  "tm": 6865812,
  "vm": 0,
  "s": [
    0,
    14853960,
    1997,
    366,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6867804,
  "vm": 0,
  "s": [
    0,
    14130370,
    2002,
    87,
    1991,
    378
  ]
},
    {
  "tm": 6869793,
  "vm": 6,
  "s": [
    0,
    1261632,
    0,
    9742240,
    1961,
    292
  ]
},
    {
  "tm": 6871796,
  "vm": 4,
  "s": [
    0,
    4118402
  ]
},
    {
  "tm": 6873796,
  "vm": 4,
  "s": [
    1,
    318330
  ]
},
    {
  "tm": 6875857,
  "vm": 4,
  "s": [
    0,
    15339128,
    0,
    6125664,
    2014,
    131,
    1887,
    364,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6877803,
  "vm": 0,
  "s": [
    0,
    13876808
  ]
},
    {
  "tm": 6879795,
  "vm": 4,
  "s": [
    0,
    8810590,
    0,
    6125664,
    2016,
    395,
    1908,
    49,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    1991,
    378
  ]
},
    {
  "tm": 6881829,
  "vm": 0,
  "s": [
    0,
    14375159,
    1993,
    60,
    1991,
    136
  ]
},
    {
  "tm": 6883816,
  "vm": 4,
  "s": [
    1,
    641012,
    0,
    6125664,
    2014,
    131,
    1887,
    364,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6885812,
  "vm": 0,
  "s": [
    0,
    14778935,
    2007,
    0,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    1991,
    378
  ]
},
    {
  "tm": 6887802,
  "vm": 6,
  "s": [
    0,
    7862256
  ]
},
    {
  "tm": 6889797,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    2008,
    39,
    2007,
    54,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    1991,
    378
  ]
},
    {
  "tm": 6891813,
  "vm": 4,
  "s": [
    0,
    12618345,
    0,
    6226320,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6893790,
  "vm": 0,
  "s": [
    0,
    14857091,
    1989,
    0,
    1887,
    275,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6895983,
  "vm": 4,
  "s": [
    1,
    641012,
    0,
    6125664,
    1989,
    0,
    1887,
    275,
    2001,
    32,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6897846,
  "vm": 0,
  "s": [
    0,
    13877284
  ]
},
    {
  "tm": 6899798,
  "vm": 6,
  "s": [
    0,
    9911650
  ]
},
    {
  "tm": 6901954,
  "vm": 4,
  "s": [
    0,
    15471478,
    0,
    6125664,
    2001,
    0,
    1999,
    136,
    1997,
    467,
    1996,
    17,
    1995,
    45,
    1991,
    165
  ]
},
    {
  "tm": 6903808,
  "vm": 0,
  "s": [
    0,
    14127753,
    2012,
    96,
    2020,
    1182
  ]
},
    {
  "tm": 6905797,
  "vm": 4,
  "s": [
    0,
    13147443,
    0,
    6226320,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6907819,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    2008,
    39,
    2007,
    54,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6909867,
  "vm": 6,
  "s": [
    0,
    1141472,
    0,
    9742240,
    1906,
    112,
    1905,
    93,
    2008,
    39,
    2007,
    54,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6912059,
  "vm": 4,
  "s": [
    0,
    617410,
    0,
    6125664,
    2016,
    395,
    1908,
    49,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6913805,
  "vm": 6,
  "s": [
    0,
    1149348
  ]
},
    {
  "tm": 6915828,
  "vm": 0,
  "s": [
    0,
    14832880,
    1988,
    0,
    2020,
    1690
  ]
},
    {
  "tm": 6917801,
  "vm": 4,
  "s": [
    1,
    651396,
    0,
    6125664,
    2016,
    395,
    1908,
    49,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6919810,
  "vm": 0,
  "s": [
    0,
    14787519,
    2003,
    0,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6921817,
  "vm": 0,
  "s": [
    2026,
    116,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6923792,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133160,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6925797,
  "vm": 0,
  "s": [
    0,
    14192847,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6927786,
  "vm": 4,
  "s": [
    1,
    249298,
    0,
    6226320,
    2020,
    1182
  ]
},
    {
  "tm": 6929805,
  "vm": 0,
  "s": [
    1,
    220218,
    -1,
    1010220133160,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6931815,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133160,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6933785,
  "vm": 0,
  "s": [
    0,
    14829725,
    1908,
    17,
    2004,
    72,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6935792,
  "vm": 0,
  "s": [
    0,
    14127510,
    2004,
    61,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6937875,
  "vm": 0,
  "s": [
    0,
    5703856
  ]
},
    {
  "tm": 6939798,
  "vm": 0,
  "s": [
    0,
    1261639,
    -1,
    1010220133968,
    2020,
    1624
  ]
},
    {
  "tm": 6941805,
  "vm": 4,
  "s": [
    0,
    13342339,
    0,
    6226320,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6943800,
  "vm": 0,
  "s": [
    0,
    9918487,
    -1,
    1010220133304,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2030,
    479,
    2003,
    189,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6945794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133448,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6947817,
  "vm": 0,
  "s": [
    0,
    9439424,
    0,
    9439424,
    2024,
    1036
  ]
},
    {
  "tm": 6949882,
  "vm": 0,
  "s": [
    2023,
    1287,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 6951807,
  "vm": 0,
  "s": [
    2024,
    92
  ]
},
    {
  "tm": 6953795,
  "vm": 0,
  "s": [
    2024,
    92
  ]
},
    {
  "tm": 6955801,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133448,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6957796,
  "vm": 0,
  "s": [
    0,
    14770548,
    2006,
    0,
    2032,
    895,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6959952,
  "vm": 4,
  "s": [
    1,
    641012,
    0,
    6125664,
    2016,
    395,
    2032,
    1015,
    2002,
    76,
    2024,
    1499
  ]
},
    {
  "tm": 6961790,
  "vm": 0,
  "s": [
    0,
    13876794,
    2024,
    1499
  ]
},
    {
  "tm": 6963866,
  "vm": 0,
  "s": [
    2029,
    153,
    2020,
    1182
  ]
},
    {
  "tm": 6965794,
  "vm": 0,
  "s": [
    0,
    13873791,
    2028,
    586,
    2027,
    1759,
    2024,
    1341
  ]
},
    {
  "tm": 6967812,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133400,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6969806,
  "vm": 0,
  "s": [
    0,
    1761874,
    -1,
    1010220133400,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6971788,
  "vm": 0,
  "s": [
    0,
    8408815,
    0,
    6119808,
    2026,
    2211,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6973796,
  "vm": 5,
  "s": [
    0,
    9952806
  ]
},
    {
  "tm": 6975806,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133400,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6977790,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133400,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6979795,
  "vm": 5,
  "s": [
    0,
    9063462
  ]
},
    {
  "tm": 6981810,
  "vm": 0,
  "s": [
    0,
    13876112,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 6983798,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133400,
    2026,
    2178,
    2016,
    318,
    2006,
    84,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6985809,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6987804,
  "vm": 6,
  "s": [
    0,
    9952693
  ]
},
    {
  "tm": 6989792,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6991800,
  "vm": 0,
  "s": [
    1,
    249298,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6993797,
  "vm": 0,
  "s": [
    0,
    15346388,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6995787,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 6997814,
  "vm": 0,
  "s": [
    2034,
    1986,
    2024,
    1499
  ]
},
    {
  "tm": 6999818,
  "vm": 0,
  "s": [
    0,
    7464320,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7001796,
  "vm": 6,
  "s": [
    0,
    9908886
  ]
},
    {
  "tm": 7003812,
  "vm": 0,
  "s": [
    0,
    13907788,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 7005826,
  "vm": 0,
  "s": [
    2024,
    782
  ]
},
    {
  "tm": 7007827,
  "vm": 0,
  "s": [
    1,
    303857,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7009791,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7011790,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7013794,
  "vm": 0,
  "s": [
    0,
    13877530
  ]
},
    {
  "tm": 7015803,
  "vm": 0,
  "s": [
    0,
    14704600,
    2026,
    629,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7017800,
  "vm": 6,
  "s": [
    0,
    8939007
  ]
},
    {
  "tm": 7019797,
  "vm": 0,
  "s": [
    1,
    318452,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7021800,
  "vm": 0,
  "s": [
    2032,
    905,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7023796,
  "vm": 6,
  "s": [
    0,
    9955968
  ]
},
    {
  "tm": 7025812,
  "vm": 0,
  "s": [
    0,
    8405600,
    0,
    6119456,
    2023,
    1674,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 7027797,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7029791,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7031792,
  "vm": 0,
  "s": [
    1,
    111511,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7033804,
  "vm": 0,
  "s": [
    2027,
    775,
    2024,
    1341
  ]
},
    {
  "tm": 7035808,
  "vm": 0,
  "s": [
    1,
    644292,
    0,
    13874000,
    2028,
    586,
    2027,
    1759,
    2024,
    1341
  ]
},
    {
  "tm": 7037793,
  "vm": 0,
  "s": [
    1,
    240160,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7039798,
  "vm": 0,
  "s": [
    2032,
    91,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7041798,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7043800,
  "vm": 0,
  "s": [
    1,
    655841,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7045798,
  "vm": 1,
  "s": [
    0,
    2469428
  ]
},
    {
  "tm": 7047820,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7049824,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7051795,
  "vm": 5,
  "s": [
    0,
    9063462
  ]
},
    {
  "tm": 7053818,
  "vm": 0,
  "s": [
    2029,
    8
  ]
},
    {
  "tm": 7055791,
  "vm": 0,
  "s": [
    0,
    1769609,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7057818,
  "vm": 0,
  "s": [
    0,
    14106864,
    2024,
    1341
  ]
},
    {
  "tm": 7059801,
  "vm": 0,
  "s": [
    2027,
    1327,
    2024,
    1341
  ]
},
    {
  "tm": 7061788,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7063798,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7065809,
  "vm": 0,
  "s": [
    0,
    13877392
  ]
},
    {
  "tm": 7067801,
  "vm": 0,
  "s": [
    2017,
    3257,
    2029,
    410,
    2020,
    1182
  ]
},
    {
  "tm": 7069793,
  "vm": 0,
  "s": [
    2027,
    2139,
    2024,
    1341
  ]
},
    {
  "tm": 7071804,
  "vm": 0,
  "s": [
    0,
    14192656,
    2024,
    1341
  ]
},
    {
  "tm": 7073790,
  "vm": 0,
  "s": [
    2033,
    182,
    2020,
    1690
  ]
},
    {
  "tm": 7075797,
  "vm": 0,
  "s": [
    0,
    14708526,
    2024,
    1195
  ]
},
    {
  "tm": 7077790,
  "vm": 0,
  "s": [
    2023,
    8,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 7079791,
  "vm": 0,
  "s": [
    2024,
    291
  ]
},
    {
  "tm": 7081800,
  "vm": 5,
  "s": [
    0,
    9062606
  ]
},
    {
  "tm": 7083809,
  "vm": 0,
  "s": [
    0,
    13891793
  ]
},
    {
  "tm": 7085794,
  "vm": 0,
  "s": [
    2026,
    461,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7087820,
  "vm": 0,
  "s": [
    0,
    15283006,
    0,
    14704841,
    2026,
    629,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7089798,
  "vm": 0,
  "s": [
    2027,
    2132,
    2024,
    1341
  ]
},
    {
  "tm": 7091795,
  "vm": 5,
  "s": [
    0,
    9062421
  ]
},
    {
  "tm": 7093802,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7095794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7097791,
  "vm": 0,
  "s": [
    0,
    13877076
  ]
},
    {
  "tm": 7100002,
  "vm": 0,
  "s": [
    0,
    14708492,
    2024,
    1195
  ]
},
    {
  "tm": 7101807,
  "vm": 0,
  "s": [
    2024,
    92
  ]
},
    {
  "tm": 7103789,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7105794,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7107796,
  "vm": 6,
  "s": [
    0,
    2148524
  ]
},
    {
  "tm": 7109798,
  "vm": 1,
  "s": [
    0,
    8730279
  ]
},
    {
  "tm": 7111800,
  "vm": 0,
  "s": [
    0,
    13877013,
    2024,
    1341
  ]
},
    {
  "tm": 7113891,
  "vm": 6,
  "s": [
    0,
    2148064
  ]
},
    {
  "tm": 7115837,
  "vm": 0,
  "s": [
    2023,
    2293,
    2027,
    2030,
    2024,
    1341
  ]
},
    {
  "tm": 7117830,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7119824,
  "vm": 0,
  "s": [
    2017,
    1516,
    2029,
    410,
    2020,
    1182
  ]
},
    {
  "tm": 7121803,
  "vm": 0,
  "s": [
    2027,
    1700,
    2024,
    1341
  ]
},
    {
  "tm": 7123809,
  "vm": 0,
  "s": [
    2024,
    461
  ]
},
    {
  "tm": 7125816,
  "vm": 0,
  "s": [
    0,
    14708205,
    2024,
    1195
  ]
},
    {
  "tm": 7127792,
  "vm": 5,
  "s": [
    0,
    9065104
  ]
},
    {
  "tm": 7129801,
  "vm": 0,
  "s": [
    0,
    1142049,
    -1,
    1010220133504,
    2026,
    2178,
    2035,
    414,
    2032,
    895,
    2034,
    192,
    2024,
    1499
  ]
},
    {
  "tm": 7131818,
  "vm": 6,
  "s": [
    0,
    9029186
  ]
},
    {
  "tm": 7133805,
  "vm": 0,
  "s": [
    2029,
    28,
    2020,
    1182
  ]
},
    {
  "tm": 7135790,
  "vm": 0,
  "s": [
    1,
    651396,
    0,
    6228384,
    2000,
    30,
    2027,
    1759,
    2024,
    1341
  ]
},
    {
  "tm": 7137792,
  "vm": 0,
  "s": [
    1,
    641524,
    0,
    8296640,
    2047,
    45,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2020,
    1182
  ]
},
    {
  "tm": 7139940,
  "vm": 3,
  "s": [
    0,
    15471551,
    0,
    6226032,
    2052,
    266,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2020,
    1182
  ]
},
    {
  "tm": 7141799,
  "vm": 0,
  "s": [
    0,
    8340048,
    0,
    8291392,
    2048,
    252,
    2046,
    16,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7143791,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7145789,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7147829,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7149792,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7151797,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7153799,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7155786,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7157788,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7159780,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7161788,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7163814,
  "vm": 0,
  "s": [
    0,
    14787589,
    2048,
    0,
    2046,
    16,
    2051,
    124,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7165804,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7167796,
  "vm": 0,
  "s": [
    0,
    13903196,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7169801,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7171792,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7173789,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7175795,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7177790,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7179806,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7181819,
  "vm": 0,
  "s": [
    2021,
    8,
    1887,
    405,
    2050,
    208,
    2049,
    9,
    2048,
    271,
    2046,
    16,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7183782,
  "vm": 6,
  "s": [
    0,
    2108958
  ]
},
    {
  "tm": 7185784,
  "vm": 6,
  "s": [
    0,
    1261632,
    0,
    9742240,
    1961,
    292
  ]
},
    {
  "tm": 7187787,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7189791,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7191791,
  "vm": 0,
  "s": [
    0,
    14787997,
    2048,
    0,
    2046,
    16,
    2051,
    124,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7193784,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7195786,
  "vm": 0,
  "s": [
    0,
    14851134,
    1970,
    0,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7197799,
  "vm": 0,
  "s": [
    0,
    14853898,
    2048,
    0,
    2046,
    16,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7199788,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7201788,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7203785,
  "vm": 6,
  "s": [
    0,
    9967013
  ]
},
    {
  "tm": 7205786,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7207793,
  "vm": 0,
  "s": [
    0,
    14851688,
    2052,
    271,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7209779,
  "vm": 0,
  "s": [
    0,
    14042054,
    2042,
    8,
    1970,
    308,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7211780,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7213791,
  "vm": 0,
  "s": [
    0,
    14821310,
    2041,
    23,
    1961,
    142
  ]
},
    {
  "tm": 7215842,
  "vm": 0,
  "s": [
    0,
    13876909
  ]
},
    {
  "tm": 7217826,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7219832,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7221825,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7223961,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7225817,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7227845,
  "vm": 0,
  "s": [
    0,
    14791286,
    2042,
    8,
    1970,
    308,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7229830,
  "vm": 4,
  "s": [
    1,
    48048,
    0,
    6226320,
    2046,
    16,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7231869,
  "vm": 0,
  "s": [
    0,
    14092788,
    2025,
    218,
    1999,
    136,
    1997,
    467,
    2062,
    168,
    1991,
    165
  ]
},
    {
  "tm": 7233801,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7235835,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7237863,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7239789,
  "vm": 4,
  "s": [
    0,
    12617907
  ]
},
    {
  "tm": 7241941,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7243849,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7245833,
  "vm": 6,
  "s": [
    0,
    858896
  ]
},
    {
  "tm": 7247810,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    1961,
    142
  ]
},
    {
  "tm": 7249874,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7251859,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7253874,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7255834,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7257806,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7259781,
  "vm": 0,
  "s": [
    0,
    9064274
  ]
},
    {
  "tm": 7261828,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7263838,
  "vm": 4,
  "s": [
    0,
    12098221,
    0,
    6226320,
    1887,
    262,
    2040,
    59,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2038,
    137,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7265865,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7267869,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7270072,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7271941,
  "vm": 0,
  "s": [
    0,
    14787583,
    1991,
    8
  ]
},
    {
  "tm": 7273821,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7275887,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7277895,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7279983,
  "vm": 0,
  "s": [
    0,
    8980244
  ]
},
    {
  "tm": 7281897,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7283834,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7285862,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7287882,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7289786,
  "vm": 0,
  "s": [
    0,
    13882032,
    1806,
    83,
    1804,
    15,
    2052,
    165,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7291850,
  "vm": 0,
  "s": [
    0,
    14375941,
    1993,
    1,
    1991,
    136
  ]
},
    {
  "tm": 7293820,
  "vm": 0,
  "s": [
    0,
    13884968,
    1806,
    83,
    1804,
    15,
    2052,
    165,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7295828,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7297842,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7299825,
  "vm": 0,
  "s": [
    0,
    13903971
  ]
},
    {
  "tm": 7301822,
  "vm": 0,
  "s": [
    0,
    14792108,
    2038,
    11,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7303866,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7305858,
  "vm": 4,
  "s": [
    0,
    890553,
    0,
    6226320,
    2052,
    266,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7307860,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7309867,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7311874,
  "vm": 0,
  "s": [
    0,
    13876794,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7313796,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7315848,
  "vm": 0,
  "s": [
    0,
    13903885,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7317926,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7319865,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7321872,
  "vm": 0,
  "s": [
    0,
    6022048,
    0,
    6026608,
    1887,
    339,
    2040,
    59,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2038,
    137,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7323898,
  "vm": 0,
  "s": [
    0,
    14778905,
    2056,
    0,
    1806,
    115,
    1804,
    15,
    2052,
    165,
    2051,
    110,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7325877,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7327867,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7329853,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7331860,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    1970,
    345,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7333829,
  "vm": 4,
  "s": [
    0,
    9108436,
    0,
    6125664,
    1887,
    3,
    2040,
    59,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2038,
    137,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7335858,
  "vm": 0,
  "s": [
    0,
    6880168,
    0,
    6026608,
    1887,
    315,
    2040,
    59,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2038,
    137,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7337864,
  "vm": 0,
  "s": [
    0,
    6026746,
    0,
    6026608,
    1887,
    339,
    2040,
    59,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2038,
    137,
    1997,
    165,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7339814,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7341860,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7343956,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7345849,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7347826,
  "vm": 0,
  "s": [
    0,
    14856368,
    2053,
    0,
    1911,
    185,
    2052,
    150,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7349918,
  "vm": 0,
  "s": [
    0,
    14825984,
    1806,
    83,
    1804,
    15,
    2052,
    165,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7351867,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7353861,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7355886,
  "vm": 0,
  "s": [
    0,
    13903866,
    2044,
    34,
    2043,
    34,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7357945,
  "vm": 0,
  "s": [
    2066,
    1582
  ]
},
    {
  "tm": 7359918,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7361917,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7363828,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7365873,
  "vm": 1,
  "s": [
    0,
    8441797
  ]
},
    {
  "tm": 7367807,
  "vm": 1,
  "s": [
    0,
    8420030
  ]
},
    {
  "tm": 7369800,
  "vm": 1,
  "s": [
    0,
    8442088
  ]
},
    {
  "tm": 7371819,
  "vm": 1,
  "s": [
    0,
    8420700
  ]
},
    {
  "tm": 7373806,
  "vm": 1,
  "s": [
    0,
    8420083
  ]
},
    {
  "tm": 7375811,
  "vm": 1,
  "s": [
    0,
    8418934
  ]
},
    {
  "tm": 7378188,
  "vm": 1,
  "s": [
    0,
    8420034
  ]
},
    {
  "tm": 7379842,
  "vm": 1,
  "s": [
    0,
    8898042
  ]
},
    {
  "tm": 7381825,
  "vm": 1,
  "s": [
    0,
    8897828
  ]
},
    {
  "tm": 7383845,
  "vm": 1,
  "s": [
    0,
    8668168
  ]
},
    {
  "tm": 7385810,
  "vm": 1,
  "s": [
    0,
    8897925
  ]
},
    {
  "tm": 7387908,
  "vm": 1,
  "s": [
    1,
    243452
  ]
},
    {
  "tm": 7389893,
  "vm": 1,
  "s": [
    0,
    8897832
  ]
},
    {
  "tm": 7391880,
  "vm": 4,
  "s": [
    1,
    249340,
    0,
    6226320,
    2070,
    414,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7393830,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7395942,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7397829,
  "vm": 4,
  "s": [
    0,
    12607367,
    0,
    6226320,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    1991,
    378
  ]
},
    {
  "tm": 7399898,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7401854,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7403852,
  "vm": 0,
  "s": [
    0,
    14793606,
    1993,
    66,
    1991,
    136
  ]
},
    {
  "tm": 7405844,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7407834,
  "vm": 0,
  "s": [
    0,
    13903235
  ]
},
    {
  "tm": 7409854,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7411815,
  "vm": 0,
  "s": [
    0,
    13896595,
    2044,
    43,
    2043,
    34,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7413818,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7415886,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7417866,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7419880,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7421919,
  "vm": 0,
  "s": [
    0,
    14830456,
    2051,
    0,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7423892,
  "vm": 0,
  "s": [
    0,
    13876794,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7425808,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7427803,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7429805,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7431900,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7433902,
  "vm": 0,
  "s": [
    0,
    13877540,
    2051,
    124,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7435872,
  "vm": 0,
  "s": [
    0,
    14787312,
    2044,
    43,
    2043,
    34,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7437911,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7439924,
  "vm": 0,
  "s": [
    0,
    14787318,
    2052,
    15,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7441818,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7443874,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7445841,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7447867,
  "vm": 4,
  "s": [
    1,
    285725,
    0,
    6226320,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7449888,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7451838,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7453845,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7455814,
  "vm": 0,
  "s": [
    2062,
    28,
    1991,
    165
  ]
},
    {
  "tm": 7457828,
  "vm": 6,
  "s": [
    2,
    143561
  ]
},
    {
  "tm": 7459815,
  "vm": 0,
  "s": [
    0,
    13903885,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7461803,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7463859,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7465826,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7467836,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7469872,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7471858,
  "vm": 0,
  "s": [
    0,
    13903270
  ]
},
    {
  "tm": 7473963,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7475813,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7477877,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7479800,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7481925,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7483865,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7485918,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7487836,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7489936,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7491857,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7494128,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7495841,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7497919,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7499845,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7501850,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7503821,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7505916,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7507937,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7509850,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7511853,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7513823,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7515873,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7517841,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7519804,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7521850,
  "vm": 0,
  "s": [
    0,
    14778690,
    1968,
    0,
    1984,
    256,
    2039,
    116,
    2073,
    2730,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 7523797,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7525838,
  "vm": 4,
  "s": [
    1,
    644292,
    0,
    6226320,
    2044,
    34,
    2043,
    34,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7527834,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7529844,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7531837,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7533812,
  "vm": 0,
  "s": [
    0,
    13903866,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 7535859,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7537883,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7539880,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7541827,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7543799,
  "vm": 0,
  "s": [
    0,
    13876140,
    1806,
    83,
    2075,
    852,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7545867,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7547810,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7549874,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7551823,
  "vm": 4,
  "s": [
    0,
    12070705,
    0,
    6226320,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2073,
    2730,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 7553826,
  "vm": 0,
  "s": [
    0,
    14856936,
    2043,
    80,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7555826,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7557830,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7559810,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7561799,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7563797,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7565875,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7567846,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7569838,
  "vm": 0,
  "s": [
    0,
    14792198,
    2012,
    96,
    2066,
    1274
  ]
},
    {
  "tm": 7571965,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7573883,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7576018,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7577919,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7579933,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7581951,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7583902,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7585931,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7587882,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7589883,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7591943,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7593944,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7595956,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7597884,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7599863,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7601965,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7603991,
  "vm": 6,
  "s": [
    0,
    2346945
  ]
},
    {
  "tm": 7605838,
  "vm": 0,
  "s": [
    2075,
    8,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7607872,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7609980,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7611963,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7613887,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7615882,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7617905,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7619798,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7621930,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7623834,
  "vm": 0,
  "s": [
    0,
    14819979,
    2046,
    16,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7625859,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7627920,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7629904,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7631869,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7633992,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7635942,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7637980,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7639910,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7642021,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7643902,
  "vm": 0,
  "s": [
    0,
    13904147,
    2074,
    1575
  ]
},
    {
  "tm": 7645864,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7647871,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7649888,
  "vm": 6,
  "s": [
    0,
    1150864,
    0,
    9742240,
    2047,
    40,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7651900,
  "vm": 0,
  "s": [
    0,
    13881791,
    1806,
    83,
    2075,
    852,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7653866,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7655897,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7657939,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7659952,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7661897,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7663837,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7665872,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7667843,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7669927,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7671851,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7673896,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7675921,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7677898,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7679988,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7681934,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7683951,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7685950,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7687956,
  "vm": 4,
  "s": [
    1,
    681600,
    0,
    6226320,
    1806,
    115,
    2075,
    852,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7689969,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7691789,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7693844,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7695845,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7697874,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133520,
    2080,
    305,
    2046,
    5,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7699794,
  "vm": 4,
  "s": [
    0,
    13037060,
    0,
    6226320,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7701831,
  "vm": 4,
  "s": [
    0,
    12617941,
    0,
    6226320,
    1984,
    256,
    2039,
    116,
    2073,
    2730,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 7703894,
  "vm": 0,
  "s": [
    2075,
    713,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7705906,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7707929,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7709818,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7711828,
  "vm": 0,
  "s": [
    0,
    13877013,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7713817,
  "vm": 0,
  "s": [
    2074,
    8
  ]
},
    {
  "tm": 7715843,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7717824,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7719833,
  "vm": 0,
  "s": [
    0,
    14822156,
    1968,
    263,
    1984,
    256,
    2039,
    116,
    2073,
    2730,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 7721903,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7723830,
  "vm": 6,
  "s": [
    0,
    9952693
  ]
},
    {
  "tm": 7725847,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7727890,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7729844,
  "vm": 0,
  "s": [
    0,
    13876794,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7731928,
  "vm": 0,
  "s": [
    2083,
    343,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7733943,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7735915,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7737976,
  "vm": 0,
  "s": [
    0,
    13882050,
    1806,
    83,
    2075,
    852,
    2051,
    110,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7739882,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7741853,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7744020,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7745923,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7747962,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7749887,
  "vm": 0,
  "s": [
    0,
    5703867
  ]
},
    {
  "tm": 7751976,
  "vm": 6,
  "s": [
    0,
    8939004
  ]
},
    {
  "tm": 7753975,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7756011,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7757911,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7759880,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7761946,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7763825,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7765954,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7767869,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7769947,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7771829,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7773915,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7775892,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7777936,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7779906,
  "vm": 0,
  "s": [
    0,
    14110077,
    2073,
    1659,
    2074,
    1337
  ]
},
    {
  "tm": 7781962,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7783940,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7785808,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7787875,
  "vm": 4,
  "s": [
    0,
    12131549,
    0,
    6226320,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7789885,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7791836,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7793828,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7795826,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7797986,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7799871,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7801862,
  "vm": 4,
  "s": [
    1,
    243585,
    0,
    6125664,
    2071,
    1642,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 7803881,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7805890,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7807876,
  "vm": 0,
  "s": [
    1,
    285708,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7809887,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7811879,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7813873,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7815963,
  "vm": 0,
  "s": [
    0,
    13882046,
    1806,
    83,
    2085,
    418,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7817898,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7819990,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7821903,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7823860,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7825861,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7827869,
  "vm": 4,
  "s": [
    0,
    9344752,
    0,
    6226320,
    2085,
    418,
    2070,
    617,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7829914,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7831936,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7833809,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7835794,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7837854,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7839789,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7841830,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7843865,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7845947,
  "vm": 6,
  "s": [
    2,
    143561
  ]
},
    {
  "tm": 7848034,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7850016,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7851870,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7854061,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7855940,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7858043,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7859921,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7862022,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7863894,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7865921,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7868024,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7870035,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7871639,
  "vm": 1,
  "s": [
    1,
    220218
  ]
},
    {
  "tm": 7873437,
  "vm": 1,
  "s": [
    0,
    8419075
  ]
},
    {
  "tm": 7875485,
  "vm": 1,
  "s": [
    0,
    8441874
  ]
},
    {
  "tm": 7877452,
  "vm": 1,
  "s": [
    0,
    8419075
  ]
},
    {
  "tm": 7879466,
  "vm": 1,
  "s": [
    0,
    8418596
  ]
},
    {
  "tm": 7881462,
  "vm": 1,
  "s": [
    0,
    8419121
  ]
},
    {
  "tm": 7883529,
  "vm": 1,
  "s": [
    0,
    8897962
  ]
},
    {
  "tm": 7885448,
  "vm": 1,
  "s": [
    0,
    8897925
  ]
},
    {
  "tm": 7887498,
  "vm": 1,
  "s": [
    1,
    286063
  ]
},
    {
  "tm": 7889475,
  "vm": 1,
  "s": [
    1,
    266180
  ]
},
    {
  "tm": 7891465,
  "vm": 1,
  "s": [
    0,
    8435255
  ]
},
    {
  "tm": 7893516,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7895528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7897595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7899571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7901634,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7903586,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7905569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7907439,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7909506,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7911555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7913545,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7915554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7917549,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7919112,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7921054,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7923117,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7925119,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7927114,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7929259,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7931122,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7933151,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7935047,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7937072,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7939097,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7941155,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7943098,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7945189,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7947123,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7949078,
  "vm": 0,
  "s": [
    2071,
    2473,
    2083,
    1055,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7951087,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7953081,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7955105,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7957175,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7959102,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7961102,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7963008,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7965170,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7967156,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7969145,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7971059,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7973170,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7975121,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7977239,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7979133,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7981230,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7983099,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7985246,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7987067,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7989045,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7991033,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7993121,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7995155,
  "vm": 4,
  "s": [
    1,
    249298,
    0,
    6226320,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 7997011,
  "vm": 5,
  "s": [
    0,
    9063513
  ]
},
    {
  "tm": 7999059,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8001015,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8003007,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8005007,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133584,
    2083,
    319,
    2043,
    75,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8006990,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8008975,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8011039,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8013040,
  "vm": 0,
  "s": [
    0,
    14787583,
    2037,
    0,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 8015170,
  "vm": 0,
  "s": [
    1,
    285754,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8017123,
  "vm": 0,
  "s": [
    1,
    271458,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8019074,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133560,
    2083,
    319,
    2088,
    1363,
    2070,
    556,
    2041,
    66,
    2066,
    1274
  ]
},
    {
  "tm": 8021059,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8023355,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8025048,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8027055,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8029047,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8030980,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8033022,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8035031,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8037073,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8038992,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8040999,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8043057,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8045035,
  "vm": 0,
  "s": [
    1,
    285506,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8047219,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8049078,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8050990,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8052988,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8055083,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8056976,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8059043,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8061033,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8063060,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8065012,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8067005,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8069083,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8071119,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8073067,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8075030,
  "vm": 0,
  "s": [
    1,
    644292,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8077034,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8079111,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8080986,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8083029,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8084999,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8087004,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8089015,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8090989,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8093015,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8095019,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8097021,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8099070,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8101142,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8103047,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8105107,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8107013,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8109020,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8110983,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8113046,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8115085,
  "vm": 0,
  "s": [
    0,
    13876794,
    2085,
    377,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8117012,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8119047,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8121012,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8123023,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8125075,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8127044,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8129106,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8131047,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8133004,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8135059,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8137086,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8139018,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8141106,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8143151,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8145039,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8147198,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8149071,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8151045,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8153111,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8155052,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8157076,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8159112,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8161171,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8163111,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8165180,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8167085,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8169033,
  "vm": 0,
  "s": [
    0,
    2192419,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8171026,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8173103,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8175133,
  "vm": 0,
  "s": [
    0,
    14703915,
    2074,
    1191
  ]
},
    {
  "tm": 8177040,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8178997,
  "vm": 0,
  "s": [
    0,
    13893036
  ]
},
    {
  "tm": 8181048,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8183031,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8185132,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8187056,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8189050,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8191082,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8193028,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8195073,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8197071,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8199153,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8201038,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8202983,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8205011,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8207061,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8209315,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8211120,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8213100,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8215123,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8217037,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8219044,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8221080,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8223057,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8225055,
  "vm": 0,
  "s": [
    1,
    269888,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8227153,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8229044,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8231031,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8233091,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8235090,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8237019,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8239077,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8241010,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8243096,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8245040,
  "vm": 0,
  "s": [
    1,
    271111,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8247021,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8249087,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8251134,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8253043,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8255079,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8257042,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8259020,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8261046,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8263062,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8265089,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8267007,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8268981,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8270978,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8272989,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8275069,
  "vm": 0,
  "s": [
    0,
    1168992,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8276995,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8279096,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8281007,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8283135,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8285003,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8287081,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8289050,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8290993,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8293019,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8294986,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8297082,
  "vm": 0,
  "s": [
    1,
    655396,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8299006,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8301056,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8303058,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8305097,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8307067,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8309112,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8311041,
  "vm": 6,
  "s": [
    0,
    8938995
  ]
},
    {
  "tm": 8313050,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8315009,
  "vm": 5,
  "s": [
    -1,
    0
  ]
},
    {
  "tm": 8317120,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8319017,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8321045,
  "vm": 0,
  "s": [
    0,
    13907010,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8323019,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8324979,
  "vm": 0,
  "s": [
    0,
    15281652,
    0,
    14379090,
    2085,
    1597,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8326999,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8329052,
  "vm": 0,
  "s": [
    1940,
    8,
    2087,
    1225,
    2073,
    2730,
    2062,
    168,
    2037,
    95,
    2036,
    17,
    2074,
    1575
  ]
},
    {
  "tm": 8331009,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8333026,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8335005,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8336982,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8339010,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8341093,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8343225,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8345116,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8347232,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8349168,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8351092,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8353248,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8355167,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8357179,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8359021,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8361153,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8363071,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8365116,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8367049,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8369158,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8371080,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8373102,
  "vm": 0,
  "s": [
    0,
    13875976,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8375130,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8377138,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8379127,
  "vm": 0,
  "s": [
    0,
    14100323,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8381057,
  "vm": 0,
  "s": [
    2071,
    8,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8383040,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8385066,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8387135,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8389108,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8391064,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8393038,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8395014,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8397056,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8399098,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8401081,
  "vm": 0,
  "s": [
    1,
    285060,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8403015,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8405107,
  "vm": 0,
  "s": [
    0,
    13905094,
    2074,
    1575
  ]
},
    {
  "tm": 8407052,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8409066,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8410988,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8413010,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8415074,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8417086,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8419109,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8421096,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8423109,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8425126,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8427069,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8429136,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8430994,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8433024,
  "vm": 0,
  "s": [
    0,
    13876794,
    2066,
    1274
  ]
},
    {
  "tm": 8435093,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8437143,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8439065,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8441066,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8442975,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8445005,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8446998,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8449023,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8451086,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8453075,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8455010,
  "vm": 0,
  "s": [
    2085,
    618,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8457039,
  "vm": 0,
  "s": [
    0,
    14790131,
    2063,
    29,
    2086,
    517,
    2085,
    418,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8459023,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8461063,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8463024,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8465066,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8467047,
  "vm": 0,
  "s": [
    1,
    285506,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8469040,
  "vm": 0,
  "s": [
    1,
    285786,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8471013,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8472078,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8474154,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8476217,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8478043,
  "vm": 0,
  "s": [
    2086,
    8,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8480153,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8482086,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8484014,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8486025,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8488064,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8490090,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8492049,
  "vm": 0,
  "s": [
    2071,
    725,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 8493972,
  "vm": 0,
  "s": [
    0,
    13906918,
    -1,
    1010220133968,
    2066,
    1716
  ]
},
    {
  "tm": 8495991,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8497983,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8500042,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8502064,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8504094,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8506044,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8508183,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8510146,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8512119,
  "vm": 6,
  "s": [
    2,
    143536
  ]
},
    {
  "tm": 8514099,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8516110,
  "vm": 0,
  "s": [
    2074,
    1290
  ]
},
    {
  "tm": 8518062,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8520028,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8522022,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8524006,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8526002,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8528051,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8530023,
  "vm": 0,
  "s": [
    0,
    15281652,
    0,
    14379090,
    2085,
    1597,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8532007,
  "vm": 0,
  "s": [
    0,
    13876506,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8534041,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8536006,
  "vm": 0,
  "s": [
    1,
    285761,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8538010,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8540065,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8542034,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8544133,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8546139,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8548139,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8550163,
  "vm": 0,
  "s": [
    2091,
    8,
    2085,
    331,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8552010,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8554133,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8556033,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8558126,
  "vm": 0,
  "s": [
    0,
    2192356,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8560059,
  "vm": 6,
  "s": [
    0,
    8915558
  ]
},
    {
  "tm": 8562115,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8564112,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8566107,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8568069,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8570159,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8572159,
  "vm": 0,
  "s": [
    0,
    1169004,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8574201,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8576090,
  "vm": 0,
  "s": [
    2071,
    673,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 8578101,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8580166,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8582116,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8584018,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8586086,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8588020,
  "vm": 0,
  "s": [
    0,
    15281652,
    0,
    14379090,
    2085,
    1597,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8590086,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8591990,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8594038,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8596072,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8598041,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8600083,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8602149,
  "vm": 0,
  "s": [
    0,
    9419184
  ]
},
    {
  "tm": 8604081,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8605992,
  "vm": 0,
  "s": [
    0,
    8977969
  ]
},
    {
  "tm": 8608116,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8610024,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8612073,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8614066,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8616026,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8618197,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8620232,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8622143,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8624174,
  "vm": 0,
  "s": [
    2080,
    8,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8626184,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8628201,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8630124,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8632182,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8634066,
  "vm": 0,
  "s": [
    1,
    285708,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8636060,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8638109,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8640027,
  "vm": 0,
  "s": [
    2089,
    8
  ]
},
    {
  "tm": 8642081,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8644068,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8646174,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8648052,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8650145,
  "vm": 0,
  "s": [
    0,
    14778518,
    2036,
    0,
    2074,
    1575
  ]
},
    {
  "tm": 8652177,
  "vm": 0,
  "s": [
    0,
    13877540,
    2085,
    331,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8654173,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8656160,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8658167,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8660095,
  "vm": 0,
  "s": [
    0,
    13903885,
    2066,
    1274
  ]
},
    {
  "tm": 8662162,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8664107,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8666089,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8668159,
  "vm": 5,
  "s": [
    0,
    9063447
  ]
},
    {
  "tm": 8670082,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8672123,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8673654,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8675670,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8677594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8679725,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8681624,
  "vm": 0,
  "s": [
    2085,
    618,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8683602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8685693,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8687588,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8689518,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8691608,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8693623,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8695666,
  "vm": 0,
  "s": [
    0,
    13909189,
    2073,
    1752,
    2074,
    1337
  ]
},
    {
  "tm": 8697575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8699646,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8701628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8703533,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8705613,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8707594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8709687,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8711615,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8713658,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8715655,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8717574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8719598,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8721703,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8723684,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8725724,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8727642,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8729715,
  "vm": 0,
  "s": [
    0,
    14377648,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8731668,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8733545,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8735718,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8737638,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8739570,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8741586,
  "vm": 6,
  "s": [
    0,
    2147133
  ]
},
    {
  "tm": 8743678,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8745582,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8747541,
  "vm": 5,
  "s": [
    0,
    9063513
  ]
},
    {
  "tm": 8749677,
  "vm": 0,
  "s": [
    2066,
    883
  ]
},
    {
  "tm": 8751677,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8753597,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8755647,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8757614,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8759633,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8761533,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8763815,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8765550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8767548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8769615,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8771602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8773608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8775678,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8777605,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8779679,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8781588,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8783625,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8785917,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8787532,
  "vm": 0,
  "s": [
    1,
    267048,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8789608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8791643,
  "vm": 6,
  "s": [
    2,
    143536
  ]
},
    {
  "tm": 8793579,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8795594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8797536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8799578,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8801587,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8803663,
  "vm": 0,
  "s": [
    2071,
    2404,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 8805745,
  "vm": 0,
  "s": [
    1,
    285118,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8807604,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8809649,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8811624,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8813616,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8815646,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8817582,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8819602,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8821726,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8823669,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8825625,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8827693,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8829584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8831564,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8833568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8835564,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8837628,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8839554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8841551,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8843563,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8845639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8847550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8849567,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8851558,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8853612,
  "vm": 5,
  "s": [
    0,
    9062539
  ]
},
    {
  "tm": 8855626,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8857685,
  "vm": 0,
  "s": [
    0,
    13909189,
    2073,
    1752,
    2074,
    1337
  ]
},
    {
  "tm": 8859624,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8861712,
  "vm": 0,
  "s": [
    0,
    13905303,
    2074,
    1575
  ]
},
    {
  "tm": 8863544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8865603,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8867647,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8869566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8871619,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8873616,
  "vm": 6,
  "s": [
    0,
    724248
  ]
},
    {
  "tm": 8875527,
  "vm": 0,
  "s": [
    0,
    13905303,
    2074,
    1575
  ]
},
    {
  "tm": 8877616,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8879549,
  "vm": 0,
  "s": [
    0,
    2192442,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8881569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8883628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8885697,
  "vm": 0,
  "s": [
    1,
    269189,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8887614,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8889573,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8891574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8893560,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8895583,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8897509,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8899593,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8901561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8903585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8905637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8907572,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8909636,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8911689,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8913576,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8915651,
  "vm": 0,
  "s": [
    0,
    15464088,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8917571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8919672,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8921618,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8923677,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8925570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8927655,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8929619,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8931670,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8933615,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8935592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8937641,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8939585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8941637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8943639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8945633,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8947512,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8949621,
  "vm": 0,
  "s": [
    1,
    299056,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8951627,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8953557,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8955600,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8957639,
  "vm": 0,
  "s": [
    0,
    14378222,
    2085,
    1597,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 8959639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8961598,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8963637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8965607,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8967623,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8969619,
  "vm": 0,
  "s": [
    2033,
    8
  ]
},
    {
  "tm": 8971600,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8973594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8975505,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8977559,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8979548,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8981579,
  "vm": 0,
  "s": [
    0,
    13873791,
    2071,
    2309,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8983609,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8985537,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8987631,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8989595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8991564,
  "vm": 0,
  "s": [
    1,
    283229,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8993538,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8995521,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8997524,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 8999585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9001550,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9003569,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9005554,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9007555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9009547,
  "vm": 0,
  "s": [
    2082,
    8,
    2074,
    1337
  ]
},
    {
  "tm": 9011543,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9013548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9015580,
  "vm": 0,
  "s": [
    0,
    2192356,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9017566,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9019534,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9021644,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9023520,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9025539,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9027623,
  "vm": 0,
  "s": [
    2084,
    4,
    2073,
    2730,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 9029557,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9031531,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9033529,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9035567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9037554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9039595,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9041607,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9043554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9045565,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9047527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9049564,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9051510,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9053547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9055650,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9057568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9059523,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9061549,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9063536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9065598,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9067556,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9069523,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9071536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9073518,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9075531,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9077540,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9079522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9081546,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9083604,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9085555,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9087528,
  "vm": 0,
  "s": [
    0,
    13877406
  ]
},
    {
  "tm": 9089517,
  "vm": 0,
  "s": [
    0,
    14100323,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9091544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9093560,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9095601,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9097520,
  "vm": 0,
  "s": [
    1940,
    8,
    2087,
    1225,
    2073,
    2730,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 9099630,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9101655,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9103549,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9105605,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9107539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9109587,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9111525,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9113514,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9115571,
  "vm": 0,
  "s": [
    1,
    284703,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9117553,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9119531,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9121503,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9123566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9125553,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9127509,
  "vm": 0,
  "s": [
    0,
    9064263
  ]
},
    {
  "tm": 9129538,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9131540,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9133549,
  "vm": 6,
  "s": [
    0,
    10003890
  ]
},
    {
  "tm": 9135547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9137538,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9139581,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9141510,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9143534,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9145528,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9147520,
  "vm": 0,
  "s": [
    2071,
    2696,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 9149515,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9151539,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9153528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9155529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9157516,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9159556,
  "vm": 0,
  "s": [
    0,
    8383839,
    0,
    6119808,
    2082,
    674,
    2073,
    1752,
    2074,
    1337
  ]
},
    {
  "tm": 9161517,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9163505,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9165546,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9167539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9169530,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9171577,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9173528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9175529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9177568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9179558,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9181551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9183524,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9185600,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9187562,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9189536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9191587,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9193541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9195586,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9197826,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9199654,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9201511,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9203521,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9205515,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9207499,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9209522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9211512,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9213606,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9215533,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9217519,
  "vm": 0,
  "s": [
    1,
    266976,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9219514,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9221520,
  "vm": 0,
  "s": [
    0,
    14127743,
    2012,
    96,
    2066,
    1274
  ]
},
    {
  "tm": 9223526,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9225543,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9227524,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9229529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9231569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9233526,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9235516,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9237529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9239538,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9241517,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9243518,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9245539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9247537,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9249541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9251539,
  "vm": 0,
  "s": [
    2071,
    2404,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 9253555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9255516,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9257527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9259538,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9261514,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9263537,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9265547,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9267516,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9269532,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9271532,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9273515,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9275514,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9277554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9279539,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9281539,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9283522,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9285522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9287507,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9289516,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9291545,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9293524,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9295510,
  "vm": 6,
  "s": [
    0,
    9955999
  ]
},
    {
  "tm": 9297883,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9299628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9301517,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9303521,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9305522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9307606,
  "vm": 0,
  "s": [
    2078,
    8
  ]
},
    {
  "tm": 9309668,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9311520,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9313576,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9315605,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9317528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9319530,
  "vm": 0,
  "s": [
    0,
    13903866,
    2085,
    1898,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 9321516,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9323511,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9325527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9327522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9329512,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9331546,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9333504,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9335526,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9337532,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9339566,
  "vm": 0,
  "s": [
    1,
    286009,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9341514,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9343493,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9345513,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9347540,
  "vm": 0,
  "s": [
    2066,
    8
  ]
},
    {
  "tm": 9349530,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9351567,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9353501,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9355538,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9357528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9359605,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9361502,
  "vm": 0,
  "s": [
    2071,
    2473,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9363526,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9365527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9367634,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9369513,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9371514,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9373506,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9375508,
  "vm": 0,
  "s": [
    0,
    14134675,
    2088,
    1071,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9377504,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9379516,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9381526,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9383507,
  "vm": 0,
  "s": [
    1940,
    8,
    2087,
    1225,
    2073,
    2730,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 9385496,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9387534,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9389504,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9391499,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9393506,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9395500,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9397618,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9399509,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9401494,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9403496,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9405499,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9407498,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9409501,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9411499,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9413522,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9415529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9417510,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9419519,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9421507,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9423501,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9425507,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9427511,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9429486,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9431512,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9433507,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9435504,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9437516,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9439494,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9441495,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9443494,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9445565,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9447551,
  "vm": 0,
  "s": [
    1,
    285429,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9449514,
  "vm": 0,
  "s": [
    2078,
    8
  ]
},
    {
  "tm": 9451498,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9453498,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9455496,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9457597,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9459509,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9461510,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9463602,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9465567,
  "vm": 6,
  "s": [
    0,
    2148262
  ]
},
    {
  "tm": 9467539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9469530,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9471488,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9473608,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9475496,
  "vm": 0,
  "s": [
    0,
    14106941,
    2089,
    345,
    2066,
    1274
  ]
},
    {
  "tm": 9477512,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9479573,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9481545,
  "vm": 6,
  "s": [
    0,
    8937606
  ]
},
    {
  "tm": 9483626,
  "vm": 0,
  "s": [
    1,
    271222,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9485612,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9487557,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9489548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9491531,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9493498,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9495538,
  "vm": 0,
  "s": [
    1,
    289717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9497546,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9499583,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9501513,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9503493,
  "vm": 0,
  "s": [
    0,
    14128292,
    2012,
    96,
    2066,
    1274
  ]
},
    {
  "tm": 9505580,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9507573,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9509586,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9511501,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9513491,
  "vm": 5,
  "s": [
    0,
    9062539
  ]
},
    {
  "tm": 9515560,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9517528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9519521,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9521543,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9523513,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9525504,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9527491,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9529525,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9531507,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9533495,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9535547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9537524,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9539523,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9541529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9543527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9545535,
  "vm": 0,
  "s": [
    2089,
    379,
    2066,
    1274
  ]
},
    {
  "tm": 9547626,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9549576,
  "vm": 0,
  "s": [
    0,
    14106941,
    2089,
    345,
    2066,
    1274
  ]
},
    {
  "tm": 9551584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9553575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9555542,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9557499,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9559607,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9561495,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9563608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9565546,
  "vm": 0,
  "s": [
    2,
    91040,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9567716,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9569517,
  "vm": 0,
  "s": [
    2071,
    990,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9571534,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9573508,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9575520,
  "vm": 0,
  "s": [
    1943,
    8,
    2085,
    377,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 9577566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9579545,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9581659,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9583570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9585582,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9587550,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9589583,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9591517,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9593511,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9595597,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9597584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9599618,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9601521,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9603553,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9605537,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9607554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9609563,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9611608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9613558,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9615729,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9617602,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9619609,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9621503,
  "vm": 0,
  "s": [
    2071,
    1354,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 9623572,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9625537,
  "vm": 0,
  "s": [
    2074,
    1259
  ]
},
    {
  "tm": 9627565,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9629551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9631530,
  "vm": 0,
  "s": [
    2074,
    1259
  ]
},
    {
  "tm": 9633590,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9635561,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9637632,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9639558,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9641547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9643522,
  "vm": 0,
  "s": [
    2074,
    8
  ]
},
    {
  "tm": 9645510,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9647685,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9649580,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9651566,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9653544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9655562,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9657565,
  "vm": 0,
  "s": [
    0,
    13877392
  ]
},
    {
  "tm": 9659631,
  "vm": 0,
  "s": [
    0,
    14792081,
    2066,
    1274
  ]
},
    {
  "tm": 9661606,
  "vm": 0,
  "s": [
    0,
    7759106
  ]
},
    {
  "tm": 9663688,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9665614,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9667562,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9669574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9671603,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9673554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9675603,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9677543,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9679567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9681596,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9683510,
  "vm": 0,
  "s": [
    2074,
    211
  ]
},
    {
  "tm": 9685575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9687532,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9689566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9691559,
  "vm": 0,
  "s": [
    1,
    285060,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9693617,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9695627,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9697589,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9699579,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9701604,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9703588,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9705581,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9707558,
  "vm": 0,
  "s": [
    2071,
    8,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9709662,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9711562,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9713601,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9715603,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9717552,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9719568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9721548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9723635,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9725637,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9727576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9729582,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9731588,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9733624,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9735549,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9737540,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9739568,
  "vm": 0,
  "s": [
    1,
    285810,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9741584,
  "vm": 0,
  "s": [
    0,
    13916658,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9743590,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9745568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9747666,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9749613,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9751689,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9753713,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9755621,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9757662,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9759647,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9761673,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9763576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9765681,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9767610,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9769672,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9771726,
  "vm": 0,
  "s": [
    1,
    299056,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9773739,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9775721,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9777731,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9779645,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9781653,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9783690,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9785555,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9787612,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9789680,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9791580,
  "vm": 0,
  "s": [
    0,
    1169004,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9793705,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9795551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9797689,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9799648,
  "vm": 0,
  "s": [
    1,
    285382,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9801534,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9803675,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9805543,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9807577,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9809544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9811616,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9813587,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9815757,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9817579,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9819569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9821575,
  "vm": 0,
  "s": [
    0,
    13873758,
    2071,
    2309,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9823626,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9825609,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9827619,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9829650,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9831553,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9833629,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9835507,
  "vm": 0,
  "s": [
    2088,
    8,
    2066,
    1274
  ]
},
    {
  "tm": 9837619,
  "vm": 0,
  "s": [
    1,
    285754,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9839599,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9841585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9843609,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9845666,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9847568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9849613,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9851643,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9853626,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9855559,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9857539,
  "vm": 0,
  "s": [
    2083,
    343,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9859528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9861528,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9863567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9865652,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9867595,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9869551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9871650,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9873606,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9875562,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9877574,
  "vm": 0,
  "s": [
    2071,
    725,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 9879556,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9881571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9883627,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9885555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9887669,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9889568,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9891563,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9893560,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9895599,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9897593,
  "vm": 0,
  "s": [
    2085,
    8,
    2066,
    1274
  ]
},
    {
  "tm": 9899560,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9901545,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9903571,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9905612,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9907590,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9909569,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9911578,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9913550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9915579,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9917514,
  "vm": 6,
  "s": [
    0,
    9978054
  ]
},
    {
  "tm": 9919553,
  "vm": 0,
  "s": [
    0,
    14787583,
    2012,
    0,
    2066,
    1274
  ]
},
    {
  "tm": 9921582,
  "vm": 0,
  "s": [
    1,
    271445,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9923568,
  "vm": 0,
  "s": [
    0,
    1146880,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9925539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9927574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9929639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9931572,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9933557,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9935626,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9937590,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9939551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9941644,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9943575,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9945551,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9947574,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9949599,
  "vm": 0,
  "s": [
    1,
    269888,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9951594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9953615,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9955575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9957570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9959566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9961542,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9963566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9965652,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9967612,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9969564,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9971596,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9973569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9975620,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9977685,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9979586,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9981558,
  "vm": 6,
  "s": [
    0,
    9957855
  ]
},
    {
  "tm": 9983626,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9985597,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9987585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9989664,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9991599,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9993632,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9995628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9997561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 9999579,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10001570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10003532,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10005557,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10007655,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10009592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10011571,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10013635,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10015576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10017544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10019570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10021570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10023567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10025556,
  "vm": 0,
  "s": [
    1,
    269888,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10027509,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10029496,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10031586,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10033670,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10035569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10037570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10039580,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10041637,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10043613,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10045592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10047536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10049570,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10051538,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10053608,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10055585,
  "vm": 0,
  "s": [
    0,
    1169004,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10057588,
  "vm": 0,
  "s": [
    1,
    285746,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10059574,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10061685,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10063625,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10065622,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10067544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10069535,
  "vm": 0,
  "s": [
    1,
    285773,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10071550,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10073630,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10075633,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10077717,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10079685,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10081538,
  "vm": 6,
  "s": [
    0,
    2108998
  ]
},
    {
  "tm": 10083719,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10085604,
  "vm": 0,
  "s": [
    1,
    263905,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10087602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10089538,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10091579,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10093544,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10095542,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10097597,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10099614,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10101701,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10103542,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10105601,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10107571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10109544,
  "vm": 0,
  "s": [
    2086,
    399,
    2085,
    418,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 10111621,
  "vm": 0,
  "s": [
    1,
    285754,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10113566,
  "vm": 0,
  "s": [
    2087,
    8,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 10115573,
  "vm": 0,
  "s": [
    0,
    14136006,
    2088,
    1071,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10117599,
  "vm": 0,
  "s": [
    0,
    13905303,
    2074,
    1575
  ]
},
    {
  "tm": 10119649,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10121606,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10123606,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10125658,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10127608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10129581,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10131659,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10133626,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10135630,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10137669,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10139705,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10141646,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10143623,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10145601,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10147655,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10149675,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10151564,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10153590,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10155594,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10157715,
  "vm": 0,
  "s": [
    1,
    269888,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10159589,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10161695,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10163714,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10165628,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10167707,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10169609,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10171672,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10173692,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10175716,
  "vm": 0,
  "s": [
    2071,
    2049,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 10177687,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10179629,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10181686,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10183663,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10185628,
  "vm": 0,
  "s": [
    2071,
    840,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10187552,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10189576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10191636,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10193676,
  "vm": 0,
  "s": [
    0,
    14106941,
    2089,
    345,
    2066,
    1274
  ]
},
    {
  "tm": 10195572,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10197711,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10199722,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10201719,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10203639,
  "vm": 0,
  "s": [
    2080,
    8,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 10205631,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10207715,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10209647,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10211678,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10213642,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10215646,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10217562,
  "vm": 0,
  "s": [
    1,
    285708,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10219588,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10221572,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10223621,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10225574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10227705,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10229642,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10231555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10233670,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10235690,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10237637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10239698,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10241715,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10243705,
  "vm": 0,
  "s": [
    2083,
    343,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10245627,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10247591,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10249581,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10251612,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10253588,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10255628,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10257599,
  "vm": 0,
  "s": [
    1,
    269888,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10259527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10261664,
  "vm": 0,
  "s": [
    0,
    14091888,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10263732,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10265719,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10267640,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10269578,
  "vm": 0,
  "s": [
    2074,
    0
  ]
},
    {
  "tm": 10271637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10273540,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10275574,
  "vm": 0,
  "s": [
    1,
    286057,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10277574,
  "vm": 0,
  "s": [
    2071,
    1202,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 10279531,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10281594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10283675,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10285670,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10287642,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10289637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10291543,
  "vm": 0,
  "s": [
    0,
    2192423,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10293585,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10295550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10297592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10299627,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10301556,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10303557,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10305550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10307604,
  "vm": 5,
  "s": [
    0,
    9065135
  ]
},
    {
  "tm": 10309619,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10311539,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10313682,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10315703,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10317575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10319591,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10321605,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10323606,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10325614,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10327570,
  "vm": 0,
  "s": [
    1,
    289839,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10329614,
  "vm": 0,
  "s": [
    2084,
    1469,
    2087,
    1225,
    2073,
    2730,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 10331549,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10333595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10335620,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10337708,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10339672,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10341585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10343565,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10345635,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10347665,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10349610,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10351696,
  "vm": 6,
  "s": [
    0,
    2346945
  ]
},
    {
  "tm": 10353654,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10355677,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10357608,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10359665,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10361600,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10363570,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10365529,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10367578,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10369581,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10371607,
  "vm": 0,
  "s": [
    2085,
    8,
    2066,
    1274
  ]
},
    {
  "tm": 10373694,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10375667,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10377609,
  "vm": 0,
  "s": [
    0,
    14093230
  ]
},
    {
  "tm": 10379645,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10381584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10383602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10385692,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10387611,
  "vm": 0,
  "s": [
    0,
    10049674,
    -1,
    1010220133968,
    2066,
    1716
  ]
},
    {
  "tm": 10389638,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10391611,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10393681,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10395578,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10397591,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10399582,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10401601,
  "vm": 0,
  "s": [
    1,
    641696,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10403639,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10405631,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10407542,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10409560,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10411599,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10413667,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10415702,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10417632,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10419637,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10421581,
  "vm": 0,
  "s": [
    2086,
    92,
    2085,
    418,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 10423613,
  "vm": 6,
  "s": [
    0,
    1181008
  ]
},
    {
  "tm": 10425663,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10427607,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10429600,
  "vm": 0,
  "s": [
    1,
    284056,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10431522,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10433672,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10435618,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10437681,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10439639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10441695,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10443684,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10445678,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10447595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10449668,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10451579,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10453718,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10455687,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10457650,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10459563,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10461593,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10463599,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10465635,
  "vm": 0,
  "s": [
    0,
    1146818,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10467611,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10469618,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10471673,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10473596,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10475673,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10477644,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10479618,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10481602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10483601,
  "vm": 0,
  "s": [
    0,
    1261632,
    -1,
    1010220133968,
    2066,
    1716
  ]
},
    {
  "tm": 10485563,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10487619,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10489650,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10491683,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10493584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10495538,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10497551,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10499598,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10501593,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10503559,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10505636,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10507653,
  "vm": 0,
  "s": [
    1911,
    62,
    2085,
    331,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 10509568,
  "vm": 0,
  "s": [
    0,
    13906984,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10511593,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10513610,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10515691,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10517595,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10519552,
  "vm": 0,
  "s": [
    1,
    285758,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10521628,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10523574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10525618,
  "vm": 0,
  "s": [
    1,
    285717,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10527713,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10529567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10531567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10533696,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10535571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10537604,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10539580,
  "vm": 0,
  "s": [
    2071,
    986,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10541568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10543605,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10545567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10547601,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10549618,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10551630,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10553614,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10555559,
  "vm": 0,
  "s": [
    0,
    9064263
  ]
},
    {
  "tm": 10557701,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10559635,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10561640,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10563581,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10565631,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10567679,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10569631,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10571579,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10573628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10575552,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10577586,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10579584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10581511,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10583643,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10585669,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10587552,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10589569,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10591664,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10593612,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10595650,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10597701,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10599634,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10601629,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10603609,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10605593,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10607569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10609526,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10611607,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10613572,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10615596,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10617619,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10619581,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10621700,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10623616,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10625547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10627567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10629589,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10631512,
  "vm": 0,
  "s": [
    1,
    289657,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10633629,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10635647,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10637560,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10639541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10641572,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10643598,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10645617,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10647665,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10649680,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10651585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10653593,
  "vm": 6,
  "s": [
    0,
    9918891
  ]
},
    {
  "tm": 10655590,
  "vm": 0,
  "s": [
    1,
    299204,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10657607,
  "vm": 0,
  "s": [
    0,
    13905303,
    2074,
    1575
  ]
},
    {
  "tm": 10659555,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10661704,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10663693,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10665675,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10667551,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10669574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10671567,
  "vm": 0,
  "s": [
    1943,
    8,
    2085,
    377,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 10673614,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10675610,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10677634,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10679595,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10681526,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10683580,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10685666,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10687635,
  "vm": 1,
  "s": [
    1,
    669348
  ]
},
    {
  "tm": 10689568,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10691630,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10693695,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10695616,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10697622,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10699606,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10701611,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10703610,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10705630,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10707577,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10709630,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10711537,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10713576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10715711,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10717623,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10719611,
  "vm": 0,
  "s": [
    2071,
    901,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10721572,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10723536,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10725630,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10727602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10729633,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10731543,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10733561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10735639,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10737513,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10739574,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10741586,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10743552,
  "vm": 0,
  "s": [
    2071,
    990,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10745623,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10747650,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10749636,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10751520,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10753559,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10755511,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10757554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10759602,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10761516,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10763550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10765579,
  "vm": 0,
  "s": [
    1,
    641524,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10767628,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10769635,
  "vm": 0,
  "s": [
    0,
    7464138,
    0,
    9439424,
    2074,
    1032
  ]
},
    {
  "tm": 10771551,
  "vm": 0,
  "s": [
    0,
    13892003
  ]
},
    {
  "tm": 10773572,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10775550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10777582,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10779520,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10781527,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10783541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10785592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10787547,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10789638,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10791601,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10793540,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10795516,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10797590,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10799556,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10801535,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10803559,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10805631,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10807509,
  "vm": 0,
  "s": [
    2071,
    835,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10809584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10811584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10813587,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10815545,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10817547,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10819566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10821546,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10823502,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10825604,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10827561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10829508,
  "vm": 6,
  "s": [
    0,
    2346683
  ]
},
    {
  "tm": 10831548,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10833552,
  "vm": 0,
  "s": [
    0,
    14091900,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10835509,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10837567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10839504,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10841590,
  "vm": 5,
  "s": [
    0,
    9065260
  ]
},
    {
  "tm": 10843627,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10845548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10847601,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10849562,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10851580,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10853578,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10855512,
  "vm": 0,
  "s": [
    0,
    14110020,
    2078,
    295,
    2066,
    1185
  ]
},
    {
  "tm": 10857567,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10859571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10861620,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10863524,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10865581,
  "vm": 0,
  "s": [
    0,
    13916658,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10867576,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10869579,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10871561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10873549,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10875582,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10877546,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10879643,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10881540,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10883560,
  "vm": 0,
  "s": [
    0,
    1169004,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10885510,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10887582,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10889635,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10891557,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10893529,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10895552,
  "vm": 0,
  "s": [
    1,
    681404,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10897598,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10899553,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10901560,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10903561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10905575,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10907513,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10909536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10911536,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10913571,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10915547,
  "vm": 0,
  "s": [
    1,
    284984,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10917533,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10919548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10921645,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10923638,
  "vm": 0,
  "s": [
    1,
    285721,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10925599,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10927637,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10929622,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10931595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10933574,
  "vm": 0,
  "s": [
    0,
    13875976,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10935632,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10937648,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10939622,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10941645,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10943524,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10945642,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10947781,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10949595,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10951508,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10953589,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10955515,
  "vm": 0,
  "s": [
    1,
    285789,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10957584,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10959590,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10961523,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10963511,
  "vm": 0,
  "s": [
    0,
    13877534,
    2066,
    1274
  ]
},
    {
  "tm": 10965561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10967591,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10969579,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10971542,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10973607,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10975636,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10977550,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10979619,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10981541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10983591,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10985579,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10987596,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10989554,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10991541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10993601,
  "vm": 0,
  "s": [
    1,
    285756,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10995542,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10997593,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 10999566,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11001541,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11003565,
  "vm": 0,
  "s": [
    1,
    285782,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11005580,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11007612,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11009666,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11011561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11013585,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11015542,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11017568,
  "vm": 0,
  "s": [
    0,
    13906933,
    -1,
    1010220133968,
    2066,
    1716
  ]
},
    {
  "tm": 11019505,
  "vm": 0,
  "s": [
    2080,
    8,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 11021553,
  "vm": 0,
  "s": [
    0,
    14094126,
    2071,
    134,
    2073,
    2396,
    2074,
    1337
  ]
},
    {
  "tm": 11023535,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11025564,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11027548,
  "vm": 0,
  "s": [
    0,
    14109013,
    2073,
    1659,
    2074,
    1337
  ]
},
    {
  "tm": 11029580,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11031563,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11033565,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11035697,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11037569,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11039548,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11041581,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11043613,
  "vm": 0,
  "s": [
    0,
    14703915,
    2086,
    629,
    2085,
    418,
    2089,
    708,
    2066,
    1274
  ]
},
    {
  "tm": 11045634,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11047561,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11049586,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11051542,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11053526,
  "vm": 0,
  "s": [
    0,
    13906994,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11055550,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11057593,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11059693,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11061551,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11063634,
  "vm": 0,
  "s": [
    1,
    285728,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11065600,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11067648,
  "vm": 0,
  "s": [
    1,
    264016,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11069546,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11071643,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11073570,
  "vm": 0,
  "s": [
    1,
    266965,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11075564,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11077761,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11079683,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11081592,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11083610,
  "vm": 0,
  "s": [
    2087,
    301,
    2073,
    2730,
    2093,
    444,
    2074,
    1575
  ]
},
    {
  "tm": 11085695,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11087677,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11089690,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11091683,
  "vm": 0,
  "s": [
    1,
    285769,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11093587,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11095711,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11097526,
  "vm": 0,
  "s": [
    1,
    641716,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11099721,
  "vm": 0,
  "s": [
    2071,
    68,
    2083,
    1055,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11101706,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11103594,
  "vm": 0,
  "s": [
    1,
    285725,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11105528,
  "vm": 0,
  "s": [
    1,
    294666,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11107573,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11109639,
  "vm": 0,
  "s": [
    1,
    286063,
    -1,
    1010220133664,
    2083,
    319,
    2088,
    1363,
    2089,
    650,
    2066,
    1274
  ]
},
    {
  "tm": 11111561,
  "vm": 6,
  "s": [
    0,
    2010023
  ]
},
    {
  "tm": 11113539,
  "vm": 6,
  "s": [
    0,
    2010212
  ]
},
    {
  "tm": 11115532,
  "vm": 6,
  "s": [
    0,
    1929705
  ]
},
    {
  "tm": 11117588,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11119550,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11121551,
  "vm": 6,
  "s": [
    1,
    286063
  ]
},
    {
  "tm": 11123569,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11125540,
  "vm": 6,
  "s": [
    0,
    2010497
  ]
},
    {
  "tm": 11127510,
  "vm": 6,
  "s": [
    0,
    2010471
  ]
},
    {
  "tm": 11129613,
  "vm": 6,
  "s": [
    1,
    286063
  ]
},
    {
  "tm": 11131502,
  "vm": 6,
  "s": [
    1,
    286063
  ]
},
    {
  "tm": 11133689,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11135522,
  "vm": 6,
  "s": [
    0,
    2010471
  ]
},
    {
  "tm": 11137527,
  "vm": 6,
  "s": [
    0,
    2010471
  ]
},
    {
  "tm": 11139515,
  "vm": 6,
  "s": [
    1,
    681600
  ]
},
    {
  "tm": 11141513,
  "vm": 6,
  "s": [
    0,
    2010471
  ]
},
    {
  "tm": 11143540,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11145577,
  "vm": 6,
  "s": [
    1,
    286063
  ]
},
    {
  "tm": 11147611,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11149594,
  "vm": 6,
  "s": [
    1,
    285725
  ]
},
    {
  "tm": 11151553,
  "vm": 6,
  "s": [
    0,
    2010752
  ]
},
    {
  "tm": 11153577,
  "vm": 6,
  "s": [
    1,
    641524
  ]
}
  ],
  "scripts": [
  null,
  null,
  null,
  null,
  {
    "name": "internal/per_context/primordials.js",
    "source": "'use strict';\r\n\r\n/* eslint-disable no-restricted-globals */\r\n\r\n// This file subclasses and stores the JS builtins that come from the VM\r\n// so that Node.js's builtin modules do not need to later look these up from\r\n// the global proxy, which can be mutated by users.\r\n\r\n// TODO(joyeecheung): we can restrict access to these globals in builtin\r\n// modules through the JS linter, for example: ban access such as `Object`\r\n// (which falls back to a lookup in the global proxy) in favor of\r\n// `primordials.Object` where `primordials` is a lexical variable passed\r\n// by the native module compiler.\r\n\r\nconst ReflectApply = Reflect.apply;\r\nconst ReflectConstruct = Reflect.construct;\r\n\r\n// This function is borrowed from the function with the same name on V8 Extras'\r\n// `utils` object. V8 implements Reflect.apply very efficiently in conjunction\r\n// with the spread syntax, such that no additional special case is needed for\r\n// function calls w/o arguments.\r\n// Refs: https://github.com/v8/v8/blob/d6ead37d265d7215cf9c5f768f279e21bd170212/src/js/prologue.js#L152-L156\r\nfunction uncurryThis(func) {\r\n  return (thisArg, ...args) => ReflectApply(func, thisArg, args);\r\n}\r\n\r\nprimordials.uncurryThis = uncurryThis;\r\n\r\nfunction copyProps(src, dest) {\r\n  for (const key of Reflect.ownKeys(src)) {\r\n    if (!Reflect.getOwnPropertyDescriptor(dest, key)) {\r\n      Reflect.defineProperty(\r\n        dest,\r\n        key,\r\n        Reflect.getOwnPropertyDescriptor(src, key));\r\n    }\r\n  }\r\n}\r\n\r\nfunction copyPrototype(src, dest) {\r\n  for (const key of Reflect.ownKeys(src)) {\r\n    if (!Reflect.getOwnPropertyDescriptor(dest, key)) {\r\n      const desc = Reflect.getOwnPropertyDescriptor(src, key);\r\n      if (typeof desc.value === 'function') {\r\n        desc.value = uncurryThis(desc.value);\r\n      }\r\n      Reflect.defineProperty(dest, key, desc);\r\n    }\r\n  }\r\n}\r\n\r\nfunction makeSafe(unsafe, safe) {\r\n  copyProps(unsafe.prototype, safe.prototype);\r\n  copyProps(unsafe, safe);\r\n  Object.setPrototypeOf(safe.prototype, null);\r\n  Object.freeze(safe.prototype);\r\n  Object.freeze(safe);\r\n  return safe;\r\n}\r\n\r\n// Subclass the constructors because we need to use their prototype\r\n// methods later.\r\nprimordials.SafeMap = makeSafe(\r\n  Map,\r\n  class SafeMap extends Map {}\r\n);\r\nprimordials.SafeWeakMap = makeSafe(\r\n  WeakMap,\r\n  class SafeWeakMap extends WeakMap {}\r\n);\r\nprimordials.SafeSet = makeSafe(\r\n  Set,\r\n  class SafeSet extends Set {}\r\n);\r\nprimordials.SafePromise = makeSafe(\r\n  Promise,\r\n  class SafePromise extends Promise {}\r\n);\r\n\r\n// Create copies of the namespace objects\r\n[\r\n  'JSON',\r\n  'Math',\r\n  'Reflect'\r\n].forEach((name) => {\r\n  const target = primordials[name] = Object.create(null);\r\n  copyProps(global[name], target);\r\n});\r\n\r\n// Create copies of intrinsic objects\r\n[\r\n  'Array',\r\n  'BigInt',\r\n  'Boolean',\r\n  'Date',\r\n  'Error',\r\n  'Function',\r\n  'Map',\r\n  'Number',\r\n  'Object',\r\n  'RegExp',\r\n  'Set',\r\n  'String',\r\n  'Symbol',\r\n].forEach((name) => {\r\n  const original = global[name];\r\n  const target = primordials[name] = Object.setPrototypeOf({\r\n    [name]: function(...args) {\r\n      return new.target ?\r\n        ReflectConstruct(original, args, new.target) :\r\n        ReflectApply(original, this, args);\r\n    }\r\n  }[name], null);\r\n  copyProps(original, target);\r\n  const proto = primordials[name + 'Prototype'] = Object.create(null);\r\n  copyPrototype(original.prototype, proto);\r\n});\r\n\r\nObject.setPrototypeOf(primordials, null);\r\nObject.freeze(primordials);\r\n"
  },
  null,
  {
    "name": "internal/bootstrap/loaders.js",
    "source": "// This file creates the internal module & binding loaders used by built-in\r\n// modules. In contrast, user land modules are loaded using\r\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\r\n// lib/internal/modules/esm/* (ES Modules).\r\n//\r\n// This file is compiled and run by node.cc before bootstrap/node.js\r\n// was called, therefore the loaders are bootstraped before we start to\r\n// actually bootstrap Node.js. It creates the following objects:\r\n//\r\n// C++ binding loaders:\r\n// - process.binding(): the legacy C++ binding loader, accessible from user land\r\n//   because it is an object attached to the global process object.\r\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\r\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\r\n//   about the stability of these bindings, but still have to take care of\r\n//   compatibility issues caused by them from time to time.\r\n// - process._linkedBinding(): intended to be used by embedders to add\r\n//   additional C++ bindings in their applications. These C++ bindings\r\n//   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag\r\n//   NM_F_LINKED.\r\n// - internalBinding(): the private internal C++ binding loader, inaccessible\r\n//   from user land unless through `require('internal/test/binding')`.\r\n//   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()\r\n//   and have their nm_flags set to NM_F_INTERNAL.\r\n//\r\n// Internal JavaScript module loader:\r\n// - NativeModule: a minimal module system used to load the JavaScript core\r\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\r\n//   compiled into the node binary via node_javascript.cc generated by js2c.py,\r\n//   so they can be loaded faster without the cost of I/O. This class makes the\r\n//   lib/internal/*, deps/internal/* modules and internalBinding() available by\r\n//   default to core modules, and lets the core modules require itself via\r\n//   require('internal/bootstrap/loaders') even when this file is not written in\r\n//   CommonJS style.\r\n//\r\n// Other objects:\r\n// - process.moduleLoadList: an array recording the bindings and the modules\r\n//   loaded in the process and the order in which they are loaded.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by node::RunBootstrapping()\r\n/* global process, getLinkedBinding, getInternalBinding, primordials */\r\n\r\nconst {\r\n  Reflect,\r\n  Object,\r\n  ObjectPrototype,\r\n  SafeSet\r\n} = primordials;\r\n\r\n// Set up process.moduleLoadList.\r\nconst moduleLoadList = [];\r\nObject.defineProperty(process, 'moduleLoadList', {\r\n  value: moduleLoadList,\r\n  configurable: true,\r\n  enumerable: true,\r\n  writable: false\r\n});\r\n\r\n\r\n// internalBindingWhitelist contains the name of internalBinding modules\r\n// that are whitelisted for access via process.binding()... This is used\r\n// to provide a transition path for modules that are being moved over to\r\n// internalBinding.\r\nconst internalBindingWhitelist = new SafeSet([\r\n  'async_wrap',\r\n  'buffer',\r\n  'cares_wrap',\r\n  'config',\r\n  'constants',\r\n  'contextify',\r\n  'crypto',\r\n  'fs',\r\n  'fs_event_wrap',\r\n  'http_parser',\r\n  'icu',\r\n  'inspector',\r\n  'js_stream',\r\n  'natives',\r\n  'os',\r\n  'pipe_wrap',\r\n  'process_wrap',\r\n  'signal_wrap',\r\n  'spawn_sync',\r\n  'stream_wrap',\r\n  'tcp_wrap',\r\n  'tls_wrap',\r\n  'tty_wrap',\r\n  'udp_wrap',\r\n  'url',\r\n  'util',\r\n  'uv',\r\n  'v8',\r\n  'zlib'\r\n]);\r\n\r\n// Set up process.binding() and process._linkedBinding().\r\n{\r\n  const bindingObj = Object.create(null);\r\n\r\n  process.binding = function binding(module) {\r\n    module = String(module);\r\n    // Deprecated specific process.binding() modules, but not all, allow\r\n    // selective fallback to internalBinding for the deprecated ones.\r\n    if (internalBindingWhitelist.has(module)) {\r\n      return internalBinding(module);\r\n    }\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    throw new Error(`No such module: ${module}`);\r\n  };\r\n\r\n  process._linkedBinding = function _linkedBinding(module) {\r\n    module = String(module);\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object')\r\n      mod = bindingObj[module] = getLinkedBinding(module);\r\n    return mod;\r\n  };\r\n}\r\n\r\n// Set up internalBinding() in the closure.\r\nlet internalBinding;\r\n{\r\n  const bindingObj = Object.create(null);\r\n  // eslint-disable-next-line no-global-assign\r\n  internalBinding = function internalBinding(module) {\r\n    let mod = bindingObj[module];\r\n    if (typeof mod !== 'object') {\r\n      mod = bindingObj[module] = getInternalBinding(module);\r\n      moduleLoadList.push(`Internal Binding ${module}`);\r\n    }\r\n    return mod;\r\n  };\r\n}\r\n\r\n// Think of this as module.exports in this file even though it is not\r\n// written in CommonJS style.\r\nconst loaderExports = {\r\n  internalBinding,\r\n  NativeModule,\r\n  require: nativeModuleRequire\r\n};\r\n\r\nconst loaderId = 'internal/bootstrap/loaders';\r\n\r\n// Set up NativeModule.\r\nfunction NativeModule(id) {\r\n  this.filename = `${id}.js`;\r\n  this.id = id;\r\n  this.exports = {};\r\n  this.module = undefined;\r\n  this.exportKeys = undefined;\r\n  this.loaded = false;\r\n  this.loading = false;\r\n  this.canBeRequiredByUsers = !id.startsWith('internal/');\r\n}\r\n\r\n// To be called during pre-execution when --expose-internals is on.\r\n// Enables the user-land module loader to access internal modules.\r\nNativeModule.exposeInternals = function() {\r\n  for (const [id, mod] of NativeModule.map) {\r\n    // Do not expose this to user land even with --expose-internals.\r\n    if (id !== loaderId) {\r\n      mod.canBeRequiredByUsers = true;\r\n    }\r\n  }\r\n};\r\n\r\nconst {\r\n  moduleIds,\r\n  compileFunction\r\n} = internalBinding('native_module');\r\n\r\nNativeModule.map = new Map();\r\nfor (let i = 0; i < moduleIds.length; ++i) {\r\n  const id = moduleIds[i];\r\n  const mod = new NativeModule(id);\r\n  NativeModule.map.set(id, mod);\r\n}\r\n\r\nfunction nativeModuleRequire(id) {\r\n  if (id === loaderId) {\r\n    return loaderExports;\r\n  }\r\n\r\n  const mod = NativeModule.map.get(id);\r\n  // Can't load the internal errors module from here, have to use a raw error.\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\r\n  return mod.compile();\r\n}\r\n\r\nNativeModule.exists = function(id) {\r\n  return NativeModule.map.has(id);\r\n};\r\n\r\nNativeModule.canBeRequiredByUsers = function(id) {\r\n  const mod = NativeModule.map.get(id);\r\n  return mod && mod.canBeRequiredByUsers;\r\n};\r\n\r\n// Allow internal modules from dependencies to require\r\n// other modules from dependencies by providing fallbacks.\r\nfunction requireWithFallbackInDeps(request) {\r\n  if (!NativeModule.map.has(request)) {\r\n    request = `internal/deps/${request}`;\r\n  }\r\n  return nativeModuleRequire(request);\r\n}\r\n\r\n// This is exposed for public loaders\r\nNativeModule.prototype.compileForPublicLoader = function(needToSyncExports) {\r\n  if (!this.canBeRequiredByUsers) {\r\n    // No code because this is an assertion against bugs\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    throw new Error(`Should not compile ${this.id} for public use`);\r\n  }\r\n  this.compile();\r\n  if (needToSyncExports) {\r\n    if (!this.exportKeys) {\r\n      this.exportKeys = Object.keys(this.exports);\r\n    }\r\n    this.getESMFacade();\r\n    this.syncExports();\r\n  }\r\n  return this.exports;\r\n};\r\n\r\nconst getOwn = (target, property, receiver) => {\r\n  return ObjectPrototype.hasOwnProperty(target, property) ?\r\n    Reflect.get(target, property, receiver) :\r\n    undefined;\r\n};\r\n\r\nNativeModule.prototype.getURL = function() {\r\n  return `node:${this.id}`;\r\n};\r\n\r\nNativeModule.prototype.getESMFacade = function() {\r\n  if (this.module) return this.module;\r\n  const { ModuleWrap } = internalBinding('module_wrap');\r\n  const url = this.getURL();\r\n  const nativeModule = this;\r\n  this.module = new ModuleWrap(function() {\r\n    nativeModule.syncExports();\r\n    this.setExport('default', nativeModule.exports);\r\n  }, [...this.exportKeys, 'default'], url);\r\n  // Ensure immediate sync execution to capture exports now\r\n  this.module.instantiate();\r\n  this.module.evaluate(-1, false);\r\n  return this.module;\r\n};\r\n\r\n// Provide named exports for all builtin libraries so that the libraries\r\n// may be imported in a nicer way for ESM users. The default export is left\r\n// as the entire namespace (module.exports) and updates when this function is\r\n// called so that APMs and other behavior are supported.\r\nNativeModule.prototype.syncExports = function() {\r\n  const names = this.exportKeys;\r\n  if (this.module) {\r\n    for (let i = 0; i < names.length; i++) {\r\n      const exportName = names[i];\r\n      if (exportName === 'default') continue;\r\n      this.module.setExport(exportName,\r\n                            getOwn(this.exports, exportName, this.exports));\r\n    }\r\n  }\r\n};\r\n\r\nNativeModule.prototype.compile = function() {\r\n  if (this.loaded || this.loading) {\r\n    return this.exports;\r\n  }\r\n\r\n  const id = this.id;\r\n  this.loading = true;\r\n\r\n  try {\r\n    const requireFn = this.id.startsWith('internal/deps/') ?\r\n      requireWithFallbackInDeps : nativeModuleRequire;\r\n\r\n    const fn = compileFunction(id);\r\n    fn(this.exports, requireFn, this, process, internalBinding, primordials);\r\n\r\n    this.loaded = true;\r\n  } finally {\r\n    this.loading = false;\r\n  }\r\n\r\n  moduleLoadList.push(`NativeModule ${id}`);\r\n  return this.exports;\r\n};\r\n\r\n// This will be passed to internal/bootstrap/node.js.\r\nreturn loaderExports;\r\n"
  },
  {
    "name": "internal/bootstrap/node.js",
    "source": "// Hello, and welcome to hacking node.js!\r\n//\r\n// This file is invoked by `node::RunBootstrapping()` in `src/node.cc`, and is\r\n// responsible for setting up node.js core before executing main scripts\r\n// under `lib/internal/main/`.\r\n// This file is currently run to bootstrap both the main thread and the worker\r\n// threads. Some setups are conditional, controlled with isMainThread and\r\n// ownsProcessState.\r\n// This file is expected not to perform any asynchronous operations itself\r\n// when being executed - those should be done in either\r\n// `lib/internal/bootstrap/pre_execution.js` or in main scripts. The majority\r\n// of the code here focus on setting up the global proxy and the process\r\n// object in a synchronous manner.\r\n// As special caution is given to the performance of the startup process,\r\n// many dependencies are invoked lazily.\r\n//\r\n// Scripts run before this file:\r\n// - `lib/internal/per_context/primordials.js`: to save copies of JavaScript\r\n//   builtins that won't be affected by user land monkey-patching for internal\r\n//   modules to use.\r\n// - `lib/internal/bootstrap/loaders.js`: to setup internal binding and\r\n//   module loaders, including `process.binding()`, `process._linkedBinding()`,\r\n//   `internalBinding()` and `NativeModule`.\r\n//\r\n// After this file is run, one of the main scripts under `lib/internal/main/`\r\n// will be selected by C++ to start the actual execution. The main scripts may\r\n// run additional setups exported by `lib/internal/bootstrap/pre_execution.js`,\r\n// depending on the execution mode.\r\n\r\n'use strict';\r\n\r\n// This file is compiled as if it's wrapped in a function with arguments\r\n// passed by node::RunBootstrapping()\r\n/* global process, require, internalBinding, isMainThread, ownsProcessState */\r\n\r\nsetupPrepareStackTrace();\r\n\r\nconst { JSON, Object, Symbol } = primordials;\r\nconst config = internalBinding('config');\r\nconst { deprecate } = require('internal/util');\r\n\r\nsetupProcessObject();\r\n\r\nsetupGlobalProxy();\r\nsetupBuffer();\r\n\r\nprocess.domain = null;\r\nprocess._exiting = false;\r\n\r\n// Bootstrappers for all threads, including worker threads and main thread\r\nconst perThreadSetup = require('internal/process/per_thread');\r\n// Bootstrappers for the main thread only\r\nlet mainThreadSetup;\r\n// Bootstrappers for the worker threads only\r\nlet workerThreadSetup;\r\nif (ownsProcessState) {\r\n  mainThreadSetup = require(\r\n    'internal/process/main_thread_only'\r\n  );\r\n} else {\r\n  workerThreadSetup = require(\r\n    'internal/process/worker_thread_only'\r\n  );\r\n}\r\n\r\n// process.config is serialized config.gypi\r\nprocess.config = JSON.parse(internalBinding('native_module').config);\r\n\r\nconst rawMethods = internalBinding('process_methods');\r\n// Set up methods and events on the process object for the main thread\r\nif (isMainThread) {\r\n  process.abort = rawMethods.abort;\r\n  const wrapped = mainThreadSetup.wrapProcessMethods(rawMethods);\r\n  process.umask = wrapped.umask;\r\n  process.chdir = wrapped.chdir;\r\n  process.cwd = wrapped.cwd;\r\n\r\n  // TODO(joyeecheung): deprecate and remove these underscore methods\r\n  process._debugProcess = rawMethods._debugProcess;\r\n  process._debugEnd = rawMethods._debugEnd;\r\n  process._startProfilerIdleNotifier =\r\n    rawMethods._startProfilerIdleNotifier;\r\n  process._stopProfilerIdleNotifier = rawMethods._stopProfilerIdleNotifier;\r\n} else {\r\n  const wrapped = workerThreadSetup.wrapProcessMethods(rawMethods);\r\n\r\n  process.abort = workerThreadSetup.unavailable('process.abort()');\r\n  process.chdir = workerThreadSetup.unavailable('process.chdir()');\r\n  process.umask = wrapped.umask;\r\n  process.cwd = rawMethods.cwd;\r\n}\r\n\r\n// Set up methods on the process object for all threads\r\n{\r\n  process.dlopen = rawMethods.dlopen;\r\n  process.uptime = rawMethods.uptime;\r\n\r\n  // TODO(joyeecheung): either remove them or make them public\r\n  process._getActiveRequests = rawMethods._getActiveRequests;\r\n  process._getActiveHandles = rawMethods._getActiveHandles;\r\n\r\n  // TODO(joyeecheung): remove these\r\n  process.reallyExit = rawMethods.reallyExit;\r\n  process._kill = rawMethods._kill;\r\n\r\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\r\n  process._rawDebug = wrapped._rawDebug;\r\n  process.hrtime = wrapped.hrtime;\r\n  process.hrtime.bigint = wrapped.hrtimeBigInt;\r\n  process.cpuUsage = wrapped.cpuUsage;\r\n  process.resourceUsage = wrapped.resourceUsage;\r\n  process.memoryUsage = wrapped.memoryUsage;\r\n  process.kill = wrapped.kill;\r\n  process.exit = wrapped.exit;\r\n}\r\n\r\nconst credentials = internalBinding('credentials');\r\nif (credentials.implementsPosixCredentials) {\r\n  process.getuid = credentials.getuid;\r\n  process.geteuid = credentials.geteuid;\r\n  process.getgid = credentials.getgid;\r\n  process.getegid = credentials.getegid;\r\n  process.getgroups = credentials.getgroups;\r\n\r\n  if (ownsProcessState) {\r\n    const wrapped = mainThreadSetup.wrapPosixCredentialSetters(credentials);\r\n    process.initgroups = wrapped.initgroups;\r\n    process.setgroups = wrapped.setgroups;\r\n    process.setegid = wrapped.setegid;\r\n    process.seteuid = wrapped.seteuid;\r\n    process.setgid = wrapped.setgid;\r\n    process.setuid = wrapped.setuid;\r\n  } else {\r\n    process.initgroups =\r\n      workerThreadSetup.unavailable('process.initgroups()');\r\n    process.setgroups = workerThreadSetup.unavailable('process.setgroups()');\r\n    process.setegid = workerThreadSetup.unavailable('process.setegid()');\r\n    process.seteuid = workerThreadSetup.unavailable('process.seteuid()');\r\n    process.setgid = workerThreadSetup.unavailable('process.setgid()');\r\n    process.setuid = workerThreadSetup.unavailable('process.setuid()');\r\n  }\r\n}\r\n\r\nif (isMainThread) {\r\n  const { getStdout, getStdin, getStderr } =\r\n    require('internal/process/stdio').getMainThreadStdio();\r\n  setupProcessStdio(getStdout, getStdin, getStderr);\r\n} else {\r\n  const { getStdout, getStdin, getStderr } =\r\n    workerThreadSetup.createStdioGetters();\r\n  setupProcessStdio(getStdout, getStdin, getStderr);\r\n}\r\n\r\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\r\n// process. They use the same functions as the JS embedder API. These callbacks\r\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\r\n// and the cost of doing so is negligible.\r\nconst { nativeHooks } = require('internal/async_hooks');\r\ninternalBinding('async_wrap').setupHooks(nativeHooks);\r\n\r\nconst {\r\n  setupTaskQueue,\r\n  queueMicrotask\r\n} = require('internal/process/task_queues');\r\n\r\nif (!config.noBrowserGlobals) {\r\n  // Override global console from the one provided by the VM\r\n  // to the one implemented by Node.js\r\n  // https://console.spec.whatwg.org/#console-namespace\r\n  exposeNamespace(global, 'console', createGlobalConsole(global.console));\r\n\r\n  const { URL, URLSearchParams } = require('internal/url');\r\n  // https://url.spec.whatwg.org/#url\r\n  exposeInterface(global, 'URL', URL);\r\n  // https://url.spec.whatwg.org/#urlsearchparams\r\n  exposeInterface(global, 'URLSearchParams', URLSearchParams);\r\n\r\n  const {\r\n    TextEncoder, TextDecoder\r\n  } = require('internal/encoding');\r\n  // https://encoding.spec.whatwg.org/#textencoder\r\n  exposeInterface(global, 'TextEncoder', TextEncoder);\r\n  // https://encoding.spec.whatwg.org/#textdecoder\r\n  exposeInterface(global, 'TextDecoder', TextDecoder);\r\n\r\n  // https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope\r\n  const timers = require('timers');\r\n  defineOperation(global, 'clearInterval', timers.clearInterval);\r\n  defineOperation(global, 'clearTimeout', timers.clearTimeout);\r\n  defineOperation(global, 'setInterval', timers.setInterval);\r\n  defineOperation(global, 'setTimeout', timers.setTimeout);\r\n\r\n  defineOperation(global, 'queueMicrotask', queueMicrotask);\r\n\r\n  // Non-standard extensions:\r\n  defineOperation(global, 'clearImmediate', timers.clearImmediate);\r\n  defineOperation(global, 'setImmediate', timers.setImmediate);\r\n}\r\n\r\n// Set the per-Environment callback that will be called\r\n// when the TrackingTraceStateObserver updates trace state.\r\n// Note that when NODE_USE_V8_PLATFORM is true, the observer is\r\n// attached to the per-process TracingController.\r\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\r\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\r\n\r\n// process.allowedNodeEnvironmentFlags\r\nObject.defineProperty(process, 'allowedNodeEnvironmentFlags', {\r\n  get() {\r\n    const flags = perThreadSetup.buildAllowedFlags();\r\n    process.allowedNodeEnvironmentFlags = flags;\r\n    return process.allowedNodeEnvironmentFlags;\r\n  },\r\n  // If the user tries to set this to another value, override\r\n  // this completely to that value.\r\n  set(value) {\r\n    Object.defineProperty(this, 'allowedNodeEnvironmentFlags', {\r\n      value,\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true\r\n    });\r\n  },\r\n  enumerable: true,\r\n  configurable: true\r\n});\r\n\r\n// process.assert\r\nprocess.assert = deprecate(\r\n  perThreadSetup.assert,\r\n  'process.assert() is deprecated. Please use the `assert` module instead.',\r\n  'DEP0100');\r\n\r\n// TODO(joyeecheung): this property has not been well-maintained, should we\r\n// deprecate it in favor of a better API?\r\nconst { isDebugBuild, hasOpenSSL, hasInspector } = config;\r\nObject.defineProperty(process, 'features', {\r\n  enumerable: true,\r\n  writable: false,\r\n  configurable: false,\r\n  value: {\r\n    inspector: hasInspector,\r\n    debug: isDebugBuild,\r\n    uv: true,\r\n    ipv6: true,  // TODO(bnoordhuis) ping libuv\r\n    tls_alpn: hasOpenSSL,\r\n    tls_sni: hasOpenSSL,\r\n    tls_ocsp: hasOpenSSL,\r\n    tls: hasOpenSSL,\r\n    cached_builtins: config.hasCachedBuiltins,\r\n  }\r\n});\r\n\r\n{\r\n  const {\r\n    onGlobalUncaughtException,\r\n    setUncaughtExceptionCaptureCallback,\r\n    hasUncaughtExceptionCaptureCallback\r\n  } = require('internal/process/execution');\r\n\r\n  // For legacy reasons this is still called `_fatalException`, even\r\n  // though it is now a global uncaught exception handler.\r\n  // The C++ land node::errors::TriggerUncaughtException grabs it\r\n  // from the process object because it has been monkey-patchable.\r\n  // TODO(joyeecheung): investigate whether process._fatalException\r\n  // can be deprecated.\r\n  process._fatalException = onGlobalUncaughtException;\r\n  process.setUncaughtExceptionCaptureCallback =\r\n    setUncaughtExceptionCaptureCallback;\r\n  process.hasUncaughtExceptionCaptureCallback =\r\n    hasUncaughtExceptionCaptureCallback;\r\n}\r\n\r\nconst { emitWarning } = require('internal/process/warning');\r\nprocess.emitWarning = emitWarning;\r\n\r\n// We initialize the tick callbacks and the timer callbacks last during\r\n// bootstrap to make sure that any operation done before this are synchronous.\r\n// If any ticks or timers are scheduled before this they are unlikely to work.\r\n{\r\n  const { nextTick, runNextTicks } = setupTaskQueue();\r\n  process.nextTick = nextTick;\r\n  // Used to emulate a tick manually in the JS land.\r\n  // A better name for this function would be `runNextTicks` but\r\n  // it has been exposed to the process object so we keep this legacy name\r\n  // TODO(joyeecheung): either remove it or make it public\r\n  process._tickCallback = runNextTicks;\r\n\r\n  const { getTimerCallbacks } = require('internal/timers');\r\n  const { setupTimers } = internalBinding('timers');\r\n  const { processImmediate, processTimers } = getTimerCallbacks(runNextTicks);\r\n  // Sets two per-Environment callbacks that will be run from libuv:\r\n  // - processImmediate will be run in the callback of the per-Environment\r\n  //   check handle.\r\n  // - processTimers will be run in the callback of the per-Environment timer.\r\n  setupTimers(processImmediate, processTimers);\r\n  // Note: only after this point are the timers effective\r\n}\r\n\r\nfunction setupPrepareStackTrace() {\r\n  const {\r\n    setEnhanceStackForFatalException,\r\n    setPrepareStackTraceCallback\r\n  } = internalBinding('errors');\r\n  const {\r\n    prepareStackTrace,\r\n    fatalExceptionStackEnhancers: {\r\n      beforeInspector,\r\n      afterInspector\r\n    }\r\n  } = require('internal/errors');\r\n  // Tell our PrepareStackTraceCallback passed to the V8 API\r\n  // to call prepareStackTrace().\r\n  setPrepareStackTraceCallback(prepareStackTrace);\r\n  // Set the function used to enhance the error stack for printing\r\n  setEnhanceStackForFatalException(beforeInspector, afterInspector);\r\n}\r\n\r\nfunction setupProcessObject() {\r\n  const EventEmitter = require('events');\r\n  const origProcProto = Object.getPrototypeOf(process);\r\n  Object.setPrototypeOf(origProcProto, EventEmitter.prototype);\r\n  EventEmitter.call(process);\r\n  Object.defineProperty(process, Symbol.toStringTag, {\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: false,\r\n    value: 'process'\r\n  });\r\n  // Make process globally available to users by putting it on the global proxy\r\n  Object.defineProperty(global, 'process', {\r\n    value: process,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nfunction setupProcessStdio(getStdout, getStdin, getStderr) {\r\n  Object.defineProperty(process, 'stdout', {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getStdout\r\n  });\r\n\r\n  Object.defineProperty(process, 'stderr', {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getStderr\r\n  });\r\n\r\n  Object.defineProperty(process, 'stdin', {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getStdin\r\n  });\r\n\r\n  process.openStdin = function() {\r\n    process.stdin.resume();\r\n    return process.stdin;\r\n  };\r\n}\r\n\r\nfunction setupGlobalProxy() {\r\n  Object.defineProperty(global, Symbol.toStringTag, {\r\n    value: 'global',\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true\r\n  });\r\n\r\n  function makeGetter(name) {\r\n    return deprecate(function() {\r\n      return this;\r\n    }, `'${name}' is deprecated, use 'global'`, 'DEP0016');\r\n  }\r\n\r\n  function makeSetter(name) {\r\n    return deprecate(function(value) {\r\n      Object.defineProperty(this, name, {\r\n        configurable: true,\r\n        writable: true,\r\n        enumerable: true,\r\n        value: value\r\n      });\r\n    }, `'${name}' is deprecated, use 'global'`, 'DEP0016');\r\n  }\r\n\r\n  Object.defineProperties(global, {\r\n    GLOBAL: {\r\n      configurable: true,\r\n      get: makeGetter('GLOBAL'),\r\n      set: makeSetter('GLOBAL')\r\n    },\r\n    root: {\r\n      configurable: true,\r\n      get: makeGetter('root'),\r\n      set: makeSetter('root')\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupBuffer() {\r\n  const { Buffer } = require('buffer');\r\n  const bufferBinding = internalBinding('buffer');\r\n\r\n  // Only after this point can C++ use Buffer::New()\r\n  bufferBinding.setBufferPrototype(Buffer.prototype);\r\n  delete bufferBinding.setBufferPrototype;\r\n  delete bufferBinding.zeroFill;\r\n\r\n  Object.defineProperty(global, 'Buffer', {\r\n    value: Buffer,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nfunction createGlobalConsole(consoleFromVM) {\r\n  const consoleFromNode =\r\n    require('internal/console/global');\r\n  if (config.hasInspector) {\r\n    const inspector = require('internal/util/inspector');\r\n    // This will be exposed by `require('inspector').console` later.\r\n    inspector.consoleFromVM = consoleFromVM;\r\n    // TODO(joyeecheung): postpone this until the first time inspector\r\n    // is activated.\r\n    inspector.wrapConsole(consoleFromNode, consoleFromVM);\r\n    const { setConsoleExtensionInstaller } = internalBinding('inspector');\r\n    // Setup inspector command line API.\r\n    setConsoleExtensionInstaller(inspector.installConsoleExtensions);\r\n  }\r\n  return consoleFromNode;\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-namespaces\r\nfunction exposeNamespace(target, name, namespaceObject) {\r\n  Object.defineProperty(target, name, {\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: namespaceObject\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#es-interfaces\r\nfunction exposeInterface(target, name, interfaceObject) {\r\n  Object.defineProperty(target, name, {\r\n    writable: true,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: interfaceObject\r\n  });\r\n}\r\n\r\n// https://heycam.github.io/webidl/#define-the-operations\r\nfunction defineOperation(target, name, method) {\r\n  Object.defineProperty(target, name, {\r\n    writable: true,\r\n    enumerable: true,\r\n    configurable: true,\r\n    value: method\r\n  });\r\n}\r\n"
  },
  {
    "name": "internal/errors.js",
    "source": "/* eslint node-core/documented-errors: \"error\" */\r\n/* eslint node-core/alphabetize-errors: \"error\" */\r\n/* eslint node-core/prefer-util-format-errors: \"error\" */\r\n\r\n'use strict';\r\n\r\n// The whole point behind this internal module is to allow Node.js to no\r\n// longer be forced to treat every error message change as a semver-major\r\n// change. The NodeError classes here all expose a `code` property whose\r\n// value statically and permanently identifies the error. While the error\r\n// message may change, the code should not.\r\n\r\nconst { Object, Math } = primordials;\r\n\r\nconst messages = new Map();\r\nconst codes = {};\r\n\r\nconst { kMaxLength } = internalBinding('buffer');\r\n\r\nconst MainContextError = Error;\r\nconst ErrorToString = Error.prototype.toString;\r\nconst overrideStackTrace = new WeakMap();\r\nconst prepareStackTrace = (globalThis, error, trace) => {\r\n  // API for node internals to override error stack formatting\r\n  // without interfering with userland code.\r\n  if (overrideStackTrace.has(error)) {\r\n    const f = overrideStackTrace.get(error);\r\n    overrideStackTrace.delete(error);\r\n    return f(error, trace);\r\n  }\r\n\r\n  // Polyfill of V8's Error.prepareStackTrace API.\r\n  // https://crbug.com/v8/7848\r\n  // `globalThis` is the global that contains the constructor which\r\n  // created `error`.\r\n  if (typeof globalThis.Error.prepareStackTrace === 'function') {\r\n    return globalThis.Error.prepareStackTrace(error, trace);\r\n  }\r\n  // We still have legacy usage that depends on the main context's `Error`\r\n  // being used, even when the error is from a different context.\r\n  // TODO(devsnek): evaluate if this can be eventually deprecated/removed.\r\n  if (typeof MainContextError.prepareStackTrace === 'function') {\r\n    return MainContextError.prepareStackTrace(error, trace);\r\n  }\r\n\r\n  // Normal error formatting:\r\n  //\r\n  // Error: Message\r\n  //     at function (file)\r\n  //     at file\r\n  const errorString = ErrorToString.call(error);\r\n  if (trace.length === 0) {\r\n    return errorString;\r\n  }\r\n  return `${errorString}\\n    at ${trace.join('\\n    at ')}`;\r\n};\r\n\r\n\r\nlet excludedStackFn;\r\n\r\n// Lazily loaded\r\nlet util;\r\nlet assert;\r\n\r\nlet internalUtil = null;\r\nfunction lazyInternalUtil() {\r\n  if (!internalUtil) {\r\n    internalUtil = require('internal/util');\r\n  }\r\n  return internalUtil;\r\n}\r\n\r\nlet internalUtilInspect = null;\r\nfunction lazyInternalUtilInspect() {\r\n  if (!internalUtilInspect) {\r\n    internalUtilInspect = require('internal/util/inspect');\r\n  }\r\n  return internalUtilInspect;\r\n}\r\n\r\nlet buffer;\r\nfunction lazyBuffer() {\r\n  if (buffer === undefined)\r\n    buffer = require('buffer').Buffer;\r\n  return buffer;\r\n}\r\n\r\n// A specialized Error that includes an additional info property with\r\n// additional information about the error condition.\r\n// It has the properties present in a UVException but with a custom error\r\n// message followed by the uv error code and uv error message.\r\n// It also has its own error code with the original uv error context put into\r\n// `err.info`.\r\n// The context passed into this error must have .code, .syscall and .message,\r\n// and may have .path and .dest.\r\nclass SystemError extends Error {\r\n  constructor(key, context) {\r\n    if (excludedStackFn === undefined) {\r\n      super();\r\n    } else {\r\n      const limit = Error.stackTraceLimit;\r\n      Error.stackTraceLimit = 0;\r\n      super();\r\n      // Reset the limit and setting the name property.\r\n      Error.stackTraceLimit = limit;\r\n    }\r\n    const prefix = getMessage(key, [], this);\r\n    let message = `${prefix}: ${context.syscall} returned ` +\r\n                  `${context.code} (${context.message})`;\r\n\r\n    if (context.path !== undefined)\r\n      message += ` ${context.path}`;\r\n    if (context.dest !== undefined)\r\n      message += ` => ${context.dest}`;\r\n\r\n    Object.defineProperty(this, 'message', {\r\n      value: message,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true\r\n    });\r\n    addCodeToName(this, 'SystemError', key);\r\n\r\n    this.code = key;\r\n\r\n    Object.defineProperty(this, 'info', {\r\n      value: context,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: false\r\n    });\r\n\r\n    Object.defineProperty(this, 'errno', {\r\n      get() {\r\n        return context.errno;\r\n      },\r\n      set: (value) => {\r\n        context.errno = value;\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n\r\n    Object.defineProperty(this, 'syscall', {\r\n      get() {\r\n        return context.syscall;\r\n      },\r\n      set: (value) => {\r\n        context.syscall = value;\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n\r\n    if (context.path !== undefined) {\r\n      // TODO(BridgeAR): Investigate why and when the `.toString()` was\r\n      // introduced. The `path` and `dest` properties in the context seem to\r\n      // always be of type string. We should probably just remove the\r\n      // `.toString()` and `Buffer.from()` operations and set the value on the\r\n      // context as the user did.\r\n      Object.defineProperty(this, 'path', {\r\n        get() {\r\n          return context.path != null ?\r\n            context.path.toString() : context.path;\r\n        },\r\n        set: (value) => {\r\n          context.path = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n\r\n    if (context.dest !== undefined) {\r\n      Object.defineProperty(this, 'dest', {\r\n        get() {\r\n          return context.dest != null ?\r\n            context.dest.toString() : context.dest;\r\n        },\r\n        set: (value) => {\r\n          context.dest = value ?\r\n            lazyBuffer().from(value.toString()) : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} [${this.code}]: ${this.message}`;\r\n  }\r\n\r\n  [Symbol.for('nodejs.util.inspect.custom')](recurseTimes, ctx) {\r\n    return lazyInternalUtilInspect().inspect(this, {\r\n      ...ctx,\r\n      getters: true,\r\n      customInspect: false\r\n    });\r\n  }\r\n}\r\n\r\nfunction makeSystemErrorWithCode(key) {\r\n  return class NodeError extends SystemError {\r\n    constructor(ctx) {\r\n      super(key, ctx);\r\n    }\r\n  };\r\n}\r\n\r\nfunction makeNodeErrorWithCode(Base, key) {\r\n  return class NodeError extends Base {\r\n    constructor(...args) {\r\n      if (excludedStackFn === undefined) {\r\n        super();\r\n      } else {\r\n        const limit = Error.stackTraceLimit;\r\n        Error.stackTraceLimit = 0;\r\n        super();\r\n        // Reset the limit and setting the name property.\r\n        Error.stackTraceLimit = limit;\r\n      }\r\n      const message = getMessage(key, args, this);\r\n      Object.defineProperty(this, 'message', {\r\n        value: message,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      });\r\n      addCodeToName(this, super.name, key);\r\n      this.code = key;\r\n    }\r\n\r\n    toString() {\r\n      return `${this.name} [${key}]: ${this.message}`;\r\n    }\r\n  };\r\n}\r\n\r\n// This function removes unnecessary frames from Node.js core errors.\r\nfunction hideStackFrames(fn) {\r\n  return function hidden(...args) {\r\n    // Make sure the most outer `hideStackFrames()` function is used.\r\n    let setStackFn = false;\r\n    if (excludedStackFn === undefined) {\r\n      excludedStackFn = hidden;\r\n      setStackFn = true;\r\n    }\r\n    try {\r\n      return fn(...args);\r\n    } finally {\r\n      if (setStackFn === true) {\r\n        excludedStackFn = undefined;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction addCodeToName(err, name, code) {\r\n  // Set the stack\r\n  if (excludedStackFn !== undefined) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(err, excludedStackFn);\r\n  }\r\n  // Add the error code to the name to include it in the stack trace.\r\n  err.name = `${name} [${code}]`;\r\n  // Access the stack to generate the error message including the error code\r\n  // from the name.\r\n  err.stack;\r\n  // Reset the name to the actual name.\r\n  if (name === 'SystemError') {\r\n    Object.defineProperty(err, 'name', {\r\n      value: name,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true\r\n    });\r\n  } else {\r\n    delete err.name;\r\n  }\r\n}\r\n\r\n// Utility function for registering the error codes. Only used here. Exported\r\n// *only* to allow for testing.\r\nfunction E(sym, val, def, ...otherClasses) {\r\n  // Special case for SystemError that formats the error message differently\r\n  // The SystemErrors only have SystemError as their base classes.\r\n  messages.set(sym, val);\r\n  if (def === SystemError) {\r\n    def = makeSystemErrorWithCode(sym);\r\n  } else {\r\n    def = makeNodeErrorWithCode(def, sym);\r\n  }\r\n\r\n  if (otherClasses.length !== 0) {\r\n    otherClasses.forEach((clazz) => {\r\n      def[clazz.name] = makeNodeErrorWithCode(clazz, sym);\r\n    });\r\n  }\r\n  codes[sym] = def;\r\n}\r\n\r\nfunction getMessage(key, args, self) {\r\n  const msg = messages.get(key);\r\n\r\n  if (assert === undefined) assert = require('internal/assert');\r\n\r\n  if (typeof msg === 'function') {\r\n    assert(\r\n      msg.length <= args.length, // Default options do not count.\r\n      `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n        `match the required ones (${msg.length}).`\r\n    );\r\n    return msg.apply(self, args);\r\n  }\r\n\r\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;\r\n  assert(\r\n    expectedLength === args.length,\r\n    `Code: ${key}; The provided arguments length (${args.length}) does not ` +\r\n      `match the required ones (${expectedLength}).`\r\n  );\r\n  if (args.length === 0)\r\n    return msg;\r\n\r\n  args.unshift(msg);\r\n  return lazyInternalUtilInspect().format.apply(null, args);\r\n}\r\n\r\nlet uvBinding;\r\n\r\nfunction lazyUv() {\r\n  if (!uvBinding) {\r\n    uvBinding = internalBinding('uv');\r\n  }\r\n  return uvBinding;\r\n}\r\n\r\nconst uvUnmappedError = ['UNKNOWN', 'unknown error'];\r\n\r\nfunction uvErrmapGet(name) {\r\n  uvBinding = lazyUv();\r\n  if (!uvBinding.errmap) {\r\n    uvBinding.errmap = uvBinding.getErrorMap();\r\n  }\r\n  return uvBinding.errmap.get(name);\r\n}\r\n\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * function UVException using a context object with data assembled in C++.\r\n * The goal is to migrate them to ERR_* errors later when compatibility is\r\n * not a concern.\r\n *\r\n * @param {Object} ctx\r\n * @returns {Error}\r\n */\r\nfunction uvException(ctx) {\r\n  const [ code, uvmsg ] = uvErrmapGet(ctx.errno) || uvUnmappedError;\r\n  let message = `${code}: ${ctx.message || uvmsg}, ${ctx.syscall}`;\r\n\r\n  let path;\r\n  let dest;\r\n  if (ctx.path) {\r\n    path = ctx.path.toString();\r\n    message += ` '${path}'`;\r\n  }\r\n  if (ctx.dest) {\r\n    dest = ctx.dest.toString();\r\n    message += ` -> '${dest}'`;\r\n  }\r\n\r\n  // Reducing the limit improves the performance significantly. We do not loose\r\n  // the stack frames due to the `captureStackTrace()` function that is called\r\n  // later.\r\n  const tmpLimit = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = 0;\r\n  // Pass the message to the constructor instead of setting it on the object\r\n  // to make sure it is the same as the one created in C++\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  Error.stackTraceLimit = tmpLimit;\r\n\r\n  for (const prop of Object.keys(ctx)) {\r\n    if (prop === 'message' || prop === 'path' || prop === 'dest') {\r\n      continue;\r\n    }\r\n    err[prop] = ctx[prop];\r\n  }\r\n\r\n  err.code = code;\r\n  if (path) {\r\n    err.path = path;\r\n  }\r\n  if (dest) {\r\n    err.dest = dest;\r\n  }\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  Error.captureStackTrace(err, excludedStackFn || uvException);\r\n  return err;\r\n}\r\n\r\n/**\r\n * This creates an error compatible with errors produced in the C++\r\n * This function should replace the deprecated\r\n * `exceptionWithHostPort()` function.\r\n *\r\n * @param {number} err - A libuv error number\r\n * @param {string} syscall\r\n * @param {string} address\r\n * @param {number} [port]\r\n * @returns {Error}\r\n */\r\nfunction uvExceptionWithHostPort(err, syscall, address, port) {\r\n  const [ code, uvmsg ] = uvErrmapGet(err) || uvUnmappedError;\r\n  const message = `${syscall} ${code}: ${uvmsg}`;\r\n  let details = '';\r\n\r\n  if (port && port > 0) {\r\n    details = ` ${address}:${port}`;\r\n  } else if (address) {\r\n    details = ` ${address}`;\r\n  }\r\n\r\n  // Reducing the limit improves the performance significantly. We do not loose\r\n  // the stack frames due to the `captureStackTrace()` function that is called\r\n  // later.\r\n  const tmpLimit = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const ex = new Error(`${message}${details}`);\r\n  Error.stackTraceLimit = tmpLimit;\r\n  ex.code = code;\r\n  ex.errno = code;\r\n  ex.syscall = syscall;\r\n  ex.address = address;\r\n  if (port) {\r\n    ex.port = port;\r\n  }\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  Error.captureStackTrace(ex, excludedStackFn || uvExceptionWithHostPort);\r\n  return ex;\r\n}\r\n\r\n/**\r\n * This used to be util._errnoException().\r\n *\r\n * @param {number} err - A libuv error number\r\n * @param {string} syscall\r\n * @param {string} [original]\r\n * @returns {Error}\r\n */\r\nfunction errnoException(err, syscall, original) {\r\n  // TODO(joyeecheung): We have to use the type-checked\r\n  // getSystemErrorName(err) to guard against invalid arguments from users.\r\n  // This can be replaced with [ code ] = errmap.get(err) when this method\r\n  // is no longer exposed to user land.\r\n  if (util === undefined) util = require('util');\r\n  const code = util.getSystemErrorName(err);\r\n  const message = original ?\r\n    `${syscall} ${code} ${original}` : `${syscall} ${code}`;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const ex = new Error(message);\r\n  // TODO(joyeecheung): errno is supposed to err, like in uvException\r\n  ex.code = ex.errno = code;\r\n  ex.syscall = syscall;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  Error.captureStackTrace(ex, excludedStackFn || errnoException);\r\n  return ex;\r\n}\r\n\r\n/**\r\n * Deprecated, new function is `uvExceptionWithHostPort()`\r\n * New function added the error description directly\r\n * from C++. this method for backwards compatibility\r\n * @param {number} err - A libuv error number\r\n * @param {string} syscall\r\n * @param {string} address\r\n * @param {number} [port]\r\n * @param {string} [additional]\r\n * @returns {Error}\r\n */\r\nfunction exceptionWithHostPort(err, syscall, address, port, additional) {\r\n  // TODO(joyeecheung): We have to use the type-checked\r\n  // getSystemErrorName(err) to guard against invalid arguments from users.\r\n  // This can be replaced with [ code ] = errmap.get(err) when this method\r\n  // is no longer exposed to user land.\r\n  if (util === undefined) util = require('util');\r\n  const code = util.getSystemErrorName(err);\r\n  let details = '';\r\n  if (port && port > 0) {\r\n    details = ` ${address}:${port}`;\r\n  } else if (address) {\r\n    details = ` ${address}`;\r\n  }\r\n  if (additional) {\r\n    details += ` - Local (${additional})`;\r\n  }\r\n\r\n  // Reducing the limit improves the performance significantly. We do not loose\r\n  // the stack frames due to the `captureStackTrace()` function that is called\r\n  // later.\r\n  const tmpLimit = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const ex = new Error(`${syscall} ${code}${details}`);\r\n  // TODO(joyeecheung): errno is supposed to err, like in uvException\r\n  Error.stackTraceLimit = tmpLimit;\r\n  ex.code = ex.errno = code;\r\n  ex.syscall = syscall;\r\n  ex.address = address;\r\n  if (port) {\r\n    ex.port = port;\r\n  }\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  Error.captureStackTrace(ex, excludedStackFn || exceptionWithHostPort);\r\n  return ex;\r\n}\r\n\r\n/**\r\n * @param {number|string} code - A libuv error number or a c-ares error code\r\n * @param {string} syscall\r\n * @param {string} [hostname]\r\n * @returns {Error}\r\n */\r\nfunction dnsException(code, syscall, hostname) {\r\n  // If `code` is of type number, it is a libuv error number, else it is a\r\n  // c-ares error code.\r\n  if (typeof code === 'number') {\r\n    // ENOTFOUND is not a proper POSIX error, but this error has been in place\r\n    // long enough that it's not practical to remove it.\r\n    if (code === lazyUv().UV_EAI_NODATA || code === lazyUv().UV_EAI_NONAME) {\r\n      code = 'ENOTFOUND'; // Fabricated error name.\r\n    } else {\r\n      code = lazyInternalUtil().getSystemErrorName(code);\r\n    }\r\n  }\r\n  const message = `${syscall} ${code}${hostname ? ` ${hostname}` : ''}`;\r\n  // Reducing the limit improves the performance significantly. We do not loose\r\n  // the stack frames due to the `captureStackTrace()` function that is called\r\n  // later.\r\n  const tmpLimit = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const ex = new Error(message);\r\n  // TODO(joyeecheung): errno is supposed to be a number / err, like in\r\n  Error.stackTraceLimit = tmpLimit;\r\n  // uvException.\r\n  ex.errno = code;\r\n  ex.code = code;\r\n  ex.syscall = syscall;\r\n  if (hostname) {\r\n    ex.hostname = hostname;\r\n  }\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  Error.captureStackTrace(ex, excludedStackFn || dnsException);\r\n  return ex;\r\n}\r\n\r\nfunction connResetException(msg) {\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const ex = new Error(msg);\r\n  ex.code = 'ECONNRESET';\r\n  return ex;\r\n}\r\n\r\nlet maxStack_ErrorName;\r\nlet maxStack_ErrorMessage;\r\n/**\r\n * Returns true if `err.name` and `err.message` are equal to engine-specific\r\n * values indicating max call stack size has been exceeded.\r\n * \"Maximum call stack size exceeded\" in V8.\r\n *\r\n * @param {Error} err\r\n * @returns {boolean}\r\n */\r\nfunction isStackOverflowError(err) {\r\n  if (maxStack_ErrorMessage === undefined) {\r\n    try {\r\n      function overflowStack() { overflowStack(); }\r\n      overflowStack();\r\n    } catch (err) {\r\n      maxStack_ErrorMessage = err.message;\r\n      maxStack_ErrorName = err.name;\r\n    }\r\n  }\r\n\r\n  return err && err.name === maxStack_ErrorName &&\r\n         err.message === maxStack_ErrorMessage;\r\n}\r\n\r\nfunction oneOf(expected, thing) {\r\n  assert(typeof thing === 'string', '`thing` has to be of type string');\r\n  if (Array.isArray(expected)) {\r\n    const len = expected.length;\r\n    assert(len > 0,\r\n           'At least one expected value needs to be specified');\r\n    expected = expected.map((i) => String(i));\r\n    if (len > 2) {\r\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +\r\n             expected[len - 1];\r\n    } else if (len === 2) {\r\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\r\n    } else {\r\n      return `of ${thing} ${expected[0]}`;\r\n    }\r\n  } else {\r\n    return `of ${thing} ${String(expected)}`;\r\n  }\r\n}\r\n\r\n// Only use this for integers! Decimal numbers do not work with this function.\r\nfunction addNumericalSeparator(val) {\r\n  let res = '';\r\n  let i = val.length;\r\n  const start = val[0] === '-' ? 1 : 0;\r\n  for (; i >= start + 4; i -= 3) {\r\n    res = `_${val.slice(i - 3, i)}${res}`;\r\n  }\r\n  return `${val.slice(0, i)}${res}`;\r\n}\r\n\r\n// Used to enhance the stack that will be picked up by the inspector\r\nconst kEnhanceStackBeforeInspector = Symbol('kEnhanceStackBeforeInspector');\r\n\r\n// These are supposed to be called only on fatal exceptions before\r\n// the process exits.\r\nconst fatalExceptionStackEnhancers = {\r\n  beforeInspector(error) {\r\n    if (typeof error[kEnhanceStackBeforeInspector] !== 'function') {\r\n      return error.stack;\r\n    }\r\n\r\n    try {\r\n      // Set the error.stack here so it gets picked up by the\r\n      // inspector.\r\n      error.stack = error[kEnhanceStackBeforeInspector]();\r\n    } catch {\r\n      // We are just enhancing the error. If it fails, ignore it.\r\n    }\r\n    return error.stack;\r\n  },\r\n  afterInspector(error) {\r\n    const originalStack = error.stack;\r\n    const {\r\n      inspect,\r\n      inspectDefaultOptions: {\r\n        colors: defaultColors\r\n      }\r\n    } = lazyInternalUtilInspect();\r\n    const colors = (internalBinding('util').guessHandleType(2) === 'TTY' &&\r\n                   require('internal/tty').hasColors()) ||\r\n                   defaultColors;\r\n    try {\r\n      return inspect(error, { colors });\r\n    } catch {\r\n      return originalStack;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addCodeToName, // Exported for NghttpError\r\n  codes,\r\n  dnsException,\r\n  errnoException,\r\n  exceptionWithHostPort,\r\n  getMessage,\r\n  hideStackFrames,\r\n  isStackOverflowError,\r\n  connResetException,\r\n  uvErrmapGet,\r\n  uvException,\r\n  uvExceptionWithHostPort,\r\n  SystemError,\r\n  // This is exported only to facilitate testing.\r\n  E,\r\n  prepareStackTrace,\r\n  overrideStackTrace,\r\n  kEnhanceStackBeforeInspector,\r\n  fatalExceptionStackEnhancers\r\n};\r\n\r\n// To declare an error message, use the E(sym, val, def) function above. The sym\r\n// must be an upper case string. The val can be either a function or a string.\r\n// The def must be an error class.\r\n// The return value of the function must be a string.\r\n// Examples:\r\n// E('EXAMPLE_KEY1', 'This is the error value', Error);\r\n// E('EXAMPLE_KEY2', (a, b) => return `${a} ${b}`, RangeError);\r\n//\r\n// Once an error code has been assigned, the code itself MUST NOT change and\r\n// any given error code must never be reused to identify a different error.\r\n//\r\n// Any error code added here should also be added to the documentation\r\n//\r\n// Note: Please try to keep these in alphabetical order\r\n//\r\n// Note: Node.js specific errors must begin with the prefix ERR_\r\nE('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\r\nE('ERR_ARG_NOT_ITERABLE', '%s must be iterable', TypeError);\r\nE('ERR_ASSERTION', '%s', Error);\r\nE('ERR_ASYNC_CALLBACK', '%s must be a function', TypeError);\r\nE('ERR_ASYNC_TYPE', 'Invalid name for async \"type\": %s', TypeError);\r\nE('ERR_BROTLI_INVALID_PARAM', '%s is not a valid Brotli parameter', RangeError);\r\nE('ERR_BUFFER_OUT_OF_BOUNDS',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name = undefined) => {\r\n    if (name) {\r\n      return `\"${name}\" is outside of buffer bounds`;\r\n    }\r\n    return 'Attempt to access memory outside buffer bounds';\r\n  }, RangeError);\r\nE('ERR_BUFFER_TOO_LARGE',\r\n  `Cannot create a Buffer larger than 0x${kMaxLength.toString(16)} bytes`,\r\n  RangeError);\r\nE('ERR_CANNOT_WATCH_SIGINT', 'Cannot watch for SIGINT signals', Error);\r\nE('ERR_CHILD_CLOSED_BEFORE_REPLY',\r\n  'Child closed before reply received', Error);\r\nE('ERR_CHILD_PROCESS_IPC_REQUIRED',\r\n  \"Forked processes must have an IPC channel, missing value 'ipc' in %s\",\r\n  Error);\r\nE('ERR_CHILD_PROCESS_STDIO_MAXBUFFER', '%s maxBuffer length exceeded',\r\n  RangeError);\r\nE('ERR_CONSOLE_WRITABLE_STREAM',\r\n  'Console expects a writable stream instance for %s', TypeError);\r\nE('ERR_CPU_USAGE', 'Unable to obtain cpu usage %s', Error);\r\nE('ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED',\r\n  'Custom engines not supported by this OpenSSL', Error);\r\nE('ERR_CRYPTO_ECDH_INVALID_FORMAT', 'Invalid ECDH format: %s', TypeError);\r\nE('ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY',\r\n  'Public key is not valid for specified curve', Error);\r\nE('ERR_CRYPTO_ENGINE_UNKNOWN', 'Engine \"%s\" was not found', Error);\r\nE('ERR_CRYPTO_FIPS_FORCED',\r\n  'Cannot set FIPS mode, it was forced with --force-fips at startup.', Error);\r\nE('ERR_CRYPTO_FIPS_UNAVAILABLE', 'Cannot set FIPS mode in a non-FIPS build.',\r\n  Error);\r\nE('ERR_CRYPTO_HASH_FINALIZED', 'Digest already called', Error);\r\nE('ERR_CRYPTO_HASH_UPDATE_FAILED', 'Hash update failed', Error);\r\nE('ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS', 'The selected key encoding %s %s.',\r\n  Error);\r\nE('ERR_CRYPTO_INVALID_DIGEST', 'Invalid digest: %s', TypeError);\r\nE('ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE',\r\n  'Invalid key object type %s, expected %s.', TypeError);\r\nE('ERR_CRYPTO_INVALID_STATE', 'Invalid state for operation %s', Error);\r\nE('ERR_CRYPTO_PBKDF2_ERROR', 'PBKDF2 error', Error);\r\nE('ERR_CRYPTO_SCRYPT_INVALID_PARAMETER', 'Invalid scrypt parameter', Error);\r\nE('ERR_CRYPTO_SCRYPT_NOT_SUPPORTED', 'Scrypt algorithm not supported', Error);\r\n// Switch to TypeError. The current implementation does not seem right.\r\nE('ERR_CRYPTO_SIGN_KEY_REQUIRED', 'No key provided to sign', Error);\r\nE('ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH',\r\n  'Input buffers must have the same byte length', RangeError);\r\nE('ERR_DIR_CLOSED', 'Directory handle was closed', Error);\r\nE('ERR_DNS_SET_SERVERS_FAILED', 'c-ares failed to set servers: \"%s\" [%s]',\r\n  Error);\r\nE('ERR_DOMAIN_CALLBACK_NOT_AVAILABLE',\r\n  'A callback was registered through ' +\r\n     'process.setUncaughtExceptionCaptureCallback(), which is mutually ' +\r\n     'exclusive with using the `domain` module',\r\n  Error);\r\nE('ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE',\r\n  'The `domain` module is in use, which is mutually exclusive with calling ' +\r\n     'process.setUncaughtExceptionCaptureCallback()',\r\n  Error);\r\nE('ERR_ENCODING_INVALID_ENCODED_DATA', function(encoding, ret) {\r\n  this.errno = ret;\r\n  return `The encoded data was not valid for encoding ${encoding}`;\r\n}, TypeError);\r\nE('ERR_ENCODING_NOT_SUPPORTED', 'The \"%s\" encoding is not supported',\r\n  RangeError);\r\nE('ERR_FALSY_VALUE_REJECTION', function(reason) {\r\n  this.reason = reason;\r\n  return 'Promise was rejected with falsy value';\r\n}, Error);\r\nE('ERR_FS_FILE_TOO_LARGE', 'File size (%s) is greater than possible Buffer: ' +\r\n    `${kMaxLength} bytes`,\r\n  RangeError);\r\nE('ERR_FS_INVALID_SYMLINK_TYPE',\r\n  'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"%s\"',\r\n  Error); // Switch to TypeError. The current implementation does not seem right\r\nE('ERR_HTTP2_ALTSVC_INVALID_ORIGIN',\r\n  'HTTP/2 ALTSVC frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_ALTSVC_LENGTH',\r\n  'HTTP/2 ALTSVC frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_CONNECT_AUTHORITY',\r\n  ':authority header is required for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_PATH',\r\n  'The :path header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_CONNECT_SCHEME',\r\n  'The :scheme header is forbidden for CONNECT requests', Error);\r\nE('ERR_HTTP2_GOAWAY_SESSION',\r\n  'New streams cannot be created after receiving a GOAWAY', Error);\r\nE('ERR_HTTP2_HEADERS_AFTER_RESPOND',\r\n  'Cannot specify additional headers after response initiated', Error);\r\nE('ERR_HTTP2_HEADERS_SENT', 'Response has already been initiated.', Error);\r\nE('ERR_HTTP2_HEADER_SINGLE_VALUE',\r\n  'Header field \"%s\" must only have a single value', TypeError);\r\nE('ERR_HTTP2_INFO_STATUS_NOT_ALLOWED',\r\n  'Informational status codes cannot be used', RangeError);\r\nE('ERR_HTTP2_INVALID_CONNECTION_HEADERS',\r\n  'HTTP/1 Connection specific headers are forbidden: \"%s\"', TypeError);\r\nE('ERR_HTTP2_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError);\r\nE('ERR_HTTP2_INVALID_INFO_STATUS',\r\n  'Invalid informational status code: %s', RangeError);\r\nE('ERR_HTTP2_INVALID_ORIGIN',\r\n  'HTTP/2 ORIGIN frames require a valid origin', TypeError);\r\nE('ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH',\r\n  'Packed settings length must be a multiple of six', RangeError);\r\nE('ERR_HTTP2_INVALID_PSEUDOHEADER',\r\n  '\"%s\" is an invalid pseudoheader or is used incorrectly', TypeError);\r\nE('ERR_HTTP2_INVALID_SESSION', 'The session has been destroyed', Error);\r\nE('ERR_HTTP2_INVALID_SETTING_VALUE',\r\n  // Using default arguments here is important so the arguments are not counted\r\n  // towards `Function#length`.\r\n  function(name, actual, min = undefined, max = undefined) {\r\n    this.actual = actual;\r\n    if (min !== undefined) {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n    return `Invalid value for setting \"${name}\": ${actual}`;\r\n  }, TypeError, RangeError);\r\nE('ERR_HTTP2_INVALID_STREAM', 'The stream has been destroyed', Error);\r\nE('ERR_HTTP2_MAX_PENDING_SETTINGS_ACK',\r\n  'Maximum number of pending settings acknowledgements', Error);\r\nE('ERR_HTTP2_NESTED_PUSH',\r\n  'A push stream cannot initiate another push stream.', Error);\r\nE('ERR_HTTP2_NO_SOCKET_MANIPULATION',\r\n  'HTTP/2 sockets should not be directly manipulated (e.g. read and written)',\r\n  Error);\r\nE('ERR_HTTP2_ORIGIN_LENGTH',\r\n  'HTTP/2 ORIGIN frames are limited to 16382 bytes', TypeError);\r\nE('ERR_HTTP2_OUT_OF_STREAMS',\r\n  'No stream ID is available because maximum stream ID has been reached',\r\n  Error);\r\nE('ERR_HTTP2_PAYLOAD_FORBIDDEN',\r\n  'Responses with %s status must not have a payload', Error);\r\nE('ERR_HTTP2_PING_CANCEL', 'HTTP2 ping cancelled', Error);\r\nE('ERR_HTTP2_PING_LENGTH', 'HTTP2 ping payload must be 8 bytes', RangeError);\r\nE('ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED',\r\n  'Cannot set HTTP/2 pseudo-headers', TypeError);\r\nE('ERR_HTTP2_PUSH_DISABLED', 'HTTP/2 client has disabled push streams', Error);\r\nE('ERR_HTTP2_SEND_FILE', 'Directories cannot be sent', Error);\r\nE('ERR_HTTP2_SEND_FILE_NOSEEK',\r\n  'Offset or length can only be specified for regular files', Error);\r\nE('ERR_HTTP2_SESSION_ERROR', 'Session closed with error code %s', Error);\r\nE('ERR_HTTP2_SETTINGS_CANCEL', 'HTTP2 session settings canceled', Error);\r\nE('ERR_HTTP2_SOCKET_BOUND',\r\n  'The socket is already bound to an Http2Session', Error);\r\nE('ERR_HTTP2_SOCKET_UNBOUND',\r\n  'The socket has been disconnected from the Http2Session', Error);\r\nE('ERR_HTTP2_STATUS_101',\r\n  'HTTP status code 101 (Switching Protocols) is forbidden in HTTP/2', Error);\r\nE('ERR_HTTP2_STATUS_INVALID', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP2_STREAM_CANCEL', function(error) {\r\n  let msg = 'The pending stream has been canceled';\r\n  if (error) {\r\n    this.cause = error;\r\n    if (typeof error.message === 'string')\r\n      msg += ` (caused by: ${error.message})`;\r\n  }\r\n  return msg;\r\n}, Error);\r\nE('ERR_HTTP2_STREAM_ERROR', 'Stream closed with error code %s', Error);\r\nE('ERR_HTTP2_STREAM_SELF_DEPENDENCY',\r\n  'A stream cannot depend on itself', Error);\r\nE('ERR_HTTP2_TRAILERS_ALREADY_SENT',\r\n  'Trailing headers have already been sent', Error);\r\nE('ERR_HTTP2_TRAILERS_NOT_READY',\r\n  'Trailing headers cannot be sent until after the wantTrailers event is ' +\r\n  'emitted', Error);\r\nE('ERR_HTTP2_UNSUPPORTED_PROTOCOL', 'protocol \"%s\" is unsupported.', Error);\r\nE('ERR_HTTP_HEADERS_SENT',\r\n  'Cannot %s headers after they are sent to the client', Error);\r\nE('ERR_HTTP_INVALID_HEADER_VALUE',\r\n  'Invalid value \"%s\" for header \"%s\"', TypeError);\r\nE('ERR_HTTP_INVALID_STATUS_CODE', 'Invalid status code: %s', RangeError);\r\nE('ERR_HTTP_TRAILER_INVALID',\r\n  'Trailers are invalid with this transfer encoding', Error);\r\nE('ERR_INCOMPATIBLE_OPTION_PAIR',\r\n  'Option \"%s\" can not be used in combination with option \"%s\"', TypeError);\r\nE('ERR_INPUT_TYPE_NOT_ALLOWED', '--input-type can only be used with string ' +\r\n  'input via --eval, --print, or STDIN', Error);\r\nE('ERR_INSPECTOR_ALREADY_CONNECTED', '%s is already connected', Error);\r\nE('ERR_INSPECTOR_CLOSED', 'Session was closed', Error);\r\nE('ERR_INSPECTOR_COMMAND', 'Inspector error %d: %s', Error);\r\nE('ERR_INSPECTOR_NOT_ACTIVE', 'Inspector is not active', Error);\r\nE('ERR_INSPECTOR_NOT_AVAILABLE', 'Inspector is not available', Error);\r\nE('ERR_INSPECTOR_NOT_CONNECTED', 'Session is not connected', Error);\r\nE('ERR_INSPECTOR_NOT_WORKER', 'Current thread is not a worker', Error);\r\nE('ERR_INTERNAL_ASSERTION', (message) => {\r\n  const suffix = 'This is caused by either a bug in Node.js ' +\r\n    'or incorrect usage of Node.js internals.\\n' +\r\n    'Please open an issue with this stack trace at ' +\r\n    'https://github.com/nodejs/node/issues\\n';\r\n  return message === undefined ? suffix : `${message}\\n${suffix}`;\r\n}, Error);\r\nE('ERR_INVALID_ADDRESS_FAMILY', function(addressType, host, port) {\r\n  this.host = host;\r\n  this.port = port;\r\n  return `Invalid address family: ${addressType} ${host}:${port}`;\r\n}, RangeError);\r\nE('ERR_INVALID_ARG_TYPE',\r\n  (name, expected, actual) => {\r\n    assert(typeof name === 'string', \"'name' must be a string\");\r\n\r\n    // determiner: 'must be' or 'must not be'\r\n    let determiner;\r\n    if (typeof expected === 'string' && expected.startsWith('not ')) {\r\n      determiner = 'must not be';\r\n      expected = expected.replace(/^not /, '');\r\n    } else {\r\n      determiner = 'must be';\r\n    }\r\n\r\n    let msg;\r\n    if (name.endsWith(' argument')) {\r\n      // For cases like 'first argument'\r\n      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\r\n    } else {\r\n      const type = name.includes('.') ? 'property' : 'argument';\r\n      msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\r\n    }\r\n\r\n    // TODO(BridgeAR): Improve the output by showing `null` and similar.\r\n    msg += `. Received type ${typeof actual}`;\r\n    return msg;\r\n  }, TypeError);\r\nE('ERR_INVALID_ARG_VALUE', (name, value, reason = 'is invalid') => {\r\n  let inspected = lazyInternalUtilInspect().inspect(value);\r\n  if (inspected.length > 128) {\r\n    inspected = `${inspected.slice(0, 128)}...`;\r\n  }\r\n  return `The argument '${name}' ${reason}. Received ${inspected}`;\r\n}, TypeError, RangeError);\r\nE('ERR_INVALID_ASYNC_ID', 'Invalid %s value: %s', RangeError);\r\nE('ERR_INVALID_BUFFER_SIZE',\r\n  'Buffer size must be a multiple of %s', RangeError);\r\nE('ERR_INVALID_CALLBACK',\r\n  'Callback must be a function. Received %O', TypeError);\r\nE('ERR_INVALID_CHAR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (name, field = undefined) => {\r\n    let msg = `Invalid character in ${name}`;\r\n    if (field !== undefined) {\r\n      msg += ` [\"${field}\"]`;\r\n    }\r\n    return msg;\r\n  }, TypeError);\r\nE('ERR_INVALID_CURSOR_POS',\r\n  'Cannot set cursor row without setting its column', TypeError);\r\nE('ERR_INVALID_FD',\r\n  '\"fd\" must be a positive integer: %s', RangeError);\r\nE('ERR_INVALID_FD_TYPE', 'Unsupported fd type: %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_HOST',\r\n  'File URL host must be \"localhost\" or empty on %s', TypeError);\r\nE('ERR_INVALID_FILE_URL_PATH', 'File URL path %s', TypeError);\r\nE('ERR_INVALID_HANDLE_TYPE', 'This handle type cannot be sent', TypeError);\r\nE('ERR_INVALID_HTTP_TOKEN', '%s must be a valid HTTP token [\"%s\"]', TypeError);\r\nE('ERR_INVALID_IP_ADDRESS', 'Invalid IP address: %s', TypeError);\r\nE('ERR_INVALID_OPT_VALUE', (name, value) =>\r\n  `The value \"${String(value)}\" is invalid for option \"${name}\"`,\r\n  TypeError,\r\n  RangeError);\r\nE('ERR_INVALID_OPT_VALUE_ENCODING',\r\n  'The value \"%s\" is invalid for option \"encoding\"', TypeError);\r\nE('ERR_INVALID_PACKAGE_CONFIG',\r\n  'Invalid package config in \\'%s\\' imported from %s', Error);\r\nE('ERR_INVALID_PERFORMANCE_MARK',\r\n  'The \"%s\" performance mark has not been set', Error);\r\nE('ERR_INVALID_PROTOCOL',\r\n  'Protocol \"%s\" not supported. Expected \"%s\"',\r\n  TypeError);\r\nE('ERR_INVALID_REPL_EVAL_CONFIG',\r\n  'Cannot specify both \"breakEvalOnSigint\" and \"eval\" for REPL', TypeError);\r\nE('ERR_INVALID_REPL_INPUT', '%s', TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY', (input, name, prop, value) => {\r\n  return `Expected a valid ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" function but got ${value}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_PROPERTY_VALUE', (input, name, prop, value) => {\r\n  let type;\r\n  if (value && value.constructor && value.constructor.name) {\r\n    type = `instance of ${value.constructor.name}`;\r\n  } else {\r\n    type = `type ${typeof value}`;\r\n  }\r\n  return `Expected ${input} to be returned for the \"${prop}\" from the` +\r\n         ` \"${name}\" function but got ${type}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_RETURN_VALUE', (input, name, value) => {\r\n  let type;\r\n  if (value && value.constructor && value.constructor.name) {\r\n    type = `instance of ${value.constructor.name}`;\r\n  } else {\r\n    type = `type ${typeof value}`;\r\n  }\r\n  return `Expected ${input} to be returned from the \"${name}\"` +\r\n         ` function but got ${type}.`;\r\n}, TypeError);\r\nE('ERR_INVALID_SYNC_FORK_INPUT',\r\n  'Asynchronous forks do not support ' +\r\n    'Buffer, TypedArray, DataView or string input: %s',\r\n  TypeError);\r\nE('ERR_INVALID_THIS', 'Value of \"this\" must be of type %s', TypeError);\r\nE('ERR_INVALID_TUPLE', '%s must be an iterable %s tuple', TypeError);\r\nE('ERR_INVALID_URI', 'URI malformed', URIError);\r\nE('ERR_INVALID_URL', function(input) {\r\n  this.input = input;\r\n  return `Invalid URL: ${input}`;\r\n}, TypeError);\r\nE('ERR_INVALID_URL_SCHEME',\r\n  (expected) => `The URL must be ${oneOf(expected, 'scheme')}`, TypeError);\r\nE('ERR_IPC_CHANNEL_CLOSED', 'Channel closed', Error);\r\nE('ERR_IPC_DISCONNECTED', 'IPC channel is already disconnected', Error);\r\nE('ERR_IPC_ONE_PIPE', 'Child process can have only one IPC pipe', Error);\r\nE('ERR_IPC_SYNC_FORK', 'IPC cannot be used with synchronous forks', Error);\r\nE('ERR_MANIFEST_ASSERT_INTEGRITY',\r\n  (moduleURL, realIntegrities) => {\r\n    let msg = `The content of \"${\r\n      moduleURL\r\n    }\" does not match the expected integrity.`;\r\n    if (realIntegrities.size) {\r\n      const sri = [...realIntegrities.entries()].map(([alg, dgs]) => {\r\n        return `${alg}-${dgs}`;\r\n      }).join(' ');\r\n      msg += ` Integrities found are: ${sri}`;\r\n    } else {\r\n      msg += ' The resource was not found in the policy.';\r\n    }\r\n    return msg;\r\n  }, Error);\r\nE('ERR_MANIFEST_DEPENDENCY_MISSING',\r\n  'Manifest resource %s does not list %s as a dependency specifier',\r\n  Error);\r\nE('ERR_MANIFEST_INTEGRITY_MISMATCH',\r\n  'Manifest resource %s has multiple entries but integrity lists do not match',\r\n  SyntaxError);\r\nE('ERR_MANIFEST_INVALID_RESOURCE_FIELD',\r\n  'Manifest resource %s has invalid property value for %s',\r\n  TypeError);\r\nE('ERR_MANIFEST_TDZ', 'Manifest initialization has not yet run', Error);\r\nE('ERR_MANIFEST_UNKNOWN_ONERROR',\r\n  'Manifest specified unknown error behavior \"%s\".',\r\n  SyntaxError);\r\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error);\r\nE('ERR_MISSING_ARGS',\r\n  (...args) => {\r\n    assert(args.length > 0, 'At least one arg needs to be specified');\r\n    let msg = 'The ';\r\n    const len = args.length;\r\n    args = args.map((a) => `\"${a}\"`);\r\n    switch (len) {\r\n      case 1:\r\n        msg += `${args[0]} argument`;\r\n        break;\r\n      case 2:\r\n        msg += `${args[0]} and ${args[1]} arguments`;\r\n        break;\r\n      default:\r\n        msg += args.slice(0, len - 1).join(', ');\r\n        msg += `, and ${args[len - 1]} arguments`;\r\n        break;\r\n    }\r\n    return `${msg} must be specified`;\r\n  }, TypeError);\r\nE('ERR_MISSING_DYNAMIC_INSTANTIATE_HOOK',\r\n  'The ES Module loader may not return a format of \\'dynamic\\' when no ' +\r\n  'dynamicInstantiate function was provided', Error);\r\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error);\r\nE('ERR_NAPI_CONS_FUNCTION', 'Constructor must be a function', TypeError);\r\nE('ERR_NAPI_INVALID_DATAVIEW_ARGS',\r\n  'byte_offset + byte_length should be less than or equal to the size in ' +\r\n    'bytes of the array passed in',\r\n  RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT',\r\n  'start offset of %s should be a multiple of %s', RangeError);\r\nE('ERR_NAPI_INVALID_TYPEDARRAY_LENGTH',\r\n  'Invalid typed array length', RangeError);\r\nE('ERR_NO_CRYPTO',\r\n  'Node.js is not compiled with OpenSSL crypto support', Error);\r\nE('ERR_NO_ICU',\r\n  '%s is not supported on Node.js compiled without ICU', TypeError);\r\nE('ERR_OUT_OF_RANGE',\r\n  (str, range, input, replaceDefaultBoolean = false) => {\r\n    assert(range, 'Missing \"range\" argument');\r\n    let msg = replaceDefaultBoolean ? str :\r\n      `The value of \"${str}\" is out of range.`;\r\n    let received;\r\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\r\n      received = addNumericalSeparator(String(input));\r\n    } else if (typeof input === 'bigint') {\r\n      received = String(input);\r\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\r\n        received = addNumericalSeparator(received);\r\n      }\r\n      received += 'n';\r\n    } else {\r\n      received = lazyInternalUtilInspect().inspect(input);\r\n    }\r\n    msg += ` It must be ${range}. Received ${received}`;\r\n    return msg;\r\n  }, RangeError);\r\nE('ERR_REQUIRE_ESM', 'Must use import to load ES Module: %s', Error);\r\nE('ERR_SCRIPT_EXECUTION_INTERRUPTED',\r\n  'Script execution was interrupted by `SIGINT`', Error);\r\nE('ERR_SERVER_ALREADY_LISTEN',\r\n  'Listen method has been called more than once without closing.', Error);\r\nE('ERR_SERVER_NOT_RUNNING', 'Server is not running.', Error);\r\nE('ERR_SOCKET_ALREADY_BOUND', 'Socket is already bound', Error);\r\nE('ERR_SOCKET_BAD_BUFFER_SIZE',\r\n  'Buffer size must be a positive integer', TypeError);\r\nE('ERR_SOCKET_BAD_PORT',\r\n  'Port should be >= 0 and < 65536. Received %s.', RangeError);\r\nE('ERR_SOCKET_BAD_TYPE',\r\n  'Bad socket type specified. Valid types are: udp4, udp6', TypeError);\r\nE('ERR_SOCKET_BUFFER_SIZE',\r\n  'Could not get or set buffer size',\r\n  SystemError);\r\nE('ERR_SOCKET_CANNOT_SEND', 'Unable to send data', Error);\r\nE('ERR_SOCKET_CLOSED', 'Socket is closed', Error);\r\nE('ERR_SOCKET_DGRAM_IS_CONNECTED', 'Already connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_CONNECTED', 'Not connected', Error);\r\nE('ERR_SOCKET_DGRAM_NOT_RUNNING', 'Not running', Error);\r\nE('ERR_SRI_PARSE',\r\n  'Subresource Integrity string %j had an unexpected %j at position %d',\r\n  SyntaxError);\r\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error);\r\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error);\r\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\r\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error);\r\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error);\r\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT',\r\n  'stream.unshift() after end event', Error);\r\nE('ERR_STREAM_WRAP', 'Stream has StringDecoder set or is in objectMode', Error);\r\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error);\r\nE('ERR_SYNTHETIC', 'JavaScript Callstack', Error);\r\nE('ERR_SYSTEM_ERROR', 'A system error occurred', SystemError);\r\nE('ERR_TLS_CERT_ALTNAME_INVALID', function(reason, host, cert) {\r\n  this.reason = reason;\r\n  this.host = host;\r\n  this.cert = cert;\r\n  return `Hostname/IP does not match certificate's altnames: ${reason}`;\r\n}, Error);\r\nE('ERR_TLS_DH_PARAM_SIZE', 'DH parameter size %s is less than 2048', Error);\r\nE('ERR_TLS_HANDSHAKE_TIMEOUT', 'TLS handshake timeout', Error);\r\nE('ERR_TLS_INVALID_PROTOCOL_VERSION',\r\n  '%j is not a valid %s TLS protocol version', TypeError);\r\nE('ERR_TLS_PROTOCOL_VERSION_CONFLICT',\r\n  'TLS protocol version %j conflicts with secureProtocol %j', TypeError);\r\nE('ERR_TLS_RENEGOTIATION_DISABLED',\r\n  'TLS session renegotiation disabled for this socket', Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_TLS_REQUIRED_SERVER_NAME',\r\n  '\"servername\" is required parameter for Server.addContext', Error);\r\nE('ERR_TLS_SESSION_ATTACK', 'TLS session renegotiation attack detected', Error);\r\nE('ERR_TLS_SNI_FROM_SERVER',\r\n  'Cannot issue SNI from a TLS server-side socket', Error);\r\nE('ERR_TRACE_EVENTS_CATEGORY_REQUIRED',\r\n  'At least one category is required', TypeError);\r\nE('ERR_TRACE_EVENTS_UNAVAILABLE', 'Trace events are unavailable', Error);\r\nE('ERR_TRANSFORM_ALREADY_TRANSFORMING',\r\n  'Calling transform done when still transforming', Error);\r\n\r\n// This should probably be a `RangeError`.\r\nE('ERR_TRANSFORM_WITH_LENGTH_0',\r\n  'Calling transform done when writableState.length != 0', Error);\r\nE('ERR_TTY_INIT_FAILED', 'TTY initialization failed', SystemError);\r\nE('ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET',\r\n  '`process.setupUncaughtExceptionCapture()` was called while a capture ' +\r\n    'callback was already active',\r\n  Error);\r\nE('ERR_UNESCAPED_CHARACTERS', '%s contains unescaped characters', TypeError);\r\nE('ERR_UNHANDLED_ERROR',\r\n  // Using a default argument here is important so the argument is not counted\r\n  // towards `Function#length`.\r\n  (err = undefined) => {\r\n    const msg = 'Unhandled error.';\r\n    if (err === undefined) return msg;\r\n    return `${msg} (${err})`;\r\n  }, Error);\r\nE('ERR_UNKNOWN_BUILTIN_MODULE', 'No such built-in module: %s', Error);\r\nE('ERR_UNKNOWN_CREDENTIAL', '%s identifier does not exist: %s', Error);\r\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError);\r\nE('ERR_UNKNOWN_FILE_EXTENSION', 'Unknown file extension: %s', TypeError);\r\nE('ERR_UNKNOWN_MODULE_FORMAT', 'Unknown module format: %s', RangeError);\r\nE('ERR_UNKNOWN_SIGNAL', 'Unknown signal: %s', TypeError);\r\n\r\nE('ERR_V8BREAKITERATOR',\r\n  'Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl',\r\n  Error);\r\n\r\n// This should probably be a `TypeError`.\r\nE('ERR_VALID_PERFORMANCE_ENTRY_TYPE',\r\n  'At least one valid performance entry type is required', Error);\r\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING',\r\n  'A dynamic import callback was not specified.', TypeError);\r\nE('ERR_VM_MODULE_ALREADY_LINKED', 'Module has already been linked', Error);\r\nE('ERR_VM_MODULE_DIFFERENT_CONTEXT',\r\n  'Linked modules must use the same context', Error);\r\nE('ERR_VM_MODULE_LINKING_ERRORED',\r\n  'Linking has already failed for the provided module', Error);\r\nE('ERR_VM_MODULE_NOT_MODULE',\r\n  'Provided module is not an instance of Module', Error);\r\nE('ERR_VM_MODULE_STATUS', 'Module status %s', Error);\r\nE('ERR_WORKER_INVALID_EXEC_ARGV', (errors) =>\r\n  `Initiated Worker with invalid execArgv flags: ${errors.join(', ')}`,\r\n  Error);\r\nE('ERR_WORKER_PATH',\r\n  'The worker script filename must be an absolute path or a relative ' +\r\n  'path starting with \\'./\\' or \\'../\\'. Received \"%s\"',\r\n  TypeError);\r\nE('ERR_WORKER_UNSERIALIZABLE_ERROR',\r\n  'Serializing an uncaught exception failed', Error);\r\nE('ERR_WORKER_UNSUPPORTED_EXTENSION',\r\n  'The worker script extension must be \".js\" or \".mjs\". Received \"%s\"',\r\n  TypeError);\r\nE('ERR_WORKER_UNSUPPORTED_OPERATION',\r\n  '%s is not supported in workers', TypeError);\r\nE('ERR_ZLIB_INITIALIZATION_FAILED', 'Initialization failed', Error);\r\n"
  },
  {
    "name": "internal/util.js",
    "source": "'use strict';\r\n\r\nconst { Object, Reflect } = primordials;\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_NO_CRYPTO,\r\n    ERR_UNKNOWN_SIGNAL\r\n  },\r\n  uvErrmapGet,\r\n  overrideStackTrace,\r\n} = require('internal/errors');\r\nconst { signals } = internalBinding('constants').os;\r\nconst {\r\n  getHiddenValue,\r\n  setHiddenValue,\r\n  arrow_message_private_symbol: kArrowMessagePrivateSymbolIndex,\r\n  decorated_private_symbol: kDecoratedPrivateSymbolIndex\r\n} = internalBinding('util');\r\nconst { isNativeError } = internalBinding('types');\r\n\r\nconst noCrypto = !process.versions.openssl;\r\n\r\nconst experimentalWarnings = new Set();\r\n\r\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\r\n\r\nfunction removeColors(str) {\r\n  return str.replace(colorRegExp, '');\r\n}\r\n\r\nfunction isError(e) {\r\n  // An error could be an instance of Error while not being a native error\r\n  // or could be from a different realm and not be instance of Error but still\r\n  // be a native error.\r\n  return isNativeError(e) || e instanceof Error;\r\n}\r\n\r\n// Keep a list of deprecation codes that have been warned on so we only warn on\r\n// each one once.\r\nconst codesWarned = new Set();\r\n\r\n// Mark that a method should not be used.\r\n// Returns a modified function which warns once by default.\r\n// If --no-deprecation is set, then it is a no-op.\r\nfunction deprecate(fn, msg, code) {\r\n  if (process.noDeprecation === true) {\r\n    return fn;\r\n  }\r\n\r\n  if (code !== undefined && typeof code !== 'string')\r\n    throw new ERR_INVALID_ARG_TYPE('code', 'string', code);\r\n\r\n  let warned = false;\r\n  function deprecated(...args) {\r\n    if (!warned) {\r\n      warned = true;\r\n      if (code !== undefined) {\r\n        if (!codesWarned.has(code)) {\r\n          process.emitWarning(msg, 'DeprecationWarning', code, deprecated);\r\n          codesWarned.add(code);\r\n        }\r\n      } else {\r\n        process.emitWarning(msg, 'DeprecationWarning', deprecated);\r\n      }\r\n    }\r\n    if (new.target) {\r\n      return Reflect.construct(fn, args, new.target);\r\n    }\r\n    return fn.apply(this, args);\r\n  }\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  Object.setPrototypeOf(deprecated, fn);\r\n  if (fn.prototype) {\r\n    // Setting this (rather than using Object.setPrototype, as above) ensures\r\n    // that calling the unwrapped constructor gives an instanceof the wrapped\r\n    // constructor.\r\n    deprecated.prototype = fn.prototype;\r\n  }\r\n\r\n  return deprecated;\r\n}\r\n\r\nfunction decorateErrorStack(err) {\r\n  if (!(isError(err) && err.stack) ||\r\n      getHiddenValue(err, kDecoratedPrivateSymbolIndex) === true)\r\n    return;\r\n\r\n  const arrow = getHiddenValue(err, kArrowMessagePrivateSymbolIndex);\r\n\r\n  if (arrow) {\r\n    err.stack = arrow + err.stack;\r\n    setHiddenValue(err, kDecoratedPrivateSymbolIndex, true);\r\n  }\r\n}\r\n\r\nfunction assertCrypto() {\r\n  if (noCrypto)\r\n    throw new ERR_NO_CRYPTO();\r\n}\r\n\r\n// Return undefined if there is no match.\r\n// Move the \"slow cases\" to a separate function to make sure this function gets\r\n// inlined properly. That prioritizes the common case.\r\nfunction normalizeEncoding(enc) {\r\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\r\n  return slowCases(enc);\r\n}\r\n\r\nfunction slowCases(enc) {\r\n  switch (enc.length) {\r\n    case 4:\r\n      if (enc === 'UTF8') return 'utf8';\r\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\r\n      enc = `${enc}`.toLowerCase();\r\n      if (enc === 'utf8') return 'utf8';\r\n      if (enc === 'ucs2') return 'utf16le';\r\n      break;\r\n    case 3:\r\n      if (enc === 'hex' || enc === 'HEX' || `${enc}`.toLowerCase() === 'hex')\r\n        return 'hex';\r\n      break;\r\n    case 5:\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      if (enc === 'UTF-8') return 'utf8';\r\n      if (enc === 'ASCII') return 'ascii';\r\n      if (enc === 'UCS-2') return 'utf16le';\r\n      enc = `${enc}`.toLowerCase();\r\n      if (enc === 'utf-8') return 'utf8';\r\n      if (enc === 'ascii') return 'ascii';\r\n      if (enc === 'ucs-2') return 'utf16le';\r\n      break;\r\n    case 6:\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      if (enc === 'BASE64') return 'base64';\r\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\r\n      enc = `${enc}`.toLowerCase();\r\n      if (enc === 'base64') return 'base64';\r\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\r\n      break;\r\n    case 7:\r\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\r\n        `${enc}`.toLowerCase() === 'utf16le')\r\n        return 'utf16le';\r\n      break;\r\n    case 8:\r\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\r\n        `${enc}`.toLowerCase() === 'utf-16le')\r\n        return 'utf16le';\r\n      break;\r\n    default:\r\n      if (enc === '') return 'utf8';\r\n  }\r\n}\r\n\r\nfunction emitExperimentalWarning(feature) {\r\n  if (experimentalWarnings.has(feature)) return;\r\n  const msg = `${feature} is an experimental feature. This feature could ` +\r\n       'change at any time';\r\n  experimentalWarnings.add(feature);\r\n  process.emitWarning(msg, 'ExperimentalWarning');\r\n}\r\n\r\nfunction filterDuplicateStrings(items, low) {\r\n  const map = new Map();\r\n  for (var i = 0; i < items.length; i++) {\r\n    const item = items[i];\r\n    const key = item.toLowerCase();\r\n    if (low) {\r\n      map.set(key, key);\r\n    } else {\r\n      map.set(key, item);\r\n    }\r\n  }\r\n  return Array.from(map.values()).sort();\r\n}\r\n\r\nfunction cachedResult(fn) {\r\n  let result;\r\n  return () => {\r\n    if (result === undefined)\r\n      result = fn();\r\n    return result.slice();\r\n  };\r\n}\r\n\r\n// Useful for Wrapping an ES6 Class with a constructor Function that\r\n// does not require the new keyword. For instance:\r\n//   class A { constructor(x) {this.x = x;}}\r\n//   const B = createClassWrapper(A);\r\n//   B() instanceof A // true\r\n//   B() instanceof B // true\r\nfunction createClassWrapper(type) {\r\n  function fn(...args) {\r\n    return Reflect.construct(type, args, new.target || type);\r\n  }\r\n  // Mask the wrapper function name and length values\r\n  Object.defineProperties(fn, {\r\n    name: { value: type.name },\r\n    length: { value: type.length }\r\n  });\r\n  Object.setPrototypeOf(fn, type);\r\n  fn.prototype = type.prototype;\r\n  return fn;\r\n}\r\n\r\nlet signalsToNamesMapping;\r\nfunction getSignalsToNamesMapping() {\r\n  if (signalsToNamesMapping !== undefined)\r\n    return signalsToNamesMapping;\r\n\r\n  signalsToNamesMapping = Object.create(null);\r\n  for (const key in signals) {\r\n    signalsToNamesMapping[signals[key]] = key;\r\n  }\r\n\r\n  return signalsToNamesMapping;\r\n}\r\n\r\nfunction convertToValidSignal(signal) {\r\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\r\n    return signal;\r\n\r\n  if (typeof signal === 'string') {\r\n    const signalName = signals[signal.toUpperCase()];\r\n    if (signalName) return signalName;\r\n  }\r\n\r\n  throw new ERR_UNKNOWN_SIGNAL(signal);\r\n}\r\n\r\nfunction getConstructorOf(obj) {\r\n  while (obj) {\r\n    const descriptor = Object.getOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '') {\r\n      return descriptor.value;\r\n    }\r\n\r\n    obj = Object.getPrototypeOf(obj);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getSystemErrorName(err) {\r\n  const entry = uvErrmapGet(err);\r\n  return entry ? entry[0] : `Unknown system error ${err}`;\r\n}\r\n\r\nconst kCustomPromisifiedSymbol = Symbol('util.promisify.custom');\r\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\r\n\r\nfunction promisify(original) {\r\n  if (typeof original !== 'function')\r\n    throw new ERR_INVALID_ARG_TYPE('original', 'Function', original);\r\n\r\n  if (original[kCustomPromisifiedSymbol]) {\r\n    const fn = original[kCustomPromisifiedSymbol];\r\n    if (typeof fn !== 'function') {\r\n      throw new ERR_INVALID_ARG_TYPE('util.promisify.custom', 'Function', fn);\r\n    }\r\n    return Object.defineProperty(fn, kCustomPromisifiedSymbol, {\r\n      value: fn, enumerable: false, writable: false, configurable: true\r\n    });\r\n  }\r\n\r\n  // Names to create an object from in case the callback receives multiple\r\n  // arguments, e.g. ['bytesRead', 'buffer'] for fs.read.\r\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\r\n\r\n  function fn(...args) {\r\n    return new Promise((resolve, reject) => {\r\n      original.call(this, ...args, (err, ...values) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        if (argumentNames !== undefined && values.length > 1) {\r\n          const obj = {};\r\n          for (var i = 0; i < argumentNames.length; i++)\r\n            obj[argumentNames[i]] = values[i];\r\n          resolve(obj);\r\n        } else {\r\n          resolve(values[0]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\r\n\r\n  Object.defineProperty(fn, kCustomPromisifiedSymbol, {\r\n    value: fn, enumerable: false, writable: false, configurable: true\r\n  });\r\n  return Object.defineProperties(\r\n    fn,\r\n    Object.getOwnPropertyDescriptors(original)\r\n  );\r\n}\r\n\r\npromisify.custom = kCustomPromisifiedSymbol;\r\n\r\n// The build-in Array#join is slower in v8 6.0\r\nfunction join(output, separator) {\r\n  let str = '';\r\n  if (output.length !== 0) {\r\n    const lastIndex = output.length - 1;\r\n    for (let i = 0; i < lastIndex; i++) {\r\n      // It is faster not to use a template string here\r\n      str += output[i];\r\n      str += separator;\r\n    }\r\n    str += output[lastIndex];\r\n  }\r\n  return str;\r\n}\r\n\r\n// As of V8 6.6, depending on the size of the array, this is anywhere\r\n// between 1.5-10x faster than the two-arg version of Array#splice()\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nconst kNodeModulesRE = /^(.*)[\\\\/]node_modules[\\\\/]/;\r\n\r\nlet getStructuredStack;\r\n\r\nfunction isInsideNodeModules() {\r\n  if (getStructuredStack === undefined) {\r\n    // Lazy-load to avoid a circular dependency.\r\n    const { runInNewContext } = require('vm');\r\n    // Use `runInNewContext()` to get something tamper-proof and\r\n    // side-effect-free. Since this is currently only used for a deprecated API,\r\n    // the perf implications should be okay.\r\n    getStructuredStack = runInNewContext(`(function() {\r\n      Error.stackTraceLimit = Infinity;\r\n      return function structuredStack() {\r\n        const e = new Error();\r\n        overrideStackTrace.set(e, (err, trace) => trace);\r\n        return e.stack;\r\n      };\r\n    })()`, { overrideStackTrace }, { filename: 'structured-stack' });\r\n  }\r\n\r\n  const stack = getStructuredStack();\r\n\r\n  // Iterate over all stack frames and look for the first one not coming\r\n  // from inside Node.js itself:\r\n  if (Array.isArray(stack)) {\r\n    for (const frame of stack) {\r\n      const filename = frame.getFileName();\r\n      // If a filename does not start with / or contain \\,\r\n      // it's likely from Node.js core.\r\n      if (!/^\\/|\\\\/.test(filename))\r\n        continue;\r\n      return kNodeModulesRE.test(filename);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction once(callback) {\r\n  let called = false;\r\n  return function(...args) {\r\n    if (called) return;\r\n    called = true;\r\n    callback.apply(this, args);\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  assertCrypto,\r\n  cachedResult,\r\n  convertToValidSignal,\r\n  createClassWrapper,\r\n  decorateErrorStack,\r\n  deprecate,\r\n  emitExperimentalWarning,\r\n  filterDuplicateStrings,\r\n  getConstructorOf,\r\n  getSystemErrorName,\r\n  isError,\r\n  isInsideNodeModules,\r\n  join,\r\n  normalizeEncoding,\r\n  once,\r\n  promisify,\r\n  spliceOne,\r\n  removeColors,\r\n\r\n  // Symbol used to customize promisify conversion\r\n  customPromisifyArgs: kCustomPromisifyArgsSymbol,\r\n\r\n  // Symbol used to provide a custom inspect function for an object as an\r\n  // alternative to using 'inspect'\r\n  customInspectSymbol: Symbol.for('nodejs.util.inspect.custom'),\r\n\r\n  // Used by the buffer module to capture an internal reference to the\r\n  // default isEncoding implementation, just in case userland overrides it.\r\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol'),\r\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol')\r\n};\r\n"
  },
  {
    "name": "events.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Math, Object, Reflect } = primordials;\r\nconst apply = Reflect.apply;\r\n\r\nvar spliceOne;\r\n\r\nconst {\r\n  kEnhanceStackBeforeInspector,\r\n  codes\r\n} = require('internal/errors');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_OUT_OF_RANGE,\r\n  ERR_UNHANDLED_ERROR\r\n} = codes;\r\n\r\nconst {\r\n  inspect\r\n} = require('internal/util/inspect');\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.once = once;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.usingDomains = false;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('listener', 'Function', listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || Number.isNaN(arg)) {\r\n      throw new ERR_OUT_OF_RANGE('defaultMaxListeners',\r\n                                 'a non-negative number',\r\n                                 arg);\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || Number.isNaN(n)) {\r\n    throw new ERR_OUT_OF_RANGE('n', 'a non-negative number', n);\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\n// Returns the length and line number of the first sequence of `a` that fully\r\n// appears in `b` with a length of at least 4.\r\nfunction identicalSequenceRange(a, b) {\r\n  for (var i = 0; i < a.length - 3; i++) {\r\n    // Find the first entry of b that matches the current entry of a.\r\n    const pos = b.indexOf(a[i]);\r\n    if (pos !== -1) {\r\n      const rest = b.length - pos;\r\n      if (rest > 3) {\r\n        let len = 1;\r\n        const maxLen = Math.min(a.length - i, rest);\r\n        // Count the number of consecutive entries.\r\n        while (maxLen > len && a[i + len] === b[pos + len]) {\r\n          len++;\r\n        }\r\n        if (len > 3) {\r\n          return [len, i];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return [0, 0];\r\n}\r\n\r\nfunction enhanceStackTrace(err, own) {\r\n  let ctorInfo = '';\r\n  try {\r\n    const { name } = this.constructor;\r\n    if (name !== 'EventEmitter')\r\n      ctorInfo = ` on ${name} instance`;\r\n  } catch {}\r\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\r\n\r\n  const errStack = err.stack.split('\\n').slice(1);\r\n  const ownStack = own.stack.split('\\n').slice(1);\r\n\r\n  const [ len, off ] = identicalSequenceRange(ownStack, errStack);\r\n  if (len > 0) {\r\n    ownStack.splice(off + 1, len - 2,\r\n                    '    [... lines matching original stack trace ...]');\r\n  }\r\n\r\n  return err.stack + sep + ownStack.join('\\n');\r\n}\r\n\r\nEventEmitter.prototype.emit = function emit(type, ...args) {\r\n  let doError = (type === 'error');\r\n\r\n  const events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    let er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      try {\r\n        const capture = {};\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        Error.captureStackTrace(capture, EventEmitter.prototype.emit);\r\n        Object.defineProperty(er, kEnhanceStackBeforeInspector, {\r\n          value: enhanceStackTrace.bind(this, er, capture),\r\n          configurable: true\r\n        });\r\n      } catch {}\r\n\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n\r\n    let stringifiedEr;\r\n    const { inspect } = require('internal/util/inspect');\r\n    try {\r\n      stringifiedEr = inspect(er);\r\n    } catch {\r\n      stringifiedEr = er;\r\n    }\r\n\r\n    // At least give some kind of context to the user\r\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  const handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    apply(handler, this, args);\r\n  } else {\r\n    const len = handler.length;\r\n    const listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      apply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          `${existing.length} ${String(type)} listeners ` +\r\n                          `added to ${inspect(target, { depth: -1 })}. Use ` +\r\n                          'emitter.setMaxListeners() to increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      process.emitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  const state = { fired: false, wrapFn: undefined, target, type, listener };\r\n  const wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      let originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      const list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        let position = -1;\r\n\r\n        for (var i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          if (spliceOne === undefined)\r\n            spliceOne = require('internal/util').spliceOne;\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      const events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // Not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // Emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        for (const key of Object.keys(events)) {\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      const listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (var i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  const events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  const evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  const events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    const evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  const copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  const ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction once(emitter, name) {\r\n  return new Promise((resolve, reject) => {\r\n    if (typeof emitter.addEventListener === 'function') {\r\n      // EventTarget does not have `error` event semantics like Node\r\n      // EventEmitters, we do not listen to `error` events here.\r\n      emitter.addEventListener(\r\n        name,\r\n        (...args) => { resolve(args); },\r\n        { once: true }\r\n      );\r\n      return;\r\n    }\r\n\r\n    const eventListener = (...args) => {\r\n      if (errorListener !== undefined) {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      resolve(args);\r\n    };\r\n    let errorListener;\r\n\r\n    // Adding an error listener is not optional because\r\n    // if an error is thrown on an event emitter we cannot\r\n    // guarantee that the actual event we are waiting will\r\n    // be fired. The result could be a silent way to create\r\n    // memory or file descriptor leaks, which is something\r\n    // we should avoid.\r\n    if (name !== 'error') {\r\n      errorListener = (err) => {\r\n        emitter.removeListener(name, eventListener);\r\n        reject(err);\r\n      };\r\n\r\n      emitter.once('error', errorListener);\r\n    }\r\n\r\n    emitter.once(name, eventListener);\r\n  });\r\n}\r\n"
  },
  {
    "name": "internal/util/inspect.js",
    "source": "'use strict';\r\n\r\nconst {\r\n  BigIntPrototype,\r\n  BooleanPrototype,\r\n  DatePrototype,\r\n  ErrorPrototype,\r\n  JSON,\r\n  MapPrototype,\r\n  Math,\r\n  NumberPrototype,\r\n  Object,\r\n  ObjectPrototype: {\r\n    hasOwnProperty,\r\n    propertyIsEnumerable\r\n  },\r\n  RegExpPrototype,\r\n  SetPrototype,\r\n  StringPrototype,\r\n  SymbolPrototype,\r\n  uncurryThis\r\n} = primordials;\r\n\r\nconst {\r\n  getOwnNonIndexProperties,\r\n  getPromiseDetails,\r\n  getProxyDetails,\r\n  kPending,\r\n  kRejected,\r\n  previewEntries,\r\n  getConstructorName: internalGetConstructorName,\r\n  propertyFilter: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE\r\n  }\r\n} = internalBinding('util');\r\n\r\nconst {\r\n  customInspectSymbol,\r\n  isError,\r\n  join,\r\n  removeColors\r\n} = require('internal/util');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE\r\n  },\r\n  isStackOverflowError\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  isAsyncFunction,\r\n  isGeneratorFunction,\r\n  isAnyArrayBuffer,\r\n  isArrayBuffer,\r\n  isArgumentsObject,\r\n  isBoxedPrimitive,\r\n  isDataView,\r\n  isExternal,\r\n  isMap,\r\n  isMapIterator,\r\n  isModuleNamespaceObject,\r\n  isNativeError,\r\n  isPromise,\r\n  isSet,\r\n  isSetIterator,\r\n  isWeakMap,\r\n  isWeakSet,\r\n  isRegExp,\r\n  isDate,\r\n  isTypedArray,\r\n  isStringObject,\r\n  isNumberObject,\r\n  isBooleanObject,\r\n  isBigIntObject,\r\n  isUint8Array,\r\n  isUint8ClampedArray,\r\n  isUint16Array,\r\n  isUint32Array,\r\n  isInt8Array,\r\n  isInt16Array,\r\n  isInt32Array,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n  isBigInt64Array,\r\n  isBigUint64Array\r\n} = require('internal/util/types');\r\n\r\nconst assert = require('internal/assert');\r\n\r\nconst { NativeModule } = require('internal/bootstrap/loaders');\r\n\r\nlet hexSlice;\r\n\r\nconst builtInObjects = new Set(\r\n  Object.getOwnPropertyNames(global).filter((e) => /^([A-Z][a-z]+)+$/.test(e))\r\n);\r\n\r\nconst inspectDefaultOptions = Object.seal({\r\n  showHidden: false,\r\n  depth: 2,\r\n  colors: false,\r\n  customInspect: true,\r\n  showProxy: false,\r\n  maxArrayLength: 100,\r\n  breakLength: 80,\r\n  compact: 3,\r\n  sorted: false,\r\n  getters: false\r\n});\r\n\r\nconst kObjectType = 0;\r\nconst kArrayType = 1;\r\nconst kArrayExtrasType = 2;\r\n\r\n/* eslint-disable no-control-regex */\r\nconst strEscapeSequencesRegExp = /[\\x00-\\x1f\\x27\\x5c]/;\r\nconst strEscapeSequencesReplacer = /[\\x00-\\x1f\\x27\\x5c]/g;\r\nconst strEscapeSequencesRegExpSingle = /[\\x00-\\x1f\\x5c]/;\r\nconst strEscapeSequencesReplacerSingle = /[\\x00-\\x1f\\x5c]/g;\r\n/* eslint-enable no-control-regex */\r\n\r\nconst keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;\r\nconst numberRegExp = /^(0|[1-9][0-9]*)$/;\r\n\r\nconst coreModuleRegExp = /^    at (?:[^/\\\\(]+ \\(|)((?<![/\\\\]).+)\\.js:\\d+:\\d+\\)?$/;\r\nconst nodeModulesRegExp = /[/\\\\]node_modules[/\\\\](.+?)(?=[/\\\\])/g;\r\n\r\nconst kMinLineLength = 16;\r\n\r\n// Constants to map the iterator state.\r\nconst kWeak = 0;\r\nconst kIterator = 1;\r\nconst kMapEntries = 2;\r\n\r\n// Escaped special characters. Use empty strings to fill up unused entries.\r\nconst meta = [\r\n  '\\\\u0000', '\\\\u0001', '\\\\u0002', '\\\\u0003', '\\\\u0004',\r\n  '\\\\u0005', '\\\\u0006', '\\\\u0007', '\\\\b', '\\\\t',\r\n  '\\\\n', '\\\\u000b', '\\\\f', '\\\\r', '\\\\u000e',\r\n  '\\\\u000f', '\\\\u0010', '\\\\u0011', '\\\\u0012', '\\\\u0013',\r\n  '\\\\u0014', '\\\\u0015', '\\\\u0016', '\\\\u0017', '\\\\u0018',\r\n  '\\\\u0019', '\\\\u001a', '\\\\u001b', '\\\\u001c', '\\\\u001d',\r\n  '\\\\u001e', '\\\\u001f', '', '', '',\r\n  '', '', '', '', \"\\\\'\", '', '', '', '', '',\r\n  '', '', '', '', '', '', '', '', '', '',\r\n  '', '', '', '', '', '', '', '', '', '',\r\n  '', '', '', '', '', '', '', '', '', '',\r\n  '', '', '', '', '', '', '', '', '', '',\r\n  '', '', '', '', '', '', '', '\\\\\\\\'\r\n];\r\n\r\nfunction getUserOptions(ctx) {\r\n  const obj = { stylize: ctx.stylize };\r\n  for (const key of Object.keys(inspectDefaultOptions)) {\r\n    obj[key] = ctx[key];\r\n  }\r\n  if (ctx.userOptions === undefined)\r\n    return obj;\r\n  return { ...obj, ...ctx.userOptions };\r\n}\r\n\r\n/**\r\n * Echos the value of any input. Tries to print the value out\r\n * in the best way possible given the different types.\r\n *\r\n * @param {any} value The value to print out.\r\n * @param {Object} opts Optional options object that alters the output.\r\n */\r\n/* Legacy: value, showHidden, depth, colors */\r\nfunction inspect(value, opts) {\r\n  // Default options\r\n  const ctx = {\r\n    budget: {},\r\n    indentationLvl: 0,\r\n    seen: [],\r\n    currentDepth: 0,\r\n    stylize: stylizeNoColor,\r\n    showHidden: inspectDefaultOptions.showHidden,\r\n    depth: inspectDefaultOptions.depth,\r\n    colors: inspectDefaultOptions.colors,\r\n    customInspect: inspectDefaultOptions.customInspect,\r\n    showProxy: inspectDefaultOptions.showProxy,\r\n    maxArrayLength: inspectDefaultOptions.maxArrayLength,\r\n    breakLength: inspectDefaultOptions.breakLength,\r\n    compact: inspectDefaultOptions.compact,\r\n    sorted: inspectDefaultOptions.sorted,\r\n    getters: inspectDefaultOptions.getters\r\n  };\r\n  if (arguments.length > 1) {\r\n    // Legacy...\r\n    if (arguments.length > 2) {\r\n      if (arguments[2] !== undefined) {\r\n        ctx.depth = arguments[2];\r\n      }\r\n      if (arguments.length > 3 && arguments[3] !== undefined) {\r\n        ctx.colors = arguments[3];\r\n      }\r\n    }\r\n    // Set user-specified options\r\n    if (typeof opts === 'boolean') {\r\n      ctx.showHidden = opts;\r\n    } else if (opts) {\r\n      const optKeys = Object.keys(opts);\r\n      for (const key of optKeys) {\r\n        // TODO(BridgeAR): Find a solution what to do about stylize. Either make\r\n        // this function public or add a new API with a similar or better\r\n        // functionality.\r\n        if (hasOwnProperty(inspectDefaultOptions, key) || key === 'stylize') {\r\n          ctx[key] = opts[key];\r\n        } else if (ctx.userOptions === undefined) {\r\n          // This is required to pass through the actual user input.\r\n          ctx.userOptions = opts;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\r\n  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;\r\n  return formatValue(ctx, value, 0);\r\n}\r\ninspect.custom = customInspectSymbol;\r\n\r\nObject.defineProperty(inspect, 'defaultOptions', {\r\n  get() {\r\n    return inspectDefaultOptions;\r\n  },\r\n  set(options) {\r\n    if (options === null || typeof options !== 'object') {\r\n      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n    }\r\n    return Object.assign(inspectDefaultOptions, options);\r\n  }\r\n});\r\n\r\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\r\ninspect.colors = Object.assign(Object.create(null), {\r\n  bold: [1, 22],\r\n  italic: [3, 23],\r\n  underline: [4, 24],\r\n  inverse: [7, 27],\r\n  white: [37, 39],\r\n  grey: [90, 39],\r\n  black: [30, 39],\r\n  blue: [34, 39],\r\n  cyan: [36, 39],\r\n  green: [32, 39],\r\n  magenta: [35, 39],\r\n  red: [31, 39],\r\n  yellow: [33, 39]\r\n});\r\n\r\n// Don't use 'blue' not visible on cmd.exe\r\ninspect.styles = Object.assign(Object.create(null), {\r\n  special: 'cyan',\r\n  number: 'yellow',\r\n  bigint: 'yellow',\r\n  boolean: 'yellow',\r\n  undefined: 'grey',\r\n  null: 'bold',\r\n  string: 'green',\r\n  symbol: 'green',\r\n  date: 'magenta',\r\n  // \"name\": intentionally not styling\r\n  regexp: 'red',\r\n  module: 'underline'\r\n});\r\n\r\nfunction addQuotes(str, quotes) {\r\n  if (quotes === -1) {\r\n    return `\"${str}\"`;\r\n  }\r\n  if (quotes === -2) {\r\n    return `\\`${str}\\``;\r\n  }\r\n  return `'${str}'`;\r\n}\r\n\r\nconst escapeFn = (str) => meta[str.charCodeAt(0)];\r\n\r\n// Escape control characters, single quotes and the backslash.\r\n// This is similar to JSON stringify escaping.\r\nfunction strEscape(str) {\r\n  let escapeTest = strEscapeSequencesRegExp;\r\n  let escapeReplace = strEscapeSequencesReplacer;\r\n  let singleQuote = 39;\r\n\r\n  // Check for double quotes. If not present, do not escape single quotes and\r\n  // instead wrap the text in double quotes. If double quotes exist, check for\r\n  // backticks. If they do not exist, use those as fallback instead of the\r\n  // double quotes.\r\n  if (str.includes(\"'\")) {\r\n    // This invalidates the charCode and therefore can not be matched for\r\n    // anymore.\r\n    if (!str.includes('\"')) {\r\n      singleQuote = -1;\r\n    } else if (!str.includes('`') && !str.includes('${')) {\r\n      singleQuote = -2;\r\n    }\r\n    if (singleQuote !== 39) {\r\n      escapeTest = strEscapeSequencesRegExpSingle;\r\n      escapeReplace = strEscapeSequencesReplacerSingle;\r\n    }\r\n  }\r\n\r\n  // Some magic numbers that worked out fine while benchmarking with v8 6.0\r\n  if (str.length < 5000 && !escapeTest.test(str))\r\n    return addQuotes(str, singleQuote);\r\n  if (str.length > 100) {\r\n    str = str.replace(escapeReplace, escapeFn);\r\n    return addQuotes(str, singleQuote);\r\n  }\r\n\r\n  let result = '';\r\n  let last = 0;\r\n  const lastIndex = str.length;\r\n  for (let i = 0; i < lastIndex; i++) {\r\n    const point = str.charCodeAt(i);\r\n    if (point === singleQuote || point === 92 || point < 32) {\r\n      if (last === i) {\r\n        result += meta[point];\r\n      } else {\r\n        result += `${str.slice(last, i)}${meta[point]}`;\r\n      }\r\n      last = i + 1;\r\n    }\r\n  }\r\n\r\n  if (last !== lastIndex) {\r\n    result += str.slice(last);\r\n  }\r\n  return addQuotes(result, singleQuote);\r\n}\r\n\r\nfunction stylizeWithColor(str, styleType) {\r\n  const style = inspect.styles[styleType];\r\n  if (style !== undefined) {\r\n    const color = inspect.colors[style];\r\n    return `\\u001b[${color[0]}m${str}\\u001b[${color[1]}m`;\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction stylizeNoColor(str) {\r\n  return str;\r\n}\r\n\r\n// Return a new empty array to push in the results of the default formatter.\r\nfunction getEmptyFormatArray() {\r\n  return [];\r\n}\r\n\r\nfunction getConstructorName(obj, ctx, recurseTimes) {\r\n  let firstProto;\r\n  const tmp = obj;\r\n  while (obj) {\r\n    const descriptor = Object.getOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function' &&\r\n        descriptor.value.name !== '') {\r\n      return descriptor.value.name;\r\n    }\r\n\r\n    obj = Object.getPrototypeOf(obj);\r\n    if (firstProto === undefined) {\r\n      firstProto = obj;\r\n    }\r\n  }\r\n\r\n  if (firstProto === null) {\r\n    return null;\r\n  }\r\n\r\n  const res = internalGetConstructorName(tmp);\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return `${res} <Complex prototype>`;\r\n  }\r\n\r\n  const protoConstr = getConstructorName(firstProto, ctx, recurseTimes + 1);\r\n\r\n  if (protoConstr === null) {\r\n    return `${res} <${inspect(firstProto, {\r\n      ...ctx,\r\n      customInspect: false,\r\n      depth: -1\r\n    })}>`;\r\n  }\r\n\r\n  return `${res} <${protoConstr}>`;\r\n}\r\n\r\nfunction getPrefix(constructor, tag, fallback) {\r\n  if (constructor === null) {\r\n    if (tag !== '') {\r\n      return `[${fallback}: null prototype] [${tag}] `;\r\n    }\r\n    return `[${fallback}: null prototype] `;\r\n  }\r\n\r\n  if (tag !== '' && constructor !== tag) {\r\n    return `${constructor} [${tag}] `;\r\n  }\r\n  return `${constructor} `;\r\n}\r\n\r\n// Look up the keys of the object.\r\nfunction getKeys(value, showHidden) {\r\n  let keys;\r\n  const symbols = Object.getOwnPropertySymbols(value);\r\n  if (showHidden) {\r\n    keys = Object.getOwnPropertyNames(value);\r\n    if (symbols.length !== 0)\r\n      keys.push(...symbols);\r\n  } else {\r\n    // This might throw if `value` is a Module Namespace Object from an\r\n    // unevaluated module, but we don't want to perform the actual type\r\n    // check because it's expensive.\r\n    // TODO(devsnek): track https://github.com/tc39/ecma262/issues/1209\r\n    // and modify this logic as needed.\r\n    try {\r\n      keys = Object.keys(value);\r\n    } catch (err) {\r\n      assert(isNativeError(err) && err.name === 'ReferenceError' &&\r\n             isModuleNamespaceObject(value));\r\n      keys = Object.getOwnPropertyNames(value);\r\n    }\r\n    if (symbols.length !== 0) {\r\n      keys.push(...symbols.filter((key) => propertyIsEnumerable(value, key)));\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction getCtxStyle(value, constructor, tag) {\r\n  let fallback = '';\r\n  if (constructor === null) {\r\n    fallback = internalGetConstructorName(value);\r\n    if (fallback === tag) {\r\n      fallback = 'Object';\r\n    }\r\n  }\r\n  return getPrefix(constructor, tag, fallback);\r\n}\r\n\r\nfunction formatProxy(ctx, proxy, recurseTimes) {\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    return ctx.stylize('Proxy [Array]', 'special');\r\n  }\r\n  recurseTimes += 1;\r\n  ctx.indentationLvl += 2;\r\n  const res = [\r\n    formatValue(ctx, proxy[0], recurseTimes),\r\n    formatValue(ctx, proxy[1], recurseTimes)\r\n  ];\r\n  ctx.indentationLvl -= 2;\r\n  return reduceToSingleString(\r\n    ctx, res, '', ['Proxy [', ']'], kArrayExtrasType, recurseTimes);\r\n}\r\n\r\nfunction findTypedConstructor(value) {\r\n  for (const [check, clazz] of [\r\n    [isUint8Array, Uint8Array],\r\n    [isUint8ClampedArray, Uint8ClampedArray],\r\n    [isUint16Array, Uint16Array],\r\n    [isUint32Array, Uint32Array],\r\n    [isInt8Array, Int8Array],\r\n    [isInt16Array, Int16Array],\r\n    [isInt32Array, Int32Array],\r\n    [isFloat32Array, Float32Array],\r\n    [isFloat64Array, Float64Array],\r\n    [isBigInt64Array, BigInt64Array],\r\n    [isBigUint64Array, BigUint64Array]\r\n  ]) {\r\n    if (check(value)) {\r\n      return clazz;\r\n    }\r\n  }\r\n}\r\n\r\nlet lazyNullPrototypeCache;\r\n// Creates a subclass and name\r\n// the constructor as `${clazz} : null prototype`\r\nfunction clazzWithNullPrototype(clazz, name) {\r\n  if (lazyNullPrototypeCache === undefined) {\r\n    lazyNullPrototypeCache = new Map();\r\n  } else {\r\n    const cachedClass = lazyNullPrototypeCache.get(clazz);\r\n    if (cachedClass !== undefined) {\r\n      return cachedClass;\r\n    }\r\n  }\r\n  class NullPrototype extends clazz {\r\n    get [Symbol.toStringTag]() {\r\n      return '';\r\n    }\r\n  }\r\n  Object.defineProperty(NullPrototype.prototype.constructor, 'name',\r\n                        { value: `[${name}: null prototype]` });\r\n  lazyNullPrototypeCache.set(clazz, NullPrototype);\r\n  return NullPrototype;\r\n}\r\n\r\nfunction noPrototypeIterator(ctx, value, recurseTimes) {\r\n  let newVal;\r\n  if (isSet(value)) {\r\n    const clazz = clazzWithNullPrototype(Set, 'Set');\r\n    newVal = new clazz(SetPrototype.values(value));\r\n  } else if (isMap(value)) {\r\n    const clazz = clazzWithNullPrototype(Map, 'Map');\r\n    newVal = new clazz(MapPrototype.entries(value));\r\n  } else if (Array.isArray(value)) {\r\n    const clazz = clazzWithNullPrototype(Array, 'Array');\r\n    newVal = new clazz(value.length);\r\n  } else if (isTypedArray(value)) {\r\n    const constructor = findTypedConstructor(value);\r\n    const clazz = clazzWithNullPrototype(constructor, constructor.name);\r\n    newVal = new clazz(value);\r\n  }\r\n  if (newVal !== undefined) {\r\n    Object.defineProperties(newVal, Object.getOwnPropertyDescriptors(value));\r\n    return formatRaw(ctx, newVal, recurseTimes);\r\n  }\r\n}\r\n\r\n// Note: using `formatValue` directly requires the indentation level to be\r\n// corrected by setting `ctx.indentationLvL += diff` and then to decrease the\r\n// value afterwards again.\r\nfunction formatValue(ctx, value, recurseTimes, typedArray) {\r\n  // Primitive types cannot have properties.\r\n  if (typeof value !== 'object' && typeof value !== 'function') {\r\n    return formatPrimitive(ctx.stylize, value, ctx);\r\n  }\r\n  if (value === null) {\r\n    return ctx.stylize('null', 'null');\r\n  }\r\n\r\n  // Memorize the context for custom inspection on proxies.\r\n  const context = value;\r\n  // Always check for proxies to prevent side effects and to prevent triggering\r\n  // any proxy handlers.\r\n  const proxy = getProxyDetails(value);\r\n  if (proxy !== undefined) {\r\n    if (ctx.showProxy) {\r\n      return formatProxy(ctx, proxy, recurseTimes);\r\n    }\r\n    value = proxy[0];\r\n  }\r\n\r\n  // Provide a hook for user-specified inspect functions.\r\n  // Check that value is an object with an inspect function on it.\r\n  if (ctx.customInspect) {\r\n    const maybeCustom = value[customInspectSymbol];\r\n    if (typeof maybeCustom === 'function' &&\r\n        // Filter out the util module, its inspect function is special.\r\n        maybeCustom !== inspect &&\r\n        // Also filter out any prototype objects using the circular check.\r\n        !(value.constructor && value.constructor.prototype === value)) {\r\n      // This makes sure the recurseTimes are reported as before while using\r\n      // a counter internally.\r\n      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;\r\n      const ret = maybeCustom.call(context, depth, getUserOptions(ctx));\r\n      // If the custom inspection method returned `this`, don't go into\r\n      // infinite recursion.\r\n      if (ret !== context) {\r\n        if (typeof ret !== 'string') {\r\n          return formatValue(ctx, ret, recurseTimes);\r\n        }\r\n        return ret.replace(/\\n/g, `\\n${' '.repeat(ctx.indentationLvl)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Using an array here is actually better for the average case than using\r\n  // a Set. `seen` will only check for the depth and will never grow too large.\r\n  if (ctx.seen.includes(value)) {\r\n    let index = 1;\r\n    if (ctx.circular === undefined) {\r\n      ctx.circular = new Map([[value, index]]);\r\n    } else {\r\n      index = ctx.circular.get(value);\r\n      if (index === undefined) {\r\n        index = ctx.circular.size + 1;\r\n        ctx.circular.set(value, index);\r\n      }\r\n    }\r\n    return ctx.stylize('[Circular]', 'special');\r\n  }\r\n\r\n  return formatRaw(ctx, value, recurseTimes, typedArray);\r\n}\r\n\r\nfunction formatRaw(ctx, value, recurseTimes, typedArray) {\r\n  let keys;\r\n\r\n  const constructor = getConstructorName(value, ctx, recurseTimes);\r\n  let tag = value[Symbol.toStringTag];\r\n  // Only list the tag in case it's non-enumerable / not an own property.\r\n  // Otherwise we'd print this twice.\r\n  if (typeof tag !== 'string' ||\r\n      (tag !== '' &&\r\n      (ctx.showHidden ? hasOwnProperty : propertyIsEnumerable)(\r\n        value, Symbol.toStringTag\r\n      ))) {\r\n    tag = '';\r\n  }\r\n  let base = '';\r\n  let formatter = getEmptyFormatArray;\r\n  let braces;\r\n  let noIterator = true;\r\n  let i = 0;\r\n  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n\r\n  let extrasType = kObjectType;\r\n\r\n  // Iterators and the rest are split to reduce checks.\r\n  if (value[Symbol.iterator]) {\r\n    noIterator = false;\r\n    if (Array.isArray(value)) {\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      // Only set the constructor for non ordinary (\"Array [...]\") arrays.\r\n      const prefix = getPrefix(constructor, tag, 'Array');\r\n      braces = [`${prefix === 'Array ' ? '' : prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0)\r\n        return `${braces[0]}]`;\r\n      extrasType = kArrayExtrasType;\r\n      formatter = formatArray;\r\n    } else if (isSet(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      const prefix = getPrefix(constructor, tag, 'Set');\r\n      if (value.size === 0 && keys.length === 0)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n      formatter = formatSet;\r\n    } else if (isMap(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      const prefix = getPrefix(constructor, tag, 'Map');\r\n      if (value.size === 0 && keys.length === 0)\r\n        return `${prefix}{}`;\r\n      braces = [`${prefix}{`, '}'];\r\n      formatter = formatMap;\r\n    } else if (isTypedArray(value)) {\r\n      keys = getOwnNonIndexProperties(value, filter);\r\n      const prefix = constructor !== null ?\r\n        getPrefix(constructor, tag) :\r\n        getPrefix(constructor, tag, findTypedConstructor(value).name);\r\n      braces = [`${prefix}[`, ']'];\r\n      if (value.length === 0 && keys.length === 0 && !ctx.showHidden)\r\n        return `${braces[0]}]`;\r\n      formatter = formatTypedArray;\r\n      extrasType = kArrayExtrasType;\r\n    } else if (isMapIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Map', tag);\r\n      formatter = formatIterator;\r\n    } else if (isSetIterator(value)) {\r\n      keys = getKeys(value, ctx.showHidden);\r\n      braces = getIteratorBraces('Set', tag);\r\n      formatter = formatIterator;\r\n    } else {\r\n      noIterator = true;\r\n    }\r\n  }\r\n  if (noIterator) {\r\n    keys = getKeys(value, ctx.showHidden);\r\n    braces = ['{', '}'];\r\n    if (constructor === 'Object') {\r\n      if (isArgumentsObject(value)) {\r\n        braces[0] = '[Arguments] {';\r\n      } else if (tag !== '') {\r\n        braces[0] = `${getPrefix(constructor, tag, 'Object')}{`;\r\n      }\r\n      if (keys.length === 0) {\r\n        return `${braces[0]}}`;\r\n      }\r\n    } else if (typeof value === 'function') {\r\n      base = getFunctionBase(value, constructor, tag);\r\n      if (keys.length === 0)\r\n        return ctx.stylize(base, 'special');\r\n    } else if (isRegExp(value)) {\r\n      // Make RegExps say that they are RegExps\r\n      base = RegExpPrototype.toString(\r\n        constructor !== null ? value : new RegExp(value)\r\n      );\r\n      const prefix = getPrefix(constructor, tag, 'RegExp');\r\n      if (prefix !== 'RegExp ')\r\n        base = `${prefix}${base}`;\r\n      if (keys.length === 0 || (recurseTimes > ctx.depth && ctx.depth !== null))\r\n        return ctx.stylize(base, 'regexp');\r\n    } else if (isDate(value)) {\r\n      // Make dates with properties first say the date\r\n      base = Number.isNaN(DatePrototype.getTime(value)) ?\r\n        DatePrototype.toString(value) :\r\n        DatePrototype.toISOString(value);\r\n      const prefix = getPrefix(constructor, tag, 'Date');\r\n      if (prefix !== 'Date ')\r\n        base = `${prefix}${base}`;\r\n      if (keys.length === 0) {\r\n        return ctx.stylize(base, 'date');\r\n      }\r\n    } else if (isError(value)) {\r\n      base = formatError(value, constructor, tag, ctx);\r\n      if (keys.length === 0)\r\n        return base;\r\n    } else if (isAnyArrayBuffer(value)) {\r\n      // Fast path for ArrayBuffer and SharedArrayBuffer.\r\n      // Can't do the same for DataView because it has a non-primitive\r\n      // .buffer property that we need to recurse for.\r\n      const arrayType = isArrayBuffer(value) ? 'ArrayBuffer' :\r\n        'SharedArrayBuffer';\r\n      const prefix = getPrefix(constructor, tag, arrayType);\r\n      if (typedArray === undefined) {\r\n        formatter = formatArrayBuffer;\r\n      } else if (keys.length === 0) {\r\n        return prefix +\r\n              `{ byteLength: ${formatNumber(ctx.stylize, value.byteLength)} }`;\r\n      }\r\n      braces[0] = `${prefix}{`;\r\n      keys.unshift('byteLength');\r\n    } else if (isDataView(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'DataView')}{`;\r\n      // .buffer goes last, it's not a primitive like the others.\r\n      keys.unshift('byteLength', 'byteOffset', 'buffer');\r\n    } else if (isPromise(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'Promise')}{`;\r\n      formatter = formatPromise;\r\n    } else if (isWeakSet(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakSet')}{`;\r\n      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;\r\n    } else if (isWeakMap(value)) {\r\n      braces[0] = `${getPrefix(constructor, tag, 'WeakMap')}{`;\r\n      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;\r\n    } else if (isModuleNamespaceObject(value)) {\r\n      braces[0] = `[${tag}] {`;\r\n      formatter = formatNamespaceObject;\r\n    } else if (isBoxedPrimitive(value)) {\r\n      base = getBoxedBase(value, ctx, keys, constructor, tag);\r\n      if (keys.length === 0) {\r\n        return base;\r\n      }\r\n    } else {\r\n      // The input prototype got manipulated. Special handle these. We have to\r\n      // rebuild the information so we are able to display everything.\r\n      if (constructor === null) {\r\n        const specialIterator = noPrototypeIterator(ctx, value, recurseTimes);\r\n        if (specialIterator) {\r\n          return specialIterator;\r\n        }\r\n      }\r\n      if (isMapIterator(value)) {\r\n        braces = getIteratorBraces('Map', tag);\r\n        formatter = formatIterator;\r\n      } else if (isSetIterator(value)) {\r\n        braces = getIteratorBraces('Set', tag);\r\n        formatter = formatIterator;\r\n      // Handle other regular objects again.\r\n      } else {\r\n        if (keys.length === 0) {\r\n          if (isExternal(value))\r\n            return ctx.stylize('[External]', 'special');\r\n          return `${getCtxStyle(value, constructor, tag)}{}`;\r\n        }\r\n        braces[0] = `${getCtxStyle(value, constructor, tag)}{`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\r\n    let constructorName = getCtxStyle(value, constructor, tag).slice(0, -1);\r\n    if (constructor !== null)\r\n      constructorName = `[${constructorName}]`;\r\n    return ctx.stylize(constructorName, 'special');\r\n  }\r\n  recurseTimes += 1;\r\n\r\n  ctx.seen.push(value);\r\n  ctx.currentDepth = recurseTimes;\r\n  let output;\r\n  const indentationLvl = ctx.indentationLvl;\r\n  try {\r\n    output = formatter(ctx, value, recurseTimes, keys, braces);\r\n    for (i = 0; i < keys.length; i++) {\r\n      output.push(\r\n        formatProperty(ctx, value, recurseTimes, keys[i], extrasType));\r\n    }\r\n  } catch (err) {\r\n    const constructorName = getCtxStyle(value, constructor, tag).slice(0, -1);\r\n    return handleMaxCallStackSize(ctx, err, constructorName, indentationLvl);\r\n  }\r\n  if (ctx.circular !== undefined) {\r\n    const index = ctx.circular.get(value);\r\n    if (index !== undefined) {\r\n      // Add reference always to the very beginning of the output.\r\n      if (ctx.compact !== true) {\r\n        base = base === '' ? '' : `${base}`;\r\n      } else {\r\n        braces[0] = `${braces[0]}`;\r\n      }\r\n    }\r\n  }\r\n  ctx.seen.pop();\r\n\r\n  if (ctx.sorted) {\r\n    const comparator = ctx.sorted === true ? undefined : ctx.sorted;\r\n    if (extrasType === kObjectType) {\r\n      output = output.sort(comparator);\r\n    } else if (keys.length > 1) {\r\n      const sorted = output.slice(output.length - keys.length).sort(comparator);\r\n      output.splice(output.length - keys.length, keys.length, ...sorted);\r\n    }\r\n  }\r\n\r\n  const res = reduceToSingleString(\r\n    ctx, output, base, braces, extrasType, recurseTimes, value);\r\n  const budget = ctx.budget[ctx.indentationLvl] || 0;\r\n  const newLength = budget + res.length;\r\n  ctx.budget[ctx.indentationLvl] = newLength;\r\n  // If any indentationLvl exceeds this limit, limit further inspecting to the\r\n  // minimum. Otherwise the recursive algorithm might continue inspecting the\r\n  // object even though the maximum string size (~2 ** 28 on 32 bit systems and\r\n  // ~2 ** 30 on 64 bit systems) exceeded. The actual output is not limited at\r\n  // exactly 2 ** 27 but a bit higher. This depends on the object shape.\r\n  // This limit also makes sure that huge objects don't block the event loop\r\n  // significantly.\r\n  if (newLength > 2 ** 27) {\r\n    ctx.depth = -1;\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction getIteratorBraces(type, tag) {\r\n  if (tag !== `${type} Iterator`) {\r\n    if (tag !== '')\r\n      tag += '] [';\r\n    tag += `${type} Iterator`;\r\n  }\r\n  return [`[${tag}] {`, '}'];\r\n}\r\n\r\nfunction getBoxedBase(value, ctx, keys, constructor, tag) {\r\n  let fn;\r\n  let type;\r\n  if (isNumberObject(value)) {\r\n    fn = NumberPrototype;\r\n    type = 'Number';\r\n  } else if (isStringObject(value)) {\r\n    fn = StringPrototype;\r\n    type = 'String';\r\n    // For boxed Strings, we have to remove the 0-n indexed entries,\r\n    // since they just noisy up the output and are redundant\r\n    // Make boxed primitive Strings look like such\r\n    keys.splice(0, value.length);\r\n  } else if (isBooleanObject(value)) {\r\n    fn = BooleanPrototype;\r\n    type = 'Boolean';\r\n  } else if (isBigIntObject(value)) {\r\n    fn = BigIntPrototype;\r\n    type = 'BigInt';\r\n  } else {\r\n    fn = SymbolPrototype;\r\n    type = 'Symbol';\r\n  }\r\n  let base = `[${type}`;\r\n  if (type !== constructor) {\r\n    if (constructor === null) {\r\n      base += ' (null prototype)';\r\n    } else {\r\n      base += ` (${constructor})`;\r\n    }\r\n  }\r\n  base += `: ${formatPrimitive(stylizeNoColor, fn.valueOf(value), ctx)}]`;\r\n  if (tag !== '' && tag !== constructor) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  if (keys.length !== 0 || ctx.stylize === stylizeNoColor)\r\n    return base;\r\n  return ctx.stylize(base, type.toLowerCase());\r\n}\r\n\r\nfunction getFunctionBase(value, constructor, tag) {\r\n  let type = 'Function';\r\n  if (isGeneratorFunction(value)) {\r\n    type = `Generator${type}`;\r\n  }\r\n  if (isAsyncFunction(value)) {\r\n    type = `Async${type}`;\r\n  }\r\n  let base = `[${type}`;\r\n  if (constructor === null) {\r\n    base += ' (null prototype)';\r\n  }\r\n  if (value.name !== '') {\r\n    base += `: ${value.name}`;\r\n  }\r\n  base += ']';\r\n  if (constructor !== type && constructor !== null) {\r\n    base += ` ${constructor}`;\r\n  }\r\n  if (tag !== '' && constructor !== tag) {\r\n    base += ` [${tag}]`;\r\n  }\r\n  return base;\r\n}\r\n\r\nfunction formatError(err, constructor, tag, ctx) {\r\n  let stack = err.stack || ErrorPrototype.toString(err);\r\n\r\n  // A stack trace may contain arbitrary data. Only manipulate the output\r\n  // for \"regular errors\" (errors that \"look normal\") for now.\r\n  const name = err.name || 'Error';\r\n  let len = name.length;\r\n  if (constructor === null ||\r\n      (name.endsWith('Error') &&\r\n      stack.startsWith(name) &&\r\n      (stack.length === len || stack[len] === ':' || stack[len] === '\\n'))) {\r\n    let fallback = 'Error';\r\n    if (constructor === null) {\r\n      const start = stack.match(/^([A-Z][a-z_ A-Z0-9[\\]()-]+)(?::|\\n {4}at)/) ||\r\n        stack.match(/^([a-z_A-Z0-9-]*Error)$/);\r\n      fallback = (start && start[1]) || '';\r\n      len = fallback.length;\r\n      fallback = fallback || 'Error';\r\n    }\r\n    const prefix = getPrefix(constructor, tag, fallback).slice(0, -1);\r\n    if (name !== prefix) {\r\n      if (prefix.includes(name)) {\r\n        if (len === 0) {\r\n          stack = `${prefix}: ${stack}`;\r\n        } else {\r\n          stack = `${prefix}${stack.slice(len)}`;\r\n        }\r\n      } else {\r\n        stack = `${prefix} [${name}]${stack.slice(len)}`;\r\n      }\r\n    }\r\n  }\r\n  // Ignore the error message if it's contained in the stack.\r\n  let pos = (err.message && stack.indexOf(err.message)) || -1;\r\n  if (pos !== -1)\r\n    pos += err.message.length;\r\n  // Wrap the error in brackets in case it has no stack trace.\r\n  const stackStart = stack.indexOf('\\n    at', pos);\r\n  if (stackStart === -1) {\r\n    stack = `[${stack}]`;\r\n  } else if (ctx.colors) {\r\n    // Highlight userland code and node modules.\r\n    let newStack = stack.slice(0, stackStart);\r\n    const lines = stack.slice(stackStart + 1).split('\\n');\r\n    for (const line of lines) {\r\n      const core = line.match(coreModuleRegExp);\r\n      if (core !== null && NativeModule.exists(core[1])) {\r\n        newStack += `\\n${ctx.stylize(line, 'undefined')}`;\r\n      } else {\r\n        // This adds underscores to all node_modules to quickly identify them.\r\n        let nodeModule;\r\n        newStack += '\\n';\r\n        let pos = 0;\r\n        while (nodeModule = nodeModulesRegExp.exec(line)) {\r\n          // '/node_modules/'.length === 14\r\n          newStack += line.slice(pos, nodeModule.index + 14);\r\n          newStack += ctx.stylize(nodeModule[1], 'module');\r\n          pos = nodeModule.index + nodeModule[0].length;\r\n        }\r\n        newStack += pos === 0 ? line : line.slice(pos);\r\n      }\r\n    }\r\n    stack = newStack;\r\n  }\r\n  // The message and the stack have to be indented as well!\r\n  if (ctx.indentationLvl !== 0) {\r\n    const indentation = ' '.repeat(ctx.indentationLvl);\r\n    stack = stack.replace(/\\n/g, `\\n${indentation}`);\r\n  }\r\n  return stack;\r\n}\r\n\r\nfunction groupArrayElements(ctx, output, value) {\r\n  let totalLength = 0;\r\n  let maxLength = 0;\r\n  let i = 0;\r\n  let outputLength = output.length;\r\n  if (ctx.maxArrayLength < output.length) {\r\n    // This makes sure the \"... n more items\" part is not taken into account.\r\n    outputLength--;\r\n  }\r\n  const separatorSpace = 2; // Add 1 for the space and 1 for the separator.\r\n  const dataLen = new Array(outputLength);\r\n  // Calculate the total length of all output entries and the individual max\r\n  // entries length of all output entries. We have to remove colors first,\r\n  // otherwise the length would not be calculated properly.\r\n  for (; i < outputLength; i++) {\r\n    const len = ctx.colors ? removeColors(output[i]).length : output[i].length;\r\n    dataLen[i] = len;\r\n    totalLength += len + separatorSpace;\r\n    if (maxLength < len)\r\n      maxLength = len;\r\n  }\r\n  // Add two to `maxLength` as we add a single whitespace character plus a comma\r\n  // in-between two entries.\r\n  const actualMax = maxLength + separatorSpace;\r\n  // Check if at least three entries fit next to each other and prevent grouping\r\n  // of arrays that contains entries of very different length (i.e., if a single\r\n  // entry is longer than 1/5 of all other entries combined). Otherwise the\r\n  // space in-between small entries would be enormous.\r\n  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength &&\r\n      (totalLength / actualMax > 5 || maxLength <= 6)) {\r\n\r\n    const approxCharHeights = 2.5;\r\n    const averageBias = Math.sqrt(actualMax - totalLength / output.length);\r\n    const biasedMax = Math.max(actualMax - 3 - averageBias, 1);\r\n    // Dynamically check how many columns seem possible.\r\n    const columns = Math.min(\r\n      // Ideally a square should be drawn. We expect a character to be about 2.5\r\n      // times as high as wide. This is the area formula to calculate a square\r\n      // which contains n rectangles of size `actualMax * approxCharHeights`.\r\n      // Divide that by `actualMax` to receive the correct number of columns.\r\n      // The added bias increases the columns for short entries.\r\n      Math.round(\r\n        Math.sqrt(\r\n          approxCharHeights * biasedMax * outputLength\r\n        ) / biasedMax\r\n      ),\r\n      // Do not exceed the breakLength.\r\n      Math.floor((ctx.breakLength - ctx.indentationLvl) / actualMax),\r\n      // Limit array grouping for small `compact` modes as the user requested\r\n      // minimal grouping.\r\n      ctx.compact * 4,\r\n      // Limit the columns to a maximum of fifteen.\r\n      15\r\n    );\r\n    // Return with the original output if no grouping should happen.\r\n    if (columns <= 1) {\r\n      return output;\r\n    }\r\n    const tmp = [];\r\n    const maxLineLength = [];\r\n    for (let i = 0; i < columns; i++) {\r\n      let lineMaxLength = 0;\r\n      for (let j = i; j < output.length; j += columns) {\r\n        if (dataLen[j] > lineMaxLength)\r\n          lineMaxLength = dataLen[j];\r\n      }\r\n      lineMaxLength += separatorSpace;\r\n      maxLineLength[i] = lineMaxLength;\r\n    }\r\n    let order = 'padStart';\r\n    if (value !== undefined) {\r\n      for (let i = 0; i < output.length; i++) {\r\n        if (typeof value[i] !== 'number' && typeof value[i] !== 'bigint') {\r\n          order = 'padEnd';\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // Each iteration creates a single line of grouped entries.\r\n    for (let i = 0; i < outputLength; i += columns) {\r\n      // The last lines may contain less entries than columns.\r\n      const max = Math.min(i + columns, outputLength);\r\n      let str = '';\r\n      let j = i;\r\n      for (; j < max - 1; j++) {\r\n        // Calculate extra color padding in case it's active. This has to be\r\n        // done line by line as some lines might contain more colors than\r\n        // others.\r\n        const padding = maxLineLength[j - i] + output[j].length - dataLen[j];\r\n        str += `${output[j]}, `[order](padding, ' ');\r\n      }\r\n      if (order === 'padStart') {\r\n        const padding = maxLineLength[j - i] +\r\n                        output[j].length -\r\n                        dataLen[j] -\r\n                        separatorSpace;\r\n        str += output[j].padStart(padding, ' ');\r\n      } else {\r\n        str += output[j];\r\n      }\r\n      tmp.push(str);\r\n    }\r\n    if (ctx.maxArrayLength < output.length) {\r\n      tmp.push(output[outputLength]);\r\n    }\r\n    output = tmp;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction handleMaxCallStackSize(ctx, err, constructorName, indentationLvl) {\r\n  if (isStackOverflowError(err)) {\r\n    ctx.seen.pop();\r\n    ctx.indentationLvl = indentationLvl;\r\n    return ctx.stylize(\r\n      `[${constructorName}: Inspection interrupted ` +\r\n        'prematurely. Maximum call stack size exceeded.]',\r\n      'special'\r\n    );\r\n  }\r\n  throw err;\r\n}\r\n\r\nfunction formatNumber(fn, value) {\r\n  // Format -0 as '-0'. Checking `value === -0` won't distinguish 0 from -0.\r\n  return fn(Object.is(value, -0) ? '-0' : `${value}`, 'number');\r\n}\r\n\r\nfunction formatBigInt(fn, value) {\r\n  return fn(`${value}n`, 'bigint');\r\n}\r\n\r\nfunction formatPrimitive(fn, value, ctx) {\r\n  if (typeof value === 'string') {\r\n    if (ctx.compact !== true &&\r\n        value.length > kMinLineLength &&\r\n        value.length > ctx.breakLength - ctx.indentationLvl - 4) {\r\n      return value\r\n        .split(/(?<=\\n)/)\r\n        .map((line) => fn(strEscape(line), 'string'))\r\n        .join(` +\\n${' '.repeat(ctx.indentationLvl + 2)}`);\r\n    }\r\n    return fn(strEscape(value), 'string');\r\n  }\r\n  if (typeof value === 'number')\r\n    return formatNumber(fn, value);\r\n  if (typeof value === 'bigint')\r\n    return formatBigInt(fn, value);\r\n  if (typeof value === 'boolean')\r\n    return fn(`${value}`, 'boolean');\r\n  if (typeof value === 'undefined')\r\n    return fn('undefined', 'undefined');\r\n  // es6 symbol primitive\r\n  return fn(SymbolPrototype.toString(value), 'symbol');\r\n}\r\n\r\nfunction formatNamespaceObject(ctx, value, recurseTimes, keys) {\r\n  const output = new Array(keys.length);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    try {\r\n      output[i] = formatProperty(ctx, value, recurseTimes, keys[i],\r\n                                 kObjectType);\r\n    } catch (err) {\r\n      if (!(isNativeError(err) && err.name === 'ReferenceError')) {\r\n        throw err;\r\n      }\r\n      // Use the existing functionality. This makes sure the indentation and\r\n      // line breaks are always correct. Otherwise it is very difficult to keep\r\n      // this aligned, even though this is a hacky way of dealing with this.\r\n      const tmp = { [keys[i]]: '' };\r\n      output[i] = formatProperty(ctx, tmp, recurseTimes, keys[i], kObjectType);\r\n      const pos = output[i].lastIndexOf(' ');\r\n      // We have to find the last whitespace and have to replace that value as\r\n      // it will be visualized as a regular string.\r\n      output[i] = output[i].slice(0, pos + 1) +\r\n                  ctx.stylize('<uninitialized>', 'special');\r\n    }\r\n  }\r\n  // Reset the keys to an empty array. This prevents duplicated inspection.\r\n  keys.length = 0;\r\n  return output;\r\n}\r\n\r\n// The array is sparse and/or has extra keys\r\nfunction formatSpecialArray(ctx, value, recurseTimes, maxLength, output, i) {\r\n  const keys = Object.keys(value);\r\n  let index = i;\r\n  for (; i < keys.length && output.length < maxLength; i++) {\r\n    const key = keys[i];\r\n    const tmp = +key;\r\n    // Arrays can only have up to 2^32 - 1 entries\r\n    if (tmp > 2 ** 32 - 2) {\r\n      break;\r\n    }\r\n    if (`${index}` !== key) {\r\n      if (!numberRegExp.test(key)) {\r\n        break;\r\n      }\r\n      const emptyItems = tmp - index;\r\n      const ending = emptyItems > 1 ? 's' : '';\r\n      const message = `<${emptyItems} empty item${ending}>`;\r\n      output.push(ctx.stylize(message, 'undefined'));\r\n      index = tmp;\r\n      if (output.length === maxLength) {\r\n        break;\r\n      }\r\n    }\r\n    output.push(formatProperty(ctx, value, recurseTimes, key, kArrayType));\r\n    index++;\r\n  }\r\n  const remaining = value.length - index;\r\n  if (output.length !== maxLength) {\r\n    if (remaining > 0) {\r\n      const ending = remaining > 1 ? 's' : '';\r\n      const message = `<${remaining} empty item${ending}>`;\r\n      output.push(ctx.stylize(message, 'undefined'));\r\n    }\r\n  } else if (remaining > 0) {\r\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatArrayBuffer(ctx, value) {\r\n  let buffer;\r\n  try {\r\n    buffer = new Uint8Array(value);\r\n  } catch {\r\n    return [ctx.stylize('(detached)', 'special')];\r\n  }\r\n  if (hexSlice === undefined)\r\n    hexSlice = uncurryThis(require('buffer').Buffer.prototype.hexSlice);\r\n  let str = hexSlice(buffer, 0, Math.min(ctx.maxArrayLength, buffer.length))\r\n    .replace(/(.{2})/g, '$1 ').trim();\r\n  const remaining = buffer.length - ctx.maxArrayLength;\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  return [`${ctx.stylize('[Uint8Contents]', 'special')}: <${str}>`];\r\n}\r\n\r\nfunction formatArray(ctx, value, recurseTimes) {\r\n  const valLen = value.length;\r\n  const len = Math.min(Math.max(0, ctx.maxArrayLength), valLen);\r\n\r\n  const remaining = valLen - len;\r\n  const output = [];\r\n  for (var i = 0; i < len; i++) {\r\n    // Special handle sparse arrays.\r\n    if (!hasOwnProperty(value, i)) {\r\n      return formatSpecialArray(ctx, value, recurseTimes, len, output, i);\r\n    }\r\n    output.push(formatProperty(ctx, value, recurseTimes, i, kArrayType));\r\n  }\r\n  if (remaining > 0)\r\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\r\n  return output;\r\n}\r\n\r\nfunction formatTypedArray(ctx, value, recurseTimes) {\r\n  const maxLength = Math.min(Math.max(0, ctx.maxArrayLength), value.length);\r\n  const remaining = value.length - maxLength;\r\n  const output = new Array(maxLength);\r\n  const elementFormatter = value.length > 0 && typeof value[0] === 'number' ?\r\n    formatNumber :\r\n    formatBigInt;\r\n  for (let i = 0; i < maxLength; ++i)\r\n    output[i] = elementFormatter(ctx.stylize, value[i]);\r\n  if (remaining > 0) {\r\n    output[maxLength] = `... ${remaining} more item${remaining > 1 ? 's' : ''}`;\r\n  }\r\n  if (ctx.showHidden) {\r\n    // .buffer goes last, it's not a primitive like the others.\r\n    ctx.indentationLvl += 2;\r\n    for (const key of [\r\n      'BYTES_PER_ELEMENT',\r\n      'length',\r\n      'byteLength',\r\n      'byteOffset',\r\n      'buffer'\r\n    ]) {\r\n      const str = formatValue(ctx, value[key], recurseTimes, true);\r\n      output.push(`[${key}]: ${str}`);\r\n    }\r\n    ctx.indentationLvl -= 2;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatSet(ctx, value, recurseTimes) {\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  for (const v of value) {\r\n    output.push(formatValue(ctx, v, recurseTimes));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  // With `showHidden`, `length` will display as a hidden property for\r\n  // arrays. For consistency's sake, do the same for `size`, even though this\r\n  // property isn't selected by Object.getOwnPropertyNames().\r\n  if (ctx.showHidden)\r\n    output.push(`[size]: ${ctx.stylize(`${value.size}`, 'number')}`);\r\n  return output;\r\n}\r\n\r\nfunction formatMap(ctx, value, recurseTimes) {\r\n  const output = [];\r\n  ctx.indentationLvl += 2;\r\n  for (const [k, v] of value) {\r\n    output.push(`${formatValue(ctx, k, recurseTimes)} => ` +\r\n                formatValue(ctx, v, recurseTimes));\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  // See comment in formatSet\r\n  if (ctx.showHidden)\r\n    output.push(`[size]: ${ctx.stylize(`${value.size}`, 'number')}`);\r\n  return output;\r\n}\r\n\r\nfunction formatSetIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = Math.max(ctx.maxArrayLength, 0);\r\n  const maxLength = Math.min(maxArrayLength, entries.length);\r\n  let output = new Array(maxLength);\r\n  ctx.indentationLvl += 2;\r\n  for (var i = 0; i < maxLength; i++) {\r\n    output[i] = formatValue(ctx, entries[i], recurseTimes);\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (state === kWeak && !ctx.sorted) {\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    output = output.sort();\r\n  }\r\n  const remaining = entries.length - maxLength;\r\n  if (remaining > 0) {\r\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatMapIterInner(ctx, recurseTimes, entries, state) {\r\n  const maxArrayLength = Math.max(ctx.maxArrayLength, 0);\r\n  // Entries exist as [key1, val1, key2, val2, ...]\r\n  const len = entries.length / 2;\r\n  const remaining = len - maxArrayLength;\r\n  const maxLength = Math.min(maxArrayLength, len);\r\n  let output = new Array(maxLength);\r\n  let i = 0;\r\n  ctx.indentationLvl += 2;\r\n  if (state === kWeak) {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      output[i] = `${formatValue(ctx, entries[pos], recurseTimes)}` +\r\n        ` => ${formatValue(ctx, entries[pos + 1], recurseTimes)}`;\r\n    }\r\n    // Sort all entries to have a halfway reliable output (if more entries than\r\n    // retrieved ones exist, we can not reliably return the same output) if the\r\n    // output is not sorted anyway.\r\n    if (!ctx.sorted)\r\n      output = output.sort();\r\n  } else {\r\n    for (; i < maxLength; i++) {\r\n      const pos = i * 2;\r\n      const res = [\r\n        formatValue(ctx, entries[pos], recurseTimes),\r\n        formatValue(ctx, entries[pos + 1], recurseTimes)\r\n      ];\r\n      output[i] = reduceToSingleString(\r\n        ctx, res, '', ['[', ']'], kArrayExtrasType, recurseTimes);\r\n    }\r\n  }\r\n  ctx.indentationLvl -= 2;\r\n  if (remaining > 0) {\r\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatWeakCollection(ctx) {\r\n  return [ctx.stylize('<items unknown>', 'special')];\r\n}\r\n\r\nfunction formatWeakSet(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatWeakMap(ctx, value, recurseTimes) {\r\n  const entries = previewEntries(value);\r\n  return formatMapIterInner(ctx, recurseTimes, entries, kWeak);\r\n}\r\n\r\nfunction formatIterator(ctx, value, recurseTimes, keys, braces) {\r\n  const [entries, isKeyValue] = previewEntries(value, true);\r\n  if (isKeyValue) {\r\n    // Mark entry iterators as such.\r\n    braces[0] = braces[0].replace(/ Iterator] {$/, ' Entries] {');\r\n    return formatMapIterInner(ctx, recurseTimes, entries, kMapEntries);\r\n  }\r\n\r\n  return formatSetIterInner(ctx, recurseTimes, entries, kIterator);\r\n}\r\n\r\nfunction formatPromise(ctx, value, recurseTimes) {\r\n  let output;\r\n  const [state, result] = getPromiseDetails(value);\r\n  if (state === kPending) {\r\n    output = [ctx.stylize('<pending>', 'special')];\r\n  } else {\r\n    ctx.indentationLvl += 2;\r\n    const str = formatValue(ctx, result, recurseTimes);\r\n    ctx.indentationLvl -= 2;\r\n    output = [\r\n      state === kRejected ?\r\n        `${ctx.stylize('<rejected>', 'special')} ${str}` :\r\n        str\r\n    ];\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction formatProperty(ctx, value, recurseTimes, key, type) {\r\n  let name, str;\r\n  let extra = ' ';\r\n  const desc = Object.getOwnPropertyDescriptor(value, key) ||\r\n    { value: value[key], enumerable: true };\r\n  if (desc.value !== undefined) {\r\n    const diff = (type !== kObjectType || ctx.compact !== true) ? 2 : 3;\r\n    ctx.indentationLvl += diff;\r\n    str = formatValue(ctx, desc.value, recurseTimes);\r\n    if (diff === 3) {\r\n      const len = ctx.colors ? removeColors(str).length : str.length;\r\n      if (ctx.breakLength < len) {\r\n        extra = `\\n${' '.repeat(ctx.indentationLvl)}`;\r\n      }\r\n    }\r\n    ctx.indentationLvl -= diff;\r\n  } else if (desc.get !== undefined) {\r\n    const label = desc.set !== undefined ? 'Getter/Setter' : 'Getter';\r\n    const s = ctx.stylize;\r\n    const sp = 'special';\r\n    if (ctx.getters && (ctx.getters === true ||\r\n          (ctx.getters === 'get' && desc.set === undefined) ||\r\n          (ctx.getters === 'set' && desc.set !== undefined))) {\r\n      try {\r\n        const tmp = value[key];\r\n        ctx.indentationLvl += 2;\r\n        if (tmp === null) {\r\n          str = `${s(`[${label}:`, sp)} ${s('null', 'null')}${s(']', sp)}`;\r\n        } else if (typeof tmp === 'object') {\r\n          str = `${s(`[${label}]`, sp)} ${formatValue(ctx, tmp, recurseTimes)}`;\r\n        } else {\r\n          const primitive = formatPrimitive(s, tmp, ctx);\r\n          str = `${s(`[${label}:`, sp)} ${primitive}${s(']', sp)}`;\r\n        }\r\n        ctx.indentationLvl -= 2;\r\n      } catch (err) {\r\n        const message = `<Inspection threw (${err.message})>`;\r\n        str = `${s(`[${label}:`, sp)} ${message}${s(']', sp)}`;\r\n      }\r\n    } else {\r\n      str = ctx.stylize(`[${label}]`, sp);\r\n    }\r\n  } else if (desc.set !== undefined) {\r\n    str = ctx.stylize('[Setter]', 'special');\r\n  } else {\r\n    str = ctx.stylize('undefined', 'undefined');\r\n  }\r\n  if (type === kArrayType) {\r\n    return str;\r\n  }\r\n  if (typeof key === 'symbol') {\r\n    const tmp = key.toString().replace(strEscapeSequencesReplacer, escapeFn);\r\n    name = `[${ctx.stylize(tmp, 'symbol')}]`;\r\n  } else if (desc.enumerable === false) {\r\n    name = `[${key.replace(strEscapeSequencesReplacer, escapeFn)}]`;\r\n  } else if (keyStrRegExp.test(key)) {\r\n    name = ctx.stylize(key, 'name');\r\n  } else {\r\n    name = ctx.stylize(strEscape(key), 'string');\r\n  }\r\n  return `${name}:${extra}${str}`;\r\n}\r\n\r\nfunction isBelowBreakLength(ctx, output, start, base) {\r\n  // Each entry is separated by at least a comma. Thus, we start with a total\r\n  // length of at least `output.length`. In addition, some cases have a\r\n  // whitespace in-between each other that is added to the total as well.\r\n  let totalLength = output.length + start;\r\n  if (totalLength + output.length > ctx.breakLength)\r\n    return false;\r\n  for (var i = 0; i < output.length; i++) {\r\n    if (ctx.colors) {\r\n      totalLength += removeColors(output[i]).length;\r\n    } else {\r\n      totalLength += output[i].length;\r\n    }\r\n    if (totalLength > ctx.breakLength) {\r\n      return false;\r\n    }\r\n  }\r\n  // Do not line up properties on the same line if `base` contains line breaks.\r\n  return base === '' || !base.includes('\\n');\r\n}\r\n\r\nfunction reduceToSingleString(\r\n  ctx, output, base, braces, extrasType, recurseTimes, value) {\r\n  if (ctx.compact !== true) {\r\n    if (typeof ctx.compact === 'number' && ctx.compact >= 1) {\r\n      // Memorize the original output length. In case the the output is grouped,\r\n      // prevent lining up the entries on a single line.\r\n      const entries = output.length;\r\n      // Group array elements together if the array contains at least six\r\n      // separate entries.\r\n      if (extrasType === kArrayExtrasType && entries > 6) {\r\n        output = groupArrayElements(ctx, output, value);\r\n      }\r\n      // `ctx.currentDepth` is set to the most inner depth of the currently\r\n      // inspected object part while `recurseTimes` is the actual current depth\r\n      // that is inspected.\r\n      //\r\n      // Example:\r\n      //\r\n      // const a = { first: [ 1, 2, 3 ], second: { inner: [ 1, 2, 3 ] } }\r\n      //\r\n      // The deepest depth of `a` is 2 (a.second.inner) and `a.first` has a max\r\n      // depth of 1.\r\n      //\r\n      // Consolidate all entries of the local most inner depth up to\r\n      // `ctx.compact`, as long as the properties are smaller than\r\n      // `ctx.breakLength`.\r\n      if (ctx.currentDepth - recurseTimes < ctx.compact &&\r\n          entries === output.length) {\r\n        // Line up all entries on a single line in case the entries do not\r\n        // exceed `breakLength`. Add 10 as constant to start next to all other\r\n        // factors that may reduce `breakLength`.\r\n        const start = output.length + ctx.indentationLvl +\r\n                      braces[0].length + base.length + 10;\r\n        if (isBelowBreakLength(ctx, output, start, base)) {\r\n          return `${base ? `${base} ` : ''}${braces[0]} ${join(output, ', ')}` +\r\n            ` ${braces[1]}`;\r\n        }\r\n      }\r\n    }\r\n    // Line up each entry on an individual line.\r\n    const indentation = `\\n${' '.repeat(ctx.indentationLvl)}`;\r\n    return `${base ? `${base} ` : ''}${braces[0]}${indentation}  ` +\r\n      `${join(output, `,${indentation}  `)}${indentation}${braces[1]}`;\r\n  }\r\n  // Line up all entries on a single line in case the entries do not exceed\r\n  // `breakLength`.\r\n  if (isBelowBreakLength(ctx, output, 0, base)) {\r\n    return `${braces[0]}${base ? ` ${base}` : ''} ${join(output, ', ')} ` +\r\n      braces[1];\r\n  }\r\n  const indentation = ' '.repeat(ctx.indentationLvl);\r\n  // If the opening \"brace\" is too large, like in the case of \"Set {\",\r\n  // we need to force the first item to be on the next line or the\r\n  // items will not line up correctly.\r\n  const ln = base === '' && braces[0].length === 1 ?\r\n    ' ' : `${base ? ` ${base}` : ''}\\n${indentation}  `;\r\n  // Line up each entry on an individual line.\r\n  return `${braces[0]}${ln}${join(output, `,\\n${indentation}  `)} ${braces[1]}`;\r\n}\r\n\r\nfunction format(...args) {\r\n  return formatWithOptions(undefined, ...args);\r\n}\r\n\r\n\r\nconst firstErrorLine = (error) => error.message.split('\\n')[0];\r\nlet CIRCULAR_ERROR_MESSAGE;\r\nfunction tryStringify(arg) {\r\n  try {\r\n    return JSON.stringify(arg);\r\n  } catch (err) {\r\n    // Populate the circular error message lazily\r\n    if (!CIRCULAR_ERROR_MESSAGE) {\r\n      try {\r\n        const a = {}; a.a = a; JSON.stringify(a);\r\n      } catch (err) {\r\n        CIRCULAR_ERROR_MESSAGE = firstErrorLine(err);\r\n      }\r\n    }\r\n    if (err.name === 'TypeError' &&\r\n        firstErrorLine(err) === CIRCULAR_ERROR_MESSAGE) {\r\n      return '[Circular]';\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\nfunction formatWithOptions(inspectOptions, ...args) {\r\n  const first = args[0];\r\n  let a = 0;\r\n  let str = '';\r\n  let join = '';\r\n\r\n  if (typeof first === 'string') {\r\n    if (args.length === 1) {\r\n      return first;\r\n    }\r\n    let tempStr;\r\n    let lastPos = 0;\r\n\r\n    for (var i = 0; i < first.length - 1; i++) {\r\n      if (first.charCodeAt(i) === 37) { // '%'\r\n        const nextChar = first.charCodeAt(++i);\r\n        if (a + 1 !== args.length) {\r\n          switch (nextChar) {\r\n            case 115: // 's'\r\n              const tempArg = args[++a];\r\n              if (typeof tempArg === 'number') {\r\n                tempStr = formatNumber(stylizeNoColor, tempArg);\r\n              } else if (typeof tempArg === 'bigint') {\r\n                tempStr = `${tempArg}n`;\r\n              } else {\r\n                let constr;\r\n                if (typeof tempArg !== 'object' ||\r\n                    tempArg === null ||\r\n                    (typeof tempArg.toString === 'function' &&\r\n                     // A direct own property.\r\n                     (hasOwnProperty(tempArg, 'toString') ||\r\n                      // A direct own property on the constructor prototype in\r\n                      // case the constructor is not an built-in object.\r\n                      ((constr = tempArg.constructor) &&\r\n                      !builtInObjects.has(constr.name) &&\r\n                      constr.prototype &&\r\n                      hasOwnProperty(constr.prototype, 'toString'))))) {\r\n                  tempStr = String(tempArg);\r\n                } else {\r\n                  tempStr = inspect(tempArg, {\r\n                    ...inspectOptions,\r\n                    compact: 3,\r\n                    colors: false,\r\n                    depth: 0\r\n                  });\r\n                }\r\n              }\r\n              break;\r\n            case 106: // 'j'\r\n              tempStr = tryStringify(args[++a]);\r\n              break;\r\n            case 100: // 'd'\r\n              const tempNum = args[++a];\r\n              if (typeof tempNum === 'bigint') {\r\n                tempStr = `${tempNum}n`;\r\n              } else if (typeof tempNum === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumber(stylizeNoColor, Number(tempNum));\r\n              }\r\n              break;\r\n            case 79: // 'O'\r\n              tempStr = inspect(args[++a], inspectOptions);\r\n              break;\r\n            case 111: // 'o'\r\n              tempStr = inspect(args[++a], {\r\n                ...inspectOptions,\r\n                showHidden: true,\r\n                showProxy: true,\r\n                depth: 4\r\n              });\r\n              break;\r\n            case 105: // 'i'\r\n              const tempInteger = args[++a];\r\n              if (typeof tempInteger === 'bigint') {\r\n                tempStr = `${tempInteger}n`;\r\n              } else if (typeof tempInteger === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumber(stylizeNoColor, parseInt(tempInteger));\r\n              }\r\n              break;\r\n            case 102: // 'f'\r\n              const tempFloat = args[++a];\r\n              if (typeof tempFloat === 'symbol') {\r\n                tempStr = 'NaN';\r\n              } else {\r\n                tempStr = formatNumber(stylizeNoColor, parseFloat(tempFloat));\r\n              }\r\n              break;\r\n            case 99: // 'c'\r\n              a += 1;\r\n              tempStr = '';\r\n              break;\r\n            case 37: // '%'\r\n              str += first.slice(lastPos, i);\r\n              lastPos = i + 1;\r\n              continue;\r\n            default: // Any other character is not a correct placeholder\r\n              continue;\r\n          }\r\n          if (lastPos !== i - 1) {\r\n            str += first.slice(lastPos, i - 1);\r\n          }\r\n          str += tempStr;\r\n          lastPos = i + 1;\r\n        } else if (nextChar === 37) {\r\n          str += first.slice(lastPos, i);\r\n          lastPos = i + 1;\r\n        }\r\n      }\r\n    }\r\n    if (lastPos !== 0) {\r\n      a++;\r\n      join = ' ';\r\n      if (lastPos < first.length) {\r\n        str += first.slice(lastPos);\r\n      }\r\n    }\r\n  }\r\n\r\n  while (a < args.length) {\r\n    const value = args[a];\r\n    str += join;\r\n    str += typeof value !== 'string' ? inspect(value, inspectOptions) : value;\r\n    join = ' ';\r\n    a++;\r\n  }\r\n  return str;\r\n}\r\n\r\nmodule.exports = {\r\n  inspect,\r\n  format,\r\n  formatWithOptions,\r\n  inspectDefaultOptions\r\n};\r\n"
  },
  {
    "name": "internal/util/types.js",
    "source": "'use strict';\r\n\r\nconst { Object, uncurryThis } = primordials;\r\n\r\nconst TypedArrayPrototype = Object.getPrototypeOf(Uint8Array.prototype);\r\n\r\nconst TypedArrayProto_toStringTag =\r\n    uncurryThis(\r\n      Object.getOwnPropertyDescriptor(TypedArrayPrototype,\r\n                                      Symbol.toStringTag).get);\r\n\r\n// Cached to make sure no userland code can tamper with it.\r\nconst isArrayBufferView = ArrayBuffer.isView;\r\n\r\nfunction isTypedArray(value) {\r\n  return TypedArrayProto_toStringTag(value) !== undefined;\r\n}\r\n\r\nfunction isUint8Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Uint8Array';\r\n}\r\n\r\nfunction isUint8ClampedArray(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Uint8ClampedArray';\r\n}\r\n\r\nfunction isUint16Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Uint16Array';\r\n}\r\n\r\nfunction isUint32Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Uint32Array';\r\n}\r\n\r\nfunction isInt8Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Int8Array';\r\n}\r\n\r\nfunction isInt16Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Int16Array';\r\n}\r\n\r\nfunction isInt32Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Int32Array';\r\n}\r\n\r\nfunction isFloat32Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Float32Array';\r\n}\r\n\r\nfunction isFloat64Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'Float64Array';\r\n}\r\n\r\nfunction isBigInt64Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'BigInt64Array';\r\n}\r\n\r\nfunction isBigUint64Array(value) {\r\n  return TypedArrayProto_toStringTag(value) === 'BigUint64Array';\r\n}\r\n\r\nmodule.exports = {\r\n  ...internalBinding('types'),\r\n  isArrayBufferView,\r\n  isTypedArray,\r\n  isUint8Array,\r\n  isUint8ClampedArray,\r\n  isUint16Array,\r\n  isUint32Array,\r\n  isInt8Array,\r\n  isInt16Array,\r\n  isInt32Array,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n  isBigInt64Array,\r\n  isBigUint64Array\r\n};\r\n"
  },
  {
    "name": "internal/assert.js",
    "source": "'use strict';\r\n\r\nlet error;\r\nfunction lazyError() {\r\n  if (!error) {\r\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\r\n  }\r\n  return error;\r\n}\r\nfunction assert(value, message) {\r\n  if (!value) {\r\n    const ERR_INTERNAL_ASSERTION = lazyError();\r\n    throw new ERR_INTERNAL_ASSERTION(message);\r\n  }\r\n}\r\n\r\nfunction fail(message) {\r\n  const ERR_INTERNAL_ASSERTION = lazyError();\r\n  throw new ERR_INTERNAL_ASSERTION(message);\r\n}\r\n\r\nassert.fail = fail;\r\n\r\nmodule.exports = assert;\r\n"
  },
  {
    "name": "buffer.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Math, Object } = primordials;\r\n\r\nconst {\r\n  byteLengthUtf8,\r\n  compare: _compare,\r\n  compareOffset,\r\n  createFromString,\r\n  fill: bindingFill,\r\n  indexOfBuffer,\r\n  indexOfNumber,\r\n  indexOfString,\r\n  swap16: _swap16,\r\n  swap32: _swap32,\r\n  swap64: _swap64,\r\n  kMaxLength,\r\n  kStringMaxLength,\r\n  zeroFill: bindingZeroFill\r\n} = internalBinding('buffer');\r\nconst {\r\n  getOwnNonIndexProperties,\r\n  propertyFilter: {\r\n    ALL_PROPERTIES,\r\n    ONLY_ENUMERABLE\r\n  }\r\n} = internalBinding('util');\r\nconst {\r\n  customInspectSymbol,\r\n  isInsideNodeModules,\r\n  normalizeEncoding,\r\n  kIsEncodingSymbol\r\n} = require('internal/util');\r\nconst {\r\n  isAnyArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array\r\n} = require('internal/util/types');\r\nconst {\r\n  inspect: utilInspect\r\n} = require('internal/util/inspect');\r\nconst { encodings } = internalBinding('string_decoder');\r\n\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BUFFER_OUT_OF_BOUNDS,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_BUFFER_SIZE,\r\n    ERR_INVALID_OPT_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_ENCODING\r\n  },\r\n  hideStackFrames\r\n} = require('internal/errors');\r\nconst {\r\n  validateInt32,\r\n  validateString\r\n} = require('internal/validators');\r\n\r\nconst {\r\n  FastBuffer,\r\n  addBufferPrototypeMethods\r\n} = require('internal/buffer');\r\n\r\nFastBuffer.prototype.constructor = Buffer;\r\nBuffer.prototype = FastBuffer.prototype;\r\naddBufferPrototypeMethods(Buffer.prototype);\r\n\r\nconst constants = Object.defineProperties({}, {\r\n  MAX_LENGTH: {\r\n    value: kMaxLength,\r\n    writable: false,\r\n    enumerable: true\r\n  },\r\n  MAX_STRING_LENGTH: {\r\n    value: kStringMaxLength,\r\n    writable: false,\r\n    enumerable: true\r\n  }\r\n});\r\n\r\nBuffer.poolSize = 8 * 1024;\r\nlet poolSize, poolOffset, allocPool;\r\n\r\n// A toggle used to access the zero fill setting of the array buffer allocator\r\n// in C++.\r\n// |zeroFill| can be undefined when running inside an isolate where we\r\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\r\nconst zeroFill = bindingZeroFill || [0];\r\n\r\nconst encodingsMap = Object.create(null);\r\nfor (let i = 0; i < encodings.length; ++i)\r\n  encodingsMap[encodings[i]] = i;\r\n\r\nfunction createUnsafeBuffer(size) {\r\n  zeroFill[0] = 0;\r\n  try {\r\n    return new FastBuffer(size);\r\n  } finally {\r\n    zeroFill[0] = 1;\r\n  }\r\n}\r\n\r\nfunction createPool() {\r\n  poolSize = Buffer.poolSize;\r\n  allocPool = createUnsafeBuffer(poolSize).buffer;\r\n  poolOffset = 0;\r\n}\r\ncreatePool();\r\n\r\nfunction alignPool() {\r\n  // Ensure aligned slices\r\n  if (poolOffset & 0x7) {\r\n    poolOffset |= 0x7;\r\n    poolOffset++;\r\n  }\r\n}\r\n\r\nlet bufferWarningAlreadyEmitted = false;\r\nlet nodeModulesCheckCounter = 0;\r\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\r\n                      'issues. Please use the Buffer.alloc(), ' +\r\n                      'Buffer.allocUnsafe(), or Buffer.from() methods instead.';\r\n\r\nfunction showFlaggedDeprecation() {\r\n  if (bufferWarningAlreadyEmitted ||\r\n      ++nodeModulesCheckCounter > 10000 ||\r\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\r\n       isInsideNodeModules())) {\r\n    // We don't emit a warning, because we either:\r\n    // - Already did so, or\r\n    // - Already checked too many times whether a call is coming\r\n    //   from node_modules and want to stop slowing down things, or\r\n    // - We aren't running with `--pending-deprecation` enabled,\r\n    //   and the code is inside `node_modules`.\r\n    return;\r\n  }\r\n\r\n  process.emitWarning(bufferWarning, 'DeprecationWarning', 'DEP0005');\r\n  bufferWarningAlreadyEmitted = true;\r\n}\r\n\r\nfunction toInteger(n, defaultVal) {\r\n  n = +n;\r\n  if (!Number.isNaN(n) &&\r\n      n >= Number.MIN_SAFE_INTEGER &&\r\n      n <= Number.MAX_SAFE_INTEGER) {\r\n    return ((n % 1) === 0 ? n : Math.floor(n));\r\n  }\r\n  return defaultVal;\r\n}\r\n\r\nfunction _copy(source, target, targetStart, sourceStart, sourceEnd) {\r\n  if (!isUint8Array(source))\r\n    throw new ERR_INVALID_ARG_TYPE('source', ['Buffer', 'Uint8Array'], source);\r\n  if (!isUint8Array(target))\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n\r\n  if (targetStart === undefined) {\r\n    targetStart = 0;\r\n  } else {\r\n    targetStart = toInteger(targetStart, 0);\r\n    if (targetStart < 0)\r\n      throw new ERR_OUT_OF_RANGE('targetStart', '>= 0', targetStart);\r\n  }\r\n\r\n  if (sourceStart === undefined) {\r\n    sourceStart = 0;\r\n  } else {\r\n    sourceStart = toInteger(sourceStart, 0);\r\n    if (sourceStart < 0)\r\n      throw new ERR_OUT_OF_RANGE('sourceStart', '>= 0', sourceStart);\r\n  }\r\n\r\n  if (sourceEnd === undefined) {\r\n    sourceEnd = source.length;\r\n  } else {\r\n    sourceEnd = toInteger(sourceEnd, 0);\r\n    if (sourceEnd < 0)\r\n      throw new ERR_OUT_OF_RANGE('sourceEnd', '>= 0', sourceEnd);\r\n  }\r\n\r\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\r\n    return 0;\r\n\r\n  if (sourceStart > source.length) {\r\n    throw new ERR_OUT_OF_RANGE('sourceStart',\r\n                               `<= ${source.length}`,\r\n                               sourceStart);\r\n  }\r\n\r\n  if (sourceEnd - sourceStart > target.length - targetStart)\r\n    sourceEnd = sourceStart + target.length - targetStart;\r\n\r\n  let nb = sourceEnd - sourceStart;\r\n  const targetLen = target.length - targetStart;\r\n  const sourceLen = source.length - sourceStart;\r\n  if (nb > targetLen)\r\n    nb = targetLen;\r\n  if (nb > sourceLen)\r\n    nb = sourceLen;\r\n\r\n  if (sourceStart !== 0 || sourceEnd !== source.length)\r\n    source = new Uint8Array(source.buffer, source.byteOffset + sourceStart, nb);\r\n\r\n  target.set(source, targetStart);\r\n\r\n  return nb;\r\n}\r\n\r\n/**\r\n * The Buffer() constructor is deprecated in documentation and should not be\r\n * used moving forward. Rather, developers should use one of the three new\r\n * factory APIs: Buffer.from(), Buffer.allocUnsafe() or Buffer.alloc() based on\r\n * their specific needs. There is no runtime deprecation because of the extent\r\n * to which the Buffer constructor is used in the ecosystem currently -- a\r\n * runtime deprecation would introduce too much breakage at this time. It's not\r\n * likely that the Buffer constructors would ever actually be removed.\r\n * Deprecation Code: DEP0005\r\n */\r\nfunction Buffer(arg, encodingOrOffset, length) {\r\n  showFlaggedDeprecation();\r\n  // Common case.\r\n  if (typeof arg === 'number') {\r\n    if (typeof encodingOrOffset === 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE('string', 'string', arg);\r\n    }\r\n    return Buffer.alloc(arg);\r\n  }\r\n  return Buffer.from(arg, encodingOrOffset, length);\r\n}\r\n\r\nObject.defineProperty(Buffer, Symbol.species, {\r\n  enumerable: false,\r\n  configurable: true,\r\n  get() { return FastBuffer; }\r\n});\r\n\r\n/**\r\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n * if value is a number.\r\n * Buffer.from(str[, encoding])\r\n * Buffer.from(array)\r\n * Buffer.from(buffer)\r\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n */\r\nBuffer.from = function from(value, encodingOrOffset, length) {\r\n  if (typeof value === 'string')\r\n    return fromString(value, encodingOrOffset);\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    if (isAnyArrayBuffer(value))\r\n      return fromArrayBuffer(value, encodingOrOffset, length);\r\n\r\n    const valueOf = value.valueOf && value.valueOf();\r\n    if (valueOf !== null && valueOf !== undefined && valueOf !== value)\r\n      return Buffer.from(valueOf, encodingOrOffset, length);\r\n\r\n    const b = fromObject(value);\r\n    if (b)\r\n      return b;\r\n\r\n    if (typeof value[Symbol.toPrimitive] === 'function') {\r\n      return Buffer.from(value[Symbol.toPrimitive]('string'),\r\n                         encodingOrOffset,\r\n                         length);\r\n    }\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'first argument',\r\n    ['string', 'Buffer', 'ArrayBuffer', 'Array', 'Array-like Object'],\r\n    value\r\n  );\r\n};\r\n\r\n// Identical to the built-in %TypedArray%.of(), but avoids using the deprecated\r\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\r\n// adding a `prototype` property and making the function a constructor.\r\n//\r\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\r\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\r\nconst of = (...items) => {\r\n  const newObj = createUnsafeBuffer(items.length);\r\n  for (var k = 0; k < items.length; k++)\r\n    newObj[k] = items[k];\r\n  return newObj;\r\n};\r\nBuffer.of = of;\r\n\r\nObject.setPrototypeOf(Buffer, Uint8Array);\r\n\r\n// The 'assertSize' method will remove itself from the callstack when an error\r\n// occurs. This is done simply to keep the internal details of the\r\n// implementation from bleeding out to users.\r\nconst assertSize = hideStackFrames((size) => {\r\n  if (typeof size !== 'number') {\r\n    throw new ERR_INVALID_ARG_TYPE('size', 'number', size);\r\n  }\r\n  if (!(size >= 0 && size <= kMaxLength)) {\r\n    throw new ERR_INVALID_OPT_VALUE.RangeError('size', size);\r\n  }\r\n});\r\n\r\n/**\r\n * Creates a new filled Buffer instance.\r\n * alloc(size[, fill[, encoding]])\r\n */\r\nBuffer.alloc = function alloc(size, fill, encoding) {\r\n  assertSize(size);\r\n  if (fill !== undefined && fill !== 0 && size > 0) {\r\n    const buf = createUnsafeBuffer(size);\r\n    return _fill(buf, fill, 0, buf.length, encoding);\r\n  }\r\n  return new FastBuffer(size);\r\n};\r\n\r\n/**\r\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer\r\n * instance. If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafe = function allocUnsafe(size) {\r\n  assertSize(size);\r\n  return allocate(size);\r\n};\r\n\r\n/**\r\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled\r\n * Buffer instance that is not allocated off the pre-initialized pool.\r\n * If `--zero-fill-buffers` is set, will zero-fill the buffer.\r\n */\r\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\r\n  assertSize(size);\r\n  return createUnsafeBuffer(size);\r\n};\r\n\r\n// If --zero-fill-buffers command line argument is set, a zero-filled\r\n// buffer is returned.\r\nfunction SlowBuffer(length) {\r\n  assertSize(length);\r\n  return createUnsafeBuffer(length);\r\n}\r\n\r\nObject.setPrototypeOf(SlowBuffer.prototype, Uint8Array.prototype);\r\nObject.setPrototypeOf(SlowBuffer, Uint8Array);\r\n\r\nfunction allocate(size) {\r\n  if (size <= 0) {\r\n    return new FastBuffer();\r\n  }\r\n  if (size < (Buffer.poolSize >>> 1)) {\r\n    if (size > (poolSize - poolOffset))\r\n      createPool();\r\n    const b = new FastBuffer(allocPool, poolOffset, size);\r\n    poolOffset += size;\r\n    alignPool();\r\n    return b;\r\n  }\r\n  return createUnsafeBuffer(size);\r\n}\r\n\r\nfunction fromStringFast(string, ops) {\r\n  const length = ops.byteLength(string);\r\n\r\n  if (length >= (Buffer.poolSize >>> 1))\r\n    return createFromString(string, ops.encodingVal);\r\n\r\n  if (length > (poolSize - poolOffset))\r\n    createPool();\r\n  let b = new FastBuffer(allocPool, poolOffset, length);\r\n  const actual = ops.write(b, string, 0, length);\r\n  if (actual !== length) {\r\n    // byteLength() may overestimate. That's a rare case, though.\r\n    b = new FastBuffer(allocPool, poolOffset, actual);\r\n  }\r\n  poolOffset += actual;\r\n  alignPool();\r\n  return b;\r\n}\r\n\r\nfunction fromString(string, encoding) {\r\n  let ops;\r\n  if (typeof encoding !== 'string' || encoding.length === 0) {\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n    ops = encodingOps.utf8;\r\n    encoding = undefined;\r\n  } else {\r\n    ops = getEncodingOps(encoding);\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    if (string.length === 0)\r\n      return new FastBuffer();\r\n  }\r\n  return fromStringFast(string, ops);\r\n}\r\n\r\nfunction fromArrayLike(obj) {\r\n  const length = obj.length;\r\n  const b = allocate(length);\r\n  for (var i = 0; i < length; i++)\r\n    b[i] = obj[i];\r\n  return b;\r\n}\r\n\r\nfunction fromArrayBuffer(obj, byteOffset, length) {\r\n  // Convert byteOffset to integer\r\n  if (byteOffset === undefined) {\r\n    byteOffset = 0;\r\n  } else {\r\n    byteOffset = +byteOffset;\r\n    if (Number.isNaN(byteOffset))\r\n      byteOffset = 0;\r\n  }\r\n\r\n  const maxLength = obj.byteLength - byteOffset;\r\n\r\n  if (maxLength < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\r\n\r\n  if (length === undefined) {\r\n    length = maxLength;\r\n  } else {\r\n    // Convert length to non-negative integer.\r\n    length = +length;\r\n    if (length > 0) {\r\n      if (length > maxLength)\r\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\r\n    } else {\r\n      length = 0;\r\n    }\r\n  }\r\n\r\n  return new FastBuffer(obj, byteOffset, length);\r\n}\r\n\r\nfunction fromObject(obj) {\r\n  if (isUint8Array(obj)) {\r\n    const b = allocate(obj.length);\r\n\r\n    if (b.length === 0)\r\n      return b;\r\n\r\n    _copy(obj, b, 0, 0, obj.length);\r\n    return b;\r\n  }\r\n\r\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\r\n    if (typeof obj.length !== 'number') {\r\n      return new FastBuffer();\r\n    }\r\n    return fromArrayLike(obj);\r\n  }\r\n\r\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\r\n    return fromArrayLike(obj.data);\r\n  }\r\n}\r\n\r\n// Static methods\r\n\r\nBuffer.isBuffer = function isBuffer(b) {\r\n  return b instanceof Buffer;\r\n};\r\n\r\nBuffer.compare = function compare(buf1, buf2) {\r\n  if (!isUint8Array(buf1)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf1', ['Buffer', 'Uint8Array'], buf1);\r\n  }\r\n\r\n  if (!isUint8Array(buf2)) {\r\n    throw new ERR_INVALID_ARG_TYPE('buf2', ['Buffer', 'Uint8Array'], buf2);\r\n  }\r\n\r\n  if (buf1 === buf2) {\r\n    return 0;\r\n  }\r\n\r\n  return _compare(buf1, buf2);\r\n};\r\n\r\nBuffer.isEncoding = function isEncoding(encoding) {\r\n  return typeof encoding === 'string' && encoding.length !== 0 &&\r\n         normalizeEncoding(encoding) !== undefined;\r\n};\r\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\r\n\r\nBuffer.concat = function concat(list, length) {\r\n  let i;\r\n  if (!Array.isArray(list)) {\r\n    throw new ERR_INVALID_ARG_TYPE('list', 'Array', list);\r\n  }\r\n\r\n  if (list.length === 0)\r\n    return new FastBuffer();\r\n\r\n  if (length === undefined) {\r\n    length = 0;\r\n    for (i = 0; i < list.length; i++) {\r\n      if (list[i].length) {\r\n        length += list[i].length;\r\n      }\r\n    }\r\n  } else {\r\n    validateInt32(length, 'length', 0);\r\n  }\r\n\r\n  const buffer = Buffer.allocUnsafe(length);\r\n  let pos = 0;\r\n  for (i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    if (!isUint8Array(buf)) {\r\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\r\n      // Instead, find the proper error code for this.\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        `list[${i}]`, ['Buffer', 'Uint8Array'], list[i]);\r\n    }\r\n    _copy(buf, buffer, pos);\r\n    pos += buf.length;\r\n  }\r\n\r\n  // Note: `length` is always equal to `buffer.length` at this point\r\n  if (pos < length) {\r\n    // Zero-fill the remaining bytes if the specified `length` was more than\r\n    // the actual total length, i.e. if we have some remaining allocated bytes\r\n    // there were not initialized.\r\n    buffer.fill(0, pos, length);\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nfunction base64ByteLength(str, bytes) {\r\n  // Handle padding\r\n  if (str.charCodeAt(bytes - 1) === 0x3D)\r\n    bytes--;\r\n  if (bytes > 1 && str.charCodeAt(bytes - 1) === 0x3D)\r\n    bytes--;\r\n\r\n  // Base64 ratio: 3/4\r\n  return (bytes * 3) >>> 2;\r\n}\r\n\r\nconst encodingOps = {\r\n  utf8: {\r\n    encoding: 'utf8',\r\n    encodingVal: encodingsMap.utf8,\r\n    byteLength: byteLengthUtf8,\r\n    write: (buf, string, offset, len) => buf.utf8Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.utf8Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf8, dir)\r\n  },\r\n  ucs2: {\r\n    encoding: 'ucs2',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir)\r\n  },\r\n  utf16le: {\r\n    encoding: 'utf16le',\r\n    encodingVal: encodingsMap.utf16le,\r\n    byteLength: (string) => string.length * 2,\r\n    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.ucs2Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.utf16le, dir)\r\n  },\r\n  latin1: {\r\n    encoding: 'latin1',\r\n    encodingVal: encodingsMap.latin1,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.latin1Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.latin1Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfString(buf, val, byteOffset, encodingsMap.latin1, dir)\r\n  },\r\n  ascii: {\r\n    encoding: 'ascii',\r\n    encodingVal: encodingsMap.ascii,\r\n    byteLength: (string) => string.length,\r\n    write: (buf, string, offset, len) => buf.asciiWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.asciiSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.ascii),\r\n                    byteOffset,\r\n                    encodingsMap.ascii,\r\n                    dir)\r\n  },\r\n  base64: {\r\n    encoding: 'base64',\r\n    encodingVal: encodingsMap.base64,\r\n    byteLength: (string) => base64ByteLength(string, string.length),\r\n    write: (buf, string, offset, len) => buf.base64Write(string, offset, len),\r\n    slice: (buf, start, end) => buf.base64Slice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.base64),\r\n                    byteOffset,\r\n                    encodingsMap.base64,\r\n                    dir)\r\n  },\r\n  hex: {\r\n    encoding: 'hex',\r\n    encodingVal: encodingsMap.hex,\r\n    byteLength: (string) => string.length >>> 1,\r\n    write: (buf, string, offset, len) => buf.hexWrite(string, offset, len),\r\n    slice: (buf, start, end) => buf.hexSlice(start, end),\r\n    indexOf: (buf, val, byteOffset, dir) =>\r\n      indexOfBuffer(buf,\r\n                    fromStringFast(val, encodingOps.hex),\r\n                    byteOffset,\r\n                    encodingsMap.hex,\r\n                    dir)\r\n  }\r\n};\r\nfunction getEncodingOps(encoding) {\r\n  encoding += '';\r\n  switch (encoding.length) {\r\n    case 4:\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      encoding = encoding.toLowerCase();\r\n      if (encoding === 'utf8') return encodingOps.utf8;\r\n      if (encoding === 'ucs2') return encodingOps.ucs2;\r\n      break;\r\n    case 5:\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      encoding = encoding.toLowerCase();\r\n      if (encoding === 'utf-8') return encodingOps.utf8;\r\n      if (encoding === 'ascii') return encodingOps.ascii;\r\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\r\n      break;\r\n    case 7:\r\n      if (encoding === 'utf16le' || encoding.toLowerCase() === 'utf16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 8:\r\n      if (encoding === 'utf-16le' || encoding.toLowerCase() === 'utf-16le')\r\n        return encodingOps.utf16le;\r\n      break;\r\n    case 6:\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      encoding = encoding.toLowerCase();\r\n      if (encoding === 'latin1' || encoding === 'binary')\r\n        return encodingOps.latin1;\r\n      if (encoding === 'base64') return encodingOps.base64;\r\n      break;\r\n    case 3:\r\n      if (encoding === 'hex' || encoding.toLowerCase() === 'hex')\r\n        return encodingOps.hex;\r\n      break;\r\n  }\r\n}\r\n\r\nfunction byteLength(string, encoding) {\r\n  if (typeof string !== 'string') {\r\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\r\n      return string.byteLength;\r\n    }\r\n\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'string', ['string', 'Buffer', 'ArrayBuffer'], string\r\n    );\r\n  }\r\n\r\n  const len = string.length;\r\n  const mustMatch = (arguments.length > 2 && arguments[2] === true);\r\n  if (!mustMatch && len === 0)\r\n    return 0;\r\n\r\n  if (!encoding)\r\n    return (mustMatch ? -1 : byteLengthUtf8(string));\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    return (mustMatch ? -1 : byteLengthUtf8(string));\r\n  return ops.byteLength(string);\r\n}\r\n\r\nBuffer.byteLength = byteLength;\r\n\r\n// For backwards compatibility.\r\nObject.defineProperty(Buffer.prototype, 'parent', {\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.buffer;\r\n  }\r\n});\r\nObject.defineProperty(Buffer.prototype, 'offset', {\r\n  enumerable: true,\r\n  get() {\r\n    if (!(this instanceof Buffer))\r\n      return undefined;\r\n    return this.byteOffset;\r\n  }\r\n});\r\n\r\nBuffer.prototype.copy =\r\n  function copy(target, targetStart, sourceStart, sourceEnd) {\r\n    return _copy(this, target, targetStart, sourceStart, sourceEnd);\r\n  };\r\n\r\n// No need to verify that \"buf.length <= MAX_UINT32\" since it's a read-only\r\n// property of a typed array.\r\n// This behaves neither like String nor Uint8Array in that we set start/end\r\n// to their upper/lower bounds if the value passed is out of range.\r\nBuffer.prototype.toString = function toString(encoding, start, end) {\r\n  if (arguments.length === 0) {\r\n    return this.utf8Slice(0, this.length);\r\n  }\r\n\r\n  const len = this.length;\r\n\r\n  if (start <= 0)\r\n    start = 0;\r\n  else if (start >= len)\r\n    return '';\r\n  else\r\n    start |= 0;\r\n\r\n  if (end === undefined || end > len)\r\n    end = len;\r\n  else\r\n    end |= 0;\r\n\r\n  if (end <= start)\r\n    return '';\r\n\r\n  if (encoding === undefined)\r\n    return this.utf8Slice(start, end);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n\r\n  return ops.slice(this, start, end);\r\n};\r\n\r\nBuffer.prototype.equals = function equals(otherBuffer) {\r\n  if (!isUint8Array(otherBuffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'otherBuffer', ['Buffer', 'Uint8Array'], otherBuffer);\r\n  }\r\n\r\n  if (this === otherBuffer)\r\n    return true;\r\n\r\n  if (this.byteLength !== otherBuffer.byteLength)\r\n    return false;\r\n\r\n  return this.byteLength === 0 || _compare(this, otherBuffer) === 0;\r\n};\r\n\r\nlet INSPECT_MAX_BYTES = 50;\r\n// Override how buffers are presented by util.inspect().\r\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes, ctx) {\r\n  const max = INSPECT_MAX_BYTES;\r\n  const actualMax = Math.min(max, this.length);\r\n  const remaining = this.length - max;\r\n  let str = this.hexSlice(0, actualMax).replace(/(.{2})/g, '$1 ').trim();\r\n  if (remaining > 0)\r\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\r\n  // Inspect special properties as well, if possible.\r\n  if (ctx) {\r\n    let extras = false;\r\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\r\n    const obj = getOwnNonIndexProperties(this, filter).reduce((obj, key) => {\r\n      extras = true;\r\n      obj[key] = this[key];\r\n      return obj;\r\n    }, Object.create(null));\r\n    if (extras) {\r\n      if (this.length !== 0)\r\n        str += ', ';\r\n      // '[Object: null prototype] {'.length === 26\r\n      // This is guarded with a test.\r\n      str += utilInspect(obj, {\r\n        ...ctx,\r\n        breakLength: Infinity,\r\n        compact: true\r\n      }).slice(27, -2);\r\n    }\r\n  }\r\n  return `<${this.constructor.name} ${str}>`;\r\n};\r\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\r\n\r\nBuffer.prototype.compare = function compare(target,\r\n                                            targetStart,\r\n                                            targetEnd,\r\n                                            sourceStart,\r\n                                            sourceEnd) {\r\n  if (!isUint8Array(target)) {\r\n    throw new ERR_INVALID_ARG_TYPE('target', ['Buffer', 'Uint8Array'], target);\r\n  }\r\n  if (arguments.length === 1)\r\n    return _compare(this, target);\r\n\r\n  if (targetStart === undefined)\r\n    targetStart = 0;\r\n  else\r\n    validateInt32(targetStart, 'targetStart', 0);\r\n\r\n  if (targetEnd === undefined)\r\n    targetEnd = target.length;\r\n  else\r\n    validateInt32(targetEnd, 'targetEnd', 0, target.length);\r\n\r\n  if (sourceStart === undefined)\r\n    sourceStart = 0;\r\n  else\r\n    validateInt32(sourceStart, 'sourceStart', 0);\r\n\r\n  if (sourceEnd === undefined)\r\n    sourceEnd = this.length;\r\n  else\r\n    validateInt32(sourceEnd, 'sourceEnd', 0, this.length);\r\n\r\n  if (sourceStart >= sourceEnd)\r\n    return (targetStart >= targetEnd ? 0 : -1);\r\n  if (targetStart >= targetEnd)\r\n    return 1;\r\n\r\n  return compareOffset(this, target, targetStart, sourceStart, targetEnd,\r\n                       sourceEnd);\r\n};\r\n\r\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n//\r\n// Arguments:\r\n// - buffer - a Buffer to search\r\n// - val - a string, Buffer, or number\r\n// - byteOffset - an index into `buffer`; will be clamped to an int32\r\n// - encoding - an optional encoding, relevant if val is a string\r\n// - dir - true for indexOf, false for lastIndexOf\r\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\r\n  if (typeof byteOffset === 'string') {\r\n    encoding = byteOffset;\r\n    byteOffset = undefined;\r\n  } else if (byteOffset > 0x7fffffff) {\r\n    byteOffset = 0x7fffffff;\r\n  } else if (byteOffset < -0x80000000) {\r\n    byteOffset = -0x80000000;\r\n  }\r\n  // Coerce to Number. Values like null and [] become 0.\r\n  byteOffset = +byteOffset;\r\n  // If the offset is undefined, \"foo\", {}, coerces to NaN, search whole buffer.\r\n  if (Number.isNaN(byteOffset)) {\r\n    byteOffset = dir ? 0 : buffer.length;\r\n  }\r\n  dir = !!dir;  // Cast to bool.\r\n\r\n  if (typeof val === 'number')\r\n    return indexOfNumber(buffer, val >>> 0, byteOffset, dir);\r\n\r\n  let ops;\r\n  if (encoding === undefined)\r\n    ops = encodingOps.utf8;\r\n  else\r\n    ops = getEncodingOps(encoding);\r\n\r\n  if (typeof val === 'string') {\r\n    if (ops === undefined)\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    return ops.indexOf(buffer, val, byteOffset, dir);\r\n  }\r\n\r\n  if (isUint8Array(val)) {\r\n    const encodingVal =\r\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\r\n    return indexOfBuffer(buffer, val, byteOffset, encodingVal, dir);\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_TYPE(\r\n    'value', ['number', 'string', 'Buffer', 'Uint8Array'], val\r\n  );\r\n}\r\n\r\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\r\n};\r\n\r\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\r\n};\r\n\r\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\r\n  return this.indexOf(val, byteOffset, encoding) !== -1;\r\n};\r\n\r\n// Usage:\r\n//    buffer.fill(number[, offset[, end]])\r\n//    buffer.fill(buffer[, offset[, end]])\r\n//    buffer.fill(string[, offset[, end]][, encoding])\r\nBuffer.prototype.fill = function fill(value, offset, end, encoding) {\r\n  return _fill(this, value, offset, end, encoding);\r\n};\r\n\r\nfunction _fill(buf, value, offset, end, encoding) {\r\n  if (typeof value === 'string') {\r\n    if (offset === undefined || typeof offset === 'string') {\r\n      encoding = offset;\r\n      offset = 0;\r\n      end = buf.length;\r\n    } else if (typeof end === 'string') {\r\n      encoding = end;\r\n      end = buf.length;\r\n    }\r\n\r\n    const normalizedEncoding = normalizeEncoding(encoding);\r\n    if (normalizedEncoding === undefined) {\r\n      validateString(encoding, 'encoding');\r\n      throw new ERR_UNKNOWN_ENCODING(encoding);\r\n    }\r\n\r\n    if (value.length === 0) {\r\n      // If value === '' default to zero.\r\n      value = 0;\r\n    } else if (value.length === 1) {\r\n      // Fast path: If `value` fits into a single byte, use that numeric value.\r\n      if (normalizedEncoding === 'utf8') {\r\n        const code = value.charCodeAt(0);\r\n        if (code < 128) {\r\n          value = code;\r\n        }\r\n      } else if (normalizedEncoding === 'latin1') {\r\n        value = value.charCodeAt(0);\r\n      }\r\n    }\r\n  } else {\r\n    encoding = undefined;\r\n  }\r\n\r\n  if (offset === undefined) {\r\n    offset = 0;\r\n    end = buf.length;\r\n  } else {\r\n    validateInt32(offset, 'offset', 0);\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (end === undefined) {\r\n      end = buf.length;\r\n    } else {\r\n      validateInt32(end, 'end', 0, buf.length);\r\n    }\r\n    if (offset >= end)\r\n      return buf;\r\n  }\r\n\r\n  const res = bindingFill(buf, value, offset, end, encoding);\r\n  if (res < 0) {\r\n    if (res === -1)\r\n      throw new ERR_INVALID_ARG_VALUE('value', value);\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\nBuffer.prototype.write = function write(string, offset, length, encoding) {\r\n  // Buffer#write(string);\r\n  if (offset === undefined) {\r\n    return this.utf8Write(string, 0, this.length);\r\n  }\r\n  // Buffer#write(string, encoding)\r\n  if (length === undefined && typeof offset === 'string') {\r\n    encoding = offset;\r\n    length = this.length;\r\n    offset = 0;\r\n\r\n  // Buffer#write(string, offset[, length][, encoding])\r\n  } else {\r\n    validateInt32(offset, 'offset', 0, this.length);\r\n\r\n    const remaining = this.length - offset;\r\n\r\n    if (length === undefined) {\r\n      length = remaining;\r\n    } else if (typeof length === 'string') {\r\n      encoding = length;\r\n      length = remaining;\r\n    } else {\r\n      validateInt32(length, 'length', 0, this.length);\r\n      if (length > remaining)\r\n        length = remaining;\r\n    }\r\n  }\r\n\r\n  if (!encoding)\r\n    return this.utf8Write(string, offset, length);\r\n\r\n  const ops = getEncodingOps(encoding);\r\n  if (ops === undefined)\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n  return ops.write(this, string, offset, length);\r\n};\r\n\r\nBuffer.prototype.toJSON = function toJSON() {\r\n  if (this.length > 0) {\r\n    const data = new Array(this.length);\r\n    for (var i = 0; i < this.length; ++i)\r\n      data[i] = this[i];\r\n    return { type: 'Buffer', data };\r\n  }\r\n  return { type: 'Buffer', data: [] };\r\n};\r\n\r\nfunction adjustOffset(offset, length) {\r\n  // Use Math.trunc() to convert offset to an integer value that can be larger\r\n  // than an Int32. Hence, don't use offset | 0 or similar techniques.\r\n  offset = Math.trunc(offset);\r\n  if (offset === 0) {\r\n    return 0;\r\n  }\r\n  if (offset < 0) {\r\n    offset += length;\r\n    return offset > 0 ? offset : 0;\r\n  }\r\n  if (offset < length) {\r\n    return offset;\r\n  }\r\n  return Number.isNaN(offset) ? 0 : length;\r\n}\r\n\r\nBuffer.prototype.slice = function slice(start, end) {\r\n  const srcLength = this.length;\r\n  start = adjustOffset(start, srcLength);\r\n  end = end !== undefined ? adjustOffset(end, srcLength) : srcLength;\r\n  const newLength = end > start ? end - start : 0;\r\n  return new FastBuffer(this.buffer, this.byteOffset + start, newLength);\r\n};\r\n\r\nfunction swap(b, n, m) {\r\n  const i = b[n];\r\n  b[n] = b[m];\r\n  b[m] = i;\r\n}\r\n\r\nBuffer.prototype.swap16 = function swap16() {\r\n  // For Buffer.length < 128, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 2 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\r\n  if (len < 128) {\r\n    for (var i = 0; i < len; i += 2)\r\n      swap(this, i, i + 1);\r\n    return this;\r\n  }\r\n  return _swap16(this);\r\n};\r\n\r\nBuffer.prototype.swap32 = function swap32() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 4 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\r\n  if (len < 192) {\r\n    for (var i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3);\r\n      swap(this, i + 1, i + 2);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap32(this);\r\n};\r\n\r\nBuffer.prototype.swap64 = function swap64() {\r\n  // For Buffer.length < 192, it's generally faster to\r\n  // do the swap in javascript. For larger buffers,\r\n  // dropping down to the native code is faster.\r\n  const len = this.length;\r\n  if (len % 8 !== 0)\r\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\r\n  if (len < 192) {\r\n    for (var i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7);\r\n      swap(this, i + 1, i + 6);\r\n      swap(this, i + 2, i + 5);\r\n      swap(this, i + 3, i + 4);\r\n    }\r\n    return this;\r\n  }\r\n  return _swap64(this);\r\n};\r\n\r\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\r\n\r\nlet transcode;\r\nif (internalBinding('config').hasIntl) {\r\n  const {\r\n    icuErrName,\r\n    transcode: _transcode\r\n  } = internalBinding('icu');\r\n\r\n  // Transcodes the Buffer from one encoding to another, returning a new\r\n  // Buffer instance.\r\n  transcode = function transcode(source, fromEncoding, toEncoding) {\r\n    if (!isUint8Array(source)) {\r\n      throw new ERR_INVALID_ARG_TYPE('source',\r\n                                     ['Buffer', 'Uint8Array'], source);\r\n    }\r\n    if (source.length === 0) return Buffer.alloc(0);\r\n\r\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\r\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\r\n    const result = _transcode(source, fromEncoding, toEncoding);\r\n    if (typeof result !== 'number')\r\n      return result;\r\n\r\n    const code = icuErrName(result);\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    const err = new Error(`Unable to transcode Buffer [${code}]`);\r\n    err.code = code;\r\n    err.errno = result;\r\n    throw err;\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  Buffer,\r\n  SlowBuffer,\r\n  transcode,\r\n  // Legacy\r\n  kMaxLength,\r\n  kStringMaxLength\r\n};\r\n\r\nObject.defineProperties(module.exports, {\r\n  constants: {\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants\r\n  },\r\n  INSPECT_MAX_BYTES: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() { return INSPECT_MAX_BYTES; },\r\n    set(val) { INSPECT_MAX_BYTES = val; }\r\n  }\r\n});\r\n"
  },
  {
    "name": "internal/validators.js",
    "source": "'use strict';\r\n\r\nconst {\r\n  hideStackFrames,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_SIGNAL\r\n  }\r\n} = require('internal/errors');\r\nconst {\r\n  isArrayBufferView\r\n} = require('internal/util/types');\r\nconst { signals } = internalBinding('constants').os;\r\nconst { MAX_SAFE_INTEGER, MIN_SAFE_INTEGER } = Number;\r\n\r\nfunction isInt32(value) {\r\n  return value === (value | 0);\r\n}\r\n\r\nfunction isUint32(value) {\r\n  return value === (value >>> 0);\r\n}\r\n\r\nconst octalReg = /^[0-7]+$/;\r\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\r\n\r\n/**\r\n * Parse and validate values that will be converted into mode_t (the S_*\r\n * constants). Only valid numbers and octal strings are allowed. They could be\r\n * converted to 32-bit unsigned integers or non-negative signed integers in the\r\n * C++ land, but any value higher than 0o777 will result in platform-specific\r\n * behaviors.\r\n *\r\n * @param {*} value Values to be validated\r\n * @param {string} name Name of the argument\r\n * @param {number} def If specified, will be returned for invalid values\r\n * @returns {number}\r\n */\r\nfunction parseMode(value, name, def) {\r\n  if (isUint32(value)) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    validateInt32(value, name, 0, 2 ** 32 - 1);\r\n  }\r\n\r\n  if (typeof value === 'string') {\r\n    if (!octalReg.test(value)) {\r\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);\r\n    }\r\n    return parseInt(value, 8);\r\n  }\r\n\r\n  if (def !== undefined && value == null) {\r\n    return def;\r\n  }\r\n\r\n  throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);\r\n}\r\n\r\nconst validateInteger = hideStackFrames(\r\n  (value, name, min = MIN_SAFE_INTEGER, max = MAX_SAFE_INTEGER) => {\r\n    if (typeof value !== 'number')\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    if (!Number.isInteger(value))\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    if (value < min || value > max)\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n  }\r\n);\r\n\r\nconst validateInt32 = hideStackFrames(\r\n  (value, name, min = -2147483648, max = 2147483647) => {\r\n    // The defaults for min and max correspond to the limits of 32-bit integers.\r\n    if (!isInt32(value)) {\r\n      if (typeof value !== 'number') {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n      }\r\n      if (!Number.isInteger(value)) {\r\n        throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n      }\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n    if (value < min || value > max) {\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n  }\r\n);\r\n\r\nconst validateUint32 = hideStackFrames((value, name, positive) => {\r\n  if (!isUint32(value)) {\r\n    if (typeof value !== 'number') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n    }\r\n    if (!Number.isInteger(value)) {\r\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n    }\r\n    const min = positive ? 1 : 0;\r\n    // 2 ** 32 === 4294967296\r\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && < 4294967296`, value);\r\n  }\r\n  if (positive && value === 0) {\r\n    throw new ERR_OUT_OF_RANGE(name, '>= 1 && < 4294967296', value);\r\n  }\r\n});\r\n\r\nfunction validateString(value, name) {\r\n  if (typeof value !== 'string')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n}\r\n\r\nfunction validateNumber(value, name) {\r\n  if (typeof value !== 'number')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n}\r\n\r\nfunction validateSignalName(signal, name = 'signal') {\r\n  if (typeof signal !== 'string')\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', signal);\r\n\r\n  if (signals[signal] === undefined) {\r\n    if (signals[signal.toUpperCase()] !== undefined) {\r\n      throw new ERR_UNKNOWN_SIGNAL(signal +\r\n                                   ' (signals must use all capital letters)');\r\n    }\r\n\r\n    throw new ERR_UNKNOWN_SIGNAL(signal);\r\n  }\r\n}\r\n\r\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\r\n  if (!isArrayBufferView(buffer)) {\r\n    throw new ERR_INVALID_ARG_TYPE(name,\r\n                                   ['Buffer', 'TypedArray', 'DataView'],\r\n                                   buffer);\r\n  }\r\n});\r\n\r\nmodule.exports = {\r\n  isInt32,\r\n  isUint32,\r\n  parseMode,\r\n  validateBuffer,\r\n  validateInteger,\r\n  validateInt32,\r\n  validateUint32,\r\n  validateString,\r\n  validateNumber,\r\n  validateSignalName\r\n};\r\n"
  },
  {
    "name": "internal/buffer.js",
    "source": "'use strict';\r\n\r\nconst { Math } = primordials;\r\n\r\nconst {\r\n  ERR_BUFFER_OUT_OF_BOUNDS,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_OUT_OF_RANGE\r\n} = require('internal/errors').codes;\r\nconst { validateNumber } = require('internal/validators');\r\nconst {\r\n  asciiSlice,\r\n  base64Slice,\r\n  latin1Slice,\r\n  hexSlice,\r\n  ucs2Slice,\r\n  utf8Slice,\r\n  asciiWrite,\r\n  base64Write,\r\n  latin1Write,\r\n  hexWrite,\r\n  ucs2Write,\r\n  utf8Write\r\n} = internalBinding('buffer');\r\n\r\n// Temporary buffers to convert numbers.\r\nconst float32Array = new Float32Array(1);\r\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\r\nconst float64Array = new Float64Array(1);\r\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\r\n\r\n// Check endianness.\r\nfloat32Array[0] = -1; // 0xBF800000\r\n// Either it is [0, 0, 128, 191] or [191, 128, 0, 0]. It is not possible to\r\n// check this with `os.endianness()` because that is determined at compile time.\r\nconst bigEndian = uInt8Float32Array[3] === 0;\r\n\r\nfunction checkBounds(buf, offset, byteLength) {\r\n  validateNumber(offset, 'offset');\r\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\r\n    boundsError(offset, buf.length - (byteLength + 1));\r\n}\r\n\r\nfunction checkInt(value, min, max, buf, offset, byteLength) {\r\n  if (value > max || value < min) {\r\n    const n = typeof min === 'bigint' ? 'n' : '';\r\n    let range;\r\n    if (byteLength > 3) {\r\n      if (min === 0 || min === 0n) {\r\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\r\n      } else {\r\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\r\n                `${(byteLength + 1) * 8 - 1}${n}`;\r\n      }\r\n    } else {\r\n      range = `>= ${min}${n} and <= ${max}${n}`;\r\n    }\r\n    throw new ERR_OUT_OF_RANGE('value', range, value);\r\n  }\r\n  checkBounds(buf, offset, byteLength);\r\n}\r\n\r\nfunction boundsError(value, length, type) {\r\n  if (Math.floor(value) !== value) {\r\n    validateNumber(value, type);\r\n    throw new ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);\r\n  }\r\n\r\n  if (length < 0)\r\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\r\n\r\n  throw new ERR_OUT_OF_RANGE(type || 'offset',\r\n                             `>= ${type ? 1 : 0} and <= ${length}`,\r\n                             value);\r\n}\r\n\r\n// Read integers.\r\nfunction readBigUInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const lo = first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24;\r\n\r\n  const hi = this[++offset] +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n\r\n  return BigInt(lo) + (BigInt(hi) << 32n);\r\n}\r\n\r\nfunction readBigUInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const hi = first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n\r\n  const lo = this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n\r\n  return (BigInt(hi) << 32n) + BigInt(lo);\r\n}\r\n\r\nfunction readBigInt64LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = this[offset + 4] +\r\n    this[offset + 5] * 2 ** 8 +\r\n    this[offset + 6] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 24);\r\n}\r\n\r\nfunction readBigInt64BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  const val = (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset];\r\n  return (BigInt(val) << 32n) +\r\n    BigInt(this[++offset] * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last);\r\n}\r\n\r\nfunction readUIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\r\n}\r\n\r\nfunction readUInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24 +\r\n    last * 2 ** 32;\r\n}\r\n\r\nfunction readUInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    last * 2 ** 24;\r\n}\r\n\r\nfunction readUInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n}\r\n\r\nfunction readUInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first + last * 2 ** 8;\r\n}\r\n\r\nfunction readUInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val;\r\n}\r\n\r\nfunction readUIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readUInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readUInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readUInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readUInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readUInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readUInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readUInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return first * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first * 2 ** 24 +\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readUInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n}\r\n\r\nfunction readUInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  return first * 2 ** 8 + last;\r\n}\r\n\r\nfunction readIntLE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48LE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40LE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24LE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32LE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16LE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[offset + 4] + last * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt40LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    first +\r\n    buf[++offset] * 2 ** 8 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 24;\r\n}\r\n\r\nfunction readInt32LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return first +\r\n    this[++offset] * 2 ** 8 +\r\n    this[++offset] * 2 ** 16 +\r\n    (last << 24); // Overflow\r\n}\r\n\r\nfunction readInt24LE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16LE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first + last * 2 ** 8;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\nfunction readInt8(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const val = this[offset];\r\n  if (val === undefined)\r\n    boundsError(offset, this.length - 1);\r\n\r\n  return val | (val & 2 ** 7) * 0x1fffffe;\r\n}\r\n\r\nfunction readIntBE(offset, byteLength) {\r\n  if (offset === undefined)\r\n    throw new ERR_INVALID_ARG_TYPE('offset', 'number', offset);\r\n  if (byteLength === 6)\r\n    return readInt48BE(this, offset);\r\n  if (byteLength === 5)\r\n    return readInt40BE(this, offset);\r\n  if (byteLength === 3)\r\n    return readInt24BE(this, offset);\r\n  if (byteLength === 4)\r\n    return this.readInt32BE(offset);\r\n  if (byteLength === 2)\r\n    return this.readInt16BE(offset);\r\n  if (byteLength === 1)\r\n    return this.readInt8(offset);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction readInt48BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 5];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 6);\r\n\r\n  const val = buf[++offset] + first * 2 ** 8;\r\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt40BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 4];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 5);\r\n\r\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\r\n    buf[++offset] * 2 ** 24 +\r\n    buf[++offset] * 2 ** 16 +\r\n    buf[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt32BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  return (first << 24) + // Overflow\r\n    this[++offset] * 2 ** 16 +\r\n    this[++offset] * 2 ** 8 +\r\n    last;\r\n}\r\n\r\nfunction readInt24BE(buf, offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = buf[offset];\r\n  const last = buf[offset + 2];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, buf.length - 3);\r\n\r\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\r\n  return val | (val & 2 ** 23) * 0x1fe;\r\n}\r\n\r\nfunction readInt16BE(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 1];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 2);\r\n\r\n  const val = first * 2 ** 8 + last;\r\n  return val | (val & 2 ** 15) * 0x1fffe;\r\n}\r\n\r\n// Read floats\r\nfunction readFloatBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[3] = first;\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[0] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readFloatForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 3];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 4);\r\n\r\n  uInt8Float32Array[0] = first;\r\n  uInt8Float32Array[1] = this[++offset];\r\n  uInt8Float32Array[2] = this[++offset];\r\n  uInt8Float32Array[3] = last;\r\n  return float32Array[0];\r\n}\r\n\r\nfunction readDoubleBackwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[7] = first;\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[0] = last;\r\n  return float64Array[0];\r\n}\r\n\r\nfunction readDoubleForwards(offset = 0) {\r\n  validateNumber(offset, 'offset');\r\n  const first = this[offset];\r\n  const last = this[offset + 7];\r\n  if (first === undefined || last === undefined)\r\n    boundsError(offset, this.length - 8);\r\n\r\n  uInt8Float64Array[0] = first;\r\n  uInt8Float64Array[1] = this[++offset];\r\n  uInt8Float64Array[2] = this[++offset];\r\n  uInt8Float64Array[3] = this[++offset];\r\n  uInt8Float64Array[4] = this[++offset];\r\n  uInt8Float64Array[5] = this[++offset];\r\n  uInt8Float64Array[6] = this[++offset];\r\n  uInt8Float64Array[7] = last;\r\n  return float64Array[0];\r\n}\r\n\r\n// Write integers.\r\nfunction writeBigU_Int64LE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset++] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset++] = hi;\r\n  return offset;\r\n}\r\n\r\nfunction writeBigUInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigU_Int64BE(buf, value, offset, min, max) {\r\n  checkInt(value, min, max, buf, offset, 7);\r\n\r\n  let lo = Number(value & 0xffffffffn);\r\n  buf[offset + 7] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 6] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 5] = lo;\r\n  lo = lo >> 8;\r\n  buf[offset + 4] = lo;\r\n  let hi = Number(value >> 32n & 0xffffffffn);\r\n  buf[offset + 3] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 2] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset + 1] = hi;\r\n  hi = hi >> 8;\r\n  buf[offset] = hi;\r\n  return offset + 8;\r\n}\r\n\r\nfunction writeBigUInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(this, value, offset, 0n, 0xffffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64LE(value, offset = 0) {\r\n  return writeBigU_Int64LE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeBigInt64BE(value, offset = 0) {\r\n  return writeBigU_Int64BE(\r\n    this, value, offset, -0x8000000000000000n, 0x7fffffffffffffffn);\r\n}\r\n\r\nfunction writeUIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, 0, 0xffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = Math.floor(value * 2 ** -32);\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = newVal;\r\n  buf[offset++] = (newVal >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int40LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  const newVal = value;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  buf[offset++] = Math.floor(newVal * 2 ** -32);\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int32LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  value = value >>> 8;\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeU_Int16LE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = value;\r\n  buf[offset++] = (value >>> 8);\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeU_Int8(buf, value, offset, min, max) {\r\n  value = +value;\r\n  // `checkInt()` can not be used here because it checks two entries.\r\n  validateNumber(offset, 'offset');\r\n  if (value > max || value < min) {\r\n    throw new ERR_OUT_OF_RANGE('value', `>= ${min} and <= ${max}`, value);\r\n  }\r\n  if (buf[offset] === undefined)\r\n    boundsError(offset, buf.length - 1);\r\n\r\n  buf[offset] = value;\r\n  return offset + 1;\r\n}\r\n\r\nfunction writeUInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, 0, 0xff);\r\n}\r\n\r\nfunction writeUIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, 0, 0xffffffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, 0, 0xffffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, 0, 0xffffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, 0, 0xff);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeU_Int48BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 5);\r\n\r\n  const newVal = Math.floor(value * 2 ** -32);\r\n  buf[offset++] = (newVal >>> 8);\r\n  buf[offset++] = newVal;\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int40BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 4);\r\n\r\n  buf[offset++] = Math.floor(value * 2 ** -32);\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeU_Int32BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 3);\r\n\r\n  buf[offset + 3] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 4;\r\n}\r\n\r\nfunction writeUInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, 0, 0xffffffff);\r\n}\r\n\r\nfunction writeU_Int24BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 2);\r\n\r\n  buf[offset + 2] = value;\r\n  value = value >>> 8;\r\n  buf[offset + 1] = value;\r\n  value = value >>> 8;\r\n  buf[offset] = value;\r\n  return offset + 3;\r\n}\r\n\r\nfunction writeU_Int16BE(buf, value, offset, min, max) {\r\n  value = +value;\r\n  checkInt(value, min, max, buf, offset, 1);\r\n\r\n  buf[offset++] = (value >>> 8);\r\n  buf[offset++] = value;\r\n  return offset;\r\n}\r\n\r\nfunction writeUInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, 0, 0xffff);\r\n}\r\n\r\nfunction writeIntLE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48LE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40LE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24LE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32LE(value, offset = 0) {\r\n  return writeU_Int32LE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16LE(value, offset = 0) {\r\n  return writeU_Int16LE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\nfunction writeInt8(value, offset = 0) {\r\n  return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n}\r\n\r\nfunction writeIntBE(value, offset, byteLength) {\r\n  if (byteLength === 6)\r\n    return writeU_Int48BE(this, value, offset, -0x800000000000, 0x7fffffffffff);\r\n  if (byteLength === 5)\r\n    return writeU_Int40BE(this, value, offset, -0x8000000000, 0x7fffffffff);\r\n  if (byteLength === 3)\r\n    return writeU_Int24BE(this, value, offset, -0x800000, 0x7fffff);\r\n  if (byteLength === 4)\r\n    return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n  if (byteLength === 2)\r\n    return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n  if (byteLength === 1)\r\n    return writeU_Int8(this, value, offset, -0x80, 0x7f);\r\n\r\n  boundsError(byteLength, 6, 'byteLength');\r\n}\r\n\r\nfunction writeInt32BE(value, offset = 0) {\r\n  return writeU_Int32BE(this, value, offset, -0x80000000, 0x7fffffff);\r\n}\r\n\r\nfunction writeInt16BE(value, offset = 0) {\r\n  return writeU_Int16BE(this, value, offset, -0x8000, 0x7fff);\r\n}\r\n\r\n// Write floats.\r\nfunction writeDoubleForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[0];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[7];\r\n  return offset;\r\n}\r\n\r\nfunction writeDoubleBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 7);\r\n\r\n  float64Array[0] = val;\r\n  this[offset++] = uInt8Float64Array[7];\r\n  this[offset++] = uInt8Float64Array[6];\r\n  this[offset++] = uInt8Float64Array[5];\r\n  this[offset++] = uInt8Float64Array[4];\r\n  this[offset++] = uInt8Float64Array[3];\r\n  this[offset++] = uInt8Float64Array[2];\r\n  this[offset++] = uInt8Float64Array[1];\r\n  this[offset++] = uInt8Float64Array[0];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatForwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[0];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[3];\r\n  return offset;\r\n}\r\n\r\nfunction writeFloatBackwards(val, offset = 0) {\r\n  val = +val;\r\n  checkBounds(this, offset, 3);\r\n\r\n  float32Array[0] = val;\r\n  this[offset++] = uInt8Float32Array[3];\r\n  this[offset++] = uInt8Float32Array[2];\r\n  this[offset++] = uInt8Float32Array[1];\r\n  this[offset++] = uInt8Float32Array[0];\r\n  return offset;\r\n}\r\n\r\nclass FastBuffer extends Uint8Array {}\r\n\r\nfunction addBufferPrototypeMethods(proto) {\r\n  proto.readBigUInt64LE = readBigUInt64LE,\r\n  proto.readBigUInt64BE = readBigUInt64BE,\r\n  proto.readBigInt64LE = readBigInt64LE,\r\n  proto.readBigInt64BE = readBigInt64BE,\r\n  proto.writeBigUInt64LE = writeBigUInt64LE,\r\n  proto.writeBigUInt64BE = writeBigUInt64BE,\r\n  proto.writeBigInt64LE = writeBigInt64LE,\r\n  proto.writeBigInt64BE = writeBigInt64BE,\r\n\r\n  proto.readUIntLE = readUIntLE;\r\n  proto.readUInt32LE = readUInt32LE;\r\n  proto.readUInt16LE = readUInt16LE;\r\n  proto.readUInt8 = readUInt8;\r\n  proto.readUIntBE = readUIntBE;\r\n  proto.readUInt32BE = readUInt32BE;\r\n  proto.readUInt16BE = readUInt16BE;\r\n  proto.readIntLE = readIntLE;\r\n  proto.readInt32LE = readInt32LE;\r\n  proto.readInt16LE = readInt16LE;\r\n  proto.readInt8 = readInt8;\r\n  proto.readIntBE = readIntBE;\r\n  proto.readInt32BE = readInt32BE;\r\n  proto.readInt16BE = readInt16BE;\r\n\r\n  proto.writeUIntLE = writeUIntLE;\r\n  proto.writeUInt32LE = writeUInt32LE;\r\n  proto.writeUInt16LE = writeUInt16LE;\r\n  proto.writeUInt8 = writeUInt8;\r\n  proto.writeUIntBE = writeUIntBE;\r\n  proto.writeUInt32BE = writeUInt32BE;\r\n  proto.writeUInt16BE = writeUInt16BE;\r\n  proto.writeIntLE = writeIntLE;\r\n  proto.writeInt32LE = writeInt32LE;\r\n  proto.writeInt16LE = writeInt16LE;\r\n  proto.writeInt8 = writeInt8;\r\n  proto.writeIntBE = writeIntBE;\r\n  proto.writeInt32BE = writeInt32BE;\r\n  proto.writeInt16BE = writeInt16BE;\r\n\r\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\r\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\r\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\r\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\r\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\r\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\r\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\r\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\r\n\r\n  proto.asciiSlice = asciiSlice;\r\n  proto.base64Slice = base64Slice;\r\n  proto.latin1Slice = latin1Slice;\r\n  proto.hexSlice = hexSlice;\r\n  proto.ucs2Slice = ucs2Slice;\r\n  proto.utf8Slice = utf8Slice;\r\n  proto.asciiWrite = asciiWrite;\r\n  proto.base64Write = base64Write;\r\n  proto.latin1Write = latin1Write;\r\n  proto.hexWrite = hexWrite;\r\n  proto.ucs2Write = ucs2Write;\r\n  proto.utf8Write = utf8Write;\r\n}\r\n\r\nmodule.exports = {\r\n  FastBuffer,\r\n  addBufferPrototypeMethods\r\n};\r\n"
  },
  {
    "name": "internal/process/per_thread.js",
    "source": "'use strict';\r\n\r\n// This files contains process bootstrappers that can be\r\n// run when setting up each thread, including the main\r\n// thread and the worker threads.\r\n\r\nconst {\r\n  Object,\r\n  RegExpPrototype,\r\n  SetPrototype,\r\n  StringPrototype\r\n} = primordials;\r\n\r\nconst {\r\n  errnoException,\r\n  codes: {\r\n    ERR_ASSERTION,\r\n    ERR_CPU_USAGE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_OPT_VALUE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_UNKNOWN_SIGNAL\r\n  }\r\n} = require('internal/errors');\r\nconst format = require('internal/util/inspect').format;\r\nconst constants = internalBinding('constants').os.signals;\r\n\r\nfunction assert(x, msg) {\r\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\r\n}\r\n\r\n// The execution of this function itself should not cause any side effects.\r\nfunction wrapProcessMethods(binding) {\r\n  const {\r\n    hrtime: _hrtime,\r\n    hrtimeBigInt: _hrtimeBigInt,\r\n    cpuUsage: _cpuUsage,\r\n    memoryUsage: _memoryUsage,\r\n    resourceUsage: _resourceUsage\r\n  } = binding;\r\n\r\n  function _rawDebug(...args) {\r\n    binding._rawDebug(format.apply(null, args));\r\n  }\r\n\r\n  // Create the argument array that will be passed to the native function.\r\n  const cpuValues = new Float64Array(2);\r\n\r\n  // Replace the native function with the JS version that calls the native\r\n  // function.\r\n  function cpuUsage(prevValue) {\r\n    // If a previous value was passed in, ensure it has the correct shape.\r\n    if (prevValue) {\r\n      if (!previousValueIsValid(prevValue.user)) {\r\n        if (typeof prevValue !== 'object')\r\n          throw new ERR_INVALID_ARG_TYPE('prevValue', 'object', prevValue);\r\n\r\n        if (typeof prevValue.user !== 'number') {\r\n          throw new ERR_INVALID_ARG_TYPE('prevValue.user',\r\n                                         'number', prevValue.user);\r\n        }\r\n        throw new ERR_INVALID_OPT_VALUE.RangeError('prevValue.user',\r\n                                                   prevValue.user);\r\n      }\r\n\r\n      if (!previousValueIsValid(prevValue.system)) {\r\n        if (typeof prevValue.system !== 'number') {\r\n          throw new ERR_INVALID_ARG_TYPE('prevValue.system',\r\n                                         'number', prevValue.system);\r\n        }\r\n        throw new ERR_INVALID_OPT_VALUE.RangeError('prevValue.system',\r\n                                                   prevValue.system);\r\n      }\r\n    }\r\n\r\n    // Call the native function to get the current values.\r\n    const errmsg = _cpuUsage(cpuValues);\r\n    if (errmsg) {\r\n      throw new ERR_CPU_USAGE(errmsg);\r\n    }\r\n\r\n    // If a previous value was passed in, return diff of current from previous.\r\n    if (prevValue) {\r\n      return {\r\n        user: cpuValues[0] - prevValue.user,\r\n        system: cpuValues[1] - prevValue.system\r\n      };\r\n    }\r\n\r\n    // If no previous value passed in, return current value.\r\n    return {\r\n      user: cpuValues[0],\r\n      system: cpuValues[1]\r\n    };\r\n  }\r\n\r\n  // Ensure that a previously passed in value is valid. Currently, the native\r\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\r\n  function previousValueIsValid(num) {\r\n    return typeof num === 'number' &&\r\n        num <= Number.MAX_SAFE_INTEGER &&\r\n        num >= 0;\r\n  }\r\n\r\n  // The 3 entries filled in by the original process.hrtime contains\r\n  // the upper/lower 32 bits of the second part of the value,\r\n  // and the remaining nanoseconds of the value.\r\n  const hrValues = new Uint32Array(3);\r\n\r\n  function hrtime(time) {\r\n    _hrtime(hrValues);\r\n\r\n    if (time !== undefined) {\r\n      if (!Array.isArray(time)) {\r\n        throw new ERR_INVALID_ARG_TYPE('time', 'Array', time);\r\n      }\r\n      if (time.length !== 2) {\r\n        throw new ERR_OUT_OF_RANGE('time', 2, time.length);\r\n      }\r\n\r\n      const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\r\n      const nsec = hrValues[2] - time[1];\r\n      const needsBorrow = nsec < 0;\r\n      return [needsBorrow ? sec - 1 : sec, needsBorrow ? nsec + 1e9 : nsec];\r\n    }\r\n\r\n    return [\r\n      hrValues[0] * 0x100000000 + hrValues[1],\r\n      hrValues[2]\r\n    ];\r\n  }\r\n\r\n  // Use a BigUint64Array in the closure because this is actually a bit\r\n  // faster than simply returning a BigInt from C++ in V8 7.1.\r\n  const hrBigintValues = new BigUint64Array(1);\r\n  function hrtimeBigInt() {\r\n    _hrtimeBigInt(hrBigintValues);\r\n    return hrBigintValues[0];\r\n  }\r\n\r\n  const memValues = new Float64Array(4);\r\n  function memoryUsage() {\r\n    _memoryUsage(memValues);\r\n    return {\r\n      rss: memValues[0],\r\n      heapTotal: memValues[1],\r\n      heapUsed: memValues[2],\r\n      external: memValues[3]\r\n    };\r\n  }\r\n\r\n  function exit(code) {\r\n    if (code || code === 0)\r\n      process.exitCode = code;\r\n\r\n    if (!process._exiting) {\r\n      process._exiting = true;\r\n      process.emit('exit', process.exitCode || 0);\r\n    }\r\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\r\n    // in the user land. Either document it, or deprecate it in favor of a\r\n    // better public alternative.\r\n    process.reallyExit(process.exitCode || 0);\r\n  }\r\n\r\n  function kill(pid, sig) {\r\n    var err;\r\n\r\n    // eslint-disable-next-line eqeqeq\r\n    if (pid != (pid | 0)) {\r\n      throw new ERR_INVALID_ARG_TYPE('pid', 'number', pid);\r\n    }\r\n\r\n    // Preserve null signal\r\n    if (sig === (sig | 0)) {\r\n      // XXX(joyeecheung): we have to use process._kill here because\r\n      // it's monkey-patched by tests.\r\n      err = process._kill(pid, sig);\r\n    } else {\r\n      sig = sig || 'SIGTERM';\r\n      if (constants[sig]) {\r\n        err = process._kill(pid, constants[sig]);\r\n      } else {\r\n        throw new ERR_UNKNOWN_SIGNAL(sig);\r\n      }\r\n    }\r\n\r\n    if (err)\r\n      throw errnoException(err, 'kill');\r\n\r\n    return true;\r\n  }\r\n\r\n  const resourceValues = new Float64Array(16);\r\n  function resourceUsage() {\r\n    _resourceUsage(resourceValues);\r\n    return {\r\n      userCPUTime: resourceValues[0],\r\n      systemCPUTime: resourceValues[1],\r\n      maxRSS: resourceValues[2],\r\n      sharedMemorySize: resourceValues[3],\r\n      unsharedDataSize: resourceValues[4],\r\n      unsharedStackSize: resourceValues[5],\r\n      minorPageFault: resourceValues[6],\r\n      majorPageFault: resourceValues[7],\r\n      swappedOut: resourceValues[8],\r\n      fsRead: resourceValues[9],\r\n      fsWrite: resourceValues[10],\r\n      ipcSent: resourceValues[11],\r\n      ipcReceived: resourceValues[12],\r\n      signalsCount: resourceValues[13],\r\n      voluntaryContextSwitches: resourceValues[14],\r\n      involuntaryContextSwitches: resourceValues[15]\r\n    };\r\n  }\r\n\r\n\r\n  return {\r\n    _rawDebug,\r\n    hrtime,\r\n    hrtimeBigInt,\r\n    cpuUsage,\r\n    resourceUsage,\r\n    memoryUsage,\r\n    kill,\r\n    exit\r\n  };\r\n}\r\n\r\nconst replaceUnderscoresRegex = /_/g;\r\nconst leadingDashesRegex = /^--?/;\r\nconst trailingValuesRegex = /=.*$/;\r\n\r\n// This builds the initial process.allowedNodeEnvironmentFlags\r\n// from data in the config binding.\r\nfunction buildAllowedFlags() {\r\n  const {\r\n    envSettings: { kAllowedInEnvironment }\r\n  } = internalBinding('options');\r\n  const { options, aliases } = require('internal/options');\r\n\r\n  const allowedNodeEnvironmentFlags = [];\r\n  for (const [name, info] of options) {\r\n    if (info.envVarSettings === kAllowedInEnvironment) {\r\n      allowedNodeEnvironmentFlags.push(name);\r\n    }\r\n  }\r\n\r\n  for (const [ from, expansion ] of aliases) {\r\n    let isAccepted = true;\r\n    for (const to of expansion) {\r\n      if (!to.startsWith('-') || to === '--') continue;\r\n      const recursiveExpansion = aliases.get(to);\r\n      if (recursiveExpansion) {\r\n        if (recursiveExpansion[0] === to)\r\n          recursiveExpansion.splice(0, 1);\r\n        expansion.push(...recursiveExpansion);\r\n        continue;\r\n      }\r\n      isAccepted = options.get(to).envVarSettings === kAllowedInEnvironment;\r\n      if (!isAccepted) break;\r\n    }\r\n    if (isAccepted) {\r\n      let canonical = from;\r\n      if (canonical.endsWith('='))\r\n        canonical = canonical.substr(0, canonical.length - 1);\r\n      if (canonical.endsWith(' <arg>'))\r\n        canonical = canonical.substr(0, canonical.length - 4);\r\n      allowedNodeEnvironmentFlags.push(canonical);\r\n    }\r\n  }\r\n\r\n  const trimLeadingDashes =\r\n    (flag) => StringPrototype.replace(flag, leadingDashesRegex, '');\r\n\r\n  // Save these for comparison against flags provided to\r\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\r\n  // Avoid interference w/ user code by flattening `Set.prototype` into\r\n  // each object.\r\n  const nodeFlags = Object.defineProperties(\r\n    new Set(allowedNodeEnvironmentFlags.map(trimLeadingDashes)),\r\n    Object.getOwnPropertyDescriptors(Set.prototype)\r\n  );\r\n\r\n  class NodeEnvironmentFlagsSet extends Set {\r\n    constructor(...args) {\r\n      super(...args);\r\n\r\n      // The super constructor consumes `add`, but\r\n      // disallow any future adds.\r\n      Object.defineProperty(this, 'add', {\r\n        value: () => this\r\n      });\r\n    }\r\n\r\n    delete() {\r\n      // No-op, `Set` API compatible\r\n      return false;\r\n    }\r\n\r\n    clear() {\r\n      // No-op\r\n    }\r\n\r\n    has(key) {\r\n      // This will return `true` based on various possible\r\n      // permutations of a flag, including present/missing leading\r\n      // dash(es) and/or underscores-for-dashes.\r\n      // Strips any values after `=`, inclusive.\r\n      // TODO(addaleax): It might be more flexible to run the option parser\r\n      // on a dummy option set and see whether it rejects the argument or\r\n      // not.\r\n      if (typeof key === 'string') {\r\n        key = StringPrototype.replace(key, replaceUnderscoresRegex, '-');\r\n        if (RegExpPrototype.test(leadingDashesRegex, key)) {\r\n          key = StringPrototype.replace(key, trailingValuesRegex, '');\r\n          return SetPrototype.has(this, key);\r\n        }\r\n        return SetPrototype.has(nodeFlags, key);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Object.freeze(NodeEnvironmentFlagsSet.prototype.constructor);\r\n  Object.freeze(NodeEnvironmentFlagsSet.prototype);\r\n\r\n  return Object.freeze(new NodeEnvironmentFlagsSet(\r\n    allowedNodeEnvironmentFlags\r\n  ));\r\n}\r\n\r\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\r\n// trace event category is enabled.\r\nlet traceEventsAsyncHook;\r\n// Dynamically enable/disable the traceEventsAsyncHook\r\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\r\n  if (asyncHooksEnabled) {\r\n    if (!traceEventsAsyncHook) {\r\n      traceEventsAsyncHook =\r\n        require('internal/trace_events_async_hooks').createHook();\r\n    }\r\n    traceEventsAsyncHook.enable();\r\n  } else if (traceEventsAsyncHook) {\r\n    traceEventsAsyncHook.disable();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  toggleTraceCategoryState,\r\n  assert,\r\n  buildAllowedFlags,\r\n  wrapProcessMethods\r\n};\r\n"
  },
  {
    "name": "internal/process/main_thread_only.js",
    "source": "'use strict';\r\n\r\n// This file contains process bootstrappers that can only be\r\n// run in the main thread\r\n\r\nconst {\r\n  errnoException,\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_UNKNOWN_CREDENTIAL\r\n  }\r\n} = require('internal/errors');\r\nconst {\r\n  parseMode,\r\n  validateUint32,\r\n  validateString\r\n} = require('internal/validators');\r\n\r\nconst { signals } = internalBinding('constants').os;\r\n\r\n// The execution of this function itself should not cause any side effects.\r\nfunction wrapProcessMethods(binding) {\r\n  // Cache the working directory to prevent lots of lookups. If the working\r\n  // directory is changed by `chdir`, it'll be updated.\r\n  let cachedCwd = '';\r\n\r\n  function chdir(directory) {\r\n    validateString(directory, 'directory');\r\n    binding.chdir(directory);\r\n    // Mark cache that it requires an update.\r\n    cachedCwd = '';\r\n  }\r\n\r\n  function umask(mask) {\r\n    if (mask !== undefined) {\r\n      mask = parseMode(mask, 'mask');\r\n    }\r\n    return binding.umask(mask);\r\n  }\r\n\r\n  function cwd() {\r\n    cachedCwd = binding.cwd();\r\n    return cachedCwd;\r\n  }\r\n\r\n  return {\r\n    chdir,\r\n    umask,\r\n    cwd\r\n  };\r\n}\r\n\r\nfunction wrapPosixCredentialSetters(credentials) {\r\n  const {\r\n    initgroups: _initgroups,\r\n    setgroups: _setgroups,\r\n    setegid: _setegid,\r\n    seteuid: _seteuid,\r\n    setgid: _setgid,\r\n    setuid: _setuid\r\n  } = credentials;\r\n\r\n  function initgroups(user, extraGroup) {\r\n    validateId(user, 'user');\r\n    validateId(extraGroup, 'extraGroup');\r\n    // Result is 0 on success, 1 if user is unknown, 2 if group is unknown.\r\n    const result = _initgroups(user, extraGroup);\r\n    if (result === 1) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('User', user);\r\n    } else if (result === 2) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', extraGroup);\r\n    }\r\n  }\r\n\r\n  function setgroups(groups) {\r\n    if (!Array.isArray(groups)) {\r\n      throw new ERR_INVALID_ARG_TYPE('groups', 'Array', groups);\r\n    }\r\n    for (var i = 0; i < groups.length; i++) {\r\n      validateId(groups[i], `groups[${i}]`);\r\n    }\r\n    // Result is 0 on success. A positive integer indicates that the\r\n    // corresponding group was not found.\r\n    const result = _setgroups(groups);\r\n    if (result > 0) {\r\n      throw new ERR_UNKNOWN_CREDENTIAL('Group', groups[result - 1]);\r\n    }\r\n  }\r\n\r\n  function wrapIdSetter(type, method) {\r\n    return function(id) {\r\n      validateId(id, 'id');\r\n      // Result is 0 on success, 1 if credential is unknown.\r\n      const result = method(id);\r\n      if (result === 1) {\r\n        throw new ERR_UNKNOWN_CREDENTIAL(type, id);\r\n      }\r\n    };\r\n  }\r\n\r\n  function validateId(id, name) {\r\n    if (typeof id === 'number') {\r\n      validateUint32(id, name);\r\n    } else if (typeof id !== 'string') {\r\n      throw new ERR_INVALID_ARG_TYPE(name, ['number', 'string'], id);\r\n    }\r\n  }\r\n\r\n  return {\r\n    initgroups,\r\n    setgroups,\r\n    setegid: wrapIdSetter('Group', _setegid),\r\n    seteuid: wrapIdSetter('User', _seteuid),\r\n    setgid: wrapIdSetter('Group', _setgid),\r\n    setuid: wrapIdSetter('User', _setuid)\r\n  };\r\n}\r\n\r\nlet Signal;\r\nfunction isSignal(event) {\r\n  return typeof event === 'string' && signals[event] !== undefined;\r\n}\r\n\r\n// Worker threads don't receive signals.\r\nfunction createSignalHandlers() {\r\n  const signalWraps = new Map();\r\n\r\n  // Detect presence of a listener for the special signal types\r\n  function startListeningIfSignal(type) {\r\n    if (isSignal(type) && !signalWraps.has(type)) {\r\n      if (Signal === undefined)\r\n        Signal = internalBinding('signal_wrap').Signal;\r\n      const wrap = new Signal();\r\n\r\n      wrap.unref();\r\n\r\n      wrap.onsignal = process.emit.bind(process, type, type);\r\n\r\n      const signum = signals[type];\r\n      const err = wrap.start(signum);\r\n      if (err) {\r\n        wrap.close();\r\n        throw errnoException(err, 'uv_signal_start');\r\n      }\r\n\r\n      signalWraps.set(type, wrap);\r\n    }\r\n  }\r\n\r\n  function stopListeningIfSignal(type) {\r\n    const wrap = signalWraps.get(type);\r\n    if (wrap !== undefined && process.listenerCount(type) === 0) {\r\n      wrap.close();\r\n      signalWraps.delete(type);\r\n    }\r\n  }\r\n\r\n  return {\r\n    startListeningIfSignal,\r\n    stopListeningIfSignal\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  wrapProcessMethods,\r\n  createSignalHandlers,\r\n  wrapPosixCredentialSetters\r\n};\r\n"
  },
  {
    "name": "internal/process/stdio.js",
    "source": "'use strict';\r\n\r\nconst { guessHandleType } = internalBinding('util');\r\nexports.getMainThreadStdio = getMainThreadStdio;\r\n\r\nfunction dummyDestroy(err, cb) {\r\n  cb(err);\r\n\r\n  // We need to emit 'close' anyway so that the closing\r\n  // of the stream is observable. We just make sure we\r\n  // are not going to do it twice.\r\n  // The 'close' event is needed so that finished and\r\n  // pipeline work correctly.\r\n  if (!this._writableState.emitClose) {\r\n    process.nextTick(() => {\r\n      this.emit('close');\r\n    });\r\n  }\r\n}\r\n\r\nfunction getMainThreadStdio() {\r\n  var stdin;\r\n  var stdout;\r\n  var stderr;\r\n\r\n  function getStdout() {\r\n    if (stdout) return stdout;\r\n    stdout = createWritableStdioStream(1);\r\n    stdout.destroySoon = stdout.destroy;\r\n    // Override _destroy so that the fd is never actually closed.\r\n    stdout._destroy = dummyDestroy;\r\n    if (stdout.isTTY) {\r\n      process.on('SIGWINCH', () => stdout._refreshSize());\r\n    }\r\n    return stdout;\r\n  }\r\n\r\n  function getStderr() {\r\n    if (stderr) return stderr;\r\n    stderr = createWritableStdioStream(2);\r\n    stderr.destroySoon = stderr.destroy;\r\n    // Override _destroy so that the fd is never actually closed.\r\n    stderr._destroy = dummyDestroy;\r\n    if (stderr.isTTY) {\r\n      process.on('SIGWINCH', () => stderr._refreshSize());\r\n    }\r\n    return stderr;\r\n  }\r\n\r\n  function getStdin() {\r\n    if (stdin) return stdin;\r\n    const fd = 0;\r\n\r\n    switch (guessHandleType(fd)) {\r\n      case 'TTY':\r\n        var tty = require('tty');\r\n        stdin = new tty.ReadStream(fd, {\r\n          highWaterMark: 0,\r\n          readable: true,\r\n          writable: false\r\n        });\r\n        break;\r\n\r\n      case 'FILE':\r\n        var fs = require('fs');\r\n        stdin = new fs.ReadStream(null, { fd: fd, autoClose: false });\r\n        break;\r\n\r\n      case 'PIPE':\r\n      case 'TCP':\r\n        var net = require('net');\r\n\r\n        // It could be that process has been started with an IPC channel\r\n        // sitting on fd=0, in such case the pipe for this fd is already\r\n        // present and creating a new one will lead to the assertion failure\r\n        // in libuv.\r\n        if (process.channel && process.channel.fd === fd) {\r\n          stdin = new net.Socket({\r\n            handle: process.channel,\r\n            readable: true,\r\n            writable: false,\r\n            manualStart: true\r\n          });\r\n        } else {\r\n          stdin = new net.Socket({\r\n            fd: fd,\r\n            readable: true,\r\n            writable: false,\r\n            manualStart: true\r\n          });\r\n        }\r\n        // Make sure the stdin can't be `.end()`-ed\r\n        stdin._writableState.ended = true;\r\n        break;\r\n\r\n      default:\r\n        // Provide a dummy contentless input for e.g. non-console\r\n        // Windows applications.\r\n        const { Readable } = require('stream');\r\n        stdin = new Readable({ read() {} });\r\n        stdin.push(null);\r\n    }\r\n\r\n    // For supporting legacy API we put the FD here.\r\n    stdin.fd = fd;\r\n\r\n    // `stdin` starts out life in a paused state, but node doesn't\r\n    // know yet. Explicitly to readStop() it to put it in the\r\n    // not-reading state.\r\n    if (stdin._handle && stdin._handle.readStop) {\r\n      stdin._handle.reading = false;\r\n      stdin._readableState.reading = false;\r\n      stdin._handle.readStop();\r\n    }\r\n\r\n    // If the user calls stdin.pause(), then we need to stop reading\r\n    // once the stream implementation does so (one nextTick later),\r\n    // so that the process can close down.\r\n    stdin.on('pause', () => {\r\n      process.nextTick(onpause);\r\n    });\r\n\r\n    function onpause() {\r\n      if (!stdin._handle)\r\n        return;\r\n      if (stdin._handle.reading && !stdin.readableFlowing) {\r\n        stdin._readableState.reading = false;\r\n        stdin._handle.reading = false;\r\n        stdin._handle.readStop();\r\n      }\r\n    }\r\n\r\n    return stdin;\r\n  }\r\n\r\n  exports.resetStdioForTesting = function() {\r\n    stdin = undefined;\r\n    stdout = undefined;\r\n    stderr = undefined;\r\n  };\r\n\r\n  return {\r\n    getStdout,\r\n    getStderr,\r\n    getStdin\r\n  };\r\n}\r\n\r\nfunction createWritableStdioStream(fd) {\r\n  var stream;\r\n  // Note stream._type is used for test-module-load-list.js\r\n  switch (guessHandleType(fd)) {\r\n    case 'TTY':\r\n      var tty = require('tty');\r\n      stream = new tty.WriteStream(fd);\r\n      stream._type = 'tty';\r\n      break;\r\n\r\n    case 'FILE':\r\n      const SyncWriteStream = require('internal/fs/sync_write_stream');\r\n      stream = new SyncWriteStream(fd, { autoClose: false });\r\n      stream._type = 'fs';\r\n      break;\r\n\r\n    case 'PIPE':\r\n    case 'TCP':\r\n      var net = require('net');\r\n\r\n      // If fd is already being used for the IPC channel, libuv will return\r\n      // an error when trying to use it again. In that case, create the socket\r\n      // using the existing handle instead of the fd.\r\n      if (process.channel && process.channel.fd === fd) {\r\n        stream = new net.Socket({\r\n          handle: process.channel,\r\n          readable: false,\r\n          writable: true\r\n        });\r\n      } else {\r\n        stream = new net.Socket({\r\n          fd,\r\n          readable: false,\r\n          writable: true\r\n        });\r\n      }\r\n\r\n      stream._type = 'pipe';\r\n      break;\r\n\r\n    default:\r\n      // Provide a dummy black-hole output for e.g. non-console\r\n      // Windows applications.\r\n      const { Writable } = require('stream');\r\n      stream = new Writable({\r\n        write(buf, enc, cb) {\r\n          cb();\r\n        }\r\n      });\r\n  }\r\n\r\n  // For supporting legacy API we put the FD here.\r\n  stream.fd = fd;\r\n\r\n  stream._isStdio = true;\r\n\r\n  return stream;\r\n}\r\n"
  },
  {
    "name": "internal/async_hooks.js",
    "source": "'use strict';\r\n\r\nconst { FunctionPrototype, Object } = primordials;\r\n\r\nconst {\r\n  ERR_ASYNC_TYPE,\r\n  ERR_INVALID_ASYNC_ID\r\n} = require('internal/errors').codes;\r\n\r\nconst async_wrap = internalBinding('async_wrap');\r\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\r\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\r\n * hooks for each type.\r\n *\r\n * async_id_fields is a Float64Array wrapping the double array of\r\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\r\n * the various asynchronous states of the application. These are:\r\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\r\n *    current execution stack.\r\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\r\n *    the resource corresponding to the current execution stack.\r\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\r\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\r\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\r\n *    of retrieving the triggerAsyncId value is:\r\n *    1. the value passed directly to the constructor\r\n *    2. value set in kDefaultTriggerAsyncId\r\n *    3. executionAsyncId of the current resource.\r\n *\r\n * async_ids_stack is a Float64Array that contains part of the async ID\r\n * stack. Each pushAsyncIds() call adds two doubles to it, and each\r\n * popAsyncIds() call removes two doubles from it.\r\n * It has a fixed size, so if that is exceeded, calls to the native\r\n * side are used instead in pushAsyncIds() and popAsyncIds().\r\n */\r\nconst { async_hook_fields, async_id_fields, owner_symbol } = async_wrap;\r\n// Store the pair executionAsyncId and triggerAsyncId in a std::stack on\r\n// Environment::AsyncHooks::async_ids_stack_ tracks the resource responsible for\r\n// the current execution stack. This is unwound as each resource exits. In the\r\n// case of a fatal exception this stack is emptied after calling each hook's\r\n// after() callback.\r\nconst { pushAsyncIds: pushAsyncIds_, popAsyncIds: popAsyncIds_ } = async_wrap;\r\n// For performance reasons, only track Promises when a hook is enabled.\r\nconst { enablePromiseHook, disablePromiseHook } = async_wrap;\r\n// Properties in active_hooks are used to keep track of the set of hooks being\r\n// executed in case another hook is enabled/disabled. The new set of hooks is\r\n// then restored once the active set of hooks is finished executing.\r\nconst active_hooks = {\r\n  // Array of all AsyncHooks that will be iterated whenever an async event\r\n  // fires. Using var instead of (preferably const) in order to assign\r\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\r\n  // execution.\r\n  array: [],\r\n  // Use a counter to track nested calls of async hook callbacks and make sure\r\n  // the active_hooks.array isn't altered mid execution.\r\n  call_depth: 0,\r\n  // Use to temporarily store and updated active_hooks.array if the user\r\n  // enables or disables a hook while hooks are being processed. If a hook is\r\n  // enabled() or disabled() during hook execution then the current set of\r\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\r\n  // subsequent changes are on the duplicated array. When all hooks have\r\n  // completed executing active_hooks.tmp_array is assigned to\r\n  // active_hooks.array.\r\n  tmp_array: null,\r\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\r\n  // async_hook_fields can't be reassigned, store each uint32 in an array that\r\n  // is written back to async_hook_fields when active_hooks.array is restored.\r\n  tmp_fields: null\r\n};\r\n\r\nconst { registerDestroyHook } = async_wrap;\r\nconst { enqueueMicrotask } = internalBinding('task_queue');\r\n\r\n// Each constant tracks how many callbacks there are for any given step of\r\n// async execution. These are tracked so if the user didn't include callbacks\r\n// for a given step, that step can bail out early.\r\nconst { kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\r\n        kCheck, kExecutionAsyncId, kAsyncIdCounter, kTriggerAsyncId,\r\n        kDefaultTriggerAsyncId, kStackLength } = async_wrap.constants;\r\n\r\n// Used in AsyncHook and AsyncResource.\r\nconst async_id_symbol = Symbol('asyncId');\r\nconst trigger_async_id_symbol = Symbol('triggerAsyncId');\r\nconst init_symbol = Symbol('init');\r\nconst before_symbol = Symbol('before');\r\nconst after_symbol = Symbol('after');\r\nconst destroy_symbol = Symbol('destroy');\r\nconst promise_resolve_symbol = Symbol('promiseResolve');\r\nconst emitBeforeNative = emitHookFactory(before_symbol, 'emitBeforeNative');\r\nconst emitAfterNative = emitHookFactory(after_symbol, 'emitAfterNative');\r\nconst emitDestroyNative = emitHookFactory(destroy_symbol, 'emitDestroyNative');\r\nconst emitPromiseResolveNative =\r\n    emitHookFactory(promise_resolve_symbol, 'emitPromiseResolveNative');\r\n\r\n// Used to fatally abort the process if a callback throws.\r\nfunction fatalError(e) {\r\n  if (typeof e.stack === 'string') {\r\n    process._rawDebug(e.stack);\r\n  } else {\r\n    const o = { message: e };\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(o, fatalError);\r\n    process._rawDebug(o.stack);\r\n  }\r\n\r\n  const { getOptionValue } = require('internal/options');\r\n  if (getOptionValue('--abort-on-uncaught-exception')) {\r\n    process.abort();\r\n  }\r\n  process.exit(1);\r\n}\r\n\r\n\r\nfunction validateAsyncId(asyncId, type) {\r\n  // Skip validation when async_hooks is disabled\r\n  if (async_hook_fields[kCheck] <= 0) return;\r\n\r\n  if (!Number.isSafeInteger(asyncId) || asyncId < -1) {\r\n    fatalError(new ERR_INVALID_ASYNC_ID(type, asyncId));\r\n  }\r\n}\r\n\r\n// Emit From Native //\r\n\r\n// Used by C++ to call all init() callbacks. Because some state can be setup\r\n// from C++ there's no need to perform all the same operations as in\r\n// emitInitScript.\r\nfunction emitInitNative(asyncId, type, triggerAsyncId, resource) {\r\n  active_hooks.call_depth += 1;\r\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\r\n  try {\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\r\n        active_hooks.array[i][init_symbol](\r\n          asyncId, type, triggerAsyncId,\r\n          resource\r\n        );\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case active_hooks.tmp_array\r\n  // will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\n// Called from native. The asyncId stack handling is taken care of there\r\n// before this is called.\r\nfunction emitHook(symbol, asyncId) {\r\n  active_hooks.call_depth += 1;\r\n  // Use a single try/catch for all hook to avoid setting up one per\r\n  // iteration.\r\n  try {\r\n    for (var i = 0; i < active_hooks.array.length; i++) {\r\n      if (typeof active_hooks.array[i][symbol] === 'function') {\r\n        active_hooks.array[i][symbol](asyncId);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    fatalError(e);\r\n  } finally {\r\n    active_hooks.call_depth -= 1;\r\n  }\r\n\r\n  // Hooks can only be restored if there have been no recursive hook calls.\r\n  // Also the active hooks do not need to be restored if enable()/disable()\r\n  // weren't called during hook execution, in which case\r\n  // active_hooks.tmp_array will be null.\r\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\r\n    restoreActiveHooks();\r\n  }\r\n}\r\n\r\nfunction emitHookFactory(symbol, name) {\r\n  const fn = FunctionPrototype.bind(emitHook, undefined, symbol);\r\n\r\n  // Set the name property of the function as it looks good in the stack trace.\r\n  Object.defineProperty(fn, 'name', {\r\n    value: name\r\n  });\r\n  return fn;\r\n}\r\n\r\n// Manage Active Hooks //\r\n\r\nfunction getHookArrays() {\r\n  if (active_hooks.call_depth === 0)\r\n    return [active_hooks.array, async_hook_fields];\r\n  // If this hook is being enabled while in the middle of processing the array\r\n  // of currently active hooks then duplicate the current set of active hooks\r\n  // and store this there. This shouldn't fire until the next time hooks are\r\n  // processed.\r\n  if (active_hooks.tmp_array === null)\r\n    storeActiveHooks();\r\n  return [active_hooks.tmp_array, active_hooks.tmp_fields];\r\n}\r\n\r\n\r\nfunction storeActiveHooks() {\r\n  active_hooks.tmp_array = active_hooks.array.slice();\r\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\r\n  // 4. So do this the long way.\r\n  active_hooks.tmp_fields = [];\r\n  copyHooks(active_hooks.tmp_fields, async_hook_fields);\r\n}\r\n\r\nfunction copyHooks(destination, source) {\r\n  destination[kInit] = source[kInit];\r\n  destination[kBefore] = source[kBefore];\r\n  destination[kAfter] = source[kAfter];\r\n  destination[kDestroy] = source[kDestroy];\r\n  destination[kPromiseResolve] = source[kPromiseResolve];\r\n}\r\n\r\n\r\n// Then restore the correct hooks array in case any hooks were added/removed\r\n// during hook callback execution.\r\nfunction restoreActiveHooks() {\r\n  active_hooks.array = active_hooks.tmp_array;\r\n  copyHooks(async_hook_fields, active_hooks.tmp_fields);\r\n\r\n  active_hooks.tmp_array = null;\r\n  active_hooks.tmp_fields = null;\r\n}\r\n\r\n\r\nlet wantPromiseHook = false;\r\nfunction enableHooks() {\r\n  async_hook_fields[kCheck] += 1;\r\n\r\n  wantPromiseHook = true;\r\n  enablePromiseHook();\r\n}\r\n\r\nfunction disableHooks() {\r\n  async_hook_fields[kCheck] -= 1;\r\n\r\n  wantPromiseHook = false;\r\n  // Delay the call to `disablePromiseHook()` because we might currently be\r\n  // between the `before` and `after` calls of a Promise.\r\n  enqueueMicrotask(disablePromiseHookIfNecessary);\r\n}\r\n\r\nfunction disablePromiseHookIfNecessary() {\r\n  if (!wantPromiseHook)\r\n    disablePromiseHook();\r\n}\r\n\r\n// Internal Embedder API //\r\n\r\n// Increment the internal id counter and return the value. Important that the\r\n// counter increment first. Since it's done the same way in\r\n// Environment::new_async_uid()\r\nfunction newAsyncId() {\r\n  return ++async_id_fields[kAsyncIdCounter];\r\n}\r\n\r\nfunction getOrSetAsyncId(object) {\r\n  if (object.hasOwnProperty(async_id_symbol)) {\r\n    return object[async_id_symbol];\r\n  }\r\n\r\n  return object[async_id_symbol] = newAsyncId();\r\n}\r\n\r\n\r\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\r\n// the user to safeguard this call and make sure it's zero'd out when the\r\n// constructor is complete.\r\nfunction getDefaultTriggerAsyncId() {\r\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  // If defaultTriggerAsyncId isn't set, use the executionAsyncId\r\n  if (defaultTriggerAsyncId < 0)\r\n    return async_id_fields[kExecutionAsyncId];\r\n  return defaultTriggerAsyncId;\r\n}\r\n\r\n\r\nfunction clearDefaultTriggerAsyncId() {\r\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\r\n}\r\n\r\n\r\nfunction defaultTriggerAsyncIdScope(triggerAsyncId, block, ...args) {\r\n  if (triggerAsyncId === undefined)\r\n    return block(...args);\r\n  // do { if (!(Number.isSafeInteger(triggerAsyncId))) (process._rawDebug(\"CHECK: Number.isSafeInteger(triggerAsyncId) == true\"), process.abort()) } while (0)\r\n  // do { if (!(triggerAsyncId > 0)) (process._rawDebug(\"CHECK: triggerAsyncId > 0 == true\"), process.abort()) } while (0)\r\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\r\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\r\n\r\n  try {\r\n    return block(...args);\r\n  } finally {\r\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\r\n  }\r\n}\r\n\r\n\r\nfunction initHooksExist() {\r\n  return async_hook_fields[kInit] > 0;\r\n}\r\n\r\nfunction afterHooksExist() {\r\n  return async_hook_fields[kAfter] > 0;\r\n}\r\n\r\nfunction destroyHooksExist() {\r\n  return async_hook_fields[kDestroy] > 0;\r\n}\r\n\r\n\r\nfunction emitInitScript(asyncId, type, triggerAsyncId, resource) {\r\n  validateAsyncId(asyncId, 'asyncId');\r\n  if (triggerAsyncId !== null)\r\n    validateAsyncId(triggerAsyncId, 'triggerAsyncId');\r\n  if (async_hook_fields[kCheck] > 0 &&\r\n      (typeof type !== 'string' || type.length <= 0)) {\r\n    throw new ERR_ASYNC_TYPE(type);\r\n  }\r\n\r\n  // Short circuit all checks for the common case. Which is that no hooks have\r\n  // been set. Do this to remove performance impact for embedders (and core).\r\n  if (async_hook_fields[kInit] === 0)\r\n    return;\r\n\r\n  // This can run after the early return check b/c running this function\r\n  // manually means that the embedder must have used getDefaultTriggerAsyncId().\r\n  if (triggerAsyncId === null) {\r\n    triggerAsyncId = getDefaultTriggerAsyncId();\r\n  }\r\n\r\n  emitInitNative(asyncId, type, triggerAsyncId, resource);\r\n}\r\n\r\n\r\nfunction emitBeforeScript(asyncId, triggerAsyncId) {\r\n  // Validate the ids. An id of -1 means it was never set and is visible on the\r\n  // call graph. An id < -1 should never happen in any circumstance. Throw\r\n  // on user calls because async state should still be recoverable.\r\n  validateAsyncId(asyncId, 'asyncId');\r\n  validateAsyncId(triggerAsyncId, 'triggerAsyncId');\r\n\r\n  pushAsyncIds(asyncId, triggerAsyncId);\r\n\r\n  if (async_hook_fields[kBefore] > 0)\r\n    emitBeforeNative(asyncId);\r\n}\r\n\r\n\r\nfunction emitAfterScript(asyncId) {\r\n  validateAsyncId(asyncId, 'asyncId');\r\n\r\n  if (async_hook_fields[kAfter] > 0)\r\n    emitAfterNative(asyncId);\r\n\r\n  popAsyncIds(asyncId);\r\n}\r\n\r\n\r\nfunction emitDestroyScript(asyncId) {\r\n  validateAsyncId(asyncId, 'asyncId');\r\n\r\n  // Return early if there are no destroy callbacks, or invalid asyncId.\r\n  if (async_hook_fields[kDestroy] === 0 || asyncId <= 0)\r\n    return;\r\n  async_wrap.queueDestroyAsyncId(asyncId);\r\n}\r\n\r\n\r\n// Keep in sync with Environment::AsyncHooks::clear_async_id_stack\r\n// in src/env-inl.h.\r\nfunction clearAsyncIdStack() {\r\n  async_id_fields[kExecutionAsyncId] = 0;\r\n  async_id_fields[kTriggerAsyncId] = 0;\r\n  async_hook_fields[kStackLength] = 0;\r\n}\r\n\r\n\r\nfunction hasAsyncIdStack() {\r\n  return async_hook_fields[kStackLength] > 0;\r\n}\r\n\r\n\r\n// This is the equivalent of the native push_async_ids() call.\r\nfunction pushAsyncIds(asyncId, triggerAsyncId) {\r\n  const offset = async_hook_fields[kStackLength];\r\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\r\n    return pushAsyncIds_(asyncId, triggerAsyncId);\r\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\r\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\r\n  async_hook_fields[kStackLength]++;\r\n  async_id_fields[kExecutionAsyncId] = asyncId;\r\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\r\n}\r\n\r\n\r\n// This is the equivalent of the native pop_async_ids() call.\r\nfunction popAsyncIds(asyncId) {\r\n  const stackLength = async_hook_fields[kStackLength];\r\n  if (stackLength === 0) return false;\r\n\r\n  if (async_hook_fields[kCheck] > 0 &&\r\n      async_id_fields[kExecutionAsyncId] !== asyncId) {\r\n    // Do the same thing as the native code (i.e. crash hard).\r\n    return popAsyncIds_(asyncId);\r\n  }\r\n\r\n  const offset = stackLength - 1;\r\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\r\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\r\n  async_hook_fields[kStackLength] = offset;\r\n  return offset > 0;\r\n}\r\n\r\n\r\nfunction executionAsyncId() {\r\n  return async_id_fields[kExecutionAsyncId];\r\n}\r\n\r\nfunction triggerAsyncId() {\r\n  return async_id_fields[kTriggerAsyncId];\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  executionAsyncId,\r\n  triggerAsyncId,\r\n  // Private API\r\n  getHookArrays,\r\n  symbols: {\r\n    async_id_symbol, trigger_async_id_symbol,\r\n    init_symbol, before_symbol, after_symbol, destroy_symbol,\r\n    promise_resolve_symbol, owner_symbol\r\n  },\r\n  constants: {\r\n    kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve\r\n  },\r\n  enableHooks,\r\n  disableHooks,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  // Internal Embedder API\r\n  newAsyncId,\r\n  getOrSetAsyncId,\r\n  getDefaultTriggerAsyncId,\r\n  defaultTriggerAsyncIdScope,\r\n  initHooksExist,\r\n  afterHooksExist,\r\n  destroyHooksExist,\r\n  emitInit: emitInitScript,\r\n  emitBefore: emitBeforeScript,\r\n  emitAfter: emitAfterScript,\r\n  emitDestroy: emitDestroyScript,\r\n  registerDestroyHook,\r\n  nativeHooks: {\r\n    init: emitInitNative,\r\n    before: emitBeforeNative,\r\n    after: emitAfterNative,\r\n    destroy: emitDestroyNative,\r\n    promise_resolve: emitPromiseResolveNative\r\n  }\r\n};\r\n"
  },
  {
    "name": "internal/process/task_queues.js",
    "source": "'use strict';\r\n\r\nconst { FunctionPrototype } = primordials;\r\n\r\nconst {\r\n  // For easy access to the nextTick state in the C++ land,\r\n  // and to avoid unnecessary calls into JS land.\r\n  tickInfo,\r\n  // Used to run V8's micro task queue.\r\n  runMicrotasks,\r\n  setTickCallback,\r\n  enqueueMicrotask\r\n} = internalBinding('task_queue');\r\n\r\nconst {\r\n  triggerUncaughtException\r\n} = internalBinding('errors');\r\n\r\nconst {\r\n  setHasRejectionToWarn,\r\n  hasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections\r\n} = require('internal/process/promises');\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy,\r\n  symbols: { async_id_symbol, trigger_async_id_symbol }\r\n} = require('internal/async_hooks');\r\nconst {\r\n  ERR_INVALID_CALLBACK,\r\n  ERR_INVALID_ARG_TYPE\r\n} = require('internal/errors').codes;\r\nconst FixedQueue = require('internal/fixed_queue');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasTickScheduled = 0;\r\n\r\nfunction hasTickScheduled() {\r\n  return tickInfo[kHasTickScheduled] === 1;\r\n}\r\nfunction setHasTickScheduled(value) {\r\n  tickInfo[kHasTickScheduled] = value ? 1 : 0;\r\n}\r\n\r\nconst queue = new FixedQueue();\r\n\r\n// Should be in sync with RunNextTicksNative in node_task_queue.cc\r\nfunction runNextTicks() {\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    runMicrotasks();\r\n  if (!hasTickScheduled() && !hasRejectionToWarn())\r\n    return;\r\n\r\n  processTicksAndRejections();\r\n}\r\n\r\nfunction processTicksAndRejections() {\r\n  let tock;\r\n  do {\r\n    while (tock = queue.shift()) {\r\n      const asyncId = tock[async_id_symbol];\r\n      emitBefore(asyncId, tock[trigger_async_id_symbol]);\r\n\r\n      try {\r\n        const callback = tock.callback;\r\n        if (tock.args === undefined) {\r\n          callback();\r\n        } else {\r\n          const args = tock.args;\r\n          switch (args.length) {\r\n            case 1: callback(args[0]); break;\r\n            case 2: callback(args[0], args[1]); break;\r\n            case 3: callback(args[0], args[1], args[2]); break;\r\n            case 4: callback(args[0], args[1], args[2], args[3]); break;\r\n            default: callback(...args);\r\n          }\r\n        }\r\n      } finally {\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n    runMicrotasks();\r\n  } while (!queue.isEmpty() || processPromiseRejections());\r\n  setHasTickScheduled(false);\r\n  setHasRejectionToWarn(false);\r\n}\r\n\r\n// `nextTick()` will not enqueue any callback when the process is about to\r\n// exit since the callback would not have a chance to be executed.\r\nfunction nextTick(callback) {\r\n  if (typeof callback !== 'function')\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n\r\n  if (process._exiting)\r\n    return;\r\n\r\n  var args;\r\n  switch (arguments.length) {\r\n    case 1: break;\r\n    case 2: args = [arguments[1]]; break;\r\n    case 3: args = [arguments[1], arguments[2]]; break;\r\n    case 4: args = [arguments[1], arguments[2], arguments[3]]; break;\r\n    default:\r\n      args = new Array(arguments.length - 1);\r\n      for (var i = 1; i < arguments.length; i++)\r\n        args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (queue.isEmpty())\r\n    setHasTickScheduled(true);\r\n  const asyncId = newAsyncId();\r\n  const triggerAsyncId = getDefaultTriggerAsyncId();\r\n  const tickObject = {\r\n    [async_id_symbol]: asyncId,\r\n    [trigger_async_id_symbol]: triggerAsyncId,\r\n    callback,\r\n    args\r\n  };\r\n  if (initHooksExist())\r\n    emitInit(asyncId, 'TickObject', triggerAsyncId, tickObject);\r\n  queue.push(tickObject);\r\n}\r\n\r\nlet AsyncResource;\r\nconst defaultMicrotaskResourceOpts = { requireManualDestroy: true };\r\nfunction createMicrotaskResource() {\r\n  // Lazy load the async_hooks module\r\n  if (AsyncResource === undefined) {\r\n    AsyncResource = require('async_hooks').AsyncResource;\r\n  }\r\n  return new AsyncResource('Microtask', defaultMicrotaskResourceOpts);\r\n}\r\n\r\nfunction runMicrotask() {\r\n  this.runInAsyncScope(() => {\r\n    const callback = this.callback;\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      // runInAsyncScope() swallows the error so we need to catch\r\n      // it and handle it here.\r\n      triggerUncaughtException(error, false /* fromPromise */);\r\n    } finally {\r\n      this.emitDestroy();\r\n    }\r\n  });\r\n}\r\n\r\nfunction queueMicrotask(callback) {\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('callback', 'function', callback);\r\n  }\r\n\r\n  const asyncResource = createMicrotaskResource();\r\n  asyncResource.callback = callback;\r\n\r\n  enqueueMicrotask(FunctionPrototype.bind(runMicrotask, asyncResource));\r\n}\r\n\r\nmodule.exports = {\r\n  setupTaskQueue() {\r\n    // Sets the per-isolate promise rejection callback\r\n    listenForRejections();\r\n    // Sets the callback to be run in every tick.\r\n    setTickCallback(processTicksAndRejections);\r\n    return {\r\n      nextTick,\r\n      runNextTicks\r\n    };\r\n  },\r\n  queueMicrotask\r\n};\r\n"
  },
  {
    "name": "internal/process/promises.js",
    "source": "'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nconst {\r\n  tickInfo,\r\n  promiseRejectEvents: {\r\n    kPromiseRejectWithNoHandler,\r\n    kPromiseHandlerAddedAfterReject,\r\n    kPromiseResolveAfterResolved,\r\n    kPromiseRejectAfterResolved\r\n  },\r\n  setPromiseRejectCallback\r\n} = internalBinding('task_queue');\r\n\r\nconst {\r\n  noSideEffectsToString,\r\n  triggerUncaughtException\r\n} = internalBinding('errors');\r\n\r\n// *Must* match Environment::TickInfo::Fields in src/env.h.\r\nconst kHasRejectionToWarn = 1;\r\n\r\nconst maybeUnhandledPromises = new WeakMap();\r\nconst pendingUnhandledRejections = [];\r\nconst asyncHandledRejections = [];\r\nlet lastPromiseId = 0;\r\n\r\n// --unhandled-rejection=none:\r\n// Emit 'unhandledRejection', but do not emit any warning.\r\nconst kIgnoreUnhandledRejections = 0;\r\n// --unhandled-rejection=warn:\r\n// Emit 'unhandledRejection', then emit 'UnhandledPromiseRejectionWarning'.\r\nconst kAlwaysWarnUnhandledRejections = 1;\r\n// --unhandled-rejection=strict:\r\n// Emit 'uncaughtException'. If it's not handled, print the error to stderr\r\n// and exit the process.\r\n// Otherwise, emit 'unhandledRejection'. If 'unhandledRejection' is not\r\n// handled, emit 'UnhandledPromiseRejectionWarning'.\r\nconst kThrowUnhandledRejections = 2;\r\n// --unhandled-rejection is unset:\r\n// Emit 'unhandledRejection', if it's handled, emit\r\n// 'UnhandledPromiseRejectionWarning', then emit deprecation warning.\r\nconst kDefaultUnhandledRejections = 3;\r\n\r\nlet unhandledRejectionsMode;\r\n\r\nfunction setHasRejectionToWarn(value) {\r\n  tickInfo[kHasRejectionToWarn] = value ? 1 : 0;\r\n}\r\n\r\nfunction hasRejectionToWarn() {\r\n  return tickInfo[kHasRejectionToWarn] === 1;\r\n}\r\n\r\nfunction getUnhandledRejectionsMode() {\r\n  const { getOptionValue } = require('internal/options');\r\n  switch (getOptionValue('--unhandled-rejections')) {\r\n    case 'none':\r\n      return kIgnoreUnhandledRejections;\r\n    case 'warn':\r\n      return kAlwaysWarnUnhandledRejections;\r\n    case 'strict':\r\n      return kThrowUnhandledRejections;\r\n    default:\r\n      return kDefaultUnhandledRejections;\r\n  }\r\n}\r\n\r\nfunction promiseRejectHandler(type, promise, reason) {\r\n  if (unhandledRejectionsMode === undefined) {\r\n    unhandledRejectionsMode = getUnhandledRejectionsMode();\r\n  }\r\n  switch (type) {\r\n    case kPromiseRejectWithNoHandler:\r\n      unhandledRejection(promise, reason);\r\n      break;\r\n    case kPromiseHandlerAddedAfterReject:\r\n      handledRejection(promise);\r\n      break;\r\n    case kPromiseResolveAfterResolved:\r\n      resolveError('resolve', promise, reason);\r\n      break;\r\n    case kPromiseRejectAfterResolved:\r\n      resolveError('reject', promise, reason);\r\n      break;\r\n  }\r\n}\r\n\r\nfunction resolveError(type, promise, reason) {\r\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\r\n  // the executed promise.\r\n  process.nextTick(() => {\r\n    process.emit('multipleResolves', type, promise, reason);\r\n  });\r\n}\r\n\r\nfunction unhandledRejection(promise, reason) {\r\n  maybeUnhandledPromises.set(promise, {\r\n    reason,\r\n    uid: ++lastPromiseId,\r\n    warned: false\r\n  });\r\n  // This causes the promise to be referenced at least for one tick.\r\n  pendingUnhandledRejections.push(promise);\r\n  setHasRejectionToWarn(true);\r\n}\r\n\r\nfunction handledRejection(promise) {\r\n  const promiseInfo = maybeUnhandledPromises.get(promise);\r\n  if (promiseInfo !== undefined) {\r\n    maybeUnhandledPromises.delete(promise);\r\n    if (promiseInfo.warned) {\r\n      const { uid } = promiseInfo;\r\n      // Generate the warning object early to get a good stack trace.\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const warning = new Error('Promise rejection was handled ' +\r\n                                `asynchronously (rejection id: ${uid})`);\r\n      warning.name = 'PromiseRejectionHandledWarning';\r\n      warning.id = uid;\r\n      asyncHandledRejections.push({ promise, warning });\r\n      setHasRejectionToWarn(true);\r\n      return;\r\n    }\r\n  }\r\n  setHasRejectionToWarn(false);\r\n}\r\n\r\nconst unhandledRejectionErrName = 'UnhandledPromiseRejectionWarning';\r\nfunction emitUnhandledRejectionWarning(uid, reason) {\r\n  const warning = getErrorWithoutStack(\r\n    unhandledRejectionErrName,\r\n    'Unhandled promise rejection. This error originated either by ' +\r\n      'throwing inside of an async function without a catch block, ' +\r\n      'or by rejecting a promise which was not handled with .catch(). ' +\r\n      `(rejection id: ${uid})`\r\n  );\r\n  try {\r\n    if (reason instanceof Error) {\r\n      warning.stack = reason.stack;\r\n      process.emitWarning(reason.stack, unhandledRejectionErrName);\r\n    } else {\r\n      process.emitWarning(\r\n        noSideEffectsToString(reason), unhandledRejectionErrName);\r\n    }\r\n  } catch {}\r\n\r\n  process.emitWarning(warning);\r\n}\r\n\r\nlet deprecationWarned = false;\r\nfunction emitDeprecationWarning() {\r\n  process.emitWarning(\r\n    'Unhandled promise rejections are deprecated. In the future, ' +\r\n    'promise rejections that are not handled will terminate the ' +\r\n    'Node.js process with a non-zero exit code.',\r\n    'DeprecationWarning', 'DEP0018');\r\n}\r\n\r\n// If this method returns true, we've executed user code or triggered\r\n// a warning to be emitted which requires the microtask and next tick\r\n// queues to be drained again.\r\nfunction processPromiseRejections() {\r\n  let maybeScheduledTicksOrMicrotasks = asyncHandledRejections.length > 0;\r\n\r\n  while (asyncHandledRejections.length > 0) {\r\n    const { promise, warning } = asyncHandledRejections.shift();\r\n    if (!process.emit('rejectionHandled', promise)) {\r\n      process.emitWarning(warning);\r\n    }\r\n  }\r\n\r\n  let len = pendingUnhandledRejections.length;\r\n  while (len--) {\r\n    const promise = pendingUnhandledRejections.shift();\r\n    const promiseInfo = maybeUnhandledPromises.get(promise);\r\n    if (promiseInfo === undefined) {\r\n      continue;\r\n    }\r\n    promiseInfo.warned = true;\r\n    const { reason, uid } = promiseInfo;\r\n    switch (unhandledRejectionsMode) {\r\n      case kThrowUnhandledRejections: {\r\n        const err = reason instanceof Error ?\r\n          reason : generateUnhandledRejectionError(reason);\r\n        triggerUncaughtException(err, true /* fromPromise */);\r\n        const handled = process.emit('unhandledRejection', reason, promise);\r\n        if (!handled) emitUnhandledRejectionWarning(uid, reason);\r\n        break;\r\n      }\r\n      case kIgnoreUnhandledRejections: {\r\n        process.emit('unhandledRejection', reason, promise);\r\n        break;\r\n      }\r\n      case kAlwaysWarnUnhandledRejections: {\r\n        process.emit('unhandledRejection', reason, promise);\r\n        emitUnhandledRejectionWarning(uid, reason);\r\n        break;\r\n      }\r\n      case kDefaultUnhandledRejections: {\r\n        const handled = process.emit('unhandledRejection', reason, promise);\r\n        if (!handled) {\r\n          emitUnhandledRejectionWarning(uid, reason);\r\n          if (!deprecationWarned) {\r\n            emitDeprecationWarning();\r\n            deprecationWarned = true;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    maybeScheduledTicksOrMicrotasks = true;\r\n  }\r\n  return maybeScheduledTicksOrMicrotasks ||\r\n         pendingUnhandledRejections.length !== 0;\r\n}\r\n\r\nfunction getErrorWithoutStack(name, message) {\r\n  // Reset the stack to prevent any overhead.\r\n  const tmp = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = 0;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const err = new Error(message);\r\n  Error.stackTraceLimit = tmp;\r\n  Object.defineProperty(err, 'name', {\r\n    value: name,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true,\r\n  });\r\n  return err;\r\n}\r\n\r\nfunction generateUnhandledRejectionError(reason) {\r\n  const message =\r\n    'This error originated either by ' +\r\n    'throwing inside of an async function without a catch block, ' +\r\n    'or by rejecting a promise which was not handled with .catch().' +\r\n    ' The promise rejected with the reason ' +\r\n    `\"${noSideEffectsToString(reason)}\".`;\r\n\r\n  const err = getErrorWithoutStack('UnhandledPromiseRejection', message);\r\n  err.code = 'ERR_UNHANDLED_REJECTION';\r\n  return err;\r\n}\r\n\r\nfunction listenForRejections() {\r\n  setPromiseRejectCallback(promiseRejectHandler);\r\n}\r\n\r\nmodule.exports = {\r\n  hasRejectionToWarn,\r\n  setHasRejectionToWarn,\r\n  listenForRejections,\r\n  processPromiseRejections\r\n};\r\n"
  },
  {
    "name": "internal/fixed_queue.js",
    "source": "'use strict';\r\n\r\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\r\nconst kSize = 2048;\r\nconst kMask = kSize - 1;\r\n\r\n// The FixedQueue is implemented as a singly-linked list of fixed-size\r\n// circular buffers. It looks something like this:\r\n//\r\n//  head                                                       tail\r\n//    |                                                          |\r\n//    v                                                          v\r\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\r\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\r\n// +-----------+               +-----------+                  +-----------+\r\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |                  |  [empty]  |\r\n// |   item    |               |   item    |       bottom --> |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |    ...    |               |    ...    |                  |    ...    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |   item    |               |   item    |                  |   item    |\r\n// |  [empty]  | <-- top       |   item    |                  |   item    |\r\n// |  [empty]  |               |   item    |                  |   item    |\r\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\r\n// +-----------+               +-----------+                  +-----------+\r\n//\r\n// Or, if there is only one circular buffer, it looks something\r\n// like either of these:\r\n//\r\n//  head   tail                                 head   tail\r\n//    |     |                                     |     |\r\n//    v     v                                     v     v\r\n// +-----------+                               +-----------+\r\n// |  [null]   |                               |  [null]   |\r\n// +-----------+                               +-----------+\r\n// |  [empty]  |                               |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// |   item    | <-- bottom            top --> |  [empty]  |\r\n// |   item    |                               |  [empty]  |\r\n// |  [empty]  | <-- top            bottom --> |   item    |\r\n// |  [empty]  |                               |   item    |\r\n// +-----------+                               +-----------+\r\n//\r\n// Adding a value means moving `top` forward by one, removing means\r\n// moving `bottom` forward by one. After reaching the end, the queue\r\n// wraps around.\r\n//\r\n// When `top === bottom` the current queue is empty and when\r\n// `top + 1 === bottom` it's full. This wastes a single space of storage\r\n// but allows much quicker checks.\r\n\r\nconst FixedCircularBuffer = class FixedCircularBuffer {\r\n  constructor() {\r\n    this.bottom = 0;\r\n    this.top = 0;\r\n    this.list = new Array(kSize);\r\n    this.next = null;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.top === this.bottom;\r\n  }\r\n\r\n  isFull() {\r\n    return ((this.top + 1) & kMask) === this.bottom;\r\n  }\r\n\r\n  push(data) {\r\n    this.list[this.top] = data;\r\n    this.top = (this.top + 1) & kMask;\r\n  }\r\n\r\n  shift() {\r\n    const nextItem = this.list[this.bottom];\r\n    if (nextItem === undefined)\r\n      return null;\r\n    this.list[this.bottom] = undefined;\r\n    this.bottom = (this.bottom + 1) & kMask;\r\n    return nextItem;\r\n  }\r\n};\r\n\r\nmodule.exports = class FixedQueue {\r\n  constructor() {\r\n    this.head = this.tail = new FixedCircularBuffer();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.head.isEmpty();\r\n  }\r\n\r\n  push(data) {\r\n    if (this.head.isFull()) {\r\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\r\n      // and sets it as the new main queue.\r\n      this.head = this.head.next = new FixedCircularBuffer();\r\n    }\r\n    this.head.push(data);\r\n  }\r\n\r\n  shift() {\r\n    const tail = this.tail;\r\n    const next = tail.shift();\r\n    if (tail.isEmpty() && tail.next !== null) {\r\n      // If there is another queue, it forms the new tail.\r\n      this.tail = tail.next;\r\n    }\r\n    return next;\r\n  }\r\n};\r\n"
  },
  {
    "name": "internal/console/global.js",
    "source": "'use strict';\r\n\r\n// See https://console.spec.whatwg.org/#console-namespace\r\n// > For historical web-compatibility reasons, the namespace object\r\n// > for console must have as its [[Prototype]] an empty object,\r\n// > created as if by ObjectCreate(%ObjectPrototype%),\r\n// > instead of %ObjectPrototype%.\r\n\r\n// Since in Node.js, the Console constructor has been exposed through\r\n// require('console'), we need to keep the Console constructor but\r\n// we cannot actually use `new Console` to construct the global console.\r\n// Therefore, the console.Console.prototype is not\r\n// in the global console prototype chain anymore.\r\n\r\nconst { Object, Reflect } = primordials;\r\n\r\nconst {\r\n  Console,\r\n  kBindStreamsLazy,\r\n  kBindProperties\r\n} = require('internal/console/constructor');\r\n\r\nconst globalConsole = Object.create({});\r\n\r\n// Since Console is not on the prototype chain of the global console,\r\n// the symbol properties on Console.prototype have to be looked up from\r\n// the global console itself. In addition, we need to make the global\r\n// console a namespace by binding the console methods directly onto\r\n// the global console with the receiver fixed.\r\nfor (const prop of Reflect.ownKeys(Console.prototype)) {\r\n  if (prop === 'constructor') { continue; }\r\n  const desc = Reflect.getOwnPropertyDescriptor(Console.prototype, prop);\r\n  if (typeof desc.value === 'function') { // fix the receiver\r\n    desc.value = desc.value.bind(globalConsole);\r\n  }\r\n  Reflect.defineProperty(globalConsole, prop, desc);\r\n}\r\n\r\nglobalConsole[kBindStreamsLazy](process);\r\nglobalConsole[kBindProperties](true, 'auto');\r\n\r\n// This is a legacy feature - the Console constructor is exposed on\r\n// the global console instance.\r\nglobalConsole.Console = Console;\r\n\r\nmodule.exports = globalConsole;\r\n"
  },
  {
    "name": "internal/console/constructor.js",
    "source": "'use strict';\r\n\r\n// The Console constructor is not actually used to construct the global\r\n// console. It's exported for backwards compatibility.\r\n\r\nconst { Object, ObjectPrototype, Reflect } = primordials;\r\n\r\nconst { trace } = internalBinding('trace_events');\r\nconst {\r\n  isStackOverflowError,\r\n  codes: {\r\n    ERR_CONSOLE_WRITABLE_STREAM,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INCOMPATIBLE_OPTION_PAIR,\r\n  },\r\n} = require('internal/errors');\r\nconst { previewEntries } = internalBinding('util');\r\nconst { Buffer: { isBuffer } } = require('buffer');\r\nconst {\r\n  inspect,\r\n  formatWithOptions\r\n} = require('internal/util/inspect');\r\nconst {\r\n  isTypedArray, isSet, isMap, isSetIterator, isMapIterator,\r\n} = require('internal/util/types');\r\nconst kCounts = Symbol('counts');\r\n\r\nconst kTraceConsoleCategory = 'node,node.console';\r\nconst kTraceCount = 'C'.charCodeAt(0);\r\nconst kTraceBegin = 'b'.charCodeAt(0);\r\nconst kTraceEnd = 'e'.charCodeAt(0);\r\nconst kTraceInstant = 'n'.charCodeAt(0);\r\n\r\nconst {\r\n  isArray: ArrayIsArray,\r\n  from: ArrayFrom,\r\n} = Array;\r\n\r\n// Lazy loaded for startup performance.\r\nlet cliTable;\r\n\r\n// Track amount of indentation required via `console.group()`.\r\nconst kGroupIndent = Symbol('kGroupIndent');\r\nconst kFormatForStderr = Symbol('kFormatForStderr');\r\nconst kFormatForStdout = Symbol('kFormatForStdout');\r\nconst kGetInspectOptions = Symbol('kGetInspectOptions');\r\nconst kColorMode = Symbol('kColorMode');\r\nconst kIsConsole = Symbol('kIsConsole');\r\nconst kWriteToConsole = Symbol('kWriteToConsole');\r\nconst kBindProperties = Symbol('kBindProperties');\r\nconst kBindStreamsEager = Symbol('kBindStreamsEager');\r\nconst kBindStreamsLazy = Symbol('kBindStreamsLazy');\r\nconst kUseStdout = Symbol('kUseStdout');\r\nconst kUseStderr = Symbol('kUseStderr');\r\n\r\nconst optionsMap = new WeakMap();\r\n\r\nfunction Console(options /* or: stdout, stderr, ignoreErrors = true */) {\r\n  // We have to test new.target here to see if this function is called\r\n  // with new, because we need to define a custom instanceof to accommodate\r\n  // the global console.\r\n  if (!new.target) {\r\n    return new Console(...arguments);\r\n  }\r\n\r\n  if (!options || typeof options.write === 'function') {\r\n    options = {\r\n      stdout: options,\r\n      stderr: arguments[1],\r\n      ignoreErrors: arguments[2]\r\n    };\r\n  }\r\n\r\n  const {\r\n    stdout,\r\n    stderr = stdout,\r\n    ignoreErrors = true,\r\n    colorMode = 'auto',\r\n    inspectOptions\r\n  } = options;\r\n\r\n  if (!stdout || typeof stdout.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stdout');\r\n  }\r\n  if (!stderr || typeof stderr.write !== 'function') {\r\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stderr');\r\n  }\r\n\r\n  if (typeof colorMode !== 'boolean' && colorMode !== 'auto')\r\n    throw new ERR_INVALID_ARG_VALUE('colorMode', colorMode);\r\n\r\n  if (typeof inspectOptions === 'object' && inspectOptions !== null) {\r\n    if (inspectOptions.colors !== undefined &&\r\n        options.colorMode !== undefined) {\r\n      throw new ERR_INCOMPATIBLE_OPTION_PAIR(\r\n        'inspectOptions.color', 'colorMode');\r\n    }\r\n    optionsMap.set(this, inspectOptions);\r\n  } else if (inspectOptions !== undefined) {\r\n    throw new ERR_INVALID_ARG_TYPE('inspectOptions', 'object', inspectOptions);\r\n  }\r\n\r\n  // Bind the prototype functions to this Console instance\r\n  const keys = Object.keys(Console.prototype);\r\n  for (var v = 0; v < keys.length; v++) {\r\n    var k = keys[v];\r\n    // We have to bind the methods grabbed from the instance instead of from\r\n    // the prototype so that users extending the Console can override them\r\n    // from the prototype chain of the subclass.\r\n    this[k] = this[k].bind(this);\r\n  }\r\n\r\n  this[kBindStreamsEager](stdout, stderr);\r\n  this[kBindProperties](ignoreErrors, colorMode);\r\n}\r\n\r\nconst consolePropAttributes = {\r\n  writable: true,\r\n  enumerable: false,\r\n  configurable: true\r\n};\r\n\r\n// Fixup global.console instanceof global.console.Console\r\nObject.defineProperty(Console, Symbol.hasInstance, {\r\n  value(instance) {\r\n    return instance[kIsConsole];\r\n  }\r\n});\r\n\r\n// Eager version for the Console constructor\r\nConsole.prototype[kBindStreamsEager] = function(stdout, stderr) {\r\n  Object.defineProperties(this, {\r\n    '_stdout': { ...consolePropAttributes, value: stdout },\r\n    '_stderr': { ...consolePropAttributes, value: stderr }\r\n  });\r\n};\r\n\r\n// Lazily load the stdout and stderr from an object so we don't\r\n// create the stdio streams when they are not even accessed\r\nConsole.prototype[kBindStreamsLazy] = function(object) {\r\n  let stdout;\r\n  let stderr;\r\n  Object.defineProperties(this, {\r\n    '_stdout': {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get() {\r\n        if (!stdout) stdout = object.stdout;\r\n        return stdout;\r\n      },\r\n      set(value) { stdout = value; }\r\n    },\r\n    '_stderr': {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get() {\r\n        if (!stderr) { stderr = object.stderr; }\r\n        return stderr;\r\n      },\r\n      set(value) { stderr = value; }\r\n    }\r\n  });\r\n};\r\n\r\nConsole.prototype[kBindProperties] = function(ignoreErrors, colorMode) {\r\n  Object.defineProperties(this, {\r\n    '_stdoutErrorHandler': {\r\n      ...consolePropAttributes,\r\n      value: createWriteErrorHandler(this, kUseStdout)\r\n    },\r\n    '_stderrErrorHandler': {\r\n      ...consolePropAttributes,\r\n      value: createWriteErrorHandler(this, kUseStderr)\r\n    },\r\n    '_ignoreErrors': {\r\n      ...consolePropAttributes,\r\n      value: Boolean(ignoreErrors)\r\n    },\r\n    '_times': { ...consolePropAttributes, value: new Map() },\r\n    // Corresponds to https://console.spec.whatwg.org/#count-map\r\n    [kCounts]: { ...consolePropAttributes, value: new Map() },\r\n    [kColorMode]: { ...consolePropAttributes, value: colorMode },\r\n    [kIsConsole]: { ...consolePropAttributes, value: true },\r\n    [kGroupIndent]: { ...consolePropAttributes, value: '' }\r\n  });\r\n};\r\n\r\n// Make a function that can serve as the callback passed to `stream.write()`.\r\nfunction createWriteErrorHandler(instance, streamSymbol) {\r\n  return (err) => {\r\n    // This conditional evaluates to true if and only if there was an error\r\n    // that was not already emitted (which happens when the _write callback\r\n    // is invoked asynchronously).\r\n    const stream = streamSymbol === kUseStdout ?\r\n      instance._stdout : instance._stderr;\r\n    if (err !== null && !stream._writableState.errorEmitted) {\r\n      // If there was an error, it will be emitted on `stream` as\r\n      // an `error` event. Adding a `once` listener will keep that error\r\n      // from becoming an uncaught exception, but since the handler is\r\n      // removed after the event, non-console.* writes won't be affected.\r\n      // we are only adding noop if there is no one else listening for 'error'\r\n      if (stream.listenerCount('error') === 0) {\r\n        stream.on('error', noop);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nConsole.prototype[kWriteToConsole] = function(streamSymbol, string) {\r\n  const ignoreErrors = this._ignoreErrors;\r\n  const groupIndent = this[kGroupIndent];\r\n\r\n  const useStdout = streamSymbol === kUseStdout;\r\n  const stream = useStdout ? this._stdout : this._stderr;\r\n  const errorHandler = useStdout ?\r\n    this._stdoutErrorHandler : this._stderrErrorHandler;\r\n\r\n  if (groupIndent.length !== 0) {\r\n    if (string.includes('\\n')) {\r\n      string = string.replace(/\\n/g, `\\n${groupIndent}`);\r\n    }\r\n    string = groupIndent + string;\r\n  }\r\n  string += '\\n';\r\n\r\n  if (ignoreErrors === false) return stream.write(string);\r\n\r\n  // There may be an error occurring synchronously (e.g. for files or TTYs\r\n  // on POSIX systems) or asynchronously (e.g. pipes on POSIX systems), so\r\n  // handle both situations.\r\n  try {\r\n    // Add and later remove a noop error handler to catch synchronous errors.\r\n    if (stream.listenerCount('error') === 0)\r\n      stream.once('error', noop);\r\n\r\n    stream.write(string, errorHandler);\r\n  } catch (e) {\r\n    // Console is a debugging utility, so it swallowing errors is not desirable\r\n    // even in edge cases such as low stack space.\r\n    if (isStackOverflowError(e))\r\n      throw e;\r\n    // Sorry, there's no proper way to pass along the error here.\r\n  } finally {\r\n    stream.removeListener('error', noop);\r\n  }\r\n};\r\n\r\nconst kColorInspectOptions = { colors: true };\r\nconst kNoColorInspectOptions = {};\r\nConsole.prototype[kGetInspectOptions] = function(stream) {\r\n  let color = this[kColorMode];\r\n  if (color === 'auto') {\r\n    color = stream.isTTY && (\r\n      typeof stream.getColorDepth === 'function' ?\r\n        stream.getColorDepth() > 2 : true);\r\n  }\r\n\r\n  const options = optionsMap.get(this);\r\n  if (options) {\r\n    if (options.colors === undefined) {\r\n      options.colors = color;\r\n    }\r\n    return options;\r\n  }\r\n\r\n  return color ? kColorInspectOptions : kNoColorInspectOptions;\r\n};\r\n\r\nConsole.prototype[kFormatForStdout] = function(args) {\r\n  const opts = this[kGetInspectOptions](this._stdout);\r\n  return formatWithOptions(opts, ...args);\r\n};\r\n\r\nConsole.prototype[kFormatForStderr] = function(args) {\r\n  const opts = this[kGetInspectOptions](this._stderr);\r\n  return formatWithOptions(opts, ...args);\r\n};\r\n\r\nconst consoleMethods = {\r\n  log(...args) {\r\n    this[kWriteToConsole](kUseStdout, this[kFormatForStdout](args));\r\n  },\r\n\r\n\r\n  warn(...args) {\r\n    this[kWriteToConsole](kUseStderr, this[kFormatForStderr](args));\r\n  },\r\n\r\n\r\n  dir(object, options) {\r\n    this[kWriteToConsole](kUseStdout, inspect(object, {\r\n      customInspect: false,\r\n      ...this[kGetInspectOptions](this._stdout),\r\n      ...options\r\n    }));\r\n  },\r\n\r\n  time(label = 'default') {\r\n    // Coerces everything other than Symbol to a string\r\n    label = `${label}`;\r\n    if (this._times.has(label)) {\r\n      process.emitWarning(`Label '${label}' already exists for console.time()`);\r\n      return;\r\n    }\r\n    trace(kTraceBegin, kTraceConsoleCategory, `time::${label}`, 0);\r\n    this._times.set(label, process.hrtime());\r\n  },\r\n\r\n  timeEnd(label = 'default') {\r\n    // Coerces everything other than Symbol to a string\r\n    label = `${label}`;\r\n    const found = timeLogImpl(this, 'timeEnd', label);\r\n    trace(kTraceEnd, kTraceConsoleCategory, `time::${label}`, 0);\r\n    if (found) {\r\n      this._times.delete(label);\r\n    }\r\n  },\r\n\r\n  timeLog(label = 'default', ...data) {\r\n    // Coerces everything other than Symbol to a string\r\n    label = `${label}`;\r\n    timeLogImpl(this, 'timeLog', label, data);\r\n    trace(kTraceInstant, kTraceConsoleCategory, `time::${label}`, 0);\r\n  },\r\n\r\n  trace: function trace(...args) {\r\n    const err = {\r\n      name: 'Trace',\r\n      message: this[kFormatForStderr](args)\r\n    };\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(err, trace);\r\n    this.error(err.stack);\r\n  },\r\n\r\n  assert(expression, ...args) {\r\n    if (!expression) {\r\n      args[0] = `Assertion failed${args.length === 0 ? '' : `: ${args[0]}`}`;\r\n      this.warn(...args);  // The arguments will be formatted in warn() again\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#clear\r\n  clear() {\r\n    // It only makes sense to clear if _stdout is a TTY.\r\n    // Otherwise, do nothing.\r\n    if (this._stdout.isTTY && process.env.TERM !== 'dumb') {\r\n      // The require is here intentionally to avoid readline being\r\n      // required too early when console is first loaded.\r\n      const { cursorTo, clearScreenDown } = require('readline');\r\n      cursorTo(this._stdout, 0, 0);\r\n      clearScreenDown(this._stdout);\r\n    }\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#count\r\n  count(label = 'default') {\r\n    // Ensures that label is a string, and only things that can be\r\n    // coerced to strings. e.g. Symbol is not allowed\r\n    label = `${label}`;\r\n    const counts = this[kCounts];\r\n    let count = counts.get(label);\r\n    if (count === undefined)\r\n      count = 1;\r\n    else\r\n      count++;\r\n    counts.set(label, count);\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, count);\r\n    this.log(`${label}: ${count}`);\r\n  },\r\n\r\n  // Defined by: https://console.spec.whatwg.org/#countreset\r\n  countReset(label = 'default') {\r\n    const counts = this[kCounts];\r\n    if (!counts.has(label)) {\r\n      process.emitWarning(`Count for '${label}' does not exist`);\r\n      return;\r\n    }\r\n    trace(kTraceCount, kTraceConsoleCategory, `count::${label}`, 0, 0);\r\n    counts.delete(`${label}`);\r\n  },\r\n\r\n  group(...data) {\r\n    if (data.length > 0) {\r\n      this.log(...data);\r\n    }\r\n    this[kGroupIndent] += '  ';\r\n  },\r\n\r\n  groupEnd() {\r\n    this[kGroupIndent] =\r\n      this[kGroupIndent].slice(0, this[kGroupIndent].length - 2);\r\n  },\r\n\r\n  // https://console.spec.whatwg.org/#table\r\n  table(tabularData, properties) {\r\n    if (properties !== undefined && !ArrayIsArray(properties))\r\n      throw new ERR_INVALID_ARG_TYPE('properties', 'Array', properties);\r\n\r\n    if (tabularData === null || typeof tabularData !== 'object')\r\n      return this.log(tabularData);\r\n\r\n    if (cliTable === undefined) cliTable = require('internal/cli_table');\r\n    const final = (k, v) => this.log(cliTable(k, v));\r\n\r\n    const _inspect = (v) => {\r\n      const depth = v !== null &&\r\n                    typeof v === 'object' &&\r\n                    !isArray(v) &&\r\n                    Object.keys(v).length > 2 ? -1 : 0;\r\n      const opt = {\r\n        depth,\r\n        maxArrayLength: 3,\r\n        breakLength: Infinity,\r\n        ...this[kGetInspectOptions](this._stdout)\r\n      };\r\n      return inspect(v, opt);\r\n    };\r\n    const getIndexArray = (length) => ArrayFrom(\r\n      { length }, (_, i) => _inspect(i));\r\n\r\n    const mapIter = isMapIterator(tabularData);\r\n    let isKeyValue = false;\r\n    let i = 0;\r\n    if (mapIter) {\r\n      const res = previewEntries(tabularData, true);\r\n      tabularData = res[0];\r\n      isKeyValue = res[1];\r\n    }\r\n\r\n    if (isKeyValue || isMap(tabularData)) {\r\n      const keys = [];\r\n      const values = [];\r\n      let length = 0;\r\n      if (mapIter) {\r\n        for (; i < tabularData.length / 2; ++i) {\r\n          keys.push(_inspect(tabularData[i * 2]));\r\n          values.push(_inspect(tabularData[i * 2 + 1]));\r\n          length++;\r\n        }\r\n      } else {\r\n        for (const [k, v] of tabularData) {\r\n          keys.push(_inspect(k));\r\n          values.push(_inspect(v));\r\n          length++;\r\n        }\r\n      }\r\n      return final([\r\n        iterKey, keyKey, valuesKey\r\n      ], [\r\n        getIndexArray(length),\r\n        keys,\r\n        values,\r\n      ]);\r\n    }\r\n\r\n    const setIter = isSetIterator(tabularData);\r\n    if (setIter)\r\n      tabularData = previewEntries(tabularData);\r\n\r\n    const setlike = setIter || (mapIter && !isKeyValue) || isSet(tabularData);\r\n    if (setlike) {\r\n      const values = [];\r\n      let length = 0;\r\n      for (const v of tabularData) {\r\n        values.push(_inspect(v));\r\n        length++;\r\n      }\r\n      return final([iterKey, valuesKey], [getIndexArray(length), values]);\r\n    }\r\n\r\n    const map = {};\r\n    let hasPrimitives = false;\r\n    const valuesKeyArray = [];\r\n    const indexKeyArray = Object.keys(tabularData);\r\n\r\n    for (; i < indexKeyArray.length; i++) {\r\n      const item = tabularData[indexKeyArray[i]];\r\n      const primitive = item === null ||\r\n          (typeof item !== 'function' && typeof item !== 'object');\r\n      if (properties === undefined && primitive) {\r\n        hasPrimitives = true;\r\n        valuesKeyArray[i] = _inspect(item);\r\n      } else {\r\n        const keys = properties || Object.keys(item);\r\n        for (const key of keys) {\r\n          if (map[key] === undefined)\r\n            map[key] = [];\r\n          if ((primitive && properties) ||\r\n               !ObjectPrototype.hasOwnProperty(item, key))\r\n            map[key][i] = '';\r\n          else\r\n            map[key][i] = _inspect(item[key]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const keys = Object.keys(map);\r\n    const values = Object.values(map);\r\n    if (hasPrimitives) {\r\n      keys.push(valuesKey);\r\n      values.push(valuesKeyArray);\r\n    }\r\n    keys.unshift(indexKey);\r\n    values.unshift(indexKeyArray);\r\n\r\n    return final(keys, values);\r\n  },\r\n};\r\n\r\n// Returns true if label was found\r\nfunction timeLogImpl(self, name, label, data) {\r\n  const time = self._times.get(label);\r\n  if (time === undefined) {\r\n    process.emitWarning(`No such label '${label}' for console.${name}()`);\r\n    return false;\r\n  }\r\n  const duration = process.hrtime(time);\r\n  const ms = duration[0] * 1000 + duration[1] / 1e6;\r\n  if (data === undefined) {\r\n    self.log('%s: %sms', label, ms.toFixed(3));\r\n  } else {\r\n    self.log('%s: %sms', label, ms.toFixed(3), ...data);\r\n  }\r\n  return true;\r\n}\r\n\r\nconst keyKey = 'Key';\r\nconst valuesKey = 'Values';\r\nconst indexKey = '(index)';\r\nconst iterKey = '(iteration index)';\r\n\r\nconst isArray = (v) => ArrayIsArray(v) || isTypedArray(v) || isBuffer(v);\r\n\r\nfunction noop() {}\r\n\r\nfor (const method of Reflect.ownKeys(consoleMethods))\r\n  Console.prototype[method] = consoleMethods[method];\r\n\r\nConsole.prototype.debug = Console.prototype.log;\r\nConsole.prototype.info = Console.prototype.log;\r\nConsole.prototype.dirxml = Console.prototype.log;\r\nConsole.prototype.error = Console.prototype.warn;\r\nConsole.prototype.groupCollapsed = Console.prototype.group;\r\n\r\nmodule.exports = {\r\n  Console,\r\n  kBindStreamsLazy,\r\n  kBindProperties\r\n};\r\n"
  },
  {
    "name": "internal/util/inspector.js",
    "source": "'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nlet session;\r\nfunction sendInspectorCommand(cb, onError) {\r\n  const { hasInspector } = internalBinding('config');\r\n  if (!hasInspector) return onError();\r\n  const inspector = require('inspector');\r\n  if (session === undefined) session = new inspector.Session();\r\n  try {\r\n    session.connect();\r\n    try {\r\n      return cb(session);\r\n    } finally {\r\n      session.disconnect();\r\n    }\r\n  } catch {\r\n    return onError();\r\n  }\r\n}\r\n\r\n// Create a special require function for the inspector command line API\r\nfunction installConsoleExtensions(commandLineApi) {\r\n  if (commandLineApi.require) { return; }\r\n  const { tryGetCwd } = require('internal/process/execution');\r\n  const CJSModule = require('internal/modules/cjs/loader');\r\n  const { makeRequireFunction } = require('internal/modules/cjs/helpers');\r\n  const consoleAPIModule = new CJSModule('<inspector console>');\r\n  const cwd = tryGetCwd();\r\n  consoleAPIModule.paths =\r\n      CJSModule._nodeModulePaths(cwd).concat(CJSModule.globalPaths);\r\n  commandLineApi.require = makeRequireFunction(consoleAPIModule);\r\n}\r\n\r\n// Wrap a console implemented by Node.js with features from the VM inspector\r\nfunction wrapConsole(consoleFromNode, consoleFromVM) {\r\n  const { consoleCall } = internalBinding('inspector');\r\n  for (const key of Object.keys(consoleFromVM)) {\r\n    // If global console has the same method as inspector console,\r\n    // then wrap these two methods into one. Native wrapper will preserve\r\n    // the original stack.\r\n    if (consoleFromNode.hasOwnProperty(key)) {\r\n      consoleFromNode[key] = consoleCall.bind(consoleFromNode,\r\n                                              consoleFromVM[key],\r\n                                              consoleFromNode[key]);\r\n    } else {\r\n      // Add additional console APIs from the inspector\r\n      consoleFromNode[key] = consoleFromVM[key];\r\n    }\r\n  }\r\n}\r\n\r\n// Stores the console from VM, should be set during bootstrap.\r\nlet consoleFromVM;\r\nmodule.exports = {\r\n  installConsoleExtensions,\r\n  sendInspectorCommand,\r\n  wrapConsole,\r\n  get consoleFromVM() {\r\n    return consoleFromVM;\r\n  },\r\n  set consoleFromVM(val) {\r\n    consoleFromVM = val;\r\n  }\r\n};\r\n"
  },
  {
    "name": "internal/url.js",
    "source": "'use strict';\r\n\r\nconst { Object, Reflect } = primordials;\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nconst {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable\r\n} = require('internal/querystring');\r\n\r\nconst { getConstructorOf, removeColors } = require('internal/util');\r\nconst {\r\n  ERR_ARG_NOT_ITERABLE,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_CALLBACK,\r\n  ERR_INVALID_FILE_URL_HOST,\r\n  ERR_INVALID_FILE_URL_PATH,\r\n  ERR_INVALID_THIS,\r\n  ERR_INVALID_TUPLE,\r\n  ERR_INVALID_URL,\r\n  ERR_INVALID_URL_SCHEME,\r\n  ERR_MISSING_ARGS\r\n} = require('internal/errors').codes;\r\nconst {\r\n  CHAR_AMPERSAND,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_EQUAL,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_PERCENT,\r\n  CHAR_PLUS\r\n} = require('internal/constants');\r\nconst path = require('path');\r\n\r\n// Lazy loaded for startup performance.\r\nlet querystring;\r\n\r\nconst { platform } = process;\r\nconst isWindows = platform === 'win32';\r\n\r\nconst {\r\n  domainToASCII: _domainToASCII,\r\n  domainToUnicode: _domainToUnicode,\r\n  encodeAuth,\r\n  toUSVString: _toUSVString,\r\n  parse,\r\n  setURLConstructor,\r\n  URL_FLAGS_CANNOT_BE_BASE,\r\n  URL_FLAGS_HAS_FRAGMENT,\r\n  URL_FLAGS_HAS_HOST,\r\n  URL_FLAGS_HAS_PASSWORD,\r\n  URL_FLAGS_HAS_PATH,\r\n  URL_FLAGS_HAS_QUERY,\r\n  URL_FLAGS_HAS_USERNAME,\r\n  URL_FLAGS_IS_DEFAULT_SCHEME_PORT,\r\n  URL_FLAGS_SPECIAL,\r\n  kFragment,\r\n  kHost,\r\n  kHostname,\r\n  kPathStart,\r\n  kPort,\r\n  kQuery,\r\n  kSchemeStart\r\n} = internalBinding('url');\r\n\r\nconst context = Symbol('context');\r\nconst cannotBeBase = Symbol('cannot-be-base');\r\nconst cannotHaveUsernamePasswordPort =\r\n    Symbol('cannot-have-username-password-port');\r\nconst special = Symbol('special');\r\nconst searchParams = Symbol('query');\r\nconst kFormat = Symbol('format');\r\n\r\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\r\nconst IteratorPrototype = Object.getPrototypeOf(\r\n  Object.getPrototypeOf([][Symbol.iterator]())\r\n);\r\n\r\nconst unpairedSurrogateRe =\r\n    /(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])/;\r\nfunction toUSVString(val) {\r\n  const str = `${val}`;\r\n  // As of V8 5.5, `str.search()` (and `unpairedSurrogateRe[@@search]()`) are\r\n  // slower than `unpairedSurrogateRe.exec()`.\r\n  const match = unpairedSurrogateRe.exec(str);\r\n  if (!match)\r\n    return str;\r\n  return _toUSVString(str, match.index);\r\n}\r\n\r\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin-opaque\r\nconst kOpaqueOrigin = 'null';\r\n\r\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#ascii-serialisation-of-an-origin\r\nfunction serializeTupleOrigin(scheme, host, port) {\r\n  return `${scheme}//${host}${port === null ? '' : `:${port}`}`;\r\n}\r\n\r\n// This class provides the internal state of a URL object. An instance of this\r\n// class is stored in every URL object and is accessed internally by setters\r\n// and getters. It roughly corresponds to the concept of a URL record in the\r\n// URL Standard, with a few differences. It is also the object transported to\r\n// the C++ binding.\r\n// Refs: https://url.spec.whatwg.org/#concept-url\r\nclass URLContext {\r\n  constructor() {\r\n    this.flags = 0;\r\n    this.scheme = ':';\r\n    this.username = '';\r\n    this.password = '';\r\n    this.host = null;\r\n    this.port = null;\r\n    this.path = [];\r\n    this.query = null;\r\n    this.fragment = null;\r\n  }\r\n}\r\n\r\nclass URLSearchParams {\r\n  // URL Standard says the default value is '', but as undefined and '' have\r\n  // the same result, undefined is used to prevent unnecessary parsing.\r\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\r\n  // accordance with Web IDL spec.\r\n  constructor(init = undefined) {\r\n    if (init === null || init === undefined) {\r\n      this[searchParams] = [];\r\n    } else if (typeof init === 'object' || typeof init === 'function') {\r\n      const method = init[Symbol.iterator];\r\n      if (method === this[Symbol.iterator]) {\r\n        // While the spec does not have this branch, we can use it as a\r\n        // shortcut to avoid having to go through the costly generic iterator.\r\n        const childParams = init[searchParams];\r\n        this[searchParams] = childParams.slice();\r\n      } else if (method !== null && method !== undefined) {\r\n        if (typeof method !== 'function') {\r\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\r\n        }\r\n\r\n        // Sequence<sequence<USVString>>\r\n        // Note: per spec we have to first exhaust the lists then process them\r\n        const pairs = [];\r\n        for (const pair of init) {\r\n          if ((typeof pair !== 'object' && typeof pair !== 'function') ||\r\n              pair === null ||\r\n              typeof pair[Symbol.iterator] !== 'function') {\r\n            throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n          }\r\n          const convertedPair = [];\r\n          for (const element of pair)\r\n            convertedPair.push(toUSVString(element));\r\n          pairs.push(convertedPair);\r\n        }\r\n\r\n        this[searchParams] = [];\r\n        for (const pair of pairs) {\r\n          if (pair.length !== 2) {\r\n            throw new ERR_INVALID_TUPLE('Each query pair', '[name, value]');\r\n          }\r\n          this[searchParams].push(pair[0], pair[1]);\r\n        }\r\n      } else {\r\n        // Record<USVString, USVString>\r\n        // Need to use reflection APIs for full spec compliance.\r\n        this[searchParams] = [];\r\n        const keys = Reflect.ownKeys(init);\r\n        for (var i = 0; i < keys.length; i++) {\r\n          const key = keys[i];\r\n          const desc = Reflect.getOwnPropertyDescriptor(init, key);\r\n          if (desc !== undefined && desc.enumerable) {\r\n            const typedKey = toUSVString(key);\r\n            const typedValue = toUSVString(init[key]);\r\n            this[searchParams].push(typedKey, typedValue);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // USVString\r\n      init = toUSVString(init);\r\n      if (init[0] === '?') init = init.slice(1);\r\n      initSearchParams(this, init);\r\n    }\r\n\r\n    // \"associated url object\"\r\n    this[context] = null;\r\n  }\r\n\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const separator = ', ';\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const innerInspect = (v) => inspect(v, innerOpts);\r\n\r\n    const list = this[searchParams];\r\n    const output = [];\r\n    for (var i = 0; i < list.length; i += 2)\r\n      output.push(`${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\r\n\r\n    const length = output.reduce(\r\n      (prev, cur) => prev + removeColors(cur).length + separator.length,\r\n      -separator.length\r\n    );\r\n    if (length > ctx.breakLength) {\r\n      return `${this.constructor.name} {\\n  ${output.join(',\\n  ')} }`;\r\n    } else if (output.length) {\r\n      return `${this.constructor.name} { ${output.join(separator)} }`;\r\n    } else {\r\n      return `${this.constructor.name} {}`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction onParseComplete(flags, protocol, username, password,\r\n                         host, port, path, query, fragment) {\r\n  const ctx = this[context];\r\n  ctx.flags = flags;\r\n  ctx.scheme = protocol;\r\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\r\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\r\n  ctx.port = port;\r\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\r\n  ctx.query = query;\r\n  ctx.fragment = fragment;\r\n  ctx.host = host;\r\n  if (!this[searchParams]) { // Invoked from URL constructor\r\n    this[searchParams] = new URLSearchParams();\r\n    this[searchParams][context] = this;\r\n  }\r\n  initSearchParams(this[searchParams], query);\r\n}\r\n\r\nfunction onParseError(flags, input) {\r\n  throw new ERR_INVALID_URL(input);\r\n}\r\n\r\nfunction onParseProtocolComplete(flags, protocol, username, password,\r\n                                 host, port, path, query, fragment) {\r\n  const ctx = this[context];\r\n  if ((flags & URL_FLAGS_SPECIAL) !== 0) {\r\n    ctx.flags |= URL_FLAGS_SPECIAL;\r\n  } else {\r\n    ctx.flags &= ~URL_FLAGS_SPECIAL;\r\n  }\r\n  ctx.scheme = protocol;\r\n  ctx.port = port;\r\n}\r\n\r\nfunction onParseHostnameComplete(flags, protocol, username, password,\r\n                                 host, port, path, query, fragment) {\r\n  const ctx = this[context];\r\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\r\n    ctx.host = host;\r\n    ctx.flags |= URL_FLAGS_HAS_HOST;\r\n  } else {\r\n    ctx.host = null;\r\n    ctx.flags &= ~URL_FLAGS_HAS_HOST;\r\n  }\r\n}\r\n\r\nfunction onParsePortComplete(flags, protocol, username, password,\r\n                             host, port, path, query, fragment) {\r\n  this[context].port = port;\r\n}\r\n\r\nfunction onParseHostComplete(flags, protocol, username, password,\r\n                             host, port, path, query, fragment) {\r\n  onParseHostnameComplete.apply(this, arguments);\r\n  if (port !== null || ((flags & URL_FLAGS_IS_DEFAULT_SCHEME_PORT) !== 0))\r\n    onParsePortComplete.apply(this, arguments);\r\n}\r\n\r\nfunction onParsePathComplete(flags, protocol, username, password,\r\n                             host, port, path, query, fragment) {\r\n  const ctx = this[context];\r\n  if ((flags & URL_FLAGS_HAS_PATH) !== 0) {\r\n    ctx.path = path;\r\n    ctx.flags |= URL_FLAGS_HAS_PATH;\r\n  } else {\r\n    ctx.path = [];\r\n    ctx.flags &= ~URL_FLAGS_HAS_PATH;\r\n  }\r\n\r\n  // The C++ binding may set host to empty string.\r\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\r\n    ctx.host = host;\r\n    ctx.flags |= URL_FLAGS_HAS_HOST;\r\n  }\r\n}\r\n\r\nfunction onParseSearchComplete(flags, protocol, username, password,\r\n                               host, port, path, query, fragment) {\r\n  this[context].query = query;\r\n}\r\n\r\nfunction onParseHashComplete(flags, protocol, username, password,\r\n                             host, port, path, query, fragment) {\r\n  this[context].fragment = fragment;\r\n}\r\n\r\nclass URL {\r\n  constructor(input, base) {\r\n    // toUSVString is not needed.\r\n    input = `${input}`;\r\n    let base_context;\r\n    if (base !== undefined) {\r\n      base_context = new URL(base)[context];\r\n    }\r\n    this[context] = new URLContext();\r\n    parse(input, -1, base_context, undefined, onParseComplete.bind(this),\r\n          onParseError);\r\n  }\r\n\r\n  get [special]() {\r\n    return (this[context].flags & URL_FLAGS_SPECIAL) !== 0;\r\n  }\r\n\r\n  get [cannotBeBase]() {\r\n    return (this[context].flags & URL_FLAGS_CANNOT_BE_BASE) !== 0;\r\n  }\r\n\r\n  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port\r\n  get [cannotHaveUsernamePasswordPort]() {\r\n    const { host, scheme } = this[context];\r\n    return ((host == null || host === '') ||\r\n            this[cannotBeBase] ||\r\n            scheme === 'file:');\r\n  }\r\n\r\n  [inspect.custom](depth, opts) {\r\n    if (this == null ||\r\n        Object.getPrototypeOf(this[context]) !== URLContext.prototype) {\r\n      throw new ERR_INVALID_THIS('URL');\r\n    }\r\n\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n\r\n    const ctor = getConstructorOf(this);\r\n\r\n    const obj = Object.create({\r\n      constructor: ctor === null ? URL : ctor\r\n    });\r\n\r\n    obj.href = this.href;\r\n    obj.origin = this.origin;\r\n    obj.protocol = this.protocol;\r\n    obj.username = this.username;\r\n    obj.password = this.password;\r\n    obj.host = this.host;\r\n    obj.hostname = this.hostname;\r\n    obj.port = this.port;\r\n    obj.pathname = this.pathname;\r\n    obj.search = this.search;\r\n    obj.searchParams = this.searchParams;\r\n    obj.hash = this.hash;\r\n\r\n    if (opts.showHidden) {\r\n      obj.cannotBeBase = this[cannotBeBase];\r\n      obj.special = this[special];\r\n      obj[context] = this[context];\r\n    }\r\n\r\n    return inspect(obj, opts);\r\n  }\r\n}\r\n\r\nObject.defineProperties(URL.prototype, {\r\n  [kFormat]: {\r\n    enumerable: false,\r\n    configurable: false,\r\n    // eslint-disable-next-line func-name-matching\r\n    value: function format(options) {\r\n      if (options && typeof options !== 'object')\r\n        throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n      options = {\r\n        fragment: true,\r\n        unicode: false,\r\n        search: true,\r\n        auth: true,\r\n        ...options\r\n      };\r\n      const ctx = this[context];\r\n      var ret = ctx.scheme;\r\n      if (ctx.host !== null) {\r\n        ret += '//';\r\n        const has_username = ctx.username !== '';\r\n        const has_password = ctx.password !== '';\r\n        if (options.auth && (has_username || has_password)) {\r\n          if (has_username)\r\n            ret += ctx.username;\r\n          if (has_password)\r\n            ret += `:${ctx.password}`;\r\n          ret += '@';\r\n        }\r\n        ret += options.unicode ?\r\n          domainToUnicode(this.hostname) : this.hostname;\r\n        if (ctx.port !== null)\r\n          ret += `:${ctx.port}`;\r\n      } else if (ctx.scheme === 'file:') {\r\n        ret += '//';\r\n      }\r\n      if (this.pathname)\r\n        ret += this.pathname;\r\n      if (options.search && ctx.query !== null)\r\n        ret += `?${ctx.query}`;\r\n      if (options.fragment && ctx.fragment !== null)\r\n        ret += `#${ctx.fragment}`;\r\n      return ret;\r\n    }\r\n  },\r\n  [Symbol.toStringTag]: {\r\n    configurable: true,\r\n    value: 'URL'\r\n  },\r\n  toString: {\r\n    // https://heycam.github.io/webidl/#es-stringifier\r\n    writable: true,\r\n    enumerable: true,\r\n    configurable: true,\r\n    // eslint-disable-next-line func-name-matching\r\n    value: function toString() {\r\n      return this[kFormat]({});\r\n    }\r\n  },\r\n  href: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[kFormat]({});\r\n    },\r\n    set(input) {\r\n      // toUSVString is not needed.\r\n      input = `${input}`;\r\n      parse(input, -1, undefined, undefined, onParseComplete.bind(this),\r\n            onParseError);\r\n    }\r\n  },\r\n  origin: {  // readonly\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      // Refs: https://url.spec.whatwg.org/#concept-url-origin\r\n      const ctx = this[context];\r\n      switch (ctx.scheme) {\r\n        case 'blob:':\r\n          if (ctx.path.length > 0) {\r\n            try {\r\n              return (new URL(ctx.path[0])).origin;\r\n            } catch {\r\n              // Fall through... do nothing\r\n            }\r\n          }\r\n          return kOpaqueOrigin;\r\n        case 'ftp:':\r\n        case 'gopher:':\r\n        case 'http:':\r\n        case 'https:':\r\n        case 'ws:':\r\n        case 'wss:':\r\n          return serializeTupleOrigin(ctx.scheme, ctx.host, ctx.port);\r\n      }\r\n      return kOpaqueOrigin;\r\n    }\r\n  },\r\n  protocol: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[context].scheme;\r\n    },\r\n    set(scheme) {\r\n      // toUSVString is not needed.\r\n      scheme = `${scheme}`;\r\n      if (scheme.length === 0)\r\n        return;\r\n      const ctx = this[context];\r\n      if (ctx.scheme === 'file:' &&\r\n          (ctx.host === '' || ctx.host === null)) {\r\n        return;\r\n      }\r\n      parse(scheme, kSchemeStart, null, ctx,\r\n            onParseProtocolComplete.bind(this));\r\n    }\r\n  },\r\n  username: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[context].username;\r\n    },\r\n    set(username) {\r\n      // toUSVString is not needed.\r\n      username = `${username}`;\r\n      if (this[cannotHaveUsernamePasswordPort])\r\n        return;\r\n      const ctx = this[context];\r\n      if (username === '') {\r\n        ctx.username = '';\r\n        ctx.flags &= ~URL_FLAGS_HAS_USERNAME;\r\n        return;\r\n      }\r\n      ctx.username = encodeAuth(username);\r\n      ctx.flags |= URL_FLAGS_HAS_USERNAME;\r\n    }\r\n  },\r\n  password: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[context].password;\r\n    },\r\n    set(password) {\r\n      // toUSVString is not needed.\r\n      password = `${password}`;\r\n      if (this[cannotHaveUsernamePasswordPort])\r\n        return;\r\n      const ctx = this[context];\r\n      if (password === '') {\r\n        ctx.password = '';\r\n        ctx.flags &= ~URL_FLAGS_HAS_PASSWORD;\r\n        return;\r\n      }\r\n      ctx.password = encodeAuth(password);\r\n      ctx.flags |= URL_FLAGS_HAS_PASSWORD;\r\n    }\r\n  },\r\n  host: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const ctx = this[context];\r\n      var ret = ctx.host || '';\r\n      if (ctx.port !== null)\r\n        ret += `:${ctx.port}`;\r\n      return ret;\r\n    },\r\n    set(host) {\r\n      const ctx = this[context];\r\n      // toUSVString is not needed.\r\n      host = `${host}`;\r\n      if (this[cannotBeBase]) {\r\n        // Cannot set the host if cannot-be-base is set\r\n        return;\r\n      }\r\n      parse(host, kHost, null, ctx, onParseHostComplete.bind(this));\r\n    }\r\n  },\r\n  hostname: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[context].host || '';\r\n    },\r\n    set(host) {\r\n      const ctx = this[context];\r\n      // toUSVString is not needed.\r\n      host = `${host}`;\r\n      if (this[cannotBeBase]) {\r\n        // Cannot set the host if cannot-be-base is set\r\n        return;\r\n      }\r\n      parse(host, kHostname, null, ctx, onParseHostnameComplete.bind(this));\r\n    }\r\n  },\r\n  port: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const port = this[context].port;\r\n      return port === null ? '' : String(port);\r\n    },\r\n    set(port) {\r\n      // toUSVString is not needed.\r\n      port = `${port}`;\r\n      if (this[cannotHaveUsernamePasswordPort])\r\n        return;\r\n      const ctx = this[context];\r\n      if (port === '') {\r\n        ctx.port = null;\r\n        return;\r\n      }\r\n      parse(port, kPort, null, ctx, onParsePortComplete.bind(this));\r\n    }\r\n  },\r\n  pathname: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const ctx = this[context];\r\n      if (this[cannotBeBase])\r\n        return ctx.path[0];\r\n      if (ctx.path.length === 0)\r\n        return '';\r\n      return `/${ctx.path.join('/')}`;\r\n    },\r\n    set(path) {\r\n      // toUSVString is not needed.\r\n      path = `${path}`;\r\n      if (this[cannotBeBase])\r\n        return;\r\n      parse(path, kPathStart, null, this[context],\r\n            onParsePathComplete.bind(this));\r\n    }\r\n  },\r\n  search: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const { query } = this[context];\r\n      if (query === null || query === '')\r\n        return '';\r\n      return `?${query}`;\r\n    },\r\n    set(search) {\r\n      const ctx = this[context];\r\n      search = toUSVString(search);\r\n      if (search === '') {\r\n        ctx.query = null;\r\n        ctx.flags &= ~URL_FLAGS_HAS_QUERY;\r\n      } else {\r\n        if (search[0] === '?') search = search.slice(1);\r\n        ctx.query = '';\r\n        ctx.flags |= URL_FLAGS_HAS_QUERY;\r\n        if (search) {\r\n          parse(search, kQuery, null, ctx, onParseSearchComplete.bind(this));\r\n        }\r\n      }\r\n      initSearchParams(this[searchParams], search);\r\n    }\r\n  },\r\n  searchParams: {  // readonly\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return this[searchParams];\r\n    }\r\n  },\r\n  hash: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      const { fragment } = this[context];\r\n      if (fragment === null || fragment === '')\r\n        return '';\r\n      return `#${fragment}`;\r\n    },\r\n    set(hash) {\r\n      const ctx = this[context];\r\n      // toUSVString is not needed.\r\n      hash = `${hash}`;\r\n      if (!hash) {\r\n        ctx.fragment = null;\r\n        ctx.flags &= ~URL_FLAGS_HAS_FRAGMENT;\r\n        return;\r\n      }\r\n      if (hash[0] === '#') hash = hash.slice(1);\r\n      ctx.fragment = '';\r\n      ctx.flags |= URL_FLAGS_HAS_FRAGMENT;\r\n      parse(hash, kFragment, null, ctx, onParseHashComplete.bind(this));\r\n    }\r\n  },\r\n  toJSON: {\r\n    writable: true,\r\n    enumerable: true,\r\n    configurable: true,\r\n    // eslint-disable-next-line func-name-matching\r\n    value: function toJSON() {\r\n      return this[kFormat]({});\r\n    }\r\n  }\r\n});\r\n\r\nfunction update(url, params) {\r\n  if (!url)\r\n    return;\r\n\r\n  const ctx = url[context];\r\n  const serializedParams = params.toString();\r\n  if (serializedParams) {\r\n    ctx.query = serializedParams;\r\n    ctx.flags |= URL_FLAGS_HAS_QUERY;\r\n  } else {\r\n    ctx.query = null;\r\n    ctx.flags &= ~URL_FLAGS_HAS_QUERY;\r\n  }\r\n}\r\n\r\nfunction initSearchParams(url, init) {\r\n  if (!init) {\r\n    url[searchParams] = [];\r\n    return;\r\n  }\r\n  url[searchParams] = parseParams(init);\r\n}\r\n\r\n// application/x-www-form-urlencoded parser\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\r\nfunction parseParams(qs) {\r\n  const out = [];\r\n  var pairStart = 0;\r\n  var lastPos = 0;\r\n  var seenSep = false;\r\n  var buf = '';\r\n  var encoded = false;\r\n  var encodeCheck = 0;\r\n  var i;\r\n  for (i = 0; i < qs.length; ++i) {\r\n    const code = qs.charCodeAt(i);\r\n\r\n    // Try matching key/value pair separator\r\n    if (code === CHAR_AMPERSAND) {\r\n      if (pairStart === i) {\r\n        // We saw an empty substring between pair separators\r\n        lastPos = pairStart = i + 1;\r\n        continue;\r\n      }\r\n\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      // If `buf` is the key, add an empty value.\r\n      if (!seenSep)\r\n        out.push('');\r\n\r\n      seenSep = false;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = pairStart = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Try matching key/value separator (e.g. '=') if we haven't already\r\n    if (!seenSep && code === CHAR_EQUAL) {\r\n      // Key/value separator match!\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      if (encoded)\r\n        buf = querystring.unescape(buf);\r\n      out.push(buf);\r\n\r\n      seenSep = true;\r\n      buf = '';\r\n      encoded = false;\r\n      encodeCheck = 0;\r\n      lastPos = i + 1;\r\n      continue;\r\n    }\r\n\r\n    // Handle + and percent decoding.\r\n    if (code === CHAR_PLUS) {\r\n      if (lastPos < i)\r\n        buf += qs.slice(lastPos, i);\r\n      buf += ' ';\r\n      lastPos = i + 1;\r\n    } else if (!encoded) {\r\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\r\n      // calls to string decoding functions\r\n      if (code === CHAR_PERCENT) {\r\n        encodeCheck = 1;\r\n      } else if (encodeCheck > 0) {\r\n        if (isHexTable[code] === 1) {\r\n          if (++encodeCheck === 3) {\r\n            querystring = require('querystring');\r\n            encoded = true;\r\n          }\r\n        } else {\r\n          encodeCheck = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deal with any leftover key or value data\r\n\r\n  // There is a trailing &. No more processing is needed.\r\n  if (pairStart === i)\r\n    return out;\r\n\r\n  if (lastPos < i)\r\n    buf += qs.slice(lastPos, i);\r\n  if (encoded)\r\n    buf = querystring.unescape(buf);\r\n  out.push(buf);\r\n\r\n  // If `buf` is the key, add an empty value.\r\n  if (!seenSep)\r\n    out.push('');\r\n\r\n  return out;\r\n}\r\n\r\n// Adapted from querystring's implementation.\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\r\nconst noEscape = [\r\n/*\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\r\n*/\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0  // 0x70 - 0x7F\r\n];\r\n\r\n// Special version of hexTable that uses `+` for U+0020 SPACE.\r\nconst paramHexTable = hexTable.slice();\r\nparamHexTable[0x20] = '+';\r\n\r\n// application/x-www-form-urlencoded serializer\r\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\r\nfunction serializeParams(array) {\r\n  const len = array.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  const firstEncodedParam = encodeStr(array[0], noEscape, paramHexTable);\r\n  const firstEncodedValue = encodeStr(array[1], noEscape, paramHexTable);\r\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\r\n\r\n  for (var i = 2; i < len; i += 2) {\r\n    const encodedParam = encodeStr(array[i], noEscape, paramHexTable);\r\n    const encodedValue = encodeStr(array[i + 1], noEscape, paramHexTable);\r\n    output += `&${encodedParam}=${encodedValue}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// Mainly to mitigate func-name-matching ESLint rule\r\nfunction defineIDLClass(proto, classStr, obj) {\r\n  // https://heycam.github.io/webidl/#dfn-class-string\r\n  Object.defineProperty(proto, Symbol.toStringTag, {\r\n    writable: false,\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: classStr\r\n  });\r\n\r\n  // https://heycam.github.io/webidl/#es-operations\r\n  for (const key of Object.keys(obj)) {\r\n    Object.defineProperty(proto, key, {\r\n      writable: true,\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: obj[key]\r\n    });\r\n  }\r\n  for (const key of Object.getOwnPropertySymbols(obj)) {\r\n    Object.defineProperty(proto, key, {\r\n      writable: true,\r\n      enumerable: false,\r\n      configurable: true,\r\n      value: obj[key]\r\n    });\r\n  }\r\n}\r\n\r\n// for merge sort\r\nfunction merge(out, start, mid, end, lBuffer, rBuffer) {\r\n  const sizeLeft = mid - start;\r\n  const sizeRight = end - mid;\r\n  var l, r, o;\r\n\r\n  for (l = 0; l < sizeLeft; l++)\r\n    lBuffer[l] = out[start + l];\r\n  for (r = 0; r < sizeRight; r++)\r\n    rBuffer[r] = out[mid + r];\r\n\r\n  l = 0;\r\n  r = 0;\r\n  o = start;\r\n  while (l < sizeLeft && r < sizeRight) {\r\n    if (lBuffer[l] <= rBuffer[r]) {\r\n      out[o++] = lBuffer[l++];\r\n      out[o++] = lBuffer[l++];\r\n    } else {\r\n      out[o++] = rBuffer[r++];\r\n      out[o++] = rBuffer[r++];\r\n    }\r\n  }\r\n  while (l < sizeLeft)\r\n    out[o++] = lBuffer[l++];\r\n  while (r < sizeRight)\r\n    out[o++] = rBuffer[r++];\r\n}\r\n\r\ndefineIDLClass(URLSearchParams.prototype, 'URLSearchParams', {\r\n  append(name, value) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    name = toUSVString(name);\r\n    value = toUSVString(value);\r\n    this[searchParams].push(name, value);\r\n    update(this[context], this);\r\n  },\r\n\r\n  delete(name) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this[searchParams];\r\n    name = toUSVString(name);\r\n    for (var i = 0; i < list.length;) {\r\n      const cur = list[i];\r\n      if (cur === name) {\r\n        list.splice(i, 2);\r\n      } else {\r\n        i += 2;\r\n      }\r\n    }\r\n    update(this[context], this);\r\n  },\r\n\r\n  get(name) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this[searchParams];\r\n    name = toUSVString(name);\r\n    for (var i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        return list[i + 1];\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n\r\n  getAll(name) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this[searchParams];\r\n    const values = [];\r\n    name = toUSVString(name);\r\n    for (var i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        values.push(list[i + 1]);\r\n      }\r\n    }\r\n    return values;\r\n  },\r\n\r\n  has(name) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 1) {\r\n      throw new ERR_MISSING_ARGS('name');\r\n    }\r\n\r\n    const list = this[searchParams];\r\n    name = toUSVString(name);\r\n    for (var i = 0; i < list.length; i += 2) {\r\n      if (list[i] === name) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n\r\n  set(name, value) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (arguments.length < 2) {\r\n      throw new ERR_MISSING_ARGS('name', 'value');\r\n    }\r\n\r\n    const list = this[searchParams];\r\n    name = toUSVString(name);\r\n    value = toUSVString(value);\r\n\r\n    // If there are any name-value pairs whose name is `name`, in `list`, set\r\n    // the value of the first such name-value pair to `value` and remove the\r\n    // others.\r\n    var found = false;\r\n    for (var i = 0; i < list.length;) {\r\n      const cur = list[i];\r\n      if (cur === name) {\r\n        if (!found) {\r\n          list[i + 1] = value;\r\n          found = true;\r\n          i += 2;\r\n        } else {\r\n          list.splice(i, 2);\r\n        }\r\n      } else {\r\n        i += 2;\r\n      }\r\n    }\r\n\r\n    // Otherwise, append a new name-value pair whose name is `name` and value\r\n    // is `value`, to `list`.\r\n    if (!found) {\r\n      list.push(name, value);\r\n    }\r\n\r\n    update(this[context], this);\r\n  },\r\n\r\n  sort() {\r\n    const a = this[searchParams];\r\n    const len = a.length;\r\n\r\n    if (len <= 2) {\r\n      // Nothing needs to be done.\r\n    } else if (len < 100) {\r\n      // 100 is found through testing.\r\n      // Simple stable in-place insertion sort\r\n      // Derived from v8/src/js/array.js\r\n      for (var i = 2; i < len; i += 2) {\r\n        var curKey = a[i];\r\n        var curVal = a[i + 1];\r\n        var j;\r\n        for (j = i - 2; j >= 0; j -= 2) {\r\n          if (a[j] > curKey) {\r\n            a[j + 2] = a[j];\r\n            a[j + 3] = a[j + 1];\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        a[j + 2] = curKey;\r\n        a[j + 3] = curVal;\r\n      }\r\n    } else {\r\n      // Bottom-up iterative stable merge sort\r\n      const lBuffer = new Array(len);\r\n      const rBuffer = new Array(len);\r\n      for (var step = 2; step < len; step *= 2) {\r\n        for (var start = 0; start < len - 2; start += 2 * step) {\r\n          var mid = start + step;\r\n          var end = mid + step;\r\n          end = end < len ? end : len;\r\n          if (mid > end)\r\n            continue;\r\n          merge(a, start, mid, end, lBuffer, rBuffer);\r\n        }\r\n      }\r\n    }\r\n\r\n    update(this[context], this);\r\n  },\r\n\r\n  // https://heycam.github.io/webidl/#es-iterators\r\n  // Define entries here rather than [Symbol.iterator] as the function name\r\n  // must be set to `entries`.\r\n  entries() {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n\r\n    return createSearchParamsIterator(this, 'key+value');\r\n  },\r\n\r\n  forEach(callback, thisArg = undefined) {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n    if (typeof callback !== 'function') {\r\n      throw new ERR_INVALID_CALLBACK(callback);\r\n    }\r\n\r\n    let list = this[searchParams];\r\n\r\n    var i = 0;\r\n    while (i < list.length) {\r\n      const key = list[i];\r\n      const value = list[i + 1];\r\n      callback.call(thisArg, value, key, this);\r\n      // In case the URL object's `search` is updated\r\n      list = this[searchParams];\r\n      i += 2;\r\n    }\r\n  },\r\n\r\n  // https://heycam.github.io/webidl/#es-iterable\r\n  keys() {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n\r\n    return createSearchParamsIterator(this, 'key');\r\n  },\r\n\r\n  values() {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n\r\n    return createSearchParamsIterator(this, 'value');\r\n  },\r\n\r\n  // https://heycam.github.io/webidl/#es-stringifier\r\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\r\n  toString() {\r\n    if (!this || !this[searchParams] || this[searchParams][searchParams]) {\r\n      throw new ERR_INVALID_THIS('URLSearchParams');\r\n    }\r\n\r\n    return serializeParams(this[searchParams]);\r\n  }\r\n});\r\n\r\n// https://heycam.github.io/webidl/#es-iterable-entries\r\nObject.defineProperty(URLSearchParams.prototype, Symbol.iterator, {\r\n  writable: true,\r\n  configurable: true,\r\n  value: URLSearchParams.prototype.entries\r\n});\r\n\r\n// https://heycam.github.io/webidl/#dfn-default-iterator-object\r\nfunction createSearchParamsIterator(target, kind) {\r\n  const iterator = Object.create(URLSearchParamsIteratorPrototype);\r\n  iterator[context] = {\r\n    target,\r\n    kind,\r\n    index: 0\r\n  };\r\n  return iterator;\r\n}\r\n\r\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\r\nconst URLSearchParamsIteratorPrototype = Object.create(IteratorPrototype);\r\n\r\ndefineIDLClass(URLSearchParamsIteratorPrototype, 'URLSearchParams Iterator', {\r\n  next() {\r\n    if (!this ||\r\n        Object.getPrototypeOf(this) !== URLSearchParamsIteratorPrototype) {\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n    }\r\n\r\n    const {\r\n      target,\r\n      kind,\r\n      index\r\n    } = this[context];\r\n    const values = target[searchParams];\r\n    const len = values.length;\r\n    if (index >= len) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n\r\n    const name = values[index];\r\n    const value = values[index + 1];\r\n    this[context].index = index + 2;\r\n\r\n    let result;\r\n    if (kind === 'key') {\r\n      result = name;\r\n    } else if (kind === 'value') {\r\n      result = value;\r\n    } else {\r\n      result = [name, value];\r\n    }\r\n\r\n    return {\r\n      value: result,\r\n      done: false\r\n    };\r\n  },\r\n  [inspect.custom](recurseTimes, ctx) {\r\n    if (this == null || this[context] == null || this[context].target == null)\r\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\r\n\r\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\r\n      return ctx.stylize('[Object]', 'special');\r\n\r\n    const innerOpts = { ...ctx };\r\n    if (recurseTimes !== null) {\r\n      innerOpts.depth = recurseTimes - 1;\r\n    }\r\n    const {\r\n      target,\r\n      kind,\r\n      index\r\n    } = this[context];\r\n    const output = target[searchParams].slice(index).reduce((prev, cur, i) => {\r\n      const key = i % 2 === 0;\r\n      if (kind === 'key' && key) {\r\n        prev.push(cur);\r\n      } else if (kind === 'value' && !key) {\r\n        prev.push(cur);\r\n      } else if (kind === 'key+value' && !key) {\r\n        prev.push([target[searchParams][index + i - 1], cur]);\r\n      }\r\n      return prev;\r\n    }, []);\r\n    const breakLn = inspect(output, innerOpts).includes('\\n');\r\n    const outputStrs = output.map((p) => inspect(p, innerOpts));\r\n    let outputStr;\r\n    if (breakLn) {\r\n      outputStr = `\\n  ${outputStrs.join(',\\n  ')}`;\r\n    } else {\r\n      outputStr = ` ${outputStrs.join(', ')}`;\r\n    }\r\n    return `${this[Symbol.toStringTag]} {${outputStr} }`;\r\n  }\r\n});\r\n\r\nfunction domainToASCII(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // toUSVString is not needed.\r\n  return _domainToASCII(`${domain}`);\r\n}\r\n\r\nfunction domainToUnicode(domain) {\r\n  if (arguments.length < 1)\r\n    throw new ERR_MISSING_ARGS('domain');\r\n\r\n  // toUSVString is not needed.\r\n  return _domainToUnicode(`${domain}`);\r\n}\r\n\r\n// Utility function that converts a URL object into an ordinary\r\n// options object as expected by the http.request and https.request\r\n// APIs.\r\nfunction urlToOptions(url) {\r\n  const options = {\r\n    protocol: url.protocol,\r\n    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ?\r\n      url.hostname.slice(1, -1) :\r\n      url.hostname,\r\n    hash: url.hash,\r\n    search: url.search,\r\n    pathname: url.pathname,\r\n    path: `${url.pathname || ''}${url.search || ''}`,\r\n    href: url.href\r\n  };\r\n  if (url.port !== '') {\r\n    options.port = Number(url.port);\r\n  }\r\n  if (url.username || url.password) {\r\n    options.auth = `${url.username}:${url.password}`;\r\n  }\r\n  return options;\r\n}\r\n\r\nconst forwardSlashRegEx = /\\//g;\r\n\r\nfunction getPathFromURLWin32(url) {\r\n  const hostname = url.hostname;\r\n  var pathname = url.pathname;\r\n  for (var n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      var third = pathname.codePointAt(n + 2) | 0x20;\r\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\r\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded \\\\ or / characters'\r\n        );\r\n      }\r\n    }\r\n  }\r\n  pathname = pathname.replace(forwardSlashRegEx, '\\\\');\r\n  pathname = decodeURIComponent(pathname);\r\n  if (hostname !== '') {\r\n    // If hostname is set, then we have a UNC path\r\n    // Pass the hostname through domainToUnicode just in case\r\n    // it is an IDN using punycode encoding. We do not need to worry\r\n    // about percent encoding because the URL parser will have\r\n    // already taken care of that for us. Note that this only\r\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\r\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\r\n  } else {\r\n    // Otherwise, it's a local path that requires a drive letter\r\n    var letter = pathname.codePointAt(1) | 0x20;\r\n    var sep = pathname[2];\r\n    if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\r\n        (sep !== ':')) {\r\n      throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\r\n    }\r\n    return pathname.slice(1);\r\n  }\r\n}\r\n\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\r\n  }\r\n  const pathname = url.pathname;\r\n  for (var n = 0; n < pathname.length; n++) {\r\n    if (pathname[n] === '%') {\r\n      var third = pathname.codePointAt(n + 2) | 0x20;\r\n      if (pathname[n + 1] === '2' && third === 102) {\r\n        throw new ERR_INVALID_FILE_URL_PATH(\r\n          'must not include encoded / characters'\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return decodeURIComponent(pathname);\r\n}\r\n\r\nfunction fileURLToPath(path) {\r\n  if (typeof path === 'string')\r\n    path = new URL(path);\r\n  else if (path == null || !path[searchParams] ||\r\n           !path[searchParams][searchParams])\r\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);\r\n  if (path.protocol !== 'file:')\r\n    throw new ERR_INVALID_URL_SCHEME('file');\r\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\r\n}\r\n\r\n// The following characters are percent-encoded when converting from file path\r\n// to URL:\r\n// - %: The percent character is the only character not encoded by the\r\n//        `pathname` setter.\r\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\r\n//      character but the `pathname` setters replaces it by a forward slash.\r\n// - LF: The newline character is stripped out by the `pathname` setter.\r\n//       (See whatwg/url#419)\r\n// - CR: The carriage return character is also stripped out by the `pathname`\r\n//       setter.\r\n// - TAB: The tab character is also stripped out by the `pathname` setter.\r\nconst percentRegEx = /%/g;\r\nconst backslashRegEx = /\\\\/g;\r\nconst newlineRegEx = /\\n/g;\r\nconst carriageReturnRegEx = /\\r/g;\r\nconst tabRegEx = /\\t/g;\r\nfunction pathToFileURL(filepath) {\r\n  let resolved = path.resolve(filepath);\r\n  // path.resolve strips trailing slashes so we must add them back\r\n  const filePathLast = filepath.charCodeAt(filepath.length - 1);\r\n  if ((filePathLast === CHAR_FORWARD_SLASH ||\r\n       (isWindows && filePathLast === CHAR_BACKWARD_SLASH)) &&\r\n      resolved[resolved.length - 1] !== path.sep)\r\n    resolved += '/';\r\n  const outURL = new URL('file://');\r\n  if (resolved.includes('%'))\r\n    resolved = resolved.replace(percentRegEx, '%25');\r\n  // In posix, \"/\" is a valid character in paths\r\n  if (!isWindows && resolved.includes('\\\\'))\r\n    resolved = resolved.replace(backslashRegEx, '%5C');\r\n  if (resolved.includes('\\n'))\r\n    resolved = resolved.replace(newlineRegEx, '%0A');\r\n  if (resolved.includes('\\r'))\r\n    resolved = resolved.replace(carriageReturnRegEx, '%0D');\r\n  if (resolved.includes('\\t'))\r\n    resolved = resolved.replace(tabRegEx, '%09');\r\n  outURL.pathname = resolved;\r\n  return outURL;\r\n}\r\n\r\nfunction toPathIfFileURL(fileURLOrPath) {\r\n  if (fileURLOrPath == null || !fileURLOrPath[searchParams] ||\r\n      !fileURLOrPath[searchParams][searchParams])\r\n    return fileURLOrPath;\r\n  return fileURLToPath(fileURLOrPath);\r\n}\r\n\r\nfunction constructUrl(flags, protocol, username, password,\r\n                      host, port, path, query, fragment) {\r\n  const ctx = new URLContext();\r\n  ctx.flags = flags;\r\n  ctx.scheme = protocol;\r\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\r\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\r\n  ctx.port = port;\r\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\r\n  ctx.query = query;\r\n  ctx.fragment = fragment;\r\n  ctx.host = host;\r\n\r\n  const url = Object.create(URL.prototype);\r\n  url[context] = ctx;\r\n  const params = new URLSearchParams();\r\n  url[searchParams] = params;\r\n  params[context] = url;\r\n  initSearchParams(params, query);\r\n  return url;\r\n}\r\nsetURLConstructor(constructUrl);\r\n\r\nmodule.exports = {\r\n  toUSVString,\r\n  fileURLToPath,\r\n  pathToFileURL,\r\n  toPathIfFileURL,\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  urlToOptions,\r\n  formatSymbol: kFormat,\r\n  searchParamsSymbol: searchParams,\r\n  encodeStr\r\n};\r\n"
  },
  {
    "name": "internal/querystring.js",
    "source": "'use strict';\r\n\r\nconst { ERR_INVALID_URI } = require('internal/errors').codes;\r\n\r\nconst hexTable = new Array(256);\r\nfor (var i = 0; i < 256; ++i)\r\n  hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();\r\n\r\nconst isHexTable = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 64 - 79\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 80 - 95\r\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 96 - 111\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 112 - 127\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 128 ...\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // ... 256\r\n];\r\n\r\nfunction encodeStr(str, noEscapeTable, hexTable) {\r\n  const len = str.length;\r\n  if (len === 0)\r\n    return '';\r\n\r\n  var out = '';\r\n  var lastPos = 0;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    var c = str.charCodeAt(i);\r\n\r\n    // ASCII\r\n    if (c < 0x80) {\r\n      if (noEscapeTable[c] === 1)\r\n        continue;\r\n      if (lastPos < i)\r\n        out += str.slice(lastPos, i);\r\n      lastPos = i + 1;\r\n      out += hexTable[c];\r\n      continue;\r\n    }\r\n\r\n    if (lastPos < i)\r\n      out += str.slice(lastPos, i);\r\n\r\n    // Multi-byte characters ...\r\n    if (c < 0x800) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xC0 | (c >> 6)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    if (c < 0xD800 || c >= 0xE000) {\r\n      lastPos = i + 1;\r\n      out += hexTable[0xE0 | (c >> 12)] +\r\n             hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n             hexTable[0x80 | (c & 0x3F)];\r\n      continue;\r\n    }\r\n    // Surrogate pair\r\n    ++i;\r\n\r\n    // This branch should never happen because all URLSearchParams entries\r\n    // should already be converted to USVString. But, included for\r\n    // completion's sake anyway.\r\n    if (i >= len)\r\n      throw new ERR_INVALID_URI();\r\n\r\n    var c2 = str.charCodeAt(i) & 0x3FF;\r\n\r\n    lastPos = i + 1;\r\n    c = 0x10000 + (((c & 0x3FF) << 10) | c2);\r\n    out += hexTable[0xF0 | (c >> 18)] +\r\n           hexTable[0x80 | ((c >> 12) & 0x3F)] +\r\n           hexTable[0x80 | ((c >> 6) & 0x3F)] +\r\n           hexTable[0x80 | (c & 0x3F)];\r\n  }\r\n  if (lastPos === 0)\r\n    return str;\r\n  if (lastPos < len)\r\n    return out + str.slice(lastPos);\r\n  return out;\r\n}\r\n\r\nmodule.exports = {\r\n  encodeStr,\r\n  hexTable,\r\n  isHexTable\r\n};\r\n"
  },
  {
    "name": "internal/constants.js",
    "source": "'use strict';\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nmodule.exports = {\r\n  // Alphabet chars.\r\n  CHAR_UPPERCASE_A: 65, /* A */\r\n  CHAR_LOWERCASE_A: 97, /* a */\r\n  CHAR_UPPERCASE_Z: 90, /* Z */\r\n  CHAR_LOWERCASE_Z: 122, /* z */\r\n\r\n  // Non-alphabetic chars.\r\n  CHAR_DOT: 46, /* . */\r\n  CHAR_FORWARD_SLASH: 47, /* / */\r\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\r\n  CHAR_VERTICAL_LINE: 124, /* | */\r\n  CHAR_COLON: 58, /* : */\r\n  CHAR_QUESTION_MARK: 63, /* ? */\r\n  CHAR_UNDERSCORE: 95, /* _ */\r\n  CHAR_LINE_FEED: 10, /* \\n */\r\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\r\n  CHAR_TAB: 9, /* \\t */\r\n  CHAR_FORM_FEED: 12, /* \\f */\r\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\r\n  CHAR_HASH: 35, /* # */\r\n  CHAR_SPACE: 32, /*   */\r\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\r\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\r\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\r\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\r\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\r\n  CHAR_LEFT_CURLY_BRACKET: 123, /* { */\r\n  CHAR_RIGHT_CURLY_BRACKET: 125, /* } */\r\n  CHAR_HYPHEN_MINUS: 45, /* - */\r\n  CHAR_PLUS: 43, /* + */\r\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\r\n  CHAR_SINGLE_QUOTE: 39, /* ' */\r\n  CHAR_PERCENT: 37, /* % */\r\n  CHAR_SEMICOLON: 59, /* ; */\r\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\r\n  CHAR_GRAVE_ACCENT: 96, /* ` */\r\n  CHAR_AT: 64, /* @ */\r\n  CHAR_AMPERSAND: 38, /* & */\r\n  CHAR_EQUAL: 61, /* = */\r\n\r\n  // Digits\r\n  CHAR_0: 48, /* 0 */\r\n  CHAR_9: 57, /* 9 */\r\n\r\n  EOL: isWindows ? '\\r\\n' : '\\n'\r\n};\r\n"
  },
  {
    "name": "path.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\r\nconst {\r\n  CHAR_UPPERCASE_A,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_UPPERCASE_Z,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_DOT,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON,\r\n  CHAR_QUESTION_MARK,\r\n} = require('internal/constants');\r\nconst { validateString } = require('internal/validators');\r\n\r\nfunction isPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n}\r\n\r\nfunction isPosixPathSeparator(code) {\r\n  return code === CHAR_FORWARD_SLASH;\r\n}\r\n\r\nfunction isWindowsDeviceRoot(code) {\r\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\r\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\r\n}\r\n\r\n// Resolves . and .. elements in a path with directory names\r\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\r\n  let res = '';\r\n  let lastSegmentLength = 0;\r\n  let lastSlash = -1;\r\n  let dots = 0;\r\n  let code = 0;\r\n  for (var i = 0; i <= path.length; ++i) {\r\n    if (i < path.length)\r\n      code = path.charCodeAt(i);\r\n    else if (isPathSeparator(code))\r\n      break;\r\n    else\r\n      code = CHAR_FORWARD_SLASH;\r\n\r\n    if (isPathSeparator(code)) {\r\n      if (lastSlash === i - 1 || dots === 1) {\r\n        // NOOP\r\n      } else if (dots === 2) {\r\n        if (res.length < 2 || lastSegmentLength !== 2 ||\r\n            res.charCodeAt(res.length - 1) !== CHAR_DOT ||\r\n            res.charCodeAt(res.length - 2) !== CHAR_DOT) {\r\n          if (res.length > 2) {\r\n            const lastSlashIndex = res.lastIndexOf(separator);\r\n            if (lastSlashIndex === -1) {\r\n              res = '';\r\n              lastSegmentLength = 0;\r\n            } else {\r\n              res = res.slice(0, lastSlashIndex);\r\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\r\n            }\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          } else if (res.length !== 0) {\r\n            res = '';\r\n            lastSegmentLength = 0;\r\n            lastSlash = i;\r\n            dots = 0;\r\n            continue;\r\n          }\r\n        }\r\n        if (allowAboveRoot) {\r\n          res += res.length > 0 ? `${separator}..` : '..';\r\n          lastSegmentLength = 2;\r\n        }\r\n      } else {\r\n        if (res.length > 0)\r\n          res += `${separator}${path.slice(lastSlash + 1, i)}`;\r\n        else\r\n          res = path.slice(lastSlash + 1, i);\r\n        lastSegmentLength = i - lastSlash - 1;\r\n      }\r\n      lastSlash = i;\r\n      dots = 0;\r\n    } else if (code === CHAR_DOT && dots !== -1) {\r\n      ++dots;\r\n    } else {\r\n      dots = -1;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction _format(sep, pathObject) {\r\n  if (pathObject === null || typeof pathObject !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('pathObject', 'Object', pathObject);\r\n  }\r\n  const dir = pathObject.dir || pathObject.root;\r\n  const base = pathObject.base ||\r\n    `${pathObject.name || ''}${pathObject.ext || ''}`;\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\r\n}\r\n\r\nconst win32 = {\r\n  // path.resolve([from ...], to)\r\n  resolve(...args) {\r\n    let resolvedDevice = '';\r\n    let resolvedTail = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (var i = args.length - 1; i >= -1; i--) {\r\n      let path;\r\n      if (i >= 0) {\r\n        path = args[i];\r\n        validateString(path, 'path');\r\n\r\n        // Skip empty entries\r\n        if (path.length === 0) {\r\n          continue;\r\n        }\r\n      } else if (resolvedDevice.length === 0) {\r\n        path = process.cwd();\r\n      } else {\r\n        // Windows has the concept of drive-specific current working\r\n        // directories. If we've resolved a drive letter but not yet an\r\n        // absolute path, get cwd for that drive, or the process cwd if\r\n        // the drive cwd is not available. We're sure the device is not\r\n        // a UNC path at this points, because UNC paths are always absolute.\r\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\r\n\r\n        // Verify that a cwd was found and that it actually points\r\n        // to our drive. If not, default to the drive's root.\r\n        if (path === undefined ||\r\n            (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\r\n            path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\r\n          path = `${resolvedDevice}\\\\`;\r\n        }\r\n      }\r\n\r\n      const len = path.length;\r\n      let rootEnd = 0;\r\n      let device = '';\r\n      let isAbsolute = false;\r\n      const code = path.charCodeAt(0);\r\n\r\n      // Try to match a root\r\n      if (len === 1) {\r\n        if (isPathSeparator(code)) {\r\n          // `path` contains just a path separator\r\n          rootEnd = 1;\r\n          isAbsolute = true;\r\n        }\r\n      } else if (isPathSeparator(code)) {\r\n        // Possible UNC root\r\n\r\n        // If we started with a separator, we know we at least have an\r\n        // absolute path of some kind (UNC or otherwise)\r\n        isAbsolute = true;\r\n\r\n        if (isPathSeparator(path.charCodeAt(1))) {\r\n          // Matched double path separator at beginning\r\n          let j = 2;\r\n          let last = j;\r\n          // Match 1 or more non-path separators\r\n          while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            const firstPart = path.slice(last, j);\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more path separators\r\n            while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n              j++;\r\n            }\r\n            if (j < len && j !== last) {\r\n              // Matched!\r\n              last = j;\r\n              // Match 1 or more non-path separators\r\n              while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                j++;\r\n              }\r\n              if (j === len || j !== last) {\r\n                // We matched a UNC root\r\n                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\r\n                rootEnd = j;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          rootEnd = 1;\r\n        }\r\n      } else if (isWindowsDeviceRoot(code) &&\r\n                  path.charCodeAt(1) === CHAR_COLON) {\r\n        // Possible device root\r\n        device = path.slice(0, 2);\r\n        rootEnd = 2;\r\n        if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\r\n          // Treat separator following drive name as an absolute path\r\n          // indicator\r\n          isAbsolute = true;\r\n          rootEnd = 3;\r\n        }\r\n      }\r\n\r\n      if (device.length > 0) {\r\n        if (resolvedDevice.length > 0) {\r\n          if (device.toLowerCase() !== resolvedDevice.toLowerCase())\r\n            // This path points to another device so it is not applicable\r\n            continue;\r\n        } else {\r\n          resolvedDevice = device;\r\n        }\r\n      }\r\n\r\n      if (resolvedAbsolute) {\r\n        if (resolvedDevice.length > 0)\r\n          break;\r\n      } else {\r\n        resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\r\n        resolvedAbsolute = isAbsolute;\r\n        if (isAbsolute && resolvedDevice.length > 0) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path,\r\n    // but handle relative paths to be safe (might happen when process.cwd()\r\n    // fails)\r\n\r\n    // Normalize the tail path\r\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\r\n                                   isPathSeparator);\r\n\r\n    return resolvedAbsolute ?\r\n      `${resolvedDevice}\\\\${resolvedTail}` :\r\n      `${resolvedDevice}${resolvedTail}` || '.';\r\n  },\r\n\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = 0;\r\n    let device;\r\n    let isAbsolute = false;\r\n    const code = path.charCodeAt(0);\r\n\r\n    // Try to match a root\r\n    if (len === 1) {\r\n      // `path` contains just a single char, exit early to avoid\r\n      // unnecessary work\r\n      return isPosixPathSeparator(code) ? '\\\\' : path;\r\n    }\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      // If we started with a separator, we know we at least have an absolute\r\n      // path of some kind (UNC or otherwise)\r\n      isAbsolute = true;\r\n\r\n      if (isPathSeparator(path.charCodeAt(1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          const firstPart = path.slice(last, j);\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              // Return the normalized version of the UNC root since there\r\n              // is nothing left to process\r\n              return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\r\n              rootEnd = j;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        rootEnd = 1;\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n      // Possible device root\r\n      device = path.slice(0, 2);\r\n      rootEnd = 2;\r\n      if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\r\n        // Treat separator following drive name as an absolute path\r\n        // indicator\r\n        isAbsolute = true;\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n\r\n    let tail = rootEnd < len ?\r\n      normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) :\r\n      '';\r\n    if (tail.length === 0 && !isAbsolute)\r\n      tail = '.';\r\n    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1)))\r\n      tail += '\\\\';\r\n    if (device === undefined) {\r\n      return isAbsolute ? `\\\\${tail}` : tail;\r\n    }\r\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\r\n  },\r\n\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return false;\r\n\r\n    const code = path.charCodeAt(0);\r\n    return isPathSeparator(code) ||\r\n      // Possible device root\r\n      (len > 2 &&\r\n      isWindowsDeviceRoot(code) &&\r\n      path.charCodeAt(1) === CHAR_COLON &&\r\n      isPathSeparator(path.charCodeAt(2)));\r\n  },\r\n\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n\r\n    let joined;\r\n    let firstPart;\r\n    for (var i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = firstPart = arg;\r\n        else\r\n          joined += `\\\\${arg}`;\r\n      }\r\n    }\r\n\r\n    if (joined === undefined)\r\n      return '.';\r\n\r\n    // Make sure that the joined path doesn't start with two slashes, because\r\n    // normalize() will mistake it for an UNC path then.\r\n    //\r\n    // This step is skipped when it is very clear that the user actually\r\n    // intended to point at an UNC path. This is assumed when the first\r\n    // non-empty string arguments starts with exactly two slashes followed by\r\n    // at least one more non-slash character.\r\n    //\r\n    // Note that for normalize() to treat a path as an UNC path it needs to\r\n    // have at least 2 components, so we don't filter for that here.\r\n    // This means that the user can use join to construct UNC paths from\r\n    // a server name and a share name; for example:\r\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\r\n    let needsReplace = true;\r\n    let slashCount = 0;\r\n    if (isPathSeparator(firstPart.charCodeAt(0))) {\r\n      ++slashCount;\r\n      const firstLen = firstPart.length;\r\n      if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\r\n        ++slashCount;\r\n        if (firstLen > 2) {\r\n          if (isPathSeparator(firstPart.charCodeAt(2)))\r\n            ++slashCount;\r\n          else {\r\n            // We matched a UNC path in the first part\r\n            needsReplace = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (needsReplace) {\r\n      // Find any more consecutive slashes we need to replace\r\n      while (slashCount < joined.length &&\r\n             isPathSeparator(joined.charCodeAt(slashCount))) {\r\n        slashCount++;\r\n      }\r\n\r\n      // Replace the slashes if needed\r\n      if (slashCount >= 2)\r\n        joined = `\\\\${joined.slice(slashCount)}`;\r\n    }\r\n\r\n    return win32.normalize(joined);\r\n  },\r\n\r\n  // It will solve the relative path from `from` to `to`, for instance:\r\n  //  from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n  //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromOrig = win32.resolve(from);\r\n    const toOrig = win32.resolve(to);\r\n\r\n    if (fromOrig === toOrig)\r\n      return '';\r\n\r\n    from = fromOrig.toLowerCase();\r\n    to = toOrig.toLowerCase();\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim any leading backslashes\r\n    let fromStart = 0;\r\n    while (fromStart < from.length &&\r\n           from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\r\n      fromStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let fromEnd = from.length;\r\n    while (fromEnd - 1 > fromStart &&\r\n           from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n      fromEnd--;\r\n    }\r\n    const fromLen = fromEnd - fromStart;\r\n\r\n    // Trim any leading backslashes\r\n    let toStart = 0;\r\n    while (toStart < to.length &&\r\n           to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\r\n      toStart++;\r\n    }\r\n    // Trim trailing backslashes (applicable to UNC paths only)\r\n    let toEnd = to.length;\r\n    while (toEnd - 1 > toStart &&\r\n           to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n      toEnd--;\r\n    }\r\n    const toLen = toEnd - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = fromLen < toLen ? fromLen : toLen;\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = from.charCodeAt(fromStart + i);\r\n      if (fromCode !== to.charCodeAt(toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_BACKWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n\r\n    // We found a mismatch before the first common path separator was seen, so\r\n    // return the original `to`.\r\n    if (i !== length) {\r\n      if (lastCommonSep === -1)\r\n        return toOrig;\r\n    } else {\r\n      if (toLen > length) {\r\n        if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\r\n          return toOrig.slice(toStart + i + 1);\r\n        }\r\n        if (i === 2) {\r\n          // We get here if `from` is the device root.\r\n          // For example: from='C:\\\\'; to='C:\\\\foo'\r\n          return toOrig.slice(toStart + i);\r\n        }\r\n      }\r\n      if (fromLen > length) {\r\n        if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\r\n          lastCommonSep = i;\r\n        } else if (i === 2) {\r\n          // We get here if `to` is the device root.\r\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\r\n          lastCommonSep = 3;\r\n        }\r\n      }\r\n      if (lastCommonSep === -1)\r\n        lastCommonSep = 0;\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to` and\r\n    // `from`\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '\\\\..';\r\n      }\r\n    }\r\n\r\n    toStart += lastCommonSep;\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts\r\n    if (out.length > 0)\r\n      return `${out}${toOrig.slice(toStart, toEnd)}`;\r\n\r\n    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH)\r\n      ++toStart;\r\n    return toOrig.slice(toStart, toEnd);\r\n  },\r\n\r\n  toNamespacedPath(path) {\r\n    // Note: this will *probably* throw somewhere.\r\n    if (typeof path !== 'string')\r\n      return path;\r\n\r\n    if (path.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    const resolvedPath = win32.resolve(path);\r\n\r\n    if (resolvedPath.length <= 2)\r\n      return path;\r\n\r\n    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\r\n      // Possible UNC root\r\n      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\r\n        const code = resolvedPath.charCodeAt(2);\r\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\r\n          // Matched non-long UNC root, convert the path to a long UNC path\r\n          return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\r\n        }\r\n      }\r\n    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\r\n               resolvedPath.charCodeAt(1) === CHAR_COLON &&\r\n               resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\r\n      // Matched device root, convert the path to a long UNC path\r\n      return `\\\\\\\\?\\\\${resolvedPath}`;\r\n    }\r\n\r\n    return path;\r\n  },\r\n\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    const len = path.length;\r\n    if (len === 0)\r\n      return '.';\r\n    let rootEnd = -1;\r\n    let offset = 0;\r\n    const code = path.charCodeAt(0);\r\n\r\n    if (len === 1) {\r\n      // `path` contains just a path separator, exit early to avoid\r\n      // unnecessary work or a dot.\r\n      return isPathSeparator(code) ? path : '.';\r\n    }\r\n\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = offset = 1;\r\n\r\n      if (isPathSeparator(path.charCodeAt(1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              return path;\r\n            }\r\n            if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n\r\n              // Offset by 1 to include the separator after the UNC root to\r\n              // treat it as a \"normal root\" on top of a (UNC) root\r\n              rootEnd = offset = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    // Possible device root\r\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n      rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\r\n      offset = rootEnd;\r\n    }\r\n\r\n    let end = -1;\r\n    let matchedSlash = true;\r\n    for (var i = len - 1; i >= offset; --i) {\r\n      if (isPathSeparator(path.charCodeAt(i))) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1) {\r\n      if (rootEnd === -1)\r\n        return '.';\r\n\r\n      end = rootEnd;\r\n    }\r\n    return path.slice(0, end);\r\n  },\r\n\r\n  basename(path, ext) {\r\n    if (ext !== undefined)\r\n      validateString(ext, 'ext');\r\n    validateString(path, 'path');\r\n    var start = 0;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    var i;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n    if (path.length >= 2 &&\r\n        isWindowsDeviceRoot(path.charCodeAt(0)) &&\r\n        path.charCodeAt(1) === CHAR_COLON) {\r\n      start = 2;\r\n    }\r\n\r\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\r\n      if (ext === path)\r\n        return '';\r\n      var extIdx = ext.length - 1;\r\n      var firstNonSlashEnd = -1;\r\n      for (i = path.length - 1; i >= start; --i) {\r\n        const code = path.charCodeAt(i);\r\n        if (isPathSeparator(code)) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === ext.charCodeAt(extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return path.slice(start, end);\r\n    }\r\n    for (i = path.length - 1; i >= start; --i) {\r\n      if (isPathSeparator(path.charCodeAt(i))) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return path.slice(start, end);\r\n  },\r\n\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    var start = 0;\r\n    var startDot = -1;\r\n    var startPart = 0;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    var preDotState = 0;\r\n\r\n    // Check for a drive letter prefix so as not to mistake the following\r\n    // path separator as an extra separator at the end of the path that can be\r\n    // disregarded\r\n\r\n    if (path.length >= 2 &&\r\n        path.charCodeAt(1) === CHAR_COLON &&\r\n        isWindowsDeviceRoot(path.charCodeAt(0))) {\r\n      start = startPart = 2;\r\n    }\r\n\r\n    for (var i = path.length - 1; i >= start; --i) {\r\n      const code = path.charCodeAt(i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return path.slice(startDot, end);\r\n  },\r\n\r\n  format: _format.bind(null, '\\\\'),\r\n\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n\r\n    const len = path.length;\r\n    var rootEnd = 0;\r\n    let code = path.charCodeAt(0);\r\n\r\n    if (len === 1) {\r\n      if (isPathSeparator(code)) {\r\n        // `path` contains just a path separator, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      ret.base = ret.name = path;\r\n      return ret;\r\n    }\r\n    // Try to match a root\r\n    if (isPathSeparator(code)) {\r\n      // Possible UNC root\r\n\r\n      rootEnd = 1;\r\n      if (isPathSeparator(path.charCodeAt(1))) {\r\n        // Matched double path separator at beginning\r\n        let j = 2;\r\n        let last = j;\r\n        // Match 1 or more non-path separators\r\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n          j++;\r\n        }\r\n        if (j < len && j !== last) {\r\n          // Matched!\r\n          last = j;\r\n          // Match 1 or more path separators\r\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n            j++;\r\n          }\r\n          if (j < len && j !== last) {\r\n            // Matched!\r\n            last = j;\r\n            // Match 1 or more non-path separators\r\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n              j++;\r\n            }\r\n            if (j === len) {\r\n              // We matched a UNC root only\r\n              rootEnd = j;\r\n            } else if (j !== last) {\r\n              // We matched a UNC root with leftovers\r\n              rootEnd = j + 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n      // Possible device root\r\n      if (len <= 2) {\r\n        // `path` contains just a drive root, exit early to avoid\r\n        // unnecessary work\r\n        ret.root = ret.dir = path;\r\n        return ret;\r\n      }\r\n      rootEnd = 2;\r\n      if (isPathSeparator(path.charCodeAt(2))) {\r\n        if (len === 3) {\r\n          // `path` contains just a drive root, exit early to avoid\r\n          // unnecessary work\r\n          ret.root = ret.dir = path;\r\n          return ret;\r\n        }\r\n        rootEnd = 3;\r\n      }\r\n    }\r\n    if (rootEnd > 0)\r\n      ret.root = path.slice(0, rootEnd);\r\n\r\n    var startDot = -1;\r\n    var startPart = rootEnd;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    var i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    var preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= rootEnd; --i) {\r\n      code = path.charCodeAt(i);\r\n      if (isPathSeparator(code)) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n           startDot === end - 1 &&\r\n           startDot === startPart + 1)) {\r\n        ret.base = ret.name = path.slice(startPart, end);\r\n      } else {\r\n        ret.name = path.slice(startPart, startDot);\r\n        ret.base = path.slice(startPart, end);\r\n        ret.ext = path.slice(startDot, end);\r\n      }\r\n    }\r\n\r\n    // If the directory is the root, use the entire root as the `dir` including\r\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\r\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\r\n    if (startPart > 0 && startPart !== rootEnd)\r\n      ret.dir = path.slice(0, startPart - 1);\r\n    else\r\n      ret.dir = ret.root;\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '\\\\',\r\n  delimiter: ';',\r\n  win32: null,\r\n  posix: null\r\n};\r\n\r\nconst posix = {\r\n  // path.resolve([from ...], to)\r\n  resolve(...args) {\r\n    let resolvedPath = '';\r\n    let resolvedAbsolute = false;\r\n\r\n    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n      const path = i >= 0 ? args[i] : process.cwd();\r\n\r\n      validateString(path, 'path');\r\n\r\n      // Skip empty entries\r\n      if (path.length === 0) {\r\n        continue;\r\n      }\r\n\r\n      resolvedPath = `${path}/${resolvedPath}`;\r\n      resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n    }\r\n\r\n    // At this point the path should be resolved to a full absolute path, but\r\n    // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n    // Normalize the path\r\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\r\n                                   isPosixPathSeparator);\r\n\r\n    if (resolvedAbsolute) {\r\n      return `/${resolvedPath}`;\r\n    }\r\n    return resolvedPath.length > 0 ? resolvedPath : '.';\r\n  },\r\n\r\n  normalize(path) {\r\n    validateString(path, 'path');\r\n\r\n    if (path.length === 0)\r\n      return '.';\r\n\r\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n    const trailingSeparator =\r\n      path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\r\n\r\n    // Normalize the path\r\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\r\n\r\n    if (path.length === 0) {\r\n      if (isAbsolute)\r\n        return '/';\r\n      return trailingSeparator ? './' : '.';\r\n    }\r\n    if (trailingSeparator)\r\n      path += '/';\r\n\r\n    return isAbsolute ? `/${path}` : path;\r\n  },\r\n\r\n  isAbsolute(path) {\r\n    validateString(path, 'path');\r\n    return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n  },\r\n\r\n  join(...args) {\r\n    if (args.length === 0)\r\n      return '.';\r\n    let joined;\r\n    for (var i = 0; i < args.length; ++i) {\r\n      const arg = args[i];\r\n      validateString(arg, 'path');\r\n      if (arg.length > 0) {\r\n        if (joined === undefined)\r\n          joined = arg;\r\n        else\r\n          joined += `/${arg}`;\r\n      }\r\n    }\r\n    if (joined === undefined)\r\n      return '.';\r\n    return posix.normalize(joined);\r\n  },\r\n\r\n  relative(from, to) {\r\n    validateString(from, 'from');\r\n    validateString(to, 'to');\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    // Trim leading forward slashes.\r\n    from = posix.resolve(from);\r\n    to = posix.resolve(to);\r\n\r\n    if (from === to)\r\n      return '';\r\n\r\n    const fromStart = 1;\r\n    const fromEnd = from.length;\r\n    const fromLen = fromEnd - fromStart;\r\n    const toStart = 1;\r\n    const toLen = to.length - toStart;\r\n\r\n    // Compare paths to find the longest common path from root\r\n    const length = (fromLen < toLen ? fromLen : toLen);\r\n    let lastCommonSep = -1;\r\n    let i = 0;\r\n    for (; i < length; i++) {\r\n      const fromCode = from.charCodeAt(fromStart + i);\r\n      if (fromCode !== to.charCodeAt(toStart + i))\r\n        break;\r\n      else if (fromCode === CHAR_FORWARD_SLASH)\r\n        lastCommonSep = i;\r\n    }\r\n    if (i === length) {\r\n      if (toLen > length) {\r\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\r\n          // We get here if `from` is the exact base path for `to`.\r\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\r\n          return to.slice(toStart + i + 1);\r\n        }\r\n        if (i === 0) {\r\n          // We get here if `from` is the root\r\n          // For example: from='/'; to='/foo'\r\n          return to.slice(toStart + i);\r\n        }\r\n      } else if (fromLen > length) {\r\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\r\n          // We get here if `to` is the exact base path for `from`.\r\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\r\n          lastCommonSep = i;\r\n        } else if (i === 0) {\r\n          // We get here if `to` is the root.\r\n          // For example: from='/foo/bar'; to='/'\r\n          lastCommonSep = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    let out = '';\r\n    // Generate the relative path based on the path difference between `to`\r\n    // and `from`.\r\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n        out += out.length === 0 ? '..' : '/..';\r\n      }\r\n    }\r\n\r\n    // Lastly, append the rest of the destination (`to`) path that comes after\r\n    // the common path parts.\r\n    return `${out}${to.slice(toStart + lastCommonSep)}`;\r\n  },\r\n\r\n  toNamespacedPath(path) {\r\n    // Non-op on posix systems\r\n    return path;\r\n  },\r\n\r\n  dirname(path) {\r\n    validateString(path, 'path');\r\n    if (path.length === 0)\r\n      return '.';\r\n    const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    for (var i = path.length - 1; i >= 1; --i) {\r\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n        if (!matchedSlash) {\r\n          end = i;\r\n          break;\r\n        }\r\n      } else {\r\n        // We saw the first non-path separator\r\n        matchedSlash = false;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return hasRoot ? '/' : '.';\r\n    if (hasRoot && end === 1)\r\n      return '//';\r\n    return path.slice(0, end);\r\n  },\r\n\r\n  basename(path, ext) {\r\n    if (ext !== undefined)\r\n      validateString(ext, 'ext');\r\n    validateString(path, 'path');\r\n\r\n    var start = 0;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    var i;\r\n\r\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\r\n      if (ext === path)\r\n        return '';\r\n      var extIdx = ext.length - 1;\r\n      var firstNonSlashEnd = -1;\r\n      for (i = path.length - 1; i >= 0; --i) {\r\n        const code = path.charCodeAt(i);\r\n        if (code === CHAR_FORWARD_SLASH) {\r\n          // If we reached a path separator that was not part of a set of path\r\n          // separators at the end of the string, stop now\r\n          if (!matchedSlash) {\r\n            start = i + 1;\r\n            break;\r\n          }\r\n        } else {\r\n          if (firstNonSlashEnd === -1) {\r\n            // We saw the first non-path separator, remember this index in case\r\n            // we need it if the extension ends up not matching\r\n            matchedSlash = false;\r\n            firstNonSlashEnd = i + 1;\r\n          }\r\n          if (extIdx >= 0) {\r\n            // Try to match the explicit extension\r\n            if (code === ext.charCodeAt(extIdx)) {\r\n              if (--extIdx === -1) {\r\n                // We matched the extension, so mark this as the end of our path\r\n                // component\r\n                end = i;\r\n              }\r\n            } else {\r\n              // Extension does not match, so our result is the entire path\r\n              // component\r\n              extIdx = -1;\r\n              end = firstNonSlashEnd;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end)\r\n        end = firstNonSlashEnd;\r\n      else if (end === -1)\r\n        end = path.length;\r\n      return path.slice(start, end);\r\n    }\r\n    for (i = path.length - 1; i >= 0; --i) {\r\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          start = i + 1;\r\n          break;\r\n        }\r\n      } else if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n    }\r\n\r\n    if (end === -1)\r\n      return '';\r\n    return path.slice(start, end);\r\n  },\r\n\r\n  extname(path) {\r\n    validateString(path, 'path');\r\n    var startDot = -1;\r\n    var startPart = 0;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    var preDotState = 0;\r\n    for (var i = path.length - 1; i >= 0; --i) {\r\n      const code = path.charCodeAt(i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (startDot === -1 ||\r\n        end === -1 ||\r\n        // We saw a non-dot character immediately before the dot\r\n        preDotState === 0 ||\r\n        // The (right-most) trimmed path component is exactly '..'\r\n        (preDotState === 1 &&\r\n         startDot === end - 1 &&\r\n         startDot === startPart + 1)) {\r\n      return '';\r\n    }\r\n    return path.slice(startDot, end);\r\n  },\r\n\r\n  format: _format.bind(null, '/'),\r\n\r\n  parse(path) {\r\n    validateString(path, 'path');\r\n\r\n    const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n    if (path.length === 0)\r\n      return ret;\r\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n    var start;\r\n    if (isAbsolute) {\r\n      ret.root = '/';\r\n      start = 1;\r\n    } else {\r\n      start = 0;\r\n    }\r\n    var startDot = -1;\r\n    var startPart = 0;\r\n    var end = -1;\r\n    var matchedSlash = true;\r\n    var i = path.length - 1;\r\n\r\n    // Track the state of characters (if any) we see before our first dot and\r\n    // after any path separator we find\r\n    var preDotState = 0;\r\n\r\n    // Get non-dir info\r\n    for (; i >= start; --i) {\r\n      const code = path.charCodeAt(i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now\r\n        if (!matchedSlash) {\r\n          startPart = i + 1;\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      if (end === -1) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // extension\r\n        matchedSlash = false;\r\n        end = i + 1;\r\n      }\r\n      if (code === CHAR_DOT) {\r\n        // If this is our first dot, mark it as the start of our extension\r\n        if (startDot === -1)\r\n          startDot = i;\r\n        else if (preDotState !== 1)\r\n          preDotState = 1;\r\n      } else if (startDot !== -1) {\r\n        // We saw a non-dot and non-path separator before our dot, so we should\r\n        // have a good chance at having a non-empty extension\r\n        preDotState = -1;\r\n      }\r\n    }\r\n\r\n    if (end !== -1) {\r\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\r\n      if (startDot === -1 ||\r\n          // We saw a non-dot character immediately before the dot\r\n          preDotState === 0 ||\r\n          // The (right-most) trimmed path component is exactly '..'\r\n          (preDotState === 1 &&\r\n          startDot === end - 1 &&\r\n          startDot === startPart + 1)) {\r\n        ret.base = ret.name = path.slice(start, end);\r\n      } else {\r\n        ret.name = path.slice(start, startDot);\r\n        ret.base = path.slice(start, end);\r\n        ret.ext = path.slice(startDot, end);\r\n      }\r\n    }\r\n\r\n    if (startPart > 0)\r\n      ret.dir = path.slice(0, startPart - 1);\r\n    else if (isAbsolute)\r\n      ret.dir = '/';\r\n\r\n    return ret;\r\n  },\r\n\r\n  sep: '/',\r\n  delimiter: ':',\r\n  win32: null,\r\n  posix: null\r\n};\r\n\r\nposix.win32 = win32.win32 = win32;\r\nposix.posix = win32.posix = posix;\r\n\r\n// Legacy internal API, docs-only deprecated: DEP0080\r\nwin32._makeLong = win32.toNamespacedPath;\r\nposix._makeLong = posix.toNamespacedPath;\r\n\r\nmodule.exports = process.platform === 'win32' ? win32 : posix;\r\n"
  },
  {
    "name": "internal/encoding.js",
    "source": "'use strict';\r\n\r\n// An implementation of the WHATWG Encoding Standard\r\n// https://encoding.spec.whatwg.org\r\n\r\nconst { Object } = primordials;\r\n\r\nconst {\r\n  ERR_ENCODING_INVALID_ENCODED_DATA,\r\n  ERR_ENCODING_NOT_SUPPORTED,\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_INVALID_THIS,\r\n  ERR_NO_ICU\r\n} = require('internal/errors').codes;\r\nconst kHandle = Symbol('handle');\r\nconst kFlags = Symbol('flags');\r\nconst kEncoding = Symbol('encoding');\r\nconst kDecoder = Symbol('decoder');\r\nconst kEncoder = Symbol('encoder');\r\n\r\nconst {\r\n  getConstructorOf,\r\n  customInspectSymbol: inspect\r\n} = require('internal/util');\r\n\r\nconst {\r\n  isArrayBuffer,\r\n  isArrayBufferView,\r\n  isUint8Array\r\n} = require('internal/util/types');\r\n\r\nconst { validateString } = require('internal/validators');\r\n\r\nconst {\r\n  encodeInto,\r\n  encodeUtf8String\r\n} = internalBinding('buffer');\r\n\r\nvar Buffer;\r\nfunction lazyBuffer() {\r\n  if (Buffer === undefined)\r\n    Buffer = require('buffer').Buffer;\r\n  return Buffer;\r\n}\r\n\r\nfunction validateEncoder(obj) {\r\n  if (obj == null || obj[kEncoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextEncoder');\r\n}\r\n\r\nfunction validateDecoder(obj) {\r\n  if (obj == null || obj[kDecoder] !== true)\r\n    throw new ERR_INVALID_THIS('TextDecoder');\r\n}\r\n\r\nfunction validateArgument(prop, expected, propName, expectedName) {\r\n  if (typeof prop !== expected)\r\n    throw new ERR_INVALID_ARG_TYPE(propName, expectedName, prop);\r\n}\r\n\r\nconst CONVERTER_FLAGS_FLUSH = 0x1;\r\nconst CONVERTER_FLAGS_FATAL = 0x2;\r\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\r\n\r\nconst empty = new Uint8Array(0);\r\n\r\nconst encodings = new Map([\r\n  ['unicode-1-1-utf-8', 'utf-8'],\r\n  ['utf8', 'utf-8'],\r\n  ['utf-8', 'utf-8'],\r\n  ['866', 'ibm866'],\r\n  ['cp866', 'ibm866'],\r\n  ['csibm866', 'ibm866'],\r\n  ['ibm866', 'ibm866'],\r\n  ['csisolatin2', 'iso-8859-2'],\r\n  ['iso-8859-2', 'iso-8859-2'],\r\n  ['iso-ir-101', 'iso-8859-2'],\r\n  ['iso8859-2', 'iso-8859-2'],\r\n  ['iso88592', 'iso-8859-2'],\r\n  ['iso_8859-2', 'iso-8859-2'],\r\n  ['iso_8859-2:1987', 'iso-8859-2'],\r\n  ['l2', 'iso-8859-2'],\r\n  ['latin2', 'iso-8859-2'],\r\n  ['csisolatin3', 'iso-8859-3'],\r\n  ['iso-8859-3', 'iso-8859-3'],\r\n  ['iso-ir-109', 'iso-8859-3'],\r\n  ['iso8859-3', 'iso-8859-3'],\r\n  ['iso88593', 'iso-8859-3'],\r\n  ['iso_8859-3', 'iso-8859-3'],\r\n  ['iso_8859-3:1988', 'iso-8859-3'],\r\n  ['l3', 'iso-8859-3'],\r\n  ['latin3', 'iso-8859-3'],\r\n  ['csisolatin4', 'iso-8859-4'],\r\n  ['iso-8859-4', 'iso-8859-4'],\r\n  ['iso-ir-110', 'iso-8859-4'],\r\n  ['iso8859-4', 'iso-8859-4'],\r\n  ['iso88594', 'iso-8859-4'],\r\n  ['iso_8859-4', 'iso-8859-4'],\r\n  ['iso_8859-4:1988', 'iso-8859-4'],\r\n  ['l4', 'iso-8859-4'],\r\n  ['latin4', 'iso-8859-4'],\r\n  ['csisolatincyrillic', 'iso-8859-5'],\r\n  ['cyrillic', 'iso-8859-5'],\r\n  ['iso-8859-5', 'iso-8859-5'],\r\n  ['iso-ir-144', 'iso-8859-5'],\r\n  ['iso8859-5', 'iso-8859-5'],\r\n  ['iso88595', 'iso-8859-5'],\r\n  ['iso_8859-5', 'iso-8859-5'],\r\n  ['iso_8859-5:1988', 'iso-8859-5'],\r\n  ['arabic', 'iso-8859-6'],\r\n  ['asmo-708', 'iso-8859-6'],\r\n  ['csiso88596e', 'iso-8859-6'],\r\n  ['csiso88596i', 'iso-8859-6'],\r\n  ['csisolatinarabic', 'iso-8859-6'],\r\n  ['ecma-114', 'iso-8859-6'],\r\n  ['iso-8859-6', 'iso-8859-6'],\r\n  ['iso-8859-6-e', 'iso-8859-6'],\r\n  ['iso-8859-6-i', 'iso-8859-6'],\r\n  ['iso-ir-127', 'iso-8859-6'],\r\n  ['iso8859-6', 'iso-8859-6'],\r\n  ['iso88596', 'iso-8859-6'],\r\n  ['iso_8859-6', 'iso-8859-6'],\r\n  ['iso_8859-6:1987', 'iso-8859-6'],\r\n  ['csisolatingreek', 'iso-8859-7'],\r\n  ['ecma-118', 'iso-8859-7'],\r\n  ['elot_928', 'iso-8859-7'],\r\n  ['greek', 'iso-8859-7'],\r\n  ['greek8', 'iso-8859-7'],\r\n  ['iso-8859-7', 'iso-8859-7'],\r\n  ['iso-ir-126', 'iso-8859-7'],\r\n  ['iso8859-7', 'iso-8859-7'],\r\n  ['iso88597', 'iso-8859-7'],\r\n  ['iso_8859-7', 'iso-8859-7'],\r\n  ['iso_8859-7:1987', 'iso-8859-7'],\r\n  ['sun_eu_greek', 'iso-8859-7'],\r\n  ['csiso88598e', 'iso-8859-8'],\r\n  ['csisolatinhebrew', 'iso-8859-8'],\r\n  ['hebrew', 'iso-8859-8'],\r\n  ['iso-8859-8', 'iso-8859-8'],\r\n  ['iso-8859-8-e', 'iso-8859-8'],\r\n  ['iso-ir-138', 'iso-8859-8'],\r\n  ['iso8859-8', 'iso-8859-8'],\r\n  ['iso88598', 'iso-8859-8'],\r\n  ['iso_8859-8', 'iso-8859-8'],\r\n  ['iso_8859-8:1988', 'iso-8859-8'],\r\n  ['visual', 'iso-8859-8'],\r\n  ['csiso88598i', 'iso-8859-8-i'],\r\n  ['iso-8859-8-i', 'iso-8859-8-i'],\r\n  ['logical', 'iso-8859-8-i'],\r\n  ['csisolatin6', 'iso-8859-10'],\r\n  ['iso-8859-10', 'iso-8859-10'],\r\n  ['iso-ir-157', 'iso-8859-10'],\r\n  ['iso8859-10', 'iso-8859-10'],\r\n  ['iso885910', 'iso-8859-10'],\r\n  ['l6', 'iso-8859-10'],\r\n  ['latin6', 'iso-8859-10'],\r\n  ['iso-8859-13', 'iso-8859-13'],\r\n  ['iso8859-13', 'iso-8859-13'],\r\n  ['iso885913', 'iso-8859-13'],\r\n  ['iso-8859-14', 'iso-8859-14'],\r\n  ['iso8859-14', 'iso-8859-14'],\r\n  ['iso885914', 'iso-8859-14'],\r\n  ['csisolatin9', 'iso-8859-15'],\r\n  ['iso-8859-15', 'iso-8859-15'],\r\n  ['iso8859-15', 'iso-8859-15'],\r\n  ['iso885915', 'iso-8859-15'],\r\n  ['iso_8859-15', 'iso-8859-15'],\r\n  ['l9', 'iso-8859-15'],\r\n  ['cskoi8r', 'koi8-r'],\r\n  ['koi', 'koi8-r'],\r\n  ['koi8', 'koi8-r'],\r\n  ['koi8-r', 'koi8-r'],\r\n  ['koi8_r', 'koi8-r'],\r\n  ['koi8-ru', 'koi8-u'],\r\n  ['koi8-u', 'koi8-u'],\r\n  ['csmacintosh', 'macintosh'],\r\n  ['mac', 'macintosh'],\r\n  ['macintosh', 'macintosh'],\r\n  ['x-mac-roman', 'macintosh'],\r\n  ['dos-874', 'windows-874'],\r\n  ['iso-8859-11', 'windows-874'],\r\n  ['iso8859-11', 'windows-874'],\r\n  ['iso885911', 'windows-874'],\r\n  ['tis-620', 'windows-874'],\r\n  ['windows-874', 'windows-874'],\r\n  ['cp1250', 'windows-1250'],\r\n  ['windows-1250', 'windows-1250'],\r\n  ['x-cp1250', 'windows-1250'],\r\n  ['cp1251', 'windows-1251'],\r\n  ['windows-1251', 'windows-1251'],\r\n  ['x-cp1251', 'windows-1251'],\r\n  ['ansi_x3.4-1968', 'windows-1252'],\r\n  ['ascii', 'windows-1252'],\r\n  ['cp1252', 'windows-1252'],\r\n  ['cp819', 'windows-1252'],\r\n  ['csisolatin1', 'windows-1252'],\r\n  ['ibm819', 'windows-1252'],\r\n  ['iso-8859-1', 'windows-1252'],\r\n  ['iso-ir-100', 'windows-1252'],\r\n  ['iso8859-1', 'windows-1252'],\r\n  ['iso88591', 'windows-1252'],\r\n  ['iso_8859-1', 'windows-1252'],\r\n  ['iso_8859-1:1987', 'windows-1252'],\r\n  ['l1', 'windows-1252'],\r\n  ['latin1', 'windows-1252'],\r\n  ['us-ascii', 'windows-1252'],\r\n  ['windows-1252', 'windows-1252'],\r\n  ['x-cp1252', 'windows-1252'],\r\n  ['cp1253', 'windows-1253'],\r\n  ['windows-1253', 'windows-1253'],\r\n  ['x-cp1253', 'windows-1253'],\r\n  ['cp1254', 'windows-1254'],\r\n  ['csisolatin5', 'windows-1254'],\r\n  ['iso-8859-9', 'windows-1254'],\r\n  ['iso-ir-148', 'windows-1254'],\r\n  ['iso8859-9', 'windows-1254'],\r\n  ['iso88599', 'windows-1254'],\r\n  ['iso_8859-9', 'windows-1254'],\r\n  ['iso_8859-9:1989', 'windows-1254'],\r\n  ['l5', 'windows-1254'],\r\n  ['latin5', 'windows-1254'],\r\n  ['windows-1254', 'windows-1254'],\r\n  ['x-cp1254', 'windows-1254'],\r\n  ['cp1255', 'windows-1255'],\r\n  ['windows-1255', 'windows-1255'],\r\n  ['x-cp1255', 'windows-1255'],\r\n  ['cp1256', 'windows-1256'],\r\n  ['windows-1256', 'windows-1256'],\r\n  ['x-cp1256', 'windows-1256'],\r\n  ['cp1257', 'windows-1257'],\r\n  ['windows-1257', 'windows-1257'],\r\n  ['x-cp1257', 'windows-1257'],\r\n  ['cp1258', 'windows-1258'],\r\n  ['windows-1258', 'windows-1258'],\r\n  ['x-cp1258', 'windows-1258'],\r\n  ['x-mac-cyrillic', 'x-mac-cyrillic'],\r\n  ['x-mac-ukrainian', 'x-mac-cyrillic'],\r\n  ['chinese', 'gbk'],\r\n  ['csgb2312', 'gbk'],\r\n  ['csiso58gb231280', 'gbk'],\r\n  ['gb2312', 'gbk'],\r\n  ['gb_2312', 'gbk'],\r\n  ['gb_2312-80', 'gbk'],\r\n  ['gbk', 'gbk'],\r\n  ['iso-ir-58', 'gbk'],\r\n  ['x-gbk', 'gbk'],\r\n  ['gb18030', 'gb18030'],\r\n  ['big5', 'big5'],\r\n  ['big5-hkscs', 'big5'],\r\n  ['cn-big5', 'big5'],\r\n  ['csbig5', 'big5'],\r\n  ['x-x-big5', 'big5'],\r\n  ['cseucpkdfmtjapanese', 'euc-jp'],\r\n  ['euc-jp', 'euc-jp'],\r\n  ['x-euc-jp', 'euc-jp'],\r\n  ['csiso2022jp', 'iso-2022-jp'],\r\n  ['iso-2022-jp', 'iso-2022-jp'],\r\n  ['csshiftjis', 'shift_jis'],\r\n  ['ms932', 'shift_jis'],\r\n  ['ms_kanji', 'shift_jis'],\r\n  ['shift-jis', 'shift_jis'],\r\n  ['shift_jis', 'shift_jis'],\r\n  ['sjis', 'shift_jis'],\r\n  ['windows-31j', 'shift_jis'],\r\n  ['x-sjis', 'shift_jis'],\r\n  ['cseuckr', 'euc-kr'],\r\n  ['csksc56011987', 'euc-kr'],\r\n  ['euc-kr', 'euc-kr'],\r\n  ['iso-ir-149', 'euc-kr'],\r\n  ['korean', 'euc-kr'],\r\n  ['ks_c_5601-1987', 'euc-kr'],\r\n  ['ks_c_5601-1989', 'euc-kr'],\r\n  ['ksc5601', 'euc-kr'],\r\n  ['ksc_5601', 'euc-kr'],\r\n  ['windows-949', 'euc-kr'],\r\n  ['utf-16be', 'utf-16be'],\r\n  ['utf-16le', 'utf-16le'],\r\n  ['utf-16', 'utf-16le']\r\n]);\r\n\r\n// Unfortunately, String.prototype.trim also removes non-ascii whitespace,\r\n// so we have to do this manually\r\nfunction trimAsciiWhitespace(label) {\r\n  var s = 0;\r\n  var e = label.length;\r\n  while (s < e && (\r\n    label[s] === '\\u0009' ||\r\n    label[s] === '\\u000a' ||\r\n    label[s] === '\\u000c' ||\r\n    label[s] === '\\u000d' ||\r\n    label[s] === '\\u0020')) {\r\n    s++;\r\n  }\r\n  while (e > s && (\r\n    label[e - 1] === '\\u0009' ||\r\n    label[e - 1] === '\\u000a' ||\r\n    label[e - 1] === '\\u000c' ||\r\n    label[e - 1] === '\\u000d' ||\r\n    label[e - 1] === '\\u0020')) {\r\n    e--;\r\n  }\r\n  return label.slice(s, e);\r\n}\r\n\r\nfunction getEncodingFromLabel(label) {\r\n  const enc = encodings.get(label);\r\n  if (enc !== undefined) return enc;\r\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\r\n}\r\n\r\nconst encodeIntoResults = new Uint32Array(2);\r\n\r\nclass TextEncoder {\r\n  constructor() {\r\n    this[kEncoder] = true;\r\n  }\r\n\r\n  get encoding() {\r\n    validateEncoder(this);\r\n    return 'utf-8';\r\n  }\r\n\r\n  encode(input = '') {\r\n    validateEncoder(this);\r\n    return encodeUtf8String(`${input}`);\r\n  }\r\n\r\n  encodeInto(src, dest) {\r\n    validateEncoder(this);\r\n    validateString(src, 'src');\r\n    if (!dest || !isUint8Array(dest))\r\n      throw new ERR_INVALID_ARG_TYPE('dest', 'Uint8Array', dest);\r\n    encodeInto(src, dest, encodeIntoResults);\r\n    return { read: encodeIntoResults[0], written: encodeIntoResults[1] };\r\n  }\r\n\r\n  [inspect](depth, opts) {\r\n    validateEncoder(this);\r\n    if (typeof depth === 'number' && depth < 0)\r\n      return this;\r\n    const ctor = getConstructorOf(this);\r\n    const obj = Object.create({\r\n      constructor: ctor === null ? TextEncoder : ctor\r\n    });\r\n    obj.encoding = this.encoding;\r\n    // Lazy to avoid circular dependency\r\n    return require('internal/util/inspect').inspect(obj, opts);\r\n  }\r\n}\r\n\r\nObject.defineProperties(\r\n  TextEncoder.prototype, {\r\n    'encode': { enumerable: true },\r\n    'encodeInto': { enumerable: true },\r\n    'encoding': { enumerable: true },\r\n    [Symbol.toStringTag]: {\r\n      configurable: true,\r\n      value: 'TextEncoder'\r\n    } });\r\n\r\nconst TextDecoder =\r\n  internalBinding('config').hasIntl ?\r\n    makeTextDecoderICU() :\r\n    makeTextDecoderJS();\r\n\r\nfunction makeTextDecoderICU() {\r\n  const {\r\n    decode: _decode,\r\n    getConverter,\r\n  } = internalBinding('icu');\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = {}) {\r\n      encoding = `${encoding}`;\r\n      validateArgument(options, 'object', 'options', 'Object');\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      var flags = 0;\r\n      if (options !== null) {\r\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      const handle = getConverter(enc, flags);\r\n      if (handle === undefined)\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      this[kDecoder] = true;\r\n      this[kHandle] = handle;\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n    }\r\n\r\n\r\n    decode(input = empty, options = {}) {\r\n      validateDecoder(this);\r\n      if (isArrayBuffer(input)) {\r\n        input = lazyBuffer().from(input);\r\n      } else if (!isArrayBufferView(input)) {\r\n        throw new ERR_INVALID_ARG_TYPE('input',\r\n                                       ['ArrayBuffer', 'ArrayBufferView'],\r\n                                       input);\r\n      }\r\n      validateArgument(options, 'object', 'options', 'Object');\r\n\r\n      var flags = 0;\r\n      if (options !== null)\r\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\r\n\r\n      const ret = _decode(this[kHandle], input, flags);\r\n      if (typeof ret === 'number') {\r\n        throw new ERR_ENCODING_INVALID_ENCODED_DATA(this.encoding, ret);\r\n      }\r\n      return ret.toString('ucs2');\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\nfunction makeTextDecoderJS() {\r\n  var StringDecoder;\r\n  function lazyStringDecoder() {\r\n    if (StringDecoder === undefined)\r\n      ({ StringDecoder } = require('string_decoder'));\r\n    return StringDecoder;\r\n  }\r\n\r\n  const kBOMSeen = Symbol('BOM seen');\r\n\r\n  function hasConverter(encoding) {\r\n    return encoding === 'utf-8' || encoding === 'utf-16le';\r\n  }\r\n\r\n  class TextDecoder {\r\n    constructor(encoding = 'utf-8', options = {}) {\r\n      encoding = `${encoding}`;\r\n      validateArgument(options, 'object', 'options', 'Object');\r\n\r\n      const enc = getEncodingFromLabel(encoding);\r\n      if (enc === undefined || !hasConverter(enc))\r\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\r\n\r\n      var flags = 0;\r\n      if (options !== null) {\r\n        if (options.fatal) {\r\n          throw new ERR_NO_ICU('\"fatal\" option');\r\n        }\r\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\r\n      }\r\n\r\n      this[kDecoder] = true;\r\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\r\n      this[kHandle] = new (lazyStringDecoder())(enc);\r\n      this[kFlags] = flags;\r\n      this[kEncoding] = enc;\r\n      this[kBOMSeen] = false;\r\n    }\r\n\r\n    decode(input = empty, options = {}) {\r\n      validateDecoder(this);\r\n      if (isArrayBuffer(input)) {\r\n        input = lazyBuffer().from(input);\r\n      } else if (isArrayBufferView(input)) {\r\n        input = lazyBuffer().from(input.buffer, input.byteOffset,\r\n                                  input.byteLength);\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE('input',\r\n                                       ['ArrayBuffer', 'ArrayBufferView'],\r\n                                       input);\r\n      }\r\n      validateArgument(options, 'object', 'options', 'Object');\r\n\r\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\r\n        this[kBOMSeen] = false;\r\n      }\r\n\r\n      if (options !== null && options.stream) {\r\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\r\n      } else {\r\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\r\n      }\r\n\r\n      if (!this[kBOMSeen] && !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\r\n        if (this[kEncoding] === 'utf-8') {\r\n          if (input.length >= 3 &&\r\n              input[0] === 0xEF && input[1] === 0xBB && input[2] === 0xBF) {\r\n            input = input.slice(3);\r\n          }\r\n        } else if (this[kEncoding] === 'utf-16le') {\r\n          if (input.length >= 2 && input[0] === 0xFF && input[1] === 0xFE) {\r\n            input = input.slice(2);\r\n          }\r\n        }\r\n        this[kBOMSeen] = true;\r\n      }\r\n\r\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\r\n        return this[kHandle].end(input);\r\n      }\r\n\r\n      return this[kHandle].write(input);\r\n    }\r\n  }\r\n\r\n  return TextDecoder;\r\n}\r\n\r\n// Mix in some shared properties.\r\n{\r\n  Object.defineProperties(\r\n    TextDecoder.prototype,\r\n    Object.getOwnPropertyDescriptors({\r\n      get encoding() {\r\n        validateDecoder(this);\r\n        return this[kEncoding];\r\n      },\r\n\r\n      get fatal() {\r\n        validateDecoder(this);\r\n        return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\r\n      },\r\n\r\n      get ignoreBOM() {\r\n        validateDecoder(this);\r\n        return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\r\n               CONVERTER_FLAGS_IGNORE_BOM;\r\n      },\r\n\r\n      [inspect](depth, opts) {\r\n        validateDecoder(this);\r\n        if (typeof depth === 'number' && depth < 0)\r\n          return this;\r\n        const ctor = getConstructorOf(this);\r\n        const obj = Object.create({\r\n          constructor: ctor === null ? TextDecoder : ctor\r\n        });\r\n        obj.encoding = this.encoding;\r\n        obj.fatal = this.fatal;\r\n        obj.ignoreBOM = this.ignoreBOM;\r\n        if (opts.showHidden) {\r\n          obj[kFlags] = this[kFlags];\r\n          obj[kHandle] = this[kHandle];\r\n        }\r\n        // Lazy to avoid circular dependency\r\n        return require('internal/util/inspect').inspect(obj, opts);\r\n      }\r\n    }));\r\n  Object.defineProperties(TextDecoder.prototype, {\r\n    decode: { enumerable: true },\r\n    [inspect]: { enumerable: false },\r\n    [Symbol.toStringTag]: {\r\n      configurable: true,\r\n      value: 'TextDecoder'\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  getEncodingFromLabel,\r\n  TextDecoder,\r\n  TextEncoder\r\n};\r\n"
  },
  {
    "name": "timers.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Math } = primordials;\r\n\r\nconst {\r\n  immediateInfo,\r\n  toggleImmediateRef\r\n} = internalBinding('timers');\r\nconst L = require('internal/linkedlist');\r\nconst {\r\n  async_id_symbol,\r\n  Timeout,\r\n  decRefCount,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount\r\n  },\r\n  kRefed,\r\n  initAsyncResource,\r\n  getTimerDuration,\r\n  timerListMap,\r\n  timerListQueue,\r\n  immediateQueue,\r\n  active,\r\n  unrefActive\r\n} = require('internal/timers');\r\nconst {\r\n  promisify: { custom: customPromisify },\r\n  deprecate\r\n} = require('internal/util');\r\nconst { ERR_INVALID_CALLBACK } = require('internal/errors').codes;\r\nconst debug = require('internal/util/debuglog').debuglog('timer');\r\n\r\nconst {\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitDestroy\r\n} = require('internal/async_hooks');\r\n\r\n// Remove a timer. Cancels the timeout and resets the relevant timer properties.\r\nfunction unenroll(item) {\r\n  // Fewer checks may be possible, but these cover everything.\r\n  if (destroyHooksExist() &&\r\n      item[async_id_symbol] !== undefined &&\r\n      !item._destroyed) {\r\n    emitDestroy(item[async_id_symbol]);\r\n  }\r\n  item._destroyed = true;\r\n\r\n  L.remove(item);\r\n\r\n  // We only delete refed lists because unrefed ones are incredibly likely\r\n  // to come from http and be recreated shortly after.\r\n  // TODO: Long-term this could instead be handled by creating an internal\r\n  // clearTimeout that makes it clear that the list should not be deleted.\r\n  // That function could then be used by http and other similar modules.\r\n  if (item[kRefed]) {\r\n    // Compliment truncation during insert().\r\n    const msecs = Math.trunc(item._idleTimeout);\r\n    const list = timerListMap[msecs];\r\n    if (list !== undefined && L.isEmpty(list)) {\r\n      debug('unenroll: list empty');\r\n      timerListQueue.removeAt(list.priorityQueuePosition);\r\n      delete timerListMap[list.msecs];\r\n    }\r\n\r\n    decRefCount();\r\n  }\r\n  item[kRefed] = null;\r\n\r\n  // If active is called later, then we want to make sure not to insert again\r\n  item._idleTimeout = -1;\r\n}\r\n\r\n// Make a regular object able to act as a timer by setting some properties.\r\n// This function does not start the timer, see `active()`.\r\n// Using existing objects as timers slightly reduces object overhead.\r\nfunction enroll(item, msecs) {\r\n  msecs = getTimerDuration(msecs, 'msecs');\r\n\r\n  // If this item was already in a list somewhere\r\n  // then we should unenroll it from that\r\n  if (item._idleNext) unenroll(item);\r\n\r\n  L.init(item);\r\n  item._idleTimeout = msecs;\r\n}\r\n\r\n\r\n/*\r\n * DOM-style timers\r\n */\r\n\r\n\r\nfunction setTimeout(callback, after, arg1, arg2, arg3) {\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n\r\n  var i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, after, args, false);\r\n  active(timeout);\r\n\r\n  return timeout;\r\n}\r\n\r\nsetTimeout[customPromisify] = function(after, value) {\r\n  const args = value !== undefined ? [value] : value;\r\n  return new Promise((resolve) => {\r\n    active(new Timeout(resolve, after, args, false));\r\n  });\r\n};\r\n\r\nfunction clearTimeout(timer) {\r\n  if (timer && timer._onTimeout) {\r\n    timer._onTimeout = null;\r\n    unenroll(timer);\r\n  }\r\n}\r\n\r\nfunction setInterval(callback, repeat, arg1, arg2, arg3) {\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n\r\n  var i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n    case 2:\r\n      break;\r\n    case 3:\r\n      args = [arg1];\r\n      break;\r\n    case 4:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 5; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 2] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  const timeout = new Timeout(callback, repeat, args, true);\r\n  active(timeout);\r\n\r\n  return timeout;\r\n}\r\n\r\nfunction clearInterval(timer) {\r\n  // clearTimeout and clearInterval can be used to clear timers created from\r\n  // both setTimeout and setInterval, as specified by HTML Living Standard:\r\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\r\n  clearTimeout(timer);\r\n}\r\n\r\nTimeout.prototype.close = function() {\r\n  clearTimeout(this);\r\n  return this;\r\n};\r\n\r\nconst Immediate = class Immediate {\r\n  constructor(callback, args) {\r\n    this._idleNext = null;\r\n    this._idlePrev = null;\r\n    this._onImmediate = callback;\r\n    this._argv = args;\r\n    this._destroyed = false;\r\n    this[kRefed] = false;\r\n\r\n    initAsyncResource(this, 'Immediate');\r\n\r\n    this.ref();\r\n    immediateInfo[kCount]++;\r\n\r\n    immediateQueue.append(this);\r\n  }\r\n\r\n  ref() {\r\n    if (this[kRefed] === false) {\r\n      this[kRefed] = true;\r\n      if (immediateInfo[kRefCount]++ === 0)\r\n        toggleImmediateRef(true);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  unref() {\r\n    if (this[kRefed] === true) {\r\n      this[kRefed] = false;\r\n      if (--immediateInfo[kRefCount] === 0)\r\n        toggleImmediateRef(false);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  hasRef() {\r\n    return !!this[kRefed];\r\n  }\r\n};\r\n\r\nfunction setImmediate(callback, arg1, arg2, arg3) {\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n\r\n  var i, args;\r\n  switch (arguments.length) {\r\n    // fast cases\r\n    case 1:\r\n      break;\r\n    case 2:\r\n      args = [arg1];\r\n      break;\r\n    case 3:\r\n      args = [arg1, arg2];\r\n      break;\r\n    default:\r\n      args = [arg1, arg2, arg3];\r\n      for (i = 4; i < arguments.length; i++) {\r\n        // Extend array dynamically, makes .apply run much faster in v6.0.0\r\n        args[i - 1] = arguments[i];\r\n      }\r\n      break;\r\n  }\r\n\r\n  return new Immediate(callback, args);\r\n}\r\n\r\nsetImmediate[customPromisify] = function(value) {\r\n  return new Promise((resolve) => new Immediate(resolve, [value]));\r\n};\r\n\r\nfunction clearImmediate(immediate) {\r\n  if (!immediate || immediate._destroyed)\r\n    return;\r\n\r\n  immediateInfo[kCount]--;\r\n  immediate._destroyed = true;\r\n\r\n  if (immediate[kRefed] && --immediateInfo[kRefCount] === 0)\r\n    toggleImmediateRef(false);\r\n  immediate[kRefed] = null;\r\n\r\n  if (destroyHooksExist()) {\r\n    emitDestroy(immediate[async_id_symbol]);\r\n  }\r\n\r\n  immediate._onImmediate = null;\r\n\r\n  immediateQueue.remove(immediate);\r\n}\r\n\r\nmodule.exports = {\r\n  setTimeout,\r\n  clearTimeout,\r\n  setImmediate,\r\n  clearImmediate,\r\n  setInterval,\r\n  clearInterval,\r\n  _unrefActive: deprecate(\r\n    unrefActive,\r\n    'timers._unrefActive() is deprecated.' +\r\n    ' Please use timeout.refresh() instead.',\r\n    'DEP0127'),\r\n  active: deprecate(\r\n    active,\r\n    'timers.active() is deprecated. Please use timeout.refresh() instead.',\r\n    'DEP0126'),\r\n  unenroll: deprecate(\r\n    unenroll,\r\n    'timers.unenroll() is deprecated. Please use clearTimeout instead.',\r\n    'DEP0096'),\r\n  enroll: deprecate(\r\n    enroll,\r\n    'timers.enroll() is deprecated. Please use setTimeout instead.',\r\n    'DEP0095')\r\n};\r\n"
  },
  {
    "name": "internal/linkedlist.js",
    "source": "'use strict';\r\n\r\nfunction init(list) {\r\n  list._idleNext = list;\r\n  list._idlePrev = list;\r\n}\r\n\r\n// Show the most idle item.\r\nfunction peek(list) {\r\n  if (list._idlePrev === list) return null;\r\n  return list._idlePrev;\r\n}\r\n\r\n// Remove an item from its list.\r\nfunction remove(item) {\r\n  if (item._idleNext) {\r\n    item._idleNext._idlePrev = item._idlePrev;\r\n  }\r\n\r\n  if (item._idlePrev) {\r\n    item._idlePrev._idleNext = item._idleNext;\r\n  }\r\n\r\n  item._idleNext = null;\r\n  item._idlePrev = null;\r\n}\r\n\r\n// Remove an item from its list and place at the end.\r\nfunction append(list, item) {\r\n  if (item._idleNext || item._idlePrev) {\r\n    remove(item);\r\n  }\r\n\r\n  // Items are linked  with _idleNext -> (older) and _idlePrev -> (newer).\r\n  // Note: This linkage (next being older) may seem counter-intuitive at first.\r\n  item._idleNext = list._idleNext;\r\n  item._idlePrev = list;\r\n\r\n  // The list _idleNext points to tail (newest) and _idlePrev to head (oldest).\r\n  list._idleNext._idlePrev = item;\r\n  list._idleNext = item;\r\n}\r\n\r\nfunction isEmpty(list) {\r\n  return list._idleNext === list;\r\n}\r\n\r\nmodule.exports = {\r\n  init,\r\n  peek,\r\n  remove,\r\n  append,\r\n  isEmpty\r\n};\r\n"
  },
  {
    "name": "internal/timers.js",
    "source": "'use strict';\r\n\r\n// HOW and WHY the timers implementation works the way it does.\r\n//\r\n// Timers are crucial to Node.js. Internally, any TCP I/O connection creates a\r\n// timer so that we can time out of connections. Additionally, many user\r\n// libraries and applications also use timers. As such there may be a\r\n// significantly large amount of timeouts scheduled at any given time.\r\n// Therefore, it is very important that the timers implementation is performant\r\n// and efficient.\r\n//\r\n// Note: It is suggested you first read through the lib/internal/linkedlist.js\r\n// linked list implementation, since timers depend on it extensively. It can be\r\n// somewhat counter-intuitive at first, as it is not actually a class. Instead,\r\n// it is a set of helpers that operate on an existing object.\r\n//\r\n// In order to be as performant as possible, the architecture and data\r\n// structures are designed so that they are optimized to handle the following\r\n// use cases as efficiently as possible:\r\n\r\n// - Adding a new timer. (insert)\r\n// - Removing an existing timer. (remove)\r\n// - Handling a timer timing out. (timeout)\r\n//\r\n// Whenever possible, the implementation tries to make the complexity of these\r\n// operations as close to constant-time as possible.\r\n// (So that performance is not impacted by the number of scheduled timers.)\r\n//\r\n// Object maps are kept which contain linked lists keyed by their duration in\r\n// milliseconds.\r\n//\r\n/* eslint-disable node-core/non-ascii-character */\r\n//\r\n// ╔════ > Object Map\r\n// ║\r\n// ╠══\r\n// ║ lists: { '40': { }, '320': { etc } } (keys of millisecond duration)\r\n// ╚══          ┌────┘\r\n//              │\r\n// ╔══          │\r\n// ║ TimersList { _idleNext: { }, _idlePrev: (self) }\r\n// ║         ┌────────────────┘\r\n// ║    ╔══  │                              ^\r\n// ║    ║    { _idleNext: { },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ║    ║      ┌───────────┘\r\n// ║    ║      │                                  ^\r\n// ║    ║      { _idleNext: { etc },  _idlePrev: { }, _onTimeout: (callback) }\r\n// ╠══  ╠══\r\n// ║    ║\r\n// ║    ╚════ >  Actual JavaScript timeouts\r\n// ║\r\n// ╚════ > Linked List\r\n//\r\n/* eslint-enable node-core/non-ascii-character */\r\n//\r\n// With this, virtually constant-time insertion (append), removal, and timeout\r\n// is possible in the JavaScript layer. Any one list of timers is able to be\r\n// sorted by just appending to it because all timers within share the same\r\n// duration. Therefore, any timer added later will always have been scheduled to\r\n// timeout later, thus only needing to be appended.\r\n// Removal from an object-property linked list is also virtually constant-time\r\n// as can be seen in the lib/internal/linkedlist.js implementation.\r\n// Timeouts only need to process any timers currently due to expire, which will\r\n// always be at the beginning of the list for reasons stated above. Any timers\r\n// after the first one encountered that does not yet need to timeout will also\r\n// always be due to timeout at a later time.\r\n//\r\n// Less-than constant time operations are thus contained in two places:\r\n// The PriorityQueue — an efficient binary heap implementation that does all\r\n// operations in worst-case O(log n) time — which manages the order of expiring\r\n// Timeout lists and the object map lookup of a specific list by the duration of\r\n// timers within (or creation of a new list). However, these operations combined\r\n// have shown to be trivial in comparison to other timers architectures.\r\n\r\nconst { Math, Object } = primordials;\r\n\r\nconst {\r\n  scheduleTimer,\r\n  toggleTimerRef,\r\n  getLibuvNow,\r\n  immediateInfo\r\n} = internalBinding('timers');\r\n\r\nconst {\r\n  getDefaultTriggerAsyncId,\r\n  newAsyncId,\r\n  initHooksExist,\r\n  destroyHooksExist,\r\n  // The needed emit*() functions.\r\n  emitInit,\r\n  emitBefore,\r\n  emitAfter,\r\n  emitDestroy\r\n} = require('internal/async_hooks');\r\n\r\n// Symbols for storing async id state.\r\nconst async_id_symbol = Symbol('asyncId');\r\nconst trigger_async_id_symbol = Symbol('triggerId');\r\n\r\nconst {\r\n  ERR_INVALID_CALLBACK,\r\n  ERR_OUT_OF_RANGE\r\n} = require('internal/errors').codes;\r\nconst { validateNumber } = require('internal/validators');\r\n\r\nconst L = require('internal/linkedlist');\r\nconst PriorityQueue = require('internal/priority_queue');\r\n\r\nconst { inspect } = require('internal/util/inspect');\r\nconst debug = require('internal/util/debuglog').debuglog('timer');\r\n\r\n// *Must* match Environment::ImmediateInfo::Fields in src/env.h.\r\nconst kCount = 0;\r\nconst kRefCount = 1;\r\nconst kHasOutstanding = 2;\r\n\r\n// Timeout values > TIMEOUT_MAX are set to 1.\r\nconst TIMEOUT_MAX = 2 ** 31 - 1;\r\n\r\nlet timerListId = Number.MIN_SAFE_INTEGER;\r\n\r\nconst kRefed = Symbol('refed');\r\n\r\n// Create a single linked list instance only once at startup\r\nconst immediateQueue = new ImmediateList();\r\n\r\nlet nextExpiry = Infinity;\r\nlet refCount = 0;\r\n\r\n// This is a priority queue with a custom sorting function that first compares\r\n// the expiry times of two lists and if they're the same then compares their\r\n// individual IDs to determine which list was created first.\r\nconst timerListQueue = new PriorityQueue(compareTimersLists, setPosition);\r\n\r\n// Object map containing linked lists of timers, keyed and sorted by their\r\n// duration in milliseconds.\r\n//\r\n// - key = time in milliseconds\r\n// - value = linked list\r\nconst timerListMap = Object.create(null);\r\n\r\nfunction initAsyncResource(resource, type) {\r\n  const asyncId = resource[async_id_symbol] = newAsyncId();\r\n  const triggerAsyncId =\r\n    resource[trigger_async_id_symbol] = getDefaultTriggerAsyncId();\r\n  if (initHooksExist())\r\n    emitInit(asyncId, type, triggerAsyncId, resource);\r\n}\r\n\r\n// Timer constructor function.\r\n// The entire prototype is defined in lib/timers.js\r\nfunction Timeout(callback, after, args, isRepeat) {\r\n  after *= 1; // Coalesce to number or NaN\r\n  if (!(after >= 1 && after <= TIMEOUT_MAX)) {\r\n    if (after > TIMEOUT_MAX) {\r\n      process.emitWarning(`${after} does not fit into` +\r\n                          ' a 32-bit signed integer.' +\r\n                          '\\nTimeout duration was set to 1.',\r\n                          'TimeoutOverflowWarning');\r\n    }\r\n    after = 1; // Schedule on next tick, follows browser behavior\r\n  }\r\n\r\n  this._idleTimeout = after;\r\n  this._idlePrev = this;\r\n  this._idleNext = this;\r\n  this._idleStart = null;\r\n  // This must be set to null first to avoid function tracking\r\n  // on the hidden class, revisit in V8 versions after 6.2\r\n  this._onTimeout = null;\r\n  this._onTimeout = callback;\r\n  this._timerArgs = args;\r\n  this._repeat = isRepeat ? after : null;\r\n  this._destroyed = false;\r\n\r\n  this[kRefed] = null;\r\n\r\n  initAsyncResource(this, 'Timeout');\r\n}\r\n\r\n// Make sure the linked list only shows the minimal necessary information.\r\nTimeout.prototype[inspect.custom] = function(_, options) {\r\n  return inspect(this, {\r\n    ...options,\r\n    // Only inspect one level.\r\n    depth: 0,\r\n    // It should not recurse.\r\n    customInspect: false\r\n  });\r\n};\r\n\r\nTimeout.prototype.refresh = function() {\r\n  if (this[kRefed])\r\n    active(this);\r\n  else\r\n    unrefActive(this);\r\n\r\n  return this;\r\n};\r\n\r\nTimeout.prototype.unref = function() {\r\n  if (this[kRefed]) {\r\n    this[kRefed] = false;\r\n    decRefCount();\r\n  }\r\n  return this;\r\n};\r\n\r\nTimeout.prototype.ref = function() {\r\n  if (this[kRefed] === false) {\r\n    this[kRefed] = true;\r\n    incRefCount();\r\n  }\r\n  return this;\r\n};\r\n\r\nTimeout.prototype.hasRef = function() {\r\n  return !!this[kRefed];\r\n};\r\n\r\nfunction TimersList(expiry, msecs) {\r\n  this._idleNext = this; // Create the list with the linkedlist properties to\r\n  this._idlePrev = this; // Prevent any unnecessary hidden class changes.\r\n  this.expiry = expiry;\r\n  this.id = timerListId++;\r\n  this.msecs = msecs;\r\n  this.priorityQueuePosition = null;\r\n}\r\n\r\n// Make sure the linked list only shows the minimal necessary information.\r\nTimersList.prototype[inspect.custom] = function(_, options) {\r\n  return inspect(this, {\r\n    ...options,\r\n    // Only inspect one level.\r\n    depth: 0,\r\n    // It should not recurse.\r\n    customInspect: false\r\n  });\r\n};\r\n\r\n// A linked list for storing `setImmediate()` requests\r\nfunction ImmediateList() {\r\n  this.head = null;\r\n  this.tail = null;\r\n}\r\n\r\n// Appends an item to the end of the linked list, adjusting the current tail's\r\n// previous and next pointers where applicable\r\nImmediateList.prototype.append = function(item) {\r\n  if (this.tail !== null) {\r\n    this.tail._idleNext = item;\r\n    item._idlePrev = this.tail;\r\n  } else {\r\n    this.head = item;\r\n  }\r\n  this.tail = item;\r\n};\r\n\r\n// Removes an item from the linked list, adjusting the pointers of adjacent\r\n// items and the linked list's head or tail pointers as necessary\r\nImmediateList.prototype.remove = function(item) {\r\n  if (item._idleNext !== null) {\r\n    item._idleNext._idlePrev = item._idlePrev;\r\n  }\r\n\r\n  if (item._idlePrev !== null) {\r\n    item._idlePrev._idleNext = item._idleNext;\r\n  }\r\n\r\n  if (item === this.head)\r\n    this.head = item._idleNext;\r\n  if (item === this.tail)\r\n    this.tail = item._idlePrev;\r\n\r\n  item._idleNext = null;\r\n  item._idlePrev = null;\r\n};\r\n\r\nfunction incRefCount() {\r\n  if (refCount++ === 0)\r\n    toggleTimerRef(true);\r\n}\r\n\r\nfunction decRefCount() {\r\n  if (--refCount === 0)\r\n    toggleTimerRef(false);\r\n}\r\n\r\n// Schedule or re-schedule a timer.\r\n// The item must have been enroll()'d first.\r\nfunction active(item) {\r\n  insert(item, true, getLibuvNow());\r\n}\r\n\r\n// Internal APIs that need timeouts should use `unrefActive()` instead of\r\n// `active()` so that they do not unnecessarily keep the process open.\r\nfunction unrefActive(item) {\r\n  insert(item, false, getLibuvNow());\r\n}\r\n\r\n// The underlying logic for scheduling or re-scheduling a timer.\r\n//\r\n// Appends a timer onto the end of an existing timers list, or creates a new\r\n// list if one does not already exist for the specified timeout duration.\r\nfunction insert(item, refed, start) {\r\n  let msecs = item._idleTimeout;\r\n  if (msecs < 0 || msecs === undefined)\r\n    return;\r\n\r\n  // Truncate so that accuracy of sub-millisecond timers is not assumed.\r\n  msecs = Math.trunc(msecs);\r\n\r\n  item._idleStart = start;\r\n\r\n  // Use an existing list if there is one, otherwise we need to make a new one.\r\n  var list = timerListMap[msecs];\r\n  if (list === undefined) {\r\n    debug('no %d list was found in insert, creating a new one', msecs);\r\n    const expiry = start + msecs;\r\n    timerListMap[msecs] = list = new TimersList(expiry, msecs);\r\n    timerListQueue.insert(list);\r\n\r\n    if (nextExpiry > expiry) {\r\n      scheduleTimer(msecs);\r\n      nextExpiry = expiry;\r\n    }\r\n  }\r\n\r\n  if (!item[async_id_symbol] || item._destroyed) {\r\n    item._destroyed = false;\r\n    initAsyncResource(item, 'Timeout');\r\n  }\r\n\r\n  if (refed === !item[kRefed]) {\r\n    if (refed)\r\n      incRefCount();\r\n    else\r\n      decRefCount();\r\n  }\r\n  item[kRefed] = refed;\r\n\r\n  L.append(list, item);\r\n}\r\n\r\nfunction setUnrefTimeout(callback, after) {\r\n  // Type checking identical to setTimeout()\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n\r\n  const timer = new Timeout(callback, after, undefined, false);\r\n  unrefActive(timer);\r\n\r\n  return timer;\r\n}\r\n\r\n// Type checking used by timers.enroll() and Socket#setTimeout()\r\nfunction getTimerDuration(msecs, name) {\r\n  validateNumber(msecs, name);\r\n  if (msecs < 0 || !isFinite(msecs)) {\r\n    throw new ERR_OUT_OF_RANGE(name, 'a non-negative finite number', msecs);\r\n  }\r\n\r\n  // Ensure that msecs fits into signed int32\r\n  if (msecs > TIMEOUT_MAX) {\r\n    process.emitWarning(`${msecs} does not fit into a 32-bit signed integer.` +\r\n                        `\\nTimer duration was truncated to ${TIMEOUT_MAX}.`,\r\n                        'TimeoutOverflowWarning');\r\n    return TIMEOUT_MAX;\r\n  }\r\n\r\n  return msecs;\r\n}\r\n\r\nfunction compareTimersLists(a, b) {\r\n  const expiryDiff = a.expiry - b.expiry;\r\n  if (expiryDiff === 0) {\r\n    if (a.id < b.id)\r\n      return -1;\r\n    if (a.id > b.id)\r\n      return 1;\r\n  }\r\n  return expiryDiff;\r\n}\r\n\r\nfunction setPosition(node, pos) {\r\n  node.priorityQueuePosition = pos;\r\n}\r\n\r\nfunction getTimerCallbacks(runNextTicks) {\r\n  // If an uncaught exception was thrown during execution of immediateQueue,\r\n  // this queue will store all remaining Immediates that need to run upon\r\n  // resolution of all error handling (if process is still alive).\r\n  const outstandingQueue = new ImmediateList();\r\n\r\n  function processImmediate() {\r\n    const queue = outstandingQueue.head !== null ?\r\n      outstandingQueue : immediateQueue;\r\n    var immediate = queue.head;\r\n\r\n    // Clear the linked list early in case new `setImmediate()`\r\n    // calls occur while immediate callbacks are executed\r\n    if (queue !== outstandingQueue) {\r\n      queue.head = queue.tail = null;\r\n      immediateInfo[kHasOutstanding] = 1;\r\n    }\r\n\r\n    let prevImmediate;\r\n    let ranAtLeastOneImmediate = false;\r\n    while (immediate !== null) {\r\n      if (ranAtLeastOneImmediate)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneImmediate = true;\r\n\r\n      // It's possible for this current Immediate to be cleared while executing\r\n      // the next tick queue above, which means we need to use the previous\r\n      // Immediate's _idleNext which is guaranteed to not have been cleared.\r\n      if (immediate._destroyed) {\r\n        outstandingQueue.head = immediate = prevImmediate._idleNext;\r\n        continue;\r\n      }\r\n\r\n      immediate._destroyed = true;\r\n\r\n      immediateInfo[kCount]--;\r\n      if (immediate[kRefed])\r\n        immediateInfo[kRefCount]--;\r\n      immediate[kRefed] = null;\r\n\r\n      prevImmediate = immediate;\r\n\r\n      const asyncId = immediate[async_id_symbol];\r\n      emitBefore(asyncId, immediate[trigger_async_id_symbol]);\r\n\r\n      try {\r\n        const argv = immediate._argv;\r\n        if (!argv)\r\n          immediate._onImmediate();\r\n        else\r\n          immediate._onImmediate(...argv);\r\n      } finally {\r\n        immediate._onImmediate = null;\r\n\r\n        if (destroyHooksExist())\r\n          emitDestroy(asyncId);\r\n\r\n        outstandingQueue.head = immediate = immediate._idleNext;\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    if (queue === outstandingQueue)\r\n      outstandingQueue.head = null;\r\n    immediateInfo[kHasOutstanding] = 0;\r\n  }\r\n\r\n\r\n  function processTimers(now) {\r\n    debug('process timer lists %d', now);\r\n    nextExpiry = Infinity;\r\n\r\n    let list;\r\n    let ranAtLeastOneList = false;\r\n    while (list = timerListQueue.peek()) {\r\n      if (list.expiry > now) {\r\n        nextExpiry = list.expiry;\r\n        return refCount > 0 ? nextExpiry : -nextExpiry;\r\n      }\r\n      if (ranAtLeastOneList)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneList = true;\r\n      listOnTimeout(list, now);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function listOnTimeout(list, now) {\r\n    const msecs = list.msecs;\r\n\r\n    debug('timeout callback %d', msecs);\r\n\r\n    var diff, timer;\r\n    let ranAtLeastOneTimer = false;\r\n    while (timer = L.peek(list)) {\r\n      diff = now - timer._idleStart;\r\n\r\n      // Check if this loop iteration is too early for the next timer.\r\n      // This happens if there are more timers scheduled for later in the list.\r\n      if (diff < msecs) {\r\n        list.expiry = Math.max(timer._idleStart + msecs, now + 1);\r\n        list.id = timerListId++;\r\n        timerListQueue.percolateDown(1);\r\n        debug('%d list wait because diff is %d', msecs, diff);\r\n        return;\r\n      }\r\n\r\n      if (ranAtLeastOneTimer)\r\n        runNextTicks();\r\n      else\r\n        ranAtLeastOneTimer = true;\r\n\r\n      // The actual logic for when a timeout happens.\r\n      L.remove(timer);\r\n\r\n      const asyncId = timer[async_id_symbol];\r\n\r\n      if (!timer._onTimeout) {\r\n        if (timer[kRefed])\r\n          refCount--;\r\n        timer[kRefed] = null;\r\n\r\n        if (destroyHooksExist() && !timer._destroyed) {\r\n          emitDestroy(asyncId);\r\n          timer._destroyed = true;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      emitBefore(asyncId, timer[trigger_async_id_symbol]);\r\n\r\n      let start;\r\n      if (timer._repeat)\r\n        start = getLibuvNow();\r\n\r\n      try {\r\n        const args = timer._timerArgs;\r\n        if (args === undefined)\r\n          timer._onTimeout();\r\n        else\r\n          timer._onTimeout(...args);\r\n      } finally {\r\n        if (timer._repeat && timer._idleTimeout !== -1) {\r\n          timer._idleTimeout = timer._repeat;\r\n          if (start === undefined)\r\n            start = getLibuvNow();\r\n          insert(timer, timer[kRefed], start);\r\n        } else if (!timer._idleNext && !timer._idlePrev) {\r\n          if (timer[kRefed])\r\n            refCount--;\r\n          timer[kRefed] = null;\r\n\r\n          if (destroyHooksExist() && !timer._destroyed) {\r\n            emitDestroy(timer[async_id_symbol]);\r\n          }\r\n          timer._destroyed = true;\r\n        }\r\n      }\r\n\r\n      emitAfter(asyncId);\r\n    }\r\n\r\n    // If `L.peek(list)` returned nothing, the list was either empty or we have\r\n    // called all of the timer timeouts.\r\n    // As such, we can remove the list from the object map and\r\n    // the PriorityQueue.\r\n    debug('%d list empty', msecs);\r\n\r\n    // The current list may have been removed and recreated since the reference\r\n    // to `list` was created. Make sure they're the same instance of the list\r\n    // before destroying.\r\n    if (list === timerListMap[msecs]) {\r\n      delete timerListMap[msecs];\r\n      timerListQueue.shift();\r\n    }\r\n  }\r\n\r\n  return {\r\n    processImmediate,\r\n    processTimers\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  TIMEOUT_MAX,\r\n  kTimeout: Symbol('timeout'), // For hiding Timeouts on other internals.\r\n  async_id_symbol,\r\n  trigger_async_id_symbol,\r\n  Timeout,\r\n  kRefed,\r\n  initAsyncResource,\r\n  setUnrefTimeout,\r\n  getTimerDuration,\r\n  immediateQueue,\r\n  getTimerCallbacks,\r\n  immediateInfoFields: {\r\n    kCount,\r\n    kRefCount,\r\n    kHasOutstanding\r\n  },\r\n  active,\r\n  unrefActive,\r\n  timerListMap,\r\n  timerListQueue,\r\n  decRefCount,\r\n  incRefCount\r\n};\r\n"
  },
  {
    "name": "internal/priority_queue.js",
    "source": "'use strict';\r\n\r\nconst kCompare = Symbol('compare');\r\nconst kHeap = Symbol('heap');\r\nconst kSetPosition = Symbol('setPosition');\r\nconst kSize = Symbol('size');\r\n\r\n// The PriorityQueue is a basic implementation of a binary heap that accepts\r\n// a custom sorting function via its constructor. This function is passed\r\n// the two nodes to compare, similar to the native Array#sort. Crucially\r\n// this enables priority queues that are based on a comparison of more than\r\n// just a single criteria.\r\n\r\nmodule.exports = class PriorityQueue {\r\n  constructor(comparator, setPosition) {\r\n    if (comparator !== undefined)\r\n      this[kCompare] = comparator;\r\n    if (setPosition !== undefined)\r\n      this[kSetPosition] = setPosition;\r\n\r\n    this[kHeap] = new Array(64);\r\n    this[kSize] = 0;\r\n  }\r\n\r\n  [kCompare](a, b) {\r\n    return a - b;\r\n  }\r\n\r\n  insert(value) {\r\n    const heap = this[kHeap];\r\n    const pos = ++this[kSize];\r\n    heap[pos] = value;\r\n\r\n    if (heap.length === pos)\r\n      heap.length *= 2;\r\n\r\n    this.percolateUp(pos);\r\n  }\r\n\r\n  peek() {\r\n    return this[kHeap][1];\r\n  }\r\n\r\n  percolateDown(pos) {\r\n    const compare = this[kCompare];\r\n    const setPosition = this[kSetPosition];\r\n    const heap = this[kHeap];\r\n    const size = this[kSize];\r\n    const item = heap[pos];\r\n\r\n    while (pos * 2 <= size) {\r\n      let childIndex = pos * 2 + 1;\r\n      if (childIndex > size || compare(heap[pos * 2], heap[childIndex]) < 0)\r\n        childIndex = pos * 2;\r\n      const child = heap[childIndex];\r\n      if (compare(item, child) <= 0)\r\n        break;\r\n      if (setPosition !== undefined)\r\n        setPosition(child, pos);\r\n      heap[pos] = child;\r\n      pos = childIndex;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  percolateUp(pos) {\r\n    const heap = this[kHeap];\r\n    const compare = this[kCompare];\r\n    const setPosition = this[kSetPosition];\r\n    const item = heap[pos];\r\n\r\n    while (pos > 1) {\r\n      const parent = heap[pos / 2 | 0];\r\n      if (compare(parent, item) <= 0)\r\n        break;\r\n      heap[pos] = parent;\r\n      if (setPosition !== undefined)\r\n        setPosition(parent, pos);\r\n      pos = pos / 2 | 0;\r\n    }\r\n    heap[pos] = item;\r\n    if (setPosition !== undefined)\r\n      setPosition(item, pos);\r\n  }\r\n\r\n  removeAt(pos) {\r\n    const heap = this[kHeap];\r\n    const size = --this[kSize];\r\n    heap[pos] = heap[size + 1];\r\n    heap[size + 1] = undefined;\r\n\r\n    if (size > 0 && pos <= size) {\r\n      if (pos > 1 && this[kCompare](heap[pos / 2 | 0], heap[pos]) > 0)\r\n        this.percolateUp(pos);\r\n      else\r\n        this.percolateDown(pos);\r\n    }\r\n  }\r\n\r\n  remove(value) {\r\n    const heap = this[kHeap];\r\n    const pos = heap.indexOf(value);\r\n    if (pos < 1)\r\n      return false;\r\n\r\n    this.removeAt(pos);\r\n\r\n    return true;\r\n  }\r\n\r\n  shift() {\r\n    const heap = this[kHeap];\r\n    const value = heap[1];\r\n    if (value === undefined)\r\n      return;\r\n\r\n    this.removeAt(1);\r\n\r\n    return value;\r\n  }\r\n};\r\n"
  },
  {
    "name": "internal/util/debuglog.js",
    "source": "'use strict';\r\n\r\nconst { format } = require('internal/util/inspect');\r\n\r\n// `debugs` is deliberately initialized to undefined so any call to\r\n// debuglog() before initializeDebugEnv() is called will throw.\r\nlet debugs;\r\n\r\nlet debugEnvRegex = /^$/;\r\n\r\n// `debugEnv` is initial value of process.env.NODE_DEBUG\r\nfunction initializeDebugEnv(debugEnv) {\r\n  debugs = {};\r\n  if (debugEnv) {\r\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\r\n      .replace(/\\*/g, '.*')\r\n      .replace(/,/g, '$|^')\r\n      .toUpperCase();\r\n    debugEnvRegex = new RegExp(`^${debugEnv}$`, 'i');\r\n  }\r\n}\r\n\r\n// Emits warning when user sets\r\n// NODE_DEBUG=http or NODE_DEBUG=http2.\r\nfunction emitWarningIfNeeded(set) {\r\n  if ('HTTP' === set || 'HTTP2' === set) {\r\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\r\n      'to \\'' + set.toLowerCase() + '\\' can expose sensitive ' +\r\n      'data (such as passwords, tokens and authentication headers) ' +\r\n      'in the resulting log.');\r\n  }\r\n}\r\n\r\nfunction debuglogImpl(set) {\r\n  set = set.toUpperCase();\r\n  if (debugs[set] === undefined) {\r\n    if (debugEnvRegex.test(set)) {\r\n      const pid = process.pid;\r\n      emitWarningIfNeeded(set);\r\n      debugs[set] = function debug(...args) {\r\n        const msg = format(...args);\r\n        process.stderr.write(format('%s %d: %s\\n', set, pid, msg));\r\n      };\r\n    } else {\r\n      debugs[set] = null;\r\n    }\r\n  }\r\n  return debugs[set];\r\n}\r\n\r\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG,\r\n// so it needs to be called lazily in top scopes of internal modules\r\n// that may be loaded before these run time states are allowed to\r\n// be accessed.\r\nfunction debuglog(set) {\r\n  let debug;\r\n  return function(...args) {\r\n    if (debug === undefined) {\r\n      // Only invokes debuglogImpl() when the debug function is\r\n      // called for the first time.\r\n      debug = debuglogImpl(set);\r\n    }\r\n    if (debug !== null)\r\n      debug(...args);\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  debuglog,\r\n  initializeDebugEnv\r\n};\r\n"
  },
  {
    "name": "internal/process/execution.js",
    "source": "'use strict';\r\n\r\nconst { JSON } = primordials;\r\n\r\nconst path = require('path');\r\n\r\nconst {\r\n  codes: {\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\r\n  }\r\n} = require('internal/errors');\r\n\r\nconst {\r\n  executionAsyncId,\r\n  clearDefaultTriggerAsyncId,\r\n  clearAsyncIdStack,\r\n  hasAsyncIdStack,\r\n  afterHooksExist,\r\n  emitAfter\r\n} = require('internal/async_hooks');\r\n\r\n// shouldAbortOnUncaughtToggle is a typed array for faster\r\n// communication with JS.\r\nconst { shouldAbortOnUncaughtToggle } = internalBinding('util');\r\n\r\nfunction tryGetCwd() {\r\n  try {\r\n    return process.cwd();\r\n  } catch {\r\n    // getcwd(3) can fail if the current working directory has been deleted.\r\n    // Fall back to the directory name of the (absolute) executable path.\r\n    // It's not really correct but what are the alternatives?\r\n    return path.dirname(process.execPath);\r\n  }\r\n}\r\n\r\nfunction evalModule(source, print) {\r\n  const { log, error } = require('internal/console/global');\r\n  const { decorateErrorStack } = require('internal/util');\r\n  const asyncESM = require('internal/process/esm_loader');\r\n  asyncESM.loaderPromise.then(async (loader) => {\r\n    const { result } = await loader.eval(source);\r\n    if (print) {\r\n      log(result);\r\n    }\r\n  })\r\n  .catch((e) => {\r\n    decorateErrorStack(e);\r\n    error(e);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nfunction evalScript(name, body, breakFirstLine, print) {\r\n  const CJSModule = require('internal/modules/cjs/loader');\r\n  const { kVmBreakFirstLineSymbol } = require('internal/util');\r\n\r\n  const cwd = tryGetCwd();\r\n  const origModule = global.module;  // Set e.g. when called from the REPL.\r\n\r\n  const module = new CJSModule(name);\r\n  module.filename = path.join(cwd, name);\r\n  module.paths = CJSModule._nodeModulePaths(cwd);\r\n  global.kVmBreakFirstLineSymbol = kVmBreakFirstLineSymbol;\r\n  const script = `\r\n    global.__filename = ${JSON.stringify(name)};\r\n    global.exports = exports;\r\n    global.module = module;\r\n    global.__dirname = __dirname;\r\n    global.require = require;\r\n    const { kVmBreakFirstLineSymbol } = global;\r\n    delete global.kVmBreakFirstLineSymbol;\r\n    return require(\"vm\").runInThisContext(\r\n      ${JSON.stringify(body)}, {\r\n        filename: ${JSON.stringify(name)},\r\n        displayErrors: true,\r\n        [kVmBreakFirstLineSymbol]: ${!!breakFirstLine}\r\n      });\\n`;\r\n  const result = module._compile(script, `${name}-wrapper`);\r\n  if (print) {\r\n    const { log } = require('internal/console/global');\r\n    log(result);\r\n  }\r\n\r\n  if (origModule !== undefined)\r\n    global.module = origModule;\r\n}\r\n\r\nconst exceptionHandlerState = { captureFn: null };\r\n\r\nfunction setUncaughtExceptionCaptureCallback(fn) {\r\n  if (fn === null) {\r\n    exceptionHandlerState.captureFn = fn;\r\n    shouldAbortOnUncaughtToggle[0] = 1;\r\n    return;\r\n  }\r\n  if (typeof fn !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'null'], fn);\r\n  }\r\n  if (exceptionHandlerState.captureFn !== null) {\r\n    throw new ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET();\r\n  }\r\n  exceptionHandlerState.captureFn = fn;\r\n  shouldAbortOnUncaughtToggle[0] = 0;\r\n}\r\n\r\nfunction hasUncaughtExceptionCaptureCallback() {\r\n  return exceptionHandlerState.captureFn !== null;\r\n}\r\n\r\nfunction noop() {}\r\n\r\n// XXX(joyeecheung): for some reason this cannot be defined at the top-level\r\n// and exported to be written to process._fatalException, it has to be\r\n// returned as an *anonymous function* wrapped inside a factory function,\r\n// otherwise it breaks the test-timers.setInterval async hooks test -\r\n// this may indicate that node::errors::TriggerUncaughtException() should\r\n// fix up the callback scope before calling into process._fatalException,\r\n// or this function should take extra care of the async hooks before it\r\n// schedules a setImmediate.\r\nfunction createOnGlobalUncaughtException() {\r\n  // The C++ land node::errors::TriggerUncaughtException() will\r\n  // exit the process if it returns false, and continue execution if it\r\n  // returns true (which indicates that the exception is handled by the user).\r\n  return (er, fromPromise) => {\r\n    // It's possible that defaultTriggerAsyncId was set for a constructor\r\n    // call that threw and was never cleared. So clear it now.\r\n    clearDefaultTriggerAsyncId();\r\n\r\n    // If diagnostic reporting is enabled, call into its handler to see\r\n    // whether it is interested in handling the situation.\r\n    // Ignore if the error is scoped inside a domain.\r\n    // use == in the checks as we want to allow for null and undefined\r\n    if (er == null || er.domain == null) {\r\n      try {\r\n        const report = internalBinding('report');\r\n        if (report != null && report.shouldReportOnUncaughtException()) {\r\n          report.writeReport(er ? er.message : 'Exception',\r\n                             'Exception',\r\n                             null,\r\n                             er ? er.stack : undefined);\r\n        }\r\n      } catch {}  // Ignore the exception. Diagnostic reporting is unavailable.\r\n    }\r\n\r\n    const type = fromPromise ? 'unhandledRejection' : 'uncaughtException';\r\n    if (exceptionHandlerState.captureFn !== null) {\r\n      exceptionHandlerState.captureFn(er);\r\n    } else if (!process.emit('uncaughtException', er, type)) {\r\n      // If someone handled it, then great. Otherwise, die in C++ land\r\n      // since that means that we'll exit the process, emit the 'exit' event.\r\n      try {\r\n        if (!process._exiting) {\r\n          process._exiting = true;\r\n          process.exitCode = 1;\r\n          process.emit('exit', 1);\r\n        }\r\n      } catch {\r\n        // Nothing to be done about it at this point.\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // If we handled an error, then make sure any ticks get processed\r\n    // by ensuring that the next Immediate cycle isn't empty.\r\n    require('timers').setImmediate(noop);\r\n\r\n    // Emit the after() hooks now that the exception has been handled.\r\n    if (afterHooksExist()) {\r\n      do {\r\n        emitAfter(executionAsyncId());\r\n      } while (hasAsyncIdStack());\r\n    // Or completely empty the id stack.\r\n    } else {\r\n      clearAsyncIdStack();\r\n    }\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction readStdin(callback) {\r\n  process.stdin.setEncoding('utf8');\r\n\r\n  let code = '';\r\n  process.stdin.on('data', (d) => {\r\n    code += d;\r\n  });\r\n\r\n  process.stdin.on('end', () => {\r\n    callback(code);\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  readStdin,\r\n  tryGetCwd,\r\n  evalModule,\r\n  evalScript,\r\n  onGlobalUncaughtException: createOnGlobalUncaughtException(),\r\n  setUncaughtExceptionCaptureCallback,\r\n  hasUncaughtExceptionCaptureCallback\r\n};\r\n"
  },
  {
    "name": "internal/process/warning.js",
    "source": "'use strict';\r\n\r\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\r\n\r\n// Lazily loaded\r\nlet fs;\r\nlet fd;\r\nlet warningFile;\r\n\r\nfunction lazyOption() {\r\n  // This will load `warningFile` only once. If the flag is not set,\r\n  // `warningFile` will be set to an empty string.\r\n  if (warningFile === undefined) {\r\n    warningFile = require('internal/options')\r\n                  .getOptionValue('--redirect-warnings');\r\n  }\r\n  return warningFile;\r\n}\r\n\r\n// If we can't write to stderr, we'd like to make this a noop,\r\n// so use console.error.\r\nlet error;\r\nfunction writeOut(message) {\r\n  if (!error) {\r\n    error = require('internal/console/global').error;\r\n  }\r\n  error(message);\r\n}\r\n\r\nfunction writeToFile(message) {\r\n  if (fd === undefined) {\r\n    fs = require('fs');\r\n    try {\r\n      fd = fs.openSync(warningFile, 'a');\r\n    } catch {\r\n      return writeOut(message);\r\n    }\r\n    process.on('exit', () => {\r\n      try {\r\n        fs.closeSync(fd);\r\n      } catch {}\r\n    });\r\n  }\r\n  fs.appendFile(fd, `${message}\\n`, (err) => {\r\n    if (err) {\r\n      writeOut(message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction doEmitWarning(warning) {\r\n  return () => process.emit('warning', warning);\r\n}\r\n\r\nfunction onWarning(warning) {\r\n  if (!(warning instanceof Error)) return;\r\n  const isDeprecation = warning.name === 'DeprecationWarning';\r\n  if (isDeprecation && process.noDeprecation) return;\r\n  const trace = process.traceProcessWarnings ||\r\n                (isDeprecation && process.traceDeprecation);\r\n  var msg = `(${process.release.name}:${process.pid}) `;\r\n  if (warning.code)\r\n    msg += `[${warning.code}] `;\r\n  if (trace && warning.stack) {\r\n    msg += `${warning.stack}`;\r\n  } else {\r\n    const toString =\r\n      typeof warning.toString === 'function' ?\r\n        warning.toString : Error.prototype.toString;\r\n    msg += `${toString.apply(warning)}`;\r\n  }\r\n  if (typeof warning.detail === 'string') {\r\n    msg += `\\n${warning.detail}`;\r\n  }\r\n  const warningFile = lazyOption();\r\n  if (warningFile) {\r\n    return writeToFile(msg);\r\n  }\r\n  writeOut(msg);\r\n}\r\n\r\n// process.emitWarning(error)\r\n// process.emitWarning(str[, type[, code]][, ctor])\r\n// process.emitWarning(str[, options])\r\nfunction emitWarning(warning, type, code, ctor, now) {\r\n  let detail;\r\n  if (type !== null && typeof type === 'object' && !Array.isArray(type)) {\r\n    ctor = type.ctor;\r\n    code = type.code;\r\n    if (typeof type.detail === 'string')\r\n      detail = type.detail;\r\n    type = type.type || 'Warning';\r\n  } else if (typeof type === 'function') {\r\n    ctor = type;\r\n    code = undefined;\r\n    type = 'Warning';\r\n  }\r\n  if (type !== undefined && typeof type !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE('type', 'string', type);\r\n  }\r\n  if (typeof code === 'function') {\r\n    ctor = code;\r\n    code = undefined;\r\n  } else if (code !== undefined && typeof code !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE('code', 'string', code);\r\n  }\r\n  if (typeof warning === 'string') {\r\n    // Improve error creation performance by skipping the error frames.\r\n    // They are added in the `captureStackTrace()` function below.\r\n    const tmpStackLimit = Error.stackTraceLimit;\r\n    Error.stackTraceLimit = 0;\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    warning = new Error(warning);\r\n    Error.stackTraceLimit = tmpStackLimit;\r\n    warning.name = String(type || 'Warning');\r\n    if (code !== undefined) warning.code = code;\r\n    if (detail !== undefined) warning.detail = detail;\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(warning, ctor || process.emitWarning);\r\n  } else if (!(warning instanceof Error)) {\r\n    throw new ERR_INVALID_ARG_TYPE('warning', ['Error', 'string'], warning);\r\n  }\r\n  if (warning.name === 'DeprecationWarning') {\r\n    if (process.noDeprecation)\r\n      return;\r\n    if (process.throwDeprecation)\r\n      throw warning;\r\n  }\r\n  if (now) process.emit('warning', warning);\r\n  else process.nextTick(doEmitWarning(warning));\r\n}\r\n\r\nmodule.exports = {\r\n  onWarning,\r\n  emitWarning\r\n};\r\n"
  },
  {
    "name": "internal/main/run_main_module.js",
    "source": "'use strict';\r\n\r\nconst {\r\n  prepareMainThreadExecution\r\n} = require('internal/bootstrap/pre_execution');\r\n\r\nprepareMainThreadExecution(true);\r\n\r\nconst CJSModule = require('internal/modules/cjs/loader');\r\n\r\nmarkBootstrapComplete();\r\n\r\n// Note: this actually tries to run the module as a ESM first if\r\n// --experimental-modules is on.\r\n// TODO(joyeecheung): can we move that logic to here? Note that this\r\n// is an undocumented method available via `require('module').runMain`\r\nCJSModule.runMain();\r\n"
  },
  {
    "name": "internal/bootstrap/pre_execution.js",
    "source": "'use strict';\r\n\r\nconst { Object, SafeWeakMap } = primordials;\r\n\r\nconst { getOptionValue } = require('internal/options');\r\nconst { Buffer } = require('buffer');\r\nconst { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;\r\n\r\nfunction prepareMainThreadExecution(expandArgv1 = false) {\r\n  // Patch the process object with legacy properties and normalizations\r\n  patchProcessObject(expandArgv1);\r\n  setupTraceCategoryState();\r\n  setupInspectorHooks();\r\n  setupWarningHandler();\r\n\r\n  // Resolve the coverage directory to an absolute path, and\r\n  // overwrite process.env so that the original path gets passed\r\n  // to child processes even when they switch cwd.\r\n  if (process.env.NODE_V8_COVERAGE) {\r\n    process.env.NODE_V8_COVERAGE =\r\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\r\n  }\r\n\r\n  // If source-map support has been enabled, we substitute in a new\r\n  // prepareStackTrace method, replacing the default in errors.js.\r\n  if (getOptionValue('--enable-source-maps')) {\r\n    const { prepareStackTrace } =\r\n      require('internal/source_map/source_map_cache');\r\n    const { setPrepareStackTraceCallback } = internalBinding('errors');\r\n    setPrepareStackTraceCallback(prepareStackTrace);\r\n  }\r\n\r\n  setupDebugEnv();\r\n\r\n  // Only main thread receives signals.\r\n  setupSignalHandlers();\r\n\r\n  // Process initial diagnostic reporting configuration, if present.\r\n  initializeReport();\r\n  initializeReportSignalHandlers();  // Main-thread-only.\r\n\r\n  initializeHeapSnapshotSignalHandlers();\r\n\r\n  // If the process is spawned with env NODE_CHANNEL_FD, it's probably\r\n  // spawned by our child_process module, then initialize IPC.\r\n  // This attaches some internal event listeners and creates:\r\n  // process.send(), process.channel, process.connected,\r\n  // process.disconnect().\r\n  setupChildProcessIpcChannel();\r\n\r\n  // Load policy from disk and parse it.\r\n  initializePolicy();\r\n\r\n  // If this is a worker in cluster mode, start up the communication\r\n  // channel. This needs to be done before any user code gets executed\r\n  // (including preload modules).\r\n  initializeClusterIPC();\r\n\r\n  initializeDeprecations();\r\n  initializeCJSLoader();\r\n  initializeESMLoader();\r\n  loadPreloadModules();\r\n  initializeFrozenIntrinsics();\r\n}\r\n\r\nfunction patchProcessObject(expandArgv1) {\r\n  const {\r\n    patchProcessObject: patchProcessObjectNative\r\n  } = internalBinding('process_methods');\r\n\r\n  patchProcessObjectNative(process);\r\n\r\n  Object.defineProperty(process, 'argv0', {\r\n    enumerable: true,\r\n    configurable: false,\r\n    value: process.argv[0]\r\n  });\r\n  process.argv[0] = process.execPath;\r\n\r\n  if (expandArgv1 && process.argv[1] && !process.argv[1].startsWith('-')) {\r\n    // Expand process.argv[1] into a full path.\r\n    const path = require('path');\r\n    process.argv[1] = path.resolve(process.argv[1]);\r\n  }\r\n\r\n  // TODO(joyeecheung): most of these should be deprecated and removed,\r\n  // except some that we need to be able to mutate during run time.\r\n  addReadOnlyProcessAlias('_eval', '--eval');\r\n  addReadOnlyProcessAlias('_print_eval', '--print');\r\n  addReadOnlyProcessAlias('_syntax_check_only', '--check');\r\n  addReadOnlyProcessAlias('_forceRepl', '--interactive');\r\n  addReadOnlyProcessAlias('_preload_modules', '--require');\r\n  addReadOnlyProcessAlias('noDeprecation', '--no-deprecation');\r\n  addReadOnlyProcessAlias('noProcessWarnings', '--no-warnings');\r\n  addReadOnlyProcessAlias('traceProcessWarnings', '--trace-warnings');\r\n  addReadOnlyProcessAlias('throwDeprecation', '--throw-deprecation');\r\n  addReadOnlyProcessAlias('profProcess', '--prof-process');\r\n  addReadOnlyProcessAlias('traceDeprecation', '--trace-deprecation');\r\n  addReadOnlyProcessAlias('_breakFirstLine', '--inspect-brk', false);\r\n  addReadOnlyProcessAlias('_breakNodeFirstLine', '--inspect-brk-node', false);\r\n}\r\n\r\nfunction addReadOnlyProcessAlias(name, option, enumerable = true) {\r\n  const value = getOptionValue(option);\r\n  if (value) {\r\n    Object.defineProperty(process, name, {\r\n      writable: false,\r\n      configurable: true,\r\n      enumerable,\r\n      value\r\n    });\r\n  }\r\n}\r\n\r\nfunction setupWarningHandler() {\r\n  const {\r\n    onWarning\r\n  } = require('internal/process/warning');\r\n  if (!getOptionValue('--no-warnings') &&\r\n    process.env.NODE_NO_WARNINGS !== '1') {\r\n    process.on('warning', onWarning);\r\n  }\r\n}\r\n\r\n// Setup User-facing NODE_V8_COVERAGE environment variable that writes\r\n// ScriptCoverage to a specified file.\r\nfunction setupCoverageHooks(dir) {\r\n  const cwd = require('internal/process/execution').tryGetCwd();\r\n  const { resolve } = require('path');\r\n  const coverageDirectory = resolve(cwd, dir);\r\n  const { sourceMapCacheToObject } =\r\n    require('internal/source_map/source_map_cache');\r\n\r\n  if (process.features.inspector) {\r\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\r\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\r\n  } else {\r\n    process.emitWarning('The inspector is disabled, ' +\r\n                        'coverage could not be collected',\r\n                        'Warning');\r\n    return '';\r\n  }\r\n  return coverageDirectory;\r\n}\r\n\r\nfunction initializeReport() {\r\n  if (!getOptionValue('--experimental-report')) {\r\n    return;\r\n  }\r\n  const { report } = require('internal/process/report');\r\n  const { emitExperimentalWarning } = require('internal/util');\r\n  Object.defineProperty(process, 'report', {\r\n    enumerable: false,\r\n    configurable: true,\r\n    get() {\r\n      emitExperimentalWarning('report');\r\n      return report;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupDebugEnv() {\r\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\r\n  if (getOptionValue('--expose-internals')) {\r\n    require('internal/bootstrap/loaders').NativeModule.exposeInternals();\r\n  }\r\n}\r\n\r\nfunction setupSignalHandlers() {\r\n  const {\r\n    createSignalHandlers\r\n  } = require('internal/process/main_thread_only');\r\n  const {\r\n    startListeningIfSignal,\r\n    stopListeningIfSignal\r\n  } = createSignalHandlers();\r\n  process.on('newListener', startListeningIfSignal);\r\n  process.on('removeListener', stopListeningIfSignal);\r\n}\r\n\r\n// This has to be called after both initializeReport() and\r\n// setupSignalHandlers() are called\r\nfunction initializeReportSignalHandlers() {\r\n  if (!getOptionValue('--experimental-report')) {\r\n    return;\r\n  }\r\n\r\n  const { addSignalHandler } = require('internal/process/report');\r\n\r\n  addSignalHandler();\r\n}\r\n\r\nfunction initializeHeapSnapshotSignalHandlers() {\r\n  const signal = getOptionValue('--heapsnapshot-signal');\r\n\r\n  if (!signal)\r\n    return;\r\n\r\n  require('internal/validators').validateSignalName(signal);\r\n  const { writeHeapSnapshot } = require('v8');\r\n\r\n  process.on(signal, () => {\r\n    writeHeapSnapshot();\r\n  });\r\n}\r\n\r\nfunction setupTraceCategoryState() {\r\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\r\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\r\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\r\n}\r\n\r\nfunction setupInspectorHooks() {\r\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap,\r\n  // we cannot immediately call into JS to enable the hooks, which could\r\n  // interrupt the JS execution of bootstrap. So instead we save the\r\n  // notification in the inspector agent if it's sent in the middle of\r\n  // bootstrap, and process the notification later here.\r\n  if (internalBinding('config').hasInspector) {\r\n    const {\r\n      enable,\r\n      disable\r\n    } = require('internal/inspector_async_hook');\r\n    internalBinding('inspector').registerAsyncHook(enable, disable);\r\n  }\r\n}\r\n\r\n// In general deprecations are intialized wherever the APIs are implemented,\r\n// this is used to deprecate APIs implemented in C++ where the deprecation\r\n// utitlities are not easily accessible.\r\nfunction initializeDeprecations() {\r\n  const { deprecate } = require('internal/util');\r\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\r\n\r\n  // DEP0103: access to `process.binding('util').isX` type checkers\r\n  // TODO(addaleax): Turn into a full runtime deprecation.\r\n  const utilBinding = internalBinding('util');\r\n  const types = require('internal/util/types');\r\n  for (const name of [\r\n    'isArrayBuffer',\r\n    'isArrayBufferView',\r\n    'isAsyncFunction',\r\n    'isDataView',\r\n    'isDate',\r\n    'isExternal',\r\n    'isMap',\r\n    'isMapIterator',\r\n    'isNativeError',\r\n    'isPromise',\r\n    'isRegExp',\r\n    'isSet',\r\n    'isSetIterator',\r\n    'isTypedArray',\r\n    'isUint8Array',\r\n    'isAnyArrayBuffer'\r\n  ]) {\r\n    utilBinding[name] = pendingDeprecation ?\r\n      deprecate(types[name],\r\n                'Accessing native typechecking bindings of Node ' +\r\n                'directly is deprecated. ' +\r\n                `Please use \\`util.types.${name}\\` instead.`,\r\n                'DEP0103') :\r\n      types[name];\r\n  }\r\n\r\n  // TODO(joyeecheung): this is a legacy property exposed to process.\r\n  // Now that we use the config binding to carry this information, remove\r\n  // it from the process. We may consider exposing it properly in\r\n  // process.features.\r\n  const { noBrowserGlobals } = internalBinding('config');\r\n  if (noBrowserGlobals) {\r\n    Object.defineProperty(process, '_noBrowserGlobals', {\r\n      writable: false,\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: noBrowserGlobals\r\n    });\r\n  }\r\n\r\n  if (pendingDeprecation) {\r\n    process.binding = deprecate(process.binding,\r\n                                'process.binding() is deprecated. ' +\r\n                                'Please use public APIs instead.', 'DEP0111');\r\n\r\n    process._tickCallback = deprecate(process._tickCallback,\r\n                                      'process._tickCallback() is deprecated',\r\n                                      'DEP0134');\r\n  }\r\n\r\n  // Create global.process and global.Buffer as getters so that we have a\r\n  // deprecation path for these in ES Modules.\r\n  // See https://github.com/nodejs/node/pull/26334.\r\n  let _process = process;\r\n  Object.defineProperty(global, 'process', {\r\n    get() {\r\n      return _process;\r\n    },\r\n    set(value) {\r\n      _process = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true\r\n  });\r\n\r\n  let _Buffer = Buffer;\r\n  Object.defineProperty(global, 'Buffer', {\r\n    get() {\r\n      return _Buffer;\r\n    },\r\n    set(value) {\r\n      _Buffer = value;\r\n    },\r\n    enumerable: false,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nfunction setupChildProcessIpcChannel() {\r\n  if (process.env.NODE_CHANNEL_FD) {\r\n    const assert = require('internal/assert');\r\n\r\n    const fd = parseInt(process.env.NODE_CHANNEL_FD, 10);\r\n    assert(fd >= 0);\r\n\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_CHANNEL_FD;\r\n\r\n    require('child_process')._forkChild(fd);\r\n    assert(process.send);\r\n  }\r\n}\r\n\r\nfunction initializeClusterIPC() {\r\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\r\n    const cluster = require('cluster');\r\n    cluster._setupWorker();\r\n    // Make sure it's not accidentally inherited by child processes.\r\n    delete process.env.NODE_UNIQUE_ID;\r\n  }\r\n}\r\n\r\nfunction initializePolicy() {\r\n  const experimentalPolicy = getOptionValue('--experimental-policy');\r\n  if (experimentalPolicy) {\r\n    process.emitWarning('Policies are experimental.',\r\n                        'ExperimentalWarning');\r\n    const { pathToFileURL, URL } = require('url');\r\n    // URL here as it is slightly different parsing\r\n    // no bare specifiers for now\r\n    let manifestURL;\r\n    if (require('path').isAbsolute(experimentalPolicy)) {\r\n      manifestURL = new URL(`file:///${experimentalPolicy}`);\r\n    } else {\r\n      const cwdURL = pathToFileURL(process.cwd());\r\n      cwdURL.pathname += '/';\r\n      manifestURL = new URL(experimentalPolicy, cwdURL);\r\n    }\r\n    const fs = require('fs');\r\n    const src = fs.readFileSync(manifestURL, 'utf8');\r\n    const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');\r\n    if (experimentalPolicyIntegrity) {\r\n      const SRI = require('internal/policy/sri');\r\n      const { createHash, timingSafeEqual } = require('crypto');\r\n      const realIntegrities = new Map();\r\n      const integrityEntries = SRI.parse(experimentalPolicyIntegrity);\r\n      let foundMatch = false;\r\n      for (var i = 0; i < integrityEntries.length; i++) {\r\n        const {\r\n          algorithm,\r\n          value: expected\r\n        } = integrityEntries[i];\r\n        const hash = createHash(algorithm);\r\n        hash.update(src);\r\n        const digest = hash.digest();\r\n        if (digest.length === expected.length &&\r\n          timingSafeEqual(digest, expected)) {\r\n          foundMatch = true;\r\n          break;\r\n        }\r\n        realIntegrities.set(algorithm, digest.toString('base64'));\r\n      }\r\n      if (!foundMatch) {\r\n        throw new ERR_MANIFEST_ASSERT_INTEGRITY(manifestURL, realIntegrities);\r\n      }\r\n    }\r\n    require('internal/process/policy')\r\n      .setup(src, manifestURL.href);\r\n  }\r\n}\r\n\r\nfunction initializeCJSLoader() {\r\n  require('internal/modules/cjs/loader')._initPaths();\r\n}\r\n\r\nfunction initializeESMLoader() {\r\n  // Create this WeakMap in js-land because V8 has no C++ API for WeakMap.\r\n  internalBinding('module_wrap').callbackMap = new SafeWeakMap();\r\n\r\n  const experimentalModules = getOptionValue('--experimental-modules');\r\n  const experimentalVMModules = getOptionValue('--experimental-vm-modules');\r\n  if (experimentalModules || experimentalVMModules) {\r\n    if (experimentalModules) {\r\n      process.emitWarning(\r\n        'The ESM module loader is experimental.',\r\n        'ExperimentalWarning', undefined);\r\n    }\r\n\r\n    const {\r\n      setImportModuleDynamicallyCallback,\r\n      setInitializeImportMetaObjectCallback\r\n    } = internalBinding('module_wrap');\r\n    const esm = require('internal/process/esm_loader');\r\n    // Setup per-isolate callbacks that locate data or callbacks that we keep\r\n    // track of for different ESM modules.\r\n    setInitializeImportMetaObjectCallback(esm.initializeImportMetaObject);\r\n    setImportModuleDynamicallyCallback(esm.importModuleDynamicallyCallback);\r\n    const userLoader = getOptionValue('--experimental-loader');\r\n    // If --experimental-loader is specified, create a loader with user hooks.\r\n    // Otherwise create the default loader.\r\n    if (userLoader) {\r\n      const { emitExperimentalWarning } = require('internal/util');\r\n      emitExperimentalWarning('--experimental-loader');\r\n    }\r\n    esm.initializeLoader(process.cwd(), userLoader);\r\n  }\r\n}\r\n\r\nfunction initializeFrozenIntrinsics() {\r\n  if (getOptionValue('--frozen-intrinsics')) {\r\n    process.emitWarning('The --frozen-intrinsics flag is experimental',\r\n                        'ExperimentalWarning');\r\n    require('internal/freeze_intrinsics')();\r\n  }\r\n}\r\n\r\nfunction loadPreloadModules() {\r\n  // For user code, we preload modules if `-r` is passed\r\n  const preloadModules = getOptionValue('--require');\r\n  if (preloadModules && preloadModules.length > 0) {\r\n    const {\r\n      _preloadModules\r\n    } = require('internal/modules/cjs/loader');\r\n    _preloadModules(preloadModules);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  patchProcessObject,\r\n  setupCoverageHooks,\r\n  setupWarningHandler,\r\n  setupDebugEnv,\r\n  prepareMainThreadExecution,\r\n  initializeDeprecations,\r\n  initializeESMLoader,\r\n  initializeFrozenIntrinsics,\r\n  loadPreloadModules,\r\n  setupTraceCategoryState,\r\n  setupInspectorHooks,\r\n  initializeReport,\r\n  initializeCJSLoader\r\n};\r\n"
  },
  {
    "name": "internal/options.js",
    "source": "'use strict';\r\n\r\nconst { getOptions } = internalBinding('options');\r\nconst { options, aliases } = getOptions();\r\n\r\nfunction getOptionValue(option) {\r\n  const result = options.get(option);\r\n  if (!result) {\r\n    return undefined;\r\n  }\r\n  return result.value;\r\n}\r\n\r\nmodule.exports = {\r\n  options,\r\n  aliases,\r\n  getOptionValue\r\n};\r\n"
  },
  {
    "name": "internal/inspector_async_hook.js",
    "source": "'use strict';\r\n\r\nlet hook;\r\nlet config;\r\n\r\nfunction lazyHookCreation() {\r\n  const inspector = internalBinding('inspector');\r\n  const { createHook } = require('async_hooks');\r\n  config = internalBinding('config');\r\n\r\n  hook = createHook({\r\n    init(asyncId, type, triggerAsyncId, resource) {\r\n    // It's difficult to tell which tasks will be recurring and which won't,\r\n    // therefore we mark all tasks as recurring. Based on the discussion\r\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293,\r\n    // this should be fine as long as we call asyncTaskCanceled() too.\r\n      const recurring = true;\r\n      if (type === 'PROMISE')\r\n        this.promiseIds.add(asyncId);\r\n      else\r\n        inspector.asyncTaskScheduled(type, asyncId, recurring);\r\n    },\r\n\r\n    before(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskStarted(asyncId);\r\n    },\r\n\r\n    after(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return;\r\n      inspector.asyncTaskFinished(asyncId);\r\n    },\r\n\r\n    destroy(asyncId) {\r\n      if (this.promiseIds.has(asyncId))\r\n        return this.promiseIds.delete(asyncId);\r\n      inspector.asyncTaskCanceled(asyncId);\r\n    },\r\n  });\r\n\r\n  hook.promiseIds = new Set();\r\n}\r\n\r\nfunction enable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  if (config.bits < 64) {\r\n    // V8 Inspector stores task ids as (void*) pointers.\r\n    // async_hooks store ids as 64bit numbers.\r\n    // As a result, we cannot reliably translate async_hook ids to V8 async_task\r\n    // ids on 32bit platforms.\r\n    process.emitWarning(\r\n      'Warning: Async stack traces in debugger are not available ' +\r\n      `on ${config.bits}bit platforms. The feature is disabled.`,\r\n      {\r\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE',\r\n      });\r\n  } else {\r\n    hook.enable();\r\n  }\r\n}\r\n\r\nfunction disable() {\r\n  if (hook === undefined) lazyHookCreation();\r\n  hook.disable();\r\n}\r\n\r\nmodule.exports = {\r\n  enable,\r\n  disable\r\n};\r\n"
  },
  {
    "name": "internal/modules/cjs/loader.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst {\r\n  JSON,\r\n  Object,\r\n  ObjectPrototype,\r\n  Reflect,\r\n  SafeMap,\r\n  StringPrototype,\r\n} = primordials;\r\n\r\nconst { NativeModule } = require('internal/bootstrap/loaders');\r\nconst {\r\n  maybeCacheSourceMap,\r\n  rekeySourceMap\r\n} = require('internal/source_map/source_map_cache');\r\nconst { pathToFileURL, fileURLToPath, URL } = require('internal/url');\r\nconst { deprecate } = require('internal/util');\r\nconst vm = require('vm');\r\nconst assert = require('internal/assert');\r\nconst fs = require('fs');\r\nconst internalFS = require('internal/fs/utils');\r\nconst path = require('path');\r\nconst {\r\n  internalModuleReadJSON,\r\n  internalModuleStat\r\n} = internalBinding('fs');\r\nconst { safeGetenv } = internalBinding('credentials');\r\nconst {\r\n  makeRequireFunction,\r\n  normalizeReferrerURL,\r\n  stripBOM,\r\n  stripShebang,\r\n  loadNativeModule\r\n} = require('internal/modules/cjs/helpers');\r\nconst { getOptionValue } = require('internal/options');\r\nconst enableSourceMaps = getOptionValue('--enable-source-maps');\r\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\r\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\r\nconst experimentalModules = getOptionValue('--experimental-modules');\r\nconst manifest = getOptionValue('--experimental-policy') ?\r\n  require('internal/process/policy').manifest :\r\n  null;\r\nconst { compileFunction } = internalBinding('contextify');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_VALUE,\r\n  ERR_INVALID_OPT_VALUE,\r\n  ERR_REQUIRE_ESM\r\n} = require('internal/errors').codes;\r\nconst { validateString } = require('internal/validators');\r\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\r\nconst experimentalExports = getOptionValue('--experimental-exports');\r\n\r\nmodule.exports = Module;\r\n\r\nlet asyncESM, ModuleJob, ModuleWrap, kInstantiated;\r\n\r\nconst {\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_COLON\r\n} = require('internal/constants');\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nconst relativeResolveCache = Object.create(null);\r\n\r\nlet requireDepth = 0;\r\nlet statCache = null;\r\n\r\nfunction enrichCJSError(err) {\r\n  const stack = err.stack.split('\\n');\r\n\r\n  const lineWithErr = stack[1];\r\n\r\n  /*\r\n    The regular expression below targets the most common import statement\r\n    usage. However, some cases are not matching, cases like import statement\r\n    after a comment block and/or after a variable definition.\r\n  */\r\n  if (err.message.startsWith('Unexpected token \\'export\\'') ||\r\n    (/^\\s*import(?=[ {'\"*])\\s*(?![ (])/).test(lineWithErr)) {\r\n    process.emitWarning(\r\n      'To load an ES module, set \"type\": \"module\" in the package.json or use ' +\r\n      'the .mjs extension.',\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      true);\r\n  }\r\n}\r\n\r\nfunction stat(filename) {\r\n  filename = path.toNamespacedPath(filename);\r\n  if (statCache !== null) {\r\n    const result = statCache.get(filename);\r\n    if (result !== undefined) return result;\r\n  }\r\n  const result = internalModuleStat(filename);\r\n  if (statCache !== null) statCache.set(filename, result);\r\n  return result;\r\n}\r\n\r\nfunction updateChildren(parent, child, scan) {\r\n  const children = parent && parent.children;\r\n  if (children && !(scan && children.includes(child)))\r\n    children.push(child);\r\n}\r\n\r\nfunction Module(id = '', parent) {\r\n  this.id = id;\r\n  this.path = path.dirname(id);\r\n  this.exports = {};\r\n  this.parent = parent;\r\n  updateChildren(parent, this, false);\r\n  this.filename = null;\r\n  this.loaded = false;\r\n  this.children = [];\r\n}\r\n\r\nconst builtinModules = [];\r\nfor (const [id, mod] of NativeModule.map) {\r\n  if (mod.canBeRequiredByUsers) {\r\n    builtinModules.push(id);\r\n  }\r\n}\r\n\r\nObject.freeze(builtinModules);\r\nModule.builtinModules = builtinModules;\r\n\r\nModule._cache = Object.create(null);\r\nModule._pathCache = Object.create(null);\r\nModule._extensions = Object.create(null);\r\nvar modulePaths = [];\r\nModule.globalPaths = [];\r\n\r\nlet patched = false;\r\n\r\n// eslint-disable-next-line func-style\r\nlet wrap = function(script) {\r\n  return Module.wrapper[0] + script + Module.wrapper[1];\r\n};\r\n\r\nconst wrapper = [\r\n  '(function (exports, require, module, __filename, __dirname) { ',\r\n  '\\n});'\r\n];\r\n\r\nlet wrapperProxy = new Proxy(wrapper, {\r\n  set(target, property, value, receiver) {\r\n    patched = true;\r\n    return Reflect.set(target, property, value, receiver);\r\n  },\r\n\r\n  defineProperty(target, property, descriptor) {\r\n    patched = true;\r\n    return Object.defineProperty(target, property, descriptor);\r\n  }\r\n});\r\n\r\nObject.defineProperty(Module, 'wrap', {\r\n  get() {\r\n    return wrap;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrap = value;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Module, 'wrapper', {\r\n  get() {\r\n    return wrapperProxy;\r\n  },\r\n\r\n  set(value) {\r\n    patched = true;\r\n    wrapperProxy = value;\r\n  }\r\n});\r\n\r\nconst debug = require('internal/util/debuglog').debuglog('module');\r\nModule._debug = deprecate(debug, 'Module._debug is deprecated.', 'DEP0077');\r\n\r\n// Given a module name, and a list of paths to test, returns the first\r\n// matching file in the following precedence.\r\n//\r\n// require(\"a.<ext>\")\r\n//   -> a.<ext>\r\n//\r\n// require(\"a\")\r\n//   -> a\r\n//   -> a.<ext>\r\n//   -> a/index.<ext>\r\n\r\nconst packageJsonCache = new SafeMap();\r\n\r\nfunction readPackage(requestPath) {\r\n  const jsonPath = path.resolve(requestPath, 'package.json');\r\n\r\n  const existing = packageJsonCache.get(jsonPath);\r\n  if (existing !== undefined) return existing;\r\n\r\n  const json = internalModuleReadJSON(path.toNamespacedPath(jsonPath));\r\n  if (json === undefined) {\r\n    packageJsonCache.set(jsonPath, false);\r\n    return false;\r\n  }\r\n\r\n  if (manifest) {\r\n    const jsonURL = pathToFileURL(jsonPath);\r\n    manifest.assertIntegrity(jsonURL, json);\r\n  }\r\n\r\n  try {\r\n    const parsed = JSON.parse(json);\r\n    const filtered = {\r\n      main: parsed.main,\r\n      exports: parsed.exports,\r\n      type: parsed.type\r\n    };\r\n    packageJsonCache.set(jsonPath, filtered);\r\n    return filtered;\r\n  } catch (e) {\r\n    e.path = jsonPath;\r\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\r\n    throw e;\r\n  }\r\n}\r\n\r\nfunction readPackageScope(checkPath) {\r\n  const rootSeparatorIndex = checkPath.indexOf(path.sep);\r\n  let separatorIndex;\r\n  while (\r\n    (separatorIndex = checkPath.lastIndexOf(path.sep)) > rootSeparatorIndex\r\n  ) {\r\n    checkPath = checkPath.slice(0, separatorIndex);\r\n    if (checkPath.endsWith(path.sep + 'node_modules'))\r\n      return false;\r\n    const pjson = readPackage(checkPath);\r\n    if (pjson) return pjson;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction readPackageMain(requestPath) {\r\n  const pkg = readPackage(requestPath);\r\n  return pkg ? pkg.main : undefined;\r\n}\r\n\r\nfunction readPackageExports(requestPath) {\r\n  const pkg = readPackage(requestPath);\r\n  return pkg ? pkg.exports : undefined;\r\n}\r\n\r\nfunction tryPackage(requestPath, exts, isMain, originalPath) {\r\n  const pkg = readPackageMain(requestPath);\r\n\r\n  if (!pkg) {\r\n    return tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n  }\r\n\r\n  const filename = path.resolve(requestPath, pkg);\r\n  let actual = tryFile(filename, isMain) ||\r\n    tryExtensions(filename, exts, isMain) ||\r\n    tryExtensions(path.resolve(filename, 'index'), exts, isMain);\r\n  if (actual === false) {\r\n    actual = tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\r\n    if (!actual) {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const err = new Error(\r\n        `Cannot find module '${filename}'. ` +\r\n        'Please verify that the package.json has a valid \"main\" entry'\r\n      );\r\n      err.code = 'MODULE_NOT_FOUND';\r\n      err.path = path.resolve(requestPath, 'package.json');\r\n      err.requestPath = originalPath;\r\n      // TODO(BridgeAR): Add the requireStack as well.\r\n      throw err;\r\n    } else if (pendingDeprecation) {\r\n      const jsonPath = path.resolve(requestPath, 'package.json');\r\n      process.emitWarning(\r\n        `Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` +\r\n          'Please either fix that or report it to the module author',\r\n        'DeprecationWarning',\r\n        'DEP0128'\r\n      );\r\n    }\r\n  }\r\n  return actual;\r\n}\r\n\r\n// In order to minimize unnecessary lstat() calls,\r\n// this cache is a list of known-real paths.\r\n// Set to an empty Map to reset.\r\nconst realpathCache = new Map();\r\n\r\n// Check if the file exists and is not a directory\r\n// if using --preserve-symlinks and isMain is false,\r\n// keep symlinks intact, otherwise resolve to the\r\n// absolute realpath.\r\nfunction tryFile(requestPath, isMain) {\r\n  const rc = stat(requestPath);\r\n  if (preserveSymlinks && !isMain) {\r\n    return rc === 0 && path.resolve(requestPath);\r\n  }\r\n  return rc === 0 && toRealPath(requestPath);\r\n}\r\n\r\nfunction toRealPath(requestPath) {\r\n  return fs.realpathSync(requestPath, {\r\n    [internalFS.realpathCacheKey]: realpathCache\r\n  });\r\n}\r\n\r\n// Given a path, check if the file exists with any of the set extensions\r\nfunction tryExtensions(p, exts, isMain) {\r\n  for (var i = 0; i < exts.length; i++) {\r\n    const filename = tryFile(p + exts[i], isMain);\r\n\r\n    if (filename) {\r\n      return filename;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n// Find the longest (possibly multi-dot) extension registered in\r\n// Module._extensions\r\nfunction findLongestRegisteredExtension(filename) {\r\n  const name = path.basename(filename);\r\n  let currentExtension;\r\n  let index;\r\n  let startIndex = 0;\r\n  while ((index = name.indexOf('.', startIndex)) !== -1) {\r\n    startIndex = index + 1;\r\n    if (index === 0) continue; // Skip dotfiles like .gitignore\r\n    currentExtension = name.slice(index);\r\n    if (Module._extensions[currentExtension]) return currentExtension;\r\n  }\r\n  return '.js';\r\n}\r\n\r\n// This only applies to requests of a specific form:\r\n// 1. name/.*\r\n// 2. @scope/name/.*\r\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\r\nfunction resolveExports(nmPath, request, absoluteRequest) {\r\n  // The implementation's behavior is meant to mirror resolution in ESM.\r\n  if (experimentalExports && !absoluteRequest) {\r\n    const [, name, expansion = ''] =\r\n      StringPrototype.match(request, EXPORTS_PATTERN) || [];\r\n    if (!name) {\r\n      return path.resolve(nmPath, request);\r\n    }\r\n\r\n    const basePath = path.resolve(nmPath, name);\r\n    const pkgExports = readPackageExports(basePath);\r\n    const mappingKey = `.${expansion}`;\r\n\r\n    if (typeof pkgExports === 'object' && pkgExports !== null) {\r\n      if (ObjectPrototype.hasOwnProperty(pkgExports, mappingKey)) {\r\n        const mapping = pkgExports[mappingKey];\r\n        return resolveExportsTarget(pathToFileURL(basePath + '/'), mapping, '',\r\n                                    basePath, mappingKey);\r\n      }\r\n\r\n      let dirMatch = '';\r\n      for (const candidateKey of Object.keys(pkgExports)) {\r\n        if (candidateKey[candidateKey.length - 1] !== '/') continue;\r\n        if (candidateKey.length > dirMatch.length &&\r\n            StringPrototype.startsWith(mappingKey, candidateKey)) {\r\n          dirMatch = candidateKey;\r\n        }\r\n      }\r\n\r\n      if (dirMatch !== '') {\r\n        const mapping = pkgExports[dirMatch];\r\n        const subpath = StringPrototype.slice(mappingKey, dirMatch.length);\r\n        return resolveExportsTarget(pathToFileURL(basePath + '/'), mapping,\r\n                                    subpath, basePath, mappingKey);\r\n      }\r\n    }\r\n    if (mappingKey === '.' && typeof pkgExports === 'string') {\r\n      return resolveExportsTarget(pathToFileURL(basePath + '/'), pkgExports,\r\n                                  '', basePath, mappingKey);\r\n    }\r\n    if (pkgExports != null) {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      const e = new Error(`Package exports for '${basePath}' do not define ` +\r\n          `a '${mappingKey}' subpath`);\r\n      e.code = 'MODULE_NOT_FOUND';\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  return path.resolve(nmPath, request);\r\n}\r\n\r\nfunction resolveExportsTarget(pkgPath, target, subpath, basePath, mappingKey) {\r\n  if (typeof target === 'string') {\r\n    if (target.startsWith('./') &&\r\n        (subpath.length === 0 || target.endsWith('/'))) {\r\n      const resolvedTarget = new URL(target, pkgPath);\r\n      const pkgPathPath = pkgPath.pathname;\r\n      const resolvedTargetPath = resolvedTarget.pathname;\r\n      if (StringPrototype.startsWith(resolvedTargetPath, pkgPathPath) &&\r\n          StringPrototype.indexOf(resolvedTargetPath, '/node_modules/',\r\n                                  pkgPathPath.length - 1) === -1) {\r\n        const resolved = new URL(subpath, resolvedTarget);\r\n        const resolvedPath = resolved.pathname;\r\n        if (StringPrototype.startsWith(resolvedPath, resolvedTargetPath) &&\r\n            StringPrototype.indexOf(resolvedPath, '/node_modules/',\r\n                                    pkgPathPath.length - 1) === -1) {\r\n          return fileURLToPath(resolved);\r\n        }\r\n      }\r\n    }\r\n  } else if (Array.isArray(target)) {\r\n    for (const targetValue of target) {\r\n      if (typeof targetValue !== 'string') continue;\r\n      try {\r\n        return resolveExportsTarget(pkgPath, targetValue, subpath, basePath,\r\n                                    mappingKey);\r\n      } catch (e) {\r\n        if (e.code !== 'MODULE_NOT_FOUND') throw e;\r\n      }\r\n    }\r\n  }\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const e = new Error(`Package exports for '${basePath}' do not define a ` +\r\n      `valid '${mappingKey}' target${subpath ? 'for ' + subpath : ''}`);\r\n  e.code = 'MODULE_NOT_FOUND';\r\n  throw e;\r\n}\r\n\r\nModule._findPath = function(request, paths, isMain) {\r\n  const absoluteRequest = path.isAbsolute(request);\r\n  if (absoluteRequest) {\r\n    paths = [''];\r\n  } else if (!paths || paths.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  const cacheKey = request + '\\x00' +\r\n                (paths.length === 1 ? paths[0] : paths.join('\\x00'));\r\n  const entry = Module._pathCache[cacheKey];\r\n  if (entry)\r\n    return entry;\r\n\r\n  var exts;\r\n  var trailingSlash = request.length > 0 &&\r\n    request.charCodeAt(request.length - 1) === CHAR_FORWARD_SLASH;\r\n  if (!trailingSlash) {\r\n    trailingSlash = /(?:^|\\/)\\.?\\.$/.test(request);\r\n  }\r\n\r\n  // For each path\r\n  for (var i = 0; i < paths.length; i++) {\r\n    // Don't search further if path doesn't exist\r\n    const curPath = paths[i];\r\n    if (curPath && stat(curPath) < 1) continue;\r\n    var basePath = resolveExports(curPath, request, absoluteRequest);\r\n    var filename;\r\n\r\n    var rc = stat(basePath);\r\n    if (!trailingSlash) {\r\n      if (rc === 0) {  // File.\r\n        if (!isMain) {\r\n          if (preserveSymlinks) {\r\n            filename = path.resolve(basePath);\r\n          } else {\r\n            filename = toRealPath(basePath);\r\n          }\r\n        } else if (preserveSymlinksMain) {\r\n          // For the main module, we use the preserveSymlinksMain flag instead\r\n          // mainly for backward compatibility, as the preserveSymlinks flag\r\n          // historically has not applied to the main module.  Most likely this\r\n          // was intended to keep .bin/ binaries working, as following those\r\n          // symlinks is usually required for the imports in the corresponding\r\n          // files to resolve; that said, in some use cases following symlinks\r\n          // causes bigger problems which is why the preserveSymlinksMain option\r\n          // is needed.\r\n          filename = path.resolve(basePath);\r\n        } else {\r\n          filename = toRealPath(basePath);\r\n        }\r\n      }\r\n\r\n      if (!filename) {\r\n        // Try it with each of the extensions\r\n        if (exts === undefined)\r\n          exts = Object.keys(Module._extensions);\r\n        filename = tryExtensions(basePath, exts, isMain);\r\n      }\r\n    }\r\n\r\n    if (!filename && rc === 1) {  // Directory.\r\n      // try it with each of the extensions at \"index\"\r\n      if (exts === undefined)\r\n        exts = Object.keys(Module._extensions);\r\n      filename = tryPackage(basePath, exts, isMain, request);\r\n    }\r\n\r\n    if (filename) {\r\n      Module._pathCache[cacheKey] = filename;\r\n      return filename;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// 'node_modules' character codes reversed\r\nconst nmChars = [ 115, 101, 108, 117, 100, 111, 109, 95, 101, 100, 111, 110 ];\r\nconst nmLen = nmChars.length;\r\nif (isWindows) {\r\n  // 'from' is the __dirname of the module.\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n\r\n    // return root node_modules when path is 'D:\\\\'.\r\n    // path.resolve will make sure from.length >=3 in Windows.\r\n    if (from.charCodeAt(from.length - 1) === CHAR_BACKWARD_SLASH &&\r\n        from.charCodeAt(from.length - 2) === CHAR_COLON)\r\n      return [from + 'node_modules'];\r\n\r\n    const paths = [];\r\n    var p = 0;\r\n    var last = from.length;\r\n    for (var i = from.length - 1; i >= 0; --i) {\r\n      const code = from.charCodeAt(i);\r\n      // The path segment separator check ('\\' and '/') was used to get\r\n      // node_modules path for every path segment.\r\n      // Use colon as an extra condition since we can get node_modules\r\n      // path for drive root like 'C:\\node_modules' and don't need to\r\n      // parse drive name.\r\n      if (code === CHAR_BACKWARD_SLASH ||\r\n          code === CHAR_FORWARD_SLASH ||\r\n          code === CHAR_COLON) {\r\n        if (p !== nmLen)\r\n          paths.push(from.slice(0, last) + '\\\\node_modules');\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return paths;\r\n  };\r\n} else { // posix\r\n  // 'from' is the __dirname of the module.\r\n  Module._nodeModulePaths = function(from) {\r\n    // Guarantee that 'from' is absolute.\r\n    from = path.resolve(from);\r\n    // Return early not only to avoid unnecessary work, but to *avoid* returning\r\n    // an array of two items for a root: [ '//node_modules', '/node_modules' ]\r\n    if (from === '/')\r\n      return ['/node_modules'];\r\n\r\n    // note: this approach *only* works when the path is guaranteed\r\n    // to be absolute.  Doing a fully-edge-case-correct path.split\r\n    // that works on both Windows and Posix is non-trivial.\r\n    const paths = [];\r\n    var p = 0;\r\n    var last = from.length;\r\n    for (var i = from.length - 1; i >= 0; --i) {\r\n      const code = from.charCodeAt(i);\r\n      if (code === CHAR_FORWARD_SLASH) {\r\n        if (p !== nmLen)\r\n          paths.push(from.slice(0, last) + '/node_modules');\r\n        last = i;\r\n        p = 0;\r\n      } else if (p !== -1) {\r\n        if (nmChars[p] === code) {\r\n          ++p;\r\n        } else {\r\n          p = -1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Append /node_modules to handle root paths.\r\n    paths.push('/node_modules');\r\n\r\n    return paths;\r\n  };\r\n}\r\n\r\nModule._resolveLookupPaths = function(request, parent) {\r\n  if (NativeModule.canBeRequiredByUsers(request)) {\r\n    debug('looking for %j in []', request);\r\n    return null;\r\n  }\r\n\r\n  // Check for node modules paths.\r\n  if (request.charAt(0) !== '.' ||\r\n      (request.length > 1 &&\r\n      request.charAt(1) !== '.' &&\r\n      request.charAt(1) !== '/' &&\r\n      (!isWindows || request.charAt(1) !== '\\\\'))) {\r\n\r\n    let paths = modulePaths;\r\n    if (parent != null && parent.paths && parent.paths.length) {\r\n      paths = parent.paths.concat(paths);\r\n    }\r\n\r\n    debug('looking for %j in %j', request, paths);\r\n    return paths.length > 0 ? paths : null;\r\n  }\r\n\r\n  // With --eval, parent.id is not set and parent.filename is null.\r\n  if (!parent || !parent.id || !parent.filename) {\r\n    // Make require('./path/to/foo') work - normally the path is taken\r\n    // from realpath(__filename) but with eval there is no filename\r\n    const mainPaths = ['.'].concat(Module._nodeModulePaths('.'), modulePaths);\r\n\r\n    debug('looking for %j in %j', request, mainPaths);\r\n    return mainPaths;\r\n  }\r\n\r\n  debug('RELATIVE: requested: %s from parent.id %s', request, parent.id);\r\n\r\n  const parentDir = [path.dirname(parent.filename)];\r\n  debug('looking for %j', parentDir);\r\n  return parentDir;\r\n};\r\n\r\n// Check the cache for the requested file.\r\n// 1. If a module already exists in the cache: return its exports object.\r\n// 2. If the module is native: call\r\n//    `NativeModule.prototype.compileForPublicLoader()` and return the exports.\r\n// 3. Otherwise, create a new module for the file and save it to the cache.\r\n//    Then have it load  the file contents before returning its exports\r\n//    object.\r\nModule._load = function(request, parent, isMain) {\r\n  let relResolveCacheIdentifier;\r\n  if (parent) {\r\n    debug('Module._load REQUEST %s parent: %s', request, parent.id);\r\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\r\n    // caching is required to allow cache invalidation without changing the old\r\n    // cache key names.\r\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\r\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\r\n    if (filename !== undefined) {\r\n      const cachedModule = Module._cache[filename];\r\n      if (cachedModule !== undefined) {\r\n        updateChildren(parent, cachedModule, true);\r\n        return cachedModule.exports;\r\n      }\r\n      delete relativeResolveCache[relResolveCacheIdentifier];\r\n    }\r\n  }\r\n\r\n  const filename = Module._resolveFilename(request, parent, isMain);\r\n\r\n  const cachedModule = Module._cache[filename];\r\n  if (cachedModule !== undefined) {\r\n    updateChildren(parent, cachedModule, true);\r\n    return cachedModule.exports;\r\n  }\r\n\r\n  const mod = loadNativeModule(filename, request, experimentalModules);\r\n  if (mod && mod.canBeRequiredByUsers) return mod.exports;\r\n\r\n  // Don't call updateChildren(), Module constructor already does.\r\n  const module = new Module(filename, parent);\r\n\r\n  if (isMain) {\r\n    process.mainModule = module;\r\n    module.id = '.';\r\n  }\r\n\r\n  Module._cache[filename] = module;\r\n  if (parent !== undefined) {\r\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\r\n  }\r\n\r\n  let threw = true;\r\n  try {\r\n    // Intercept exceptions that occur during the first tick and rekey them\r\n    // on error instance rather than module instance (which will immediately be\r\n    // garbage collected).\r\n    if (enableSourceMaps) {\r\n      try {\r\n        module.load(filename);\r\n      } catch (err) {\r\n        rekeySourceMap(Module._cache[filename], err);\r\n        throw err; /* node-do-not-add-exception-line */\r\n      }\r\n    } else {\r\n      module.load(filename);\r\n    }\r\n    threw = false;\r\n  } finally {\r\n    if (threw) {\r\n      delete Module._cache[filename];\r\n      if (parent !== undefined) {\r\n        delete relativeResolveCache[relResolveCacheIdentifier];\r\n      }\r\n    }\r\n  }\r\n\r\n  return module.exports;\r\n};\r\n\r\nModule._resolveFilename = function(request, parent, isMain, options) {\r\n  if (NativeModule.canBeRequiredByUsers(request)) {\r\n    return request;\r\n  }\r\n\r\n  var paths;\r\n\r\n  if (typeof options === 'object' && options !== null) {\r\n    if (Array.isArray(options.paths)) {\r\n      const isRelative = request.startsWith('./') ||\r\n          request.startsWith('../') ||\r\n          ((isWindows && request.startsWith('.\\\\')) ||\r\n          request.startsWith('..\\\\'));\r\n\r\n      if (isRelative) {\r\n        paths = options.paths;\r\n      } else {\r\n        const fakeParent = new Module('', null);\r\n\r\n        paths = [];\r\n\r\n        for (var i = 0; i < options.paths.length; i++) {\r\n          const path = options.paths[i];\r\n          fakeParent.paths = Module._nodeModulePaths(path);\r\n          const lookupPaths = Module._resolveLookupPaths(request, fakeParent);\r\n\r\n          for (var j = 0; j < lookupPaths.length; j++) {\r\n            if (!paths.includes(lookupPaths[j]))\r\n              paths.push(lookupPaths[j]);\r\n          }\r\n        }\r\n      }\r\n    } else if (options.paths === undefined) {\r\n      paths = Module._resolveLookupPaths(request, parent);\r\n    } else {\r\n      throw new ERR_INVALID_OPT_VALUE('options.paths', options.paths);\r\n    }\r\n  } else {\r\n    paths = Module._resolveLookupPaths(request, parent);\r\n  }\r\n\r\n  // Look up the filename first, since that's the cache key.\r\n  const filename = Module._findPath(request, paths, isMain);\r\n  if (!filename) {\r\n    const requireStack = [];\r\n    for (var cursor = parent;\r\n      cursor;\r\n      cursor = cursor.parent) {\r\n      requireStack.push(cursor.filename || cursor.id);\r\n    }\r\n    let message = `Cannot find module '${request}'`;\r\n    if (requireStack.length > 0) {\r\n      message = message + '\\nRequire stack:\\n- ' + requireStack.join('\\n- ');\r\n    }\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    var err = new Error(message);\r\n    err.code = 'MODULE_NOT_FOUND';\r\n    err.requireStack = requireStack;\r\n    throw err;\r\n  }\r\n  return filename;\r\n};\r\n\r\n\r\n// Given a file name, pass it to the proper extension handler.\r\nModule.prototype.load = function(filename) {\r\n  debug('load %j for module %j', filename, this.id);\r\n\r\n  assert(!this.loaded);\r\n  this.filename = filename;\r\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\r\n\r\n  const extension = findLongestRegisteredExtension(filename);\r\n  Module._extensions[extension](this, filename);\r\n  this.loaded = true;\r\n\r\n  if (experimentalModules) {\r\n    const ESMLoader = asyncESM.ESMLoader;\r\n    const url = `${pathToFileURL(filename)}`;\r\n    const module = ESMLoader.moduleMap.get(url);\r\n    // Create module entry at load time to snapshot exports correctly\r\n    const exports = this.exports;\r\n    // Called from cjs translator\r\n    if (module !== undefined && module.module !== undefined) {\r\n      if (module.module.getStatus() >= kInstantiated)\r\n        module.module.setExport('default', exports);\r\n    } else { // preemptively cache\r\n      ESMLoader.moduleMap.set(\r\n        url,\r\n        new ModuleJob(ESMLoader, url, () =>\r\n          new ModuleWrap(function() {\r\n            this.setExport('default', exports);\r\n          }, ['default'], url)\r\n        )\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// Loads a module at the given file path. Returns that module's\r\n// `exports` property.\r\nModule.prototype.require = function(id) {\r\n  validateString(id, 'id');\r\n  if (id === '') {\r\n    throw new ERR_INVALID_ARG_VALUE('id', id,\r\n                                    'must be a non-empty string');\r\n  }\r\n  requireDepth++;\r\n  try {\r\n    return Module._load(id, this, /* isMain */ false);\r\n  } finally {\r\n    requireDepth--;\r\n  }\r\n};\r\n\r\n\r\n// Resolved path to process.argv[1] will be lazily placed here\r\n// (needed for setting breakpoint when called with --inspect-brk)\r\nvar resolvedArgv;\r\nlet hasPausedEntry = false;\r\n\r\n// Run the file contents in the correct scope or sandbox. Expose\r\n// the correct helper variables (require, module, exports) to\r\n// the file.\r\n// Returns exception, if any.\r\nModule.prototype._compile = function(content, filename) {\r\n  let moduleURL;\r\n  let redirects;\r\n  if (manifest) {\r\n    moduleURL = pathToFileURL(filename);\r\n    redirects = manifest.getRedirector(moduleURL);\r\n    manifest.assertIntegrity(moduleURL, content);\r\n  }\r\n\r\n  content = stripShebang(content);\r\n  maybeCacheSourceMap(filename, content, this);\r\n\r\n  let compiledWrapper;\r\n  if (patched) {\r\n    const wrapper = Module.wrap(content);\r\n    compiledWrapper = vm.runInThisContext(wrapper, {\r\n      filename,\r\n      lineOffset: 0,\r\n      displayErrors: true,\r\n      importModuleDynamically: experimentalModules ? async (specifier) => {\r\n        const loader = await asyncESM.loaderPromise;\r\n        return loader.import(specifier, normalizeReferrerURL(filename));\r\n      } : undefined,\r\n    });\r\n  } else {\r\n    let compiled;\r\n    try {\r\n      compiled = compileFunction(\r\n        content,\r\n        filename,\r\n        0,\r\n        0,\r\n        undefined,\r\n        false,\r\n        undefined,\r\n        [],\r\n        [\r\n          'exports',\r\n          'require',\r\n          'module',\r\n          '__filename',\r\n          '__dirname',\r\n        ]\r\n      );\r\n    } catch (err) {\r\n      if (experimentalModules) {\r\n        enrichCJSError(err);\r\n      }\r\n      throw err;\r\n    }\r\n\r\n    if (experimentalModules) {\r\n      const { callbackMap } = internalBinding('module_wrap');\r\n      callbackMap.set(compiled.cacheKey, {\r\n        importModuleDynamically: async (specifier) => {\r\n          const loader = await asyncESM.loaderPromise;\r\n          return loader.import(specifier, normalizeReferrerURL(filename));\r\n        }\r\n      });\r\n    }\r\n    compiledWrapper = compiled.function;\r\n  }\r\n\r\n  var inspectorWrapper = null;\r\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\r\n    if (!resolvedArgv) {\r\n      // We enter the repl if we're not given a filename argument.\r\n      if (process.argv[1]) {\r\n        resolvedArgv = Module._resolveFilename(process.argv[1], null, false);\r\n      } else {\r\n        resolvedArgv = 'repl';\r\n      }\r\n    }\r\n\r\n    // Set breakpoint on module start\r\n    if (!hasPausedEntry && filename === resolvedArgv) {\r\n      hasPausedEntry = true;\r\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\r\n    }\r\n  }\r\n  const dirname = path.dirname(filename);\r\n  const require = makeRequireFunction(this, redirects);\r\n  var result;\r\n  const exports = this.exports;\r\n  const thisValue = exports;\r\n  const module = this;\r\n  if (requireDepth === 0) statCache = new Map();\r\n  if (inspectorWrapper) {\r\n    result = inspectorWrapper(compiledWrapper, thisValue, exports,\r\n                              require, module, filename, dirname);\r\n  } else {\r\n    result = compiledWrapper.call(thisValue, exports, require, module,\r\n                                  filename, dirname);\r\n  }\r\n  if (requireDepth === 0) statCache = null;\r\n  return result;\r\n};\r\n\r\n\r\n// Native extension for .js\r\nModule._extensions['.js'] = function(module, filename) {\r\n  if (experimentalModules && filename.endsWith('.js')) {\r\n    const pkg = readPackageScope(filename);\r\n    if (pkg && pkg.type === 'module') {\r\n      throw new ERR_REQUIRE_ESM(filename);\r\n    }\r\n  }\r\n  const content = fs.readFileSync(filename, 'utf8');\r\n  module._compile(stripBOM(content), filename);\r\n};\r\n\r\n\r\n// Native extension for .json\r\nModule._extensions['.json'] = function(module, filename) {\r\n  const content = fs.readFileSync(filename, 'utf8');\r\n\r\n  if (manifest) {\r\n    const moduleURL = pathToFileURL(filename);\r\n    manifest.assertIntegrity(moduleURL, content);\r\n  }\r\n\r\n  try {\r\n    module.exports = JSON.parse(stripBOM(content));\r\n  } catch (err) {\r\n    err.message = filename + ': ' + err.message;\r\n    throw err;\r\n  }\r\n};\r\n\r\n\r\n// Native extension for .node\r\nModule._extensions['.node'] = function(module, filename) {\r\n  if (manifest) {\r\n    const content = fs.readFileSync(filename);\r\n    const moduleURL = pathToFileURL(filename);\r\n    manifest.assertIntegrity(moduleURL, content);\r\n  }\r\n  // Be aware this doesn't use `content`\r\n  return process.dlopen(module, path.toNamespacedPath(filename));\r\n};\r\n\r\nModule._extensions['.mjs'] = function(module, filename) {\r\n  throw new ERR_REQUIRE_ESM(filename);\r\n};\r\n\r\n// Bootstrap main module.\r\nModule.runMain = function() {\r\n  // Load the main module--the command line argument.\r\n  if (experimentalModules) {\r\n    asyncESM.loaderPromise.then((loader) => {\r\n      return loader.import(pathToFileURL(process.argv[1]).href);\r\n    })\r\n    .catch((e) => {\r\n      internalBinding('errors').triggerUncaughtException(\r\n        e,\r\n        true /* fromPromise */\r\n      );\r\n    });\r\n    return;\r\n  }\r\n  Module._load(process.argv[1], null, true);\r\n};\r\n\r\nfunction createRequireFromPath(filename) {\r\n  // Allow a directory to be passed as the filename\r\n  const trailingSlash =\r\n    filename.endsWith('/') || (isWindows && filename.endsWith('\\\\'));\r\n\r\n  const proxyPath = trailingSlash ?\r\n    path.join(filename, 'noop.js') :\r\n    filename;\r\n\r\n  const m = new Module(proxyPath);\r\n  m.filename = proxyPath;\r\n\r\n  m.paths = Module._nodeModulePaths(m.path);\r\n  return makeRequireFunction(m, null);\r\n}\r\n\r\nModule.createRequireFromPath = createRequireFromPath;\r\n\r\nconst createRequireError = 'must be a file URL object, file URL string, or ' +\r\n  'absolute path string';\r\n\r\nfunction createRequire(filename) {\r\n  let filepath;\r\n\r\n  if (filename instanceof URL ||\r\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\r\n    try {\r\n      filepath = fileURLToPath(filename);\r\n    } catch {\r\n      throw new ERR_INVALID_ARG_VALUE('filename', filename,\r\n                                      createRequireError);\r\n    }\r\n  } else if (typeof filename !== 'string') {\r\n    throw new ERR_INVALID_ARG_VALUE('filename', filename, createRequireError);\r\n  } else {\r\n    filepath = filename;\r\n  }\r\n  return createRequireFromPath(filepath);\r\n}\r\n\r\nModule.createRequire = createRequire;\r\n\r\nModule._initPaths = function() {\r\n  var homeDir;\r\n  var nodePath;\r\n  if (isWindows) {\r\n    homeDir = process.env.USERPROFILE;\r\n    nodePath = process.env.NODE_PATH;\r\n  } else {\r\n    homeDir = safeGetenv('HOME');\r\n    nodePath = safeGetenv('NODE_PATH');\r\n  }\r\n\r\n  // $PREFIX/lib/node, where $PREFIX is the root of the Node.js installation.\r\n  var prefixDir;\r\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\r\n  // $PREFIX\\node.exe.\r\n  if (isWindows) {\r\n    prefixDir = path.resolve(process.execPath, '..');\r\n  } else {\r\n    prefixDir = path.resolve(process.execPath, '..', '..');\r\n  }\r\n  var paths = [path.resolve(prefixDir, 'lib', 'node')];\r\n\r\n  if (homeDir) {\r\n    paths.unshift(path.resolve(homeDir, '.node_libraries'));\r\n    paths.unshift(path.resolve(homeDir, '.node_modules'));\r\n  }\r\n\r\n  if (nodePath) {\r\n    paths = nodePath.split(path.delimiter).filter(function pathsFilterCB(path) {\r\n      return !!path;\r\n    }).concat(paths);\r\n  }\r\n\r\n  modulePaths = paths;\r\n\r\n  // Clone as a shallow copy, for introspection.\r\n  Module.globalPaths = modulePaths.slice(0);\r\n};\r\n\r\nModule._preloadModules = function(requests) {\r\n  if (!Array.isArray(requests))\r\n    return;\r\n\r\n  // Preloaded modules have a dummy parent module which is deemed to exist\r\n  // in the current working directory. This seeds the search path for\r\n  // preloaded modules.\r\n  const parent = new Module('internal/preload', null);\r\n  try {\r\n    parent.paths = Module._nodeModulePaths(process.cwd());\r\n  } catch (e) {\r\n    if (e.code !== 'ENOENT') {\r\n      throw e;\r\n    }\r\n  }\r\n  for (var n = 0; n < requests.length; n++)\r\n    parent.require(requests[n]);\r\n};\r\n\r\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\r\n  for (const mod of NativeModule.map.values()) {\r\n    if (mod.canBeRequiredByUsers) {\r\n      mod.syncExports();\r\n    }\r\n  }\r\n};\r\n\r\n// Backwards compatibility\r\nModule.Module = Module;\r\n\r\n// We have to load the esm things after module.exports!\r\nif (experimentalModules) {\r\n  asyncESM = require('internal/process/esm_loader');\r\n  ModuleJob = require('internal/modules/esm/module_job');\r\n  ({ ModuleWrap, kInstantiated } = internalBinding('module_wrap'));\r\n}\r\n"
  },
  {
    "name": "internal/source_map/source_map_cache.js",
    "source": "'use strict';\r\n\r\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\r\nconst { Buffer } = require('buffer');\r\nconst debug = require('internal/util/debuglog').debuglog('source_map');\r\nconst { dirname, resolve } = require('path');\r\nconst fs = require('fs');\r\nconst { getOptionValue } = require('internal/options');\r\nconst {\r\n  normalizeReferrerURL,\r\n} = require('internal/modules/cjs/helpers');\r\nconst { JSON, Object } = primordials;\r\n// For cjs, since Module._cache is exposed to users, we use a WeakMap\r\n// keyed on module, facilitating garbage collection.\r\nconst cjsSourceMapCache = new WeakMap();\r\n// The esm cache is not exposed to users, so we can use a Map keyed\r\n// on filenames.\r\nconst esmSourceMapCache = new Map();\r\nconst { fileURLToPath, URL } = require('url');\r\nconst { overrideStackTrace } = require('internal/errors');\r\n\r\nlet experimentalSourceMaps;\r\nfunction maybeCacheSourceMap(filename, content, cjsModuleInstance) {\r\n  if (experimentalSourceMaps === undefined) {\r\n    experimentalSourceMaps = getOptionValue('--enable-source-maps');\r\n  }\r\n  if (!(process.env.NODE_V8_COVERAGE || experimentalSourceMaps)) return;\r\n  let basePath;\r\n  try {\r\n    filename = normalizeReferrerURL(filename);\r\n    basePath = dirname(fileURLToPath(filename));\r\n  } catch (err) {\r\n    // This is most likely an [eval]-wrapper, which is currently not\r\n    // supported.\r\n    debug(err.stack);\r\n    return;\r\n  }\r\n\r\n  const match = content.match(/\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/);\r\n  if (match) {\r\n    if (cjsModuleInstance) {\r\n      cjsSourceMapCache.set(cjsModuleInstance, {\r\n        filename,\r\n        url: match.groups.sourceMappingURL,\r\n        data: dataFromUrl(basePath, match.groups.sourceMappingURL)\r\n      });\r\n    } else {\r\n      // If there is no cjsModuleInstance assume we are in a\r\n      // \"modules/esm\" context.\r\n      esmSourceMapCache.set(filename, {\r\n        url: match.groups.sourceMappingURL,\r\n        data: dataFromUrl(basePath, match.groups.sourceMappingURL)\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction dataFromUrl(basePath, sourceMappingURL) {\r\n  try {\r\n    const url = new URL(sourceMappingURL);\r\n    switch (url.protocol) {\r\n      case 'data:':\r\n        return sourceMapFromDataUrl(basePath, url.pathname);\r\n      default:\r\n        debug(`unknown protocol ${url.protocol}`);\r\n        return null;\r\n    }\r\n  } catch (err) {\r\n    debug(err.stack);\r\n    // If no scheme is present, we assume we are dealing with a file path.\r\n    const sourceMapFile = resolve(basePath, sourceMappingURL);\r\n    return sourceMapFromFile(sourceMapFile);\r\n  }\r\n}\r\n\r\nfunction sourceMapFromFile(sourceMapFile) {\r\n  try {\r\n    const content = fs.readFileSync(sourceMapFile, 'utf8');\r\n    const data = JSON.parse(content);\r\n    return sourcesToAbsolute(dirname(sourceMapFile), data);\r\n  } catch (err) {\r\n    debug(err.stack);\r\n    return null;\r\n  }\r\n}\r\n\r\n// data:[<mediatype>][;base64],<data> see:\r\n// https://tools.ietf.org/html/rfc2397#section-2\r\nfunction sourceMapFromDataUrl(basePath, url) {\r\n  const [format, data] = url.split(',');\r\n  const splitFormat = format.split(';');\r\n  const contentType = splitFormat[0];\r\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\r\n  if (contentType === 'application/json') {\r\n    const decodedData = base64 ?\r\n      Buffer.from(data, 'base64').toString('utf8') : data;\r\n    try {\r\n      const parsedData = JSON.parse(decodedData);\r\n      return sourcesToAbsolute(basePath, parsedData);\r\n    } catch (err) {\r\n      debug(err.stack);\r\n      return null;\r\n    }\r\n  } else {\r\n    debug(`unknown content-type ${contentType}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n// If the sources are not absolute URLs after prepending of the \"sourceRoot\",\r\n// the sources are resolved relative to the SourceMap (like resolving script\r\n// src in a html document).\r\nfunction sourcesToAbsolute(base, data) {\r\n  data.sources = data.sources.map((source) => {\r\n    source = (data.sourceRoot || '') + source;\r\n    if (!/^[\\\\/]/.test(source[0])) {\r\n      source = resolve(base, source);\r\n    }\r\n    if (!source.startsWith('file://')) source = `file://${source}`;\r\n    return source;\r\n  });\r\n  // The sources array is now resolved to absolute URLs, sourceRoot should\r\n  // be updated to noop.\r\n  data.sourceRoot = '';\r\n  return data;\r\n}\r\n\r\n// Move source map from garbage collected module to alternate key.\r\nfunction rekeySourceMap(cjsModuleInstance, newInstance) {\r\n  const sourceMap = cjsSourceMapCache.get(cjsModuleInstance);\r\n  if (sourceMap) {\r\n    cjsSourceMapCache.set(newInstance, sourceMap);\r\n  }\r\n}\r\n\r\n// Get serialized representation of source-map cache, this is used\r\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\r\nfunction sourceMapCacheToObject() {\r\n  const obj = Object.create(null);\r\n\r\n  for (const [k, v] of esmSourceMapCache) {\r\n    obj[k] = v;\r\n  }\r\n  appendCJSCache(obj);\r\n\r\n  if (Object.keys(obj).length === 0) {\r\n    return undefined;\r\n  } else {\r\n    return obj;\r\n  }\r\n}\r\n\r\n// Since WeakMap can't be iterated over, we use Module._cache's\r\n// keys to facilitate Source Map serialization.\r\n//\r\n// TODO(bcoe): this means we don't currently serialize source-maps attached\r\n// to error instances, only module instances.\r\nfunction appendCJSCache(obj) {\r\n  const { Module } = require('internal/modules/cjs/loader');\r\n  Object.keys(Module._cache).forEach((key) => {\r\n    const value = cjsSourceMapCache.get(Module._cache[key]);\r\n    if (value) {\r\n      obj[`file://${key}`] = {\r\n        url: value.url,\r\n        data: value.data\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n// Create a prettified stacktrace, inserting context from source maps\r\n// if possible.\r\nconst ErrorToString = Error.prototype.toString; // Capture original toString.\r\nconst prepareStackTrace = (globalThis, error, trace) => {\r\n  // API for node internals to override error stack formatting\r\n  // without interfering with userland code.\r\n  // TODO(bcoe): add support for source-maps to repl.\r\n  if (overrideStackTrace.has(error)) {\r\n    const f = overrideStackTrace.get(error);\r\n    overrideStackTrace.delete(error);\r\n    return f(error, trace);\r\n  }\r\n\r\n  const { SourceMap } = require('internal/source_map/source_map');\r\n  const errorString = ErrorToString.call(error);\r\n\r\n  if (trace.length === 0) {\r\n    return errorString;\r\n  }\r\n  const preparedTrace = trace.map((t, i) => {\r\n    let str = i !== 0 ? '\\n    at ' : '';\r\n    str = `${str}${t}`;\r\n    try {\r\n      const sourceMap = findSourceMap(t.getFileName(), error);\r\n      if (sourceMap && sourceMap.data) {\r\n        const sm = new SourceMap(sourceMap.data);\r\n        // Source Map V3 lines/columns use zero-based offsets whereas, in\r\n        // stack traces, they start at 1/1.\r\n        const [, , url, line, col] =\r\n                   sm.findEntry(t.getLineNumber() - 1, t.getColumnNumber() - 1);\r\n        if (url && line !== undefined && col !== undefined) {\r\n          str +=\r\n            `\\n        -> ${url.replace('file://', '')}:${line + 1}:${col + 1}`;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      debug(err.stack);\r\n    }\r\n    return str;\r\n  });\r\n  return `${errorString}\\n    at ${preparedTrace.join('')}`;\r\n};\r\n\r\n// Attempt to lookup a source map, which is either attached to a file URI, or\r\n// keyed on an error instance.\r\nfunction findSourceMap(uri, error) {\r\n  const { Module } = require('internal/modules/cjs/loader');\r\n  let sourceMap = cjsSourceMapCache.get(Module._cache[uri]);\r\n  if (!uri.startsWith('file://')) uri = normalizeReferrerURL(uri);\r\n  if (sourceMap === undefined) {\r\n    sourceMap = esmSourceMapCache.get(uri);\r\n  }\r\n  if (sourceMap === undefined) {\r\n    const candidateSourceMap = cjsSourceMapCache.get(error);\r\n    if (candidateSourceMap && uri === candidateSourceMap.filename) {\r\n      sourceMap = candidateSourceMap;\r\n    }\r\n  }\r\n  return sourceMap;\r\n}\r\n\r\nmodule.exports = {\r\n  maybeCacheSourceMap,\r\n  prepareStackTrace,\r\n  rekeySourceMap,\r\n  sourceMapCacheToObject,\r\n};\r\n"
  },
  {
    "name": "fs.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\r\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\r\n\r\n'use strict';\r\n\r\nconst { Math, Object } = primordials;\r\n\r\nconst { fs: constants } = internalBinding('constants');\r\nconst {\r\n  S_IFIFO,\r\n  S_IFLNK,\r\n  S_IFMT,\r\n  S_IFREG,\r\n  S_IFSOCK,\r\n  F_OK,\r\n  R_OK,\r\n  W_OK,\r\n  X_OK,\r\n  O_WRONLY,\r\n  O_SYMLINK\r\n} = constants;\r\n\r\nconst pathModule = require('path');\r\nconst { isArrayBufferView } = require('internal/util/types');\r\nconst binding = internalBinding('fs');\r\nconst { Buffer, kMaxLength } = require('buffer');\r\nconst {\r\n  codes: {\r\n    ERR_FS_FILE_TOO_LARGE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_CALLBACK\r\n  },\r\n  uvException\r\n} = require('internal/errors');\r\n\r\nconst { FSReqCallback, statValues } = binding;\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst internalUtil = require('internal/util');\r\nconst {\r\n  copyObject,\r\n  Dirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  nullCheck,\r\n  preprocessSymlinkDestination,\r\n  Stats,\r\n  getStatsFromBinding,\r\n  realpathCacheKey,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validateRmdirOptions,\r\n  warnOnNonPortableTemplate\r\n} = require('internal/fs/utils');\r\nconst {\r\n  Dir,\r\n  opendir,\r\n  opendirSync\r\n} = require('internal/fs/dir');\r\nconst {\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_BACKWARD_SLASH,\r\n} = require('internal/constants');\r\nconst {\r\n  isUint32,\r\n  parseMode,\r\n  validateBuffer,\r\n  validateInteger,\r\n  validateInt32,\r\n  validateUint32\r\n} = require('internal/validators');\r\n\r\nlet truncateWarn = true;\r\nlet fs;\r\n\r\n// Lazy loaded\r\nlet promises = null;\r\nlet watchers;\r\nlet ReadFileContext;\r\nlet ReadStream;\r\nlet WriteStream;\r\nlet rimraf;\r\nlet rimrafSync;\r\n\r\n// These have to be separate because of how graceful-fs happens to do it's\r\n// monkeypatching.\r\nlet FileReadStream;\r\nlet FileWriteStream;\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\n\r\nfunction showTruncateDeprecation() {\r\n  if (truncateWarn) {\r\n    process.emitWarning(\r\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\r\n      'fs.ftruncate with a file descriptor instead.',\r\n      'DeprecationWarning', 'DEP0081');\r\n    truncateWarn = false;\r\n  }\r\n}\r\n\r\nfunction maybeCallback(cb) {\r\n  if (typeof cb === 'function')\r\n    return cb;\r\n\r\n  throw new ERR_INVALID_CALLBACK(cb);\r\n}\r\n\r\n// Ensure that callbacks run in the global context. Only use this function\r\n// for callbacks that are passed to the binding layer, callbacks that are\r\n// invoked from JS already run in the proper scope.\r\nfunction makeCallback(cb) {\r\n  if (typeof cb !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(cb);\r\n  }\r\n\r\n  return (...args) => cb(...args);\r\n}\r\n\r\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\r\n// an optimization, since the data passed back to the callback needs to be\r\n// transformed anyway.\r\nfunction makeStatsCallback(cb) {\r\n  if (typeof cb !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(cb);\r\n  }\r\n\r\n  return (err, stats) => {\r\n    if (err) return cb(err);\r\n    cb(err, getStatsFromBinding(stats));\r\n  };\r\n}\r\n\r\nconst isFd = isUint32;\r\n\r\nfunction isFileType(stats, fileType) {\r\n  // Use stats array directly to avoid creating an fs.Stats instance just for\r\n  // our internal use.\r\n  return (stats[1/* mode */] & S_IFMT) === fileType;\r\n}\r\n\r\nfunction access(path, mode, callback) {\r\n  if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = F_OK;\r\n  }\r\n\r\n  path = getValidatedPath(path);\r\n\r\n  mode = mode | 0;\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.access(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\nfunction accessSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n\r\n  if (mode === undefined)\r\n    mode = F_OK;\r\n  else\r\n    mode = mode | 0;\r\n\r\n  const ctx = { path };\r\n  binding.access(pathModule.toNamespacedPath(path), mode, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction exists(path, callback) {\r\n  maybeCallback(callback);\r\n\r\n  function suppressedCallback(err) {\r\n    callback(err ? false : true);\r\n  }\r\n\r\n  try {\r\n    fs.access(path, F_OK, suppressedCallback);\r\n  } catch {\r\n    return callback(false);\r\n  }\r\n}\r\n\r\nObject.defineProperty(exists, internalUtil.promisify.custom, {\r\n  value: (path) => {\r\n    return new Promise((resolve) => fs.exists(path, resolve));\r\n  }\r\n});\r\n\r\n// fs.existsSync never throws, it only returns true or false.\r\n// Since fs.existsSync never throws, users have established\r\n// the expectation that passing invalid arguments to it, even like\r\n// fs.existsSync(), would only get a false in return, so we cannot signal\r\n// validation errors to users properly out of compatibility concerns.\r\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\r\nfunction existsSync(path) {\r\n  try {\r\n    path = getValidatedPath(path);\r\n  } catch {\r\n    return false;\r\n  }\r\n  const ctx = { path };\r\n  binding.access(pathModule.toNamespacedPath(path), F_OK, undefined, ctx);\r\n  return ctx.errno === undefined;\r\n}\r\n\r\nfunction readFileAfterOpen(err, fd) {\r\n  const context = this.context;\r\n\r\n  if (err) {\r\n    context.callback(err);\r\n    return;\r\n  }\r\n\r\n  context.fd = fd;\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = readFileAfterStat;\r\n  req.context = context;\r\n  binding.fstat(fd, false, req);\r\n}\r\n\r\nfunction readFileAfterStat(err, stats) {\r\n  const context = this.context;\r\n\r\n  if (err)\r\n    return context.close(err);\r\n\r\n  const size = context.size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n\r\n  if (size > kMaxLength) {\r\n    err = new ERR_FS_FILE_TOO_LARGE(size);\r\n    return context.close(err);\r\n  }\r\n\r\n  try {\r\n    if (size === 0) {\r\n      context.buffers = [];\r\n    } else {\r\n      context.buffer = Buffer.allocUnsafeSlow(size);\r\n    }\r\n  } catch (err) {\r\n    return context.close(err);\r\n  }\r\n  context.read();\r\n}\r\n\r\nfunction readFile(path, options, callback) {\r\n  callback = maybeCallback(callback || options);\r\n  options = getOptions(options, { flag: 'r' });\r\n  if (!ReadFileContext)\r\n    ReadFileContext = require('internal/fs/read_file_context');\r\n  const context = new ReadFileContext(callback, options.encoding);\r\n  context.isUserFd = isFd(path); // File descriptor ownership\r\n\r\n  const req = new FSReqCallback();\r\n  req.context = context;\r\n  req.oncomplete = readFileAfterOpen;\r\n\r\n  if (context.isUserFd) {\r\n    process.nextTick(function tick() {\r\n      req.oncomplete(null, path);\r\n    });\r\n    return;\r\n  }\r\n\r\n  path = getValidatedPath(path);\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               stringToFlags(options.flag || 'r'),\r\n               0o666,\r\n               req);\r\n}\r\n\r\nfunction tryStatSync(fd, isUserFd) {\r\n  const ctx = {};\r\n  const stats = binding.fstat(fd, false, undefined, ctx);\r\n  if (ctx.errno !== undefined && !isUserFd) {\r\n    fs.closeSync(fd);\r\n    throw uvException(ctx);\r\n  }\r\n  return stats;\r\n}\r\n\r\nfunction tryCreateBuffer(size, fd, isUserFd) {\r\n  let threw = true;\r\n  let buffer;\r\n  try {\r\n    if (size > kMaxLength) {\r\n      throw new ERR_FS_FILE_TOO_LARGE(size);\r\n    }\r\n    buffer = Buffer.allocUnsafe(size);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return buffer;\r\n}\r\n\r\nfunction tryReadSync(fd, isUserFd, buffer, pos, len) {\r\n  let threw = true;\r\n  let bytesRead;\r\n  try {\r\n    bytesRead = fs.readSync(fd, buffer, pos, len);\r\n    threw = false;\r\n  } finally {\r\n    if (threw && !isUserFd) fs.closeSync(fd);\r\n  }\r\n  return bytesRead;\r\n}\r\n\r\nfunction readFileSync(path, options) {\r\n  options = getOptions(options, { flag: 'r' });\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, options.flag, 0o666);\r\n\r\n  const stats = tryStatSync(fd, isUserFd);\r\n  const size = isFileType(stats, S_IFREG) ? stats[8] : 0;\r\n  let pos = 0;\r\n  let buffer; // Single buffer with file data\r\n  let buffers; // List for when size is unknown\r\n\r\n  if (size === 0) {\r\n    buffers = [];\r\n  } else {\r\n    buffer = tryCreateBuffer(size, fd, isUserFd);\r\n  }\r\n\r\n  let bytesRead;\r\n\r\n  if (size !== 0) {\r\n    do {\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, pos, size - pos);\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0 && pos < size);\r\n  } else {\r\n    do {\r\n      // The kernel lies about many files.\r\n      // Go ahead and try to read some bytes.\r\n      buffer = Buffer.allocUnsafe(8192);\r\n      bytesRead = tryReadSync(fd, isUserFd, buffer, 0, 8192);\r\n      if (bytesRead !== 0) {\r\n        buffers.push(buffer.slice(0, bytesRead));\r\n      }\r\n      pos += bytesRead;\r\n    } while (bytesRead !== 0);\r\n  }\r\n\r\n  if (!isUserFd)\r\n    fs.closeSync(fd);\r\n\r\n  if (size === 0) {\r\n    // Data was collected into the buffers list.\r\n    buffer = Buffer.concat(buffers, pos);\r\n  } else if (pos < size) {\r\n    buffer = buffer.slice(0, pos);\r\n  }\r\n\r\n  if (options.encoding) buffer = buffer.toString(options.encoding);\r\n  return buffer;\r\n}\r\n\r\nfunction close(fd, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.close(fd, req);\r\n}\r\n\r\nfunction closeSync(fd) {\r\n  validateInt32(fd, 'fd', 0);\r\n\r\n  const ctx = {};\r\n  binding.close(fd, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction open(path, flags, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  if (arguments.length < 3) {\r\n    callback = flags;\r\n    flags = 'r';\r\n    mode = 0o666;\r\n  } else if (typeof mode === 'function') {\r\n    callback = mode;\r\n    mode = 0o666;\r\n  }\r\n  const flagsNumber = stringToFlags(flags);\r\n  if (arguments.length >= 4) {\r\n    mode = parseMode(mode, 'mode', 0o666);\r\n  }\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.open(pathModule.toNamespacedPath(path),\r\n               flagsNumber,\r\n               mode,\r\n               req);\r\n}\r\n\r\n\r\nfunction openSync(path, flags, mode) {\r\n  path = getValidatedPath(path);\r\n  const flagsNumber = stringToFlags(flags || 'r');\r\n  mode = parseMode(mode, 'mode', 0o666);\r\n\r\n  const ctx = { path };\r\n  const result = binding.open(pathModule.toNamespacedPath(path),\r\n                              flagsNumber, mode,\r\n                              undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\nfunction read(fd, buffer, offset, length, position, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateBuffer(buffer);\r\n  callback = maybeCallback(callback);\r\n\r\n  offset |= 0;\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return process.nextTick(function tick() {\r\n      callback(null, 0, buffer);\r\n    });\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (!Number.isSafeInteger(position))\r\n    position = -1;\r\n\r\n  function wrapper(err, bytesRead) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, bytesRead || 0, buffer);\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  binding.read(fd, buffer, offset, length, position, req);\r\n}\r\n\r\nObject.defineProperty(read, internalUtil.customPromisifyArgs,\r\n                      { value: ['bytesRead', 'buffer'], enumerable: false });\r\n\r\nfunction readSync(fd, buffer, offset, length, position) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateBuffer(buffer);\r\n\r\n  offset |= 0;\r\n  length |= 0;\r\n\r\n  if (length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (buffer.byteLength === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE('buffer', buffer,\r\n                                    'is empty and cannot be written');\r\n  }\r\n\r\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\r\n\r\n  if (!Number.isSafeInteger(position))\r\n    position = -1;\r\n\r\n  const ctx = {};\r\n  const result = binding.read(fd, buffer, offset, length, position,\r\n                              undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\n// usage:\r\n//  fs.write(fd, buffer[, offset[, length[, position]]], callback);\r\n// OR\r\n//  fs.write(fd, string[, position[, encoding]], callback);\r\nfunction write(fd, buffer, offset, length, position, callback) {\r\n  function wrapper(err, written) {\r\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\r\n    callback(err, written || 0, buffer);\r\n  }\r\n\r\n  validateInt32(fd, 'fd', 0);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  if (isArrayBufferView(buffer)) {\r\n    callback = maybeCallback(callback || position || length || offset);\r\n    if (typeof offset !== 'number')\r\n      offset = 0;\r\n    if (typeof length !== 'number')\r\n      length = buffer.length - offset;\r\n    if (typeof position !== 'number')\r\n      position = null;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n    return binding.writeBuffer(fd, buffer, offset, length, position, req);\r\n  }\r\n\r\n  if (typeof buffer !== 'string')\r\n    buffer += '';\r\n  if (typeof position !== 'function') {\r\n    if (typeof offset === 'function') {\r\n      position = offset;\r\n      offset = null;\r\n    } else {\r\n      position = length;\r\n    }\r\n    length = 'utf8';\r\n  }\r\n  callback = maybeCallback(position);\r\n  return binding.writeString(fd, buffer, offset, length, req);\r\n}\r\n\r\nObject.defineProperty(write, internalUtil.customPromisifyArgs,\r\n                      { value: ['bytesWritten', 'buffer'], enumerable: false });\r\n\r\n// Usage:\r\n//  fs.writeSync(fd, buffer[, offset[, length[, position]]]);\r\n// OR\r\n//  fs.writeSync(fd, string[, position[, encoding]]);\r\nfunction writeSync(fd, buffer, offset, length, position) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const ctx = {};\r\n  let result;\r\n  if (isArrayBufferView(buffer)) {\r\n    if (position === undefined)\r\n      position = null;\r\n    if (typeof offset !== 'number')\r\n      offset = 0;\r\n    if (typeof length !== 'number')\r\n      length = buffer.byteLength - offset;\r\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\r\n    result = binding.writeBuffer(fd, buffer, offset, length, position,\r\n                                 undefined, ctx);\r\n  } else {\r\n    if (typeof buffer !== 'string')\r\n      buffer += '';\r\n    if (offset === undefined)\r\n      offset = null;\r\n    result = binding.writeString(fd, buffer, offset, length,\r\n                                 undefined, ctx);\r\n  }\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\n// usage:\r\n// fs.writev(fd, buffers[, position], callback);\r\nfunction writev(fd, buffers, position, callback) {\r\n  function wrapper(err, written) {\r\n    callback(err, written || 0, buffers);\r\n  }\r\n\r\n  validateInt32(fd, 'fd', 0);\r\n  validateBufferArray(buffers);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = wrapper;\r\n\r\n  callback = maybeCallback(callback || position);\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  return binding.writeBuffers(fd, buffers, position, req);\r\n}\r\n\r\nObject.defineProperty(writev, internalUtil.customPromisifyArgs, {\r\n  value: ['bytesWritten', 'buffer'],\r\n  enumerable: false\r\n});\r\n\r\nfunction writevSync(fd, buffers, position) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateBufferArray(buffers);\r\n\r\n  const ctx = {};\r\n\r\n  if (typeof position !== 'number')\r\n    position = null;\r\n\r\n  const result = binding.writeBuffers(fd, buffers, position, undefined, ctx);\r\n\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\nfunction rename(oldPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.rename(pathModule.toNamespacedPath(oldPath),\r\n                 pathModule.toNamespacedPath(newPath),\r\n                 req);\r\n}\r\n\r\nfunction renameSync(oldPath, newPath) {\r\n  oldPath = getValidatedPath(oldPath, 'oldPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n  const ctx = { path: oldPath, dest: newPath };\r\n  binding.rename(pathModule.toNamespacedPath(oldPath),\r\n                 pathModule.toNamespacedPath(newPath), undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction truncate(path, len, callback) {\r\n  if (typeof path === 'number') {\r\n    showTruncateDeprecation();\r\n    return fs.ftruncate(path, len, callback);\r\n  }\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  } else if (len === undefined) {\r\n    len = 0;\r\n  }\r\n\r\n  validateInteger(len, 'len');\r\n  callback = maybeCallback(callback);\r\n  fs.open(path, 'r+', (er, fd) => {\r\n    if (er) return callback(er);\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = function oncomplete(er) {\r\n      fs.close(fd, (er2) => {\r\n        callback(er || er2);\r\n      });\r\n    };\r\n    binding.ftruncate(fd, len, req);\r\n  });\r\n}\r\n\r\nfunction truncateSync(path, len) {\r\n  if (typeof path === 'number') {\r\n    // legacy\r\n    showTruncateDeprecation();\r\n    return fs.ftruncateSync(path, len);\r\n  }\r\n  if (len === undefined) {\r\n    len = 0;\r\n  }\r\n  // Allow error to be thrown, but still close fd.\r\n  const fd = fs.openSync(path, 'r+');\r\n  let ret;\r\n\r\n  try {\r\n    ret = fs.ftruncateSync(fd, len);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction ftruncate(fd, len = 0, callback) {\r\n  if (typeof len === 'function') {\r\n    callback = len;\r\n    len = 0;\r\n  }\r\n  validateInt32(fd, 'fd', 0);\r\n  validateInteger(len, 'len');\r\n  len = Math.max(0, len);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.ftruncate(fd, len, req);\r\n}\r\n\r\nfunction ftruncateSync(fd, len = 0) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateInteger(len, 'len');\r\n  len = Math.max(0, len);\r\n  const ctx = {};\r\n  binding.ftruncate(fd, len, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\n\r\nfunction lazyLoadRimraf() {\r\n  if (rimraf === undefined)\r\n    ({ rimraf, rimrafSync } = require('internal/fs/rimraf'));\r\n}\r\n\r\nfunction rmdir(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  callback = makeCallback(callback);\r\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\r\n  options = validateRmdirOptions(options);\r\n\r\n  if (options.recursive) {\r\n    lazyLoadRimraf();\r\n    return rimraf(path, options, callback);\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.rmdir(path, req);\r\n}\r\n\r\nfunction rmdirSync(path, options) {\r\n  path = getValidatedPath(path);\r\n  options = validateRmdirOptions(options);\r\n\r\n  if (options.recursive) {\r\n    lazyLoadRimraf();\r\n    return rimrafSync(pathModule.toNamespacedPath(path), options);\r\n  }\r\n\r\n  const ctx = { path };\r\n  binding.rmdir(pathModule.toNamespacedPath(path), undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction fdatasync(fd, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fdatasync(fd, req);\r\n}\r\n\r\nfunction fdatasyncSync(fd) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const ctx = {};\r\n  binding.fdatasync(fd, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction fsync(fd, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fsync(fd, req);\r\n}\r\n\r\nfunction fsyncSync(fd) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const ctx = {};\r\n  binding.fsync(fd, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction mkdir(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  } else if (typeof options === 'number' || typeof options === 'string') {\r\n    options = { mode: options };\r\n  }\r\n  const {\r\n    recursive = false,\r\n    mode = 0o777\r\n  } = options || {};\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  if (typeof recursive !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE('recursive', 'boolean', recursive);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdir(pathModule.toNamespacedPath(path),\r\n                parseMode(mode, 'mode', 0o777), recursive, req);\r\n}\r\n\r\nfunction mkdirSync(path, options) {\r\n  if (typeof options === 'number' || typeof options === 'string') {\r\n    options = { mode: options };\r\n  }\r\n  const {\r\n    recursive = false,\r\n    mode = 0o777\r\n  } = options || {};\r\n\r\n  path = getValidatedPath(path);\r\n  if (typeof recursive !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE('recursive', 'boolean', recursive);\r\n\r\n  const ctx = { path };\r\n  binding.mkdir(pathModule.toNamespacedPath(path),\r\n                parseMode(mode, 'mode', 0o777), recursive, undefined,\r\n                ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction readdir(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  if (!options.withFileTypes) {\r\n    req.oncomplete = callback;\r\n  } else {\r\n    req.oncomplete = (err, result) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      getDirents(path, result, callback);\r\n    };\r\n  }\r\n  binding.readdir(pathModule.toNamespacedPath(path), options.encoding,\r\n                  !!options.withFileTypes, req);\r\n}\r\n\r\nfunction readdirSync(path, options) {\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  const result = binding.readdir(pathModule.toNamespacedPath(path),\r\n                                 options.encoding, !!options.withFileTypes,\r\n                                 undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return options.withFileTypes ? getDirents(path, result) : result;\r\n}\r\n\r\nfunction fstat(fd, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  validateInt32(fd, 'fd', 0);\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = makeStatsCallback(callback);\r\n  binding.fstat(fd, options.bigint, req);\r\n}\r\n\r\nfunction lstat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.lstat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\nfunction stat(path, options = { bigint: false }, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  callback = makeStatsCallback(callback);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback(options.bigint);\r\n  req.oncomplete = callback;\r\n  binding.stat(pathModule.toNamespacedPath(path), options.bigint, req);\r\n}\r\n\r\nfunction fstatSync(fd, options = {}) {\r\n  validateInt32(fd, 'fd', 0);\r\n  const ctx = { fd };\r\n  const stats = binding.fstat(fd, options.bigint, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\nfunction lstatSync(path, options = {}) {\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  const stats = binding.lstat(pathModule.toNamespacedPath(path),\r\n                              options.bigint, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\nfunction statSync(path, options = {}) {\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  const stats = binding.stat(pathModule.toNamespacedPath(path),\r\n                             options.bigint, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return getStatsFromBinding(stats);\r\n}\r\n\r\nfunction readlink(path, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path, 'oldPath');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.readlink(pathModule.toNamespacedPath(path), options.encoding, req);\r\n}\r\n\r\nfunction readlinkSync(path, options) {\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path, 'oldPath');\r\n  const ctx = { path };\r\n  const result = binding.readlink(pathModule.toNamespacedPath(path),\r\n                                  options.encoding, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\nfunction symlink(target, path, type_, callback_) {\r\n  const type = (typeof type_ === 'string' ? type_ : null);\r\n  const callback = makeCallback(arguments[arguments.length - 1]);\r\n\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  if (isWindows && type === null) {\r\n    let absoluteTarget;\r\n    try {\r\n      // Symlinks targets can be relative to the newly created path.\r\n      // Calculate absolute file name of the symlink target, and check\r\n      // if it is a directory. Ignore resolve error to keep symlink\r\n      // errors consistent between platforms if invalid path is\r\n      // provided.\r\n      absoluteTarget = pathModule.resolve(path, '..', target);\r\n    } catch { }\r\n    if (absoluteTarget !== undefined) {\r\n      stat(absoluteTarget, (err, stat) => {\r\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\r\n        const resolvedFlags = stringToSymlinkType(resolvedType);\r\n        binding.symlink(preprocessSymlinkDestination(target,\r\n                                                     resolvedType,\r\n                                                     path),\r\n                        pathModule.toNamespacedPath(path), resolvedFlags, req);\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  const flags = stringToSymlinkType(type);\r\n  binding.symlink(preprocessSymlinkDestination(target, type, path),\r\n                  pathModule.toNamespacedPath(path), flags, req);\r\n}\r\n\r\nfunction symlinkSync(target, path, type) {\r\n  type = (typeof type === 'string' ? type : null);\r\n  if (isWindows && type === null) {\r\n    try {\r\n      const absoluteTarget = pathModule.resolve(path, '..', target);\r\n      if (statSync(absoluteTarget).isDirectory()) {\r\n        type = 'dir';\r\n      }\r\n    } catch { }\r\n  }\r\n  target = getValidatedPath(target, 'target');\r\n  path = getValidatedPath(path);\r\n  const flags = stringToSymlinkType(type);\r\n\r\n  const ctx = { path: target, dest: path };\r\n  binding.symlink(preprocessSymlinkDestination(target, type, path),\r\n                  pathModule.toNamespacedPath(path), flags, undefined, ctx);\r\n\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction link(existingPath, newPath, callback) {\r\n  callback = makeCallback(callback);\r\n\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n\r\n  binding.link(pathModule.toNamespacedPath(existingPath),\r\n               pathModule.toNamespacedPath(newPath),\r\n               req);\r\n}\r\n\r\nfunction linkSync(existingPath, newPath) {\r\n  existingPath = getValidatedPath(existingPath, 'existingPath');\r\n  newPath = getValidatedPath(newPath, 'newPath');\r\n\r\n  const ctx = { path: existingPath, dest: newPath };\r\n  const result = binding.link(pathModule.toNamespacedPath(existingPath),\r\n                              pathModule.toNamespacedPath(newPath),\r\n                              undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\nfunction unlink(path, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.unlink(pathModule.toNamespacedPath(path), req);\r\n}\r\n\r\nfunction unlinkSync(path) {\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  binding.unlink(pathModule.toNamespacedPath(path), undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction fchmod(fd, mode, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  mode = parseMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.fchmod(fd, mode, req);\r\n}\r\n\r\nfunction fchmodSync(fd, mode) {\r\n  validateInt32(fd, 'fd', 0);\r\n  mode = parseMode(mode, 'mode');\r\n  const ctx = {};\r\n  binding.fchmod(fd, mode, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction lchmod(path, mode, callback) {\r\n  callback = maybeCallback(callback);\r\n  fs.open(path, O_WRONLY | O_SYMLINK, (err, fd) => {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n    // Prefer to return the chmod error, if one occurs,\r\n    // but still try to close, and report closing errors if they occur.\r\n    fs.fchmod(fd, mode, (err) => {\r\n      fs.close(fd, (err2) => {\r\n        callback(err || err2);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nfunction lchmodSync(path, mode) {\r\n  const fd = fs.openSync(path, O_WRONLY | O_SYMLINK);\r\n\r\n  // Prefer to return the chmod error, if one occurs,\r\n  // but still try to close, and report closing errors if they occur.\r\n  let ret;\r\n  try {\r\n    ret = fs.fchmodSync(fd, mode);\r\n  } finally {\r\n    fs.closeSync(fd);\r\n  }\r\n  return ret;\r\n}\r\n\r\n\r\nfunction chmod(path, mode, callback) {\r\n  path = getValidatedPath(path);\r\n  mode = parseMode(mode, 'mode');\r\n  callback = makeCallback(callback);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chmod(pathModule.toNamespacedPath(path), mode, req);\r\n}\r\n\r\nfunction chmodSync(path, mode) {\r\n  path = getValidatedPath(path);\r\n  mode = parseMode(mode, 'mode');\r\n\r\n  const ctx = { path };\r\n  binding.chmod(pathModule.toNamespacedPath(path), mode, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction lchown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\nfunction lchownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n  const ctx = { path };\r\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction fchown(fd, uid, gid, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.fchown(fd, uid, gid, req);\r\n}\r\n\r\nfunction fchownSync(fd, uid, gid) {\r\n  validateInt32(fd, 'fd', 0);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n\r\n  const ctx = {};\r\n  binding.fchown(fd, uid, gid, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction chown(path, uid, gid, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, req);\r\n}\r\n\r\nfunction chownSync(path, uid, gid) {\r\n  path = getValidatedPath(path);\r\n  validateUint32(uid, 'uid');\r\n  validateUint32(gid, 'gid');\r\n  const ctx = { path };\r\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction utimes(path, atime, mtime, callback) {\r\n  callback = makeCallback(callback);\r\n  path = getValidatedPath(path);\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.utimes(pathModule.toNamespacedPath(path),\r\n                 toUnixTimestamp(atime),\r\n                 toUnixTimestamp(mtime),\r\n                 req);\r\n}\r\n\r\nfunction utimesSync(path, atime, mtime) {\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  binding.utimes(pathModule.toNamespacedPath(path),\r\n                 toUnixTimestamp(atime), toUnixTimestamp(mtime),\r\n                 undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction futimes(fd, atime, mtime, callback) {\r\n  validateInt32(fd, 'fd', 0);\r\n  atime = toUnixTimestamp(atime, 'atime');\r\n  mtime = toUnixTimestamp(mtime, 'mtime');\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.futimes(fd, atime, mtime, req);\r\n}\r\n\r\nfunction futimesSync(fd, atime, mtime) {\r\n  validateInt32(fd, 'fd', 0);\r\n  atime = toUnixTimestamp(atime, 'atime');\r\n  mtime = toUnixTimestamp(mtime, 'mtime');\r\n  const ctx = {};\r\n  binding.futimes(fd, atime, mtime, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction writeAll(fd, isUserFd, buffer, offset, length, position, callback) {\r\n  // write(fd, buffer, offset, length, position, callback)\r\n  fs.write(fd, buffer, offset, length, position, (writeErr, written) => {\r\n    if (writeErr) {\r\n      if (isUserFd) {\r\n        callback(writeErr);\r\n      } else {\r\n        fs.close(fd, function close() {\r\n          callback(writeErr);\r\n        });\r\n      }\r\n    } else if (written === length) {\r\n      if (isUserFd) {\r\n        callback(null);\r\n      } else {\r\n        fs.close(fd, callback);\r\n      }\r\n    } else {\r\n      offset += written;\r\n      length -= written;\r\n      if (position !== null) {\r\n        position += written;\r\n      }\r\n      writeAll(fd, isUserFd, buffer, offset, length, position, callback);\r\n    }\r\n  });\r\n}\r\n\r\nfunction writeFile(path, data, options, callback) {\r\n  callback = maybeCallback(callback || options);\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });\r\n  const flag = options.flag || 'w';\r\n\r\n  if (isFd(path)) {\r\n    writeFd(path, true);\r\n    return;\r\n  }\r\n\r\n  fs.open(path, flag, options.mode, (openErr, fd) => {\r\n    if (openErr) {\r\n      callback(openErr);\r\n    } else {\r\n      writeFd(fd, false);\r\n    }\r\n  });\r\n\r\n  function writeFd(fd, isUserFd) {\r\n    const buffer = isArrayBufferView(data) ?\r\n      data : Buffer.from('' + data, options.encoding || 'utf8');\r\n    const position = (/a/.test(flag) || isUserFd) ? null : 0;\r\n\r\n    writeAll(fd, isUserFd, buffer, 0, buffer.byteLength, position, callback);\r\n  }\r\n}\r\n\r\nfunction writeFileSync(path, data, options) {\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });\r\n  const flag = options.flag || 'w';\r\n\r\n  const isUserFd = isFd(path); // File descriptor ownership\r\n  const fd = isUserFd ? path : fs.openSync(path, flag, options.mode);\r\n\r\n  if (!isArrayBufferView(data)) {\r\n    data = Buffer.from('' + data, options.encoding || 'utf8');\r\n  }\r\n  let offset = 0;\r\n  let length = data.byteLength;\r\n  let position = (/a/.test(flag) || isUserFd) ? null : 0;\r\n  try {\r\n    while (length > 0) {\r\n      const written = fs.writeSync(fd, data, offset, length, position);\r\n      offset += written;\r\n      length -= written;\r\n      if (position !== null) {\r\n        position += written;\r\n      }\r\n    }\r\n  } finally {\r\n    if (!isUserFd) fs.closeSync(fd);\r\n  }\r\n}\r\n\r\nfunction appendFile(path, data, options, callback) {\r\n  callback = maybeCallback(callback || options);\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFile(path, data, options, callback);\r\n}\r\n\r\nfunction appendFileSync(path, data, options) {\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  // Force append behavior when using a supplied file descriptor\r\n  if (!options.flag || isFd(path))\r\n    options.flag = 'a';\r\n\r\n  fs.writeFileSync(path, data, options);\r\n}\r\n\r\nfunction watch(filename, options, listener) {\r\n  if (typeof options === 'function') {\r\n    listener = options;\r\n  }\r\n  options = getOptions(options, {});\r\n\r\n  // Don't make changes directly on options object\r\n  options = copyObject(options);\r\n\r\n  if (options.persistent === undefined) options.persistent = true;\r\n  if (options.recursive === undefined) options.recursive = false;\r\n\r\n  if (!watchers)\r\n    watchers = require('internal/fs/watchers');\r\n  const watcher = new watchers.FSWatcher();\r\n  watcher.start(filename,\r\n                options.persistent,\r\n                options.recursive,\r\n                options.encoding);\r\n\r\n  if (listener) {\r\n    watcher.addListener('change', listener);\r\n  }\r\n\r\n  return watcher;\r\n}\r\n\r\n\r\nconst statWatchers = new Map();\r\n\r\nfunction watchFile(filename, options, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  let stat;\r\n\r\n  if (options === null || typeof options !== 'object') {\r\n    listener = options;\r\n    options = null;\r\n  }\r\n\r\n  options = {\r\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\r\n    // a little on the slow side but let's stick with it for now to keep\r\n    // behavioral changes to a minimum.\r\n    interval: 5007,\r\n    persistent: true,\r\n    ...options\r\n  };\r\n\r\n  if (typeof listener !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('listener', 'Function', listener);\r\n  }\r\n\r\n  stat = statWatchers.get(filename);\r\n\r\n  if (stat === undefined) {\r\n    if (!watchers)\r\n      watchers = require('internal/fs/watchers');\r\n    stat = new watchers.StatWatcher(options.bigint);\r\n    stat.start(filename, options.persistent, options.interval);\r\n    statWatchers.set(filename, stat);\r\n  }\r\n\r\n  stat.addListener('change', listener);\r\n  return stat;\r\n}\r\n\r\nfunction unwatchFile(filename, listener) {\r\n  filename = getValidatedPath(filename);\r\n  filename = pathModule.resolve(filename);\r\n  const stat = statWatchers.get(filename);\r\n\r\n  if (stat === undefined) return;\r\n\r\n  if (typeof listener === 'function') {\r\n    stat.removeListener('change', listener);\r\n  } else {\r\n    stat.removeAllListeners('change');\r\n  }\r\n\r\n  if (stat.listenerCount('change') === 0) {\r\n    stat.stop();\r\n    statWatchers.delete(filename);\r\n  }\r\n}\r\n\r\n\r\nlet splitRoot;\r\nif (isWindows) {\r\n  // Regex to find the device root on Windows (e.g. 'c:\\\\'), including trailing\r\n  // slash.\r\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\r\n  splitRoot = function splitRoot(str) {\r\n    return splitRootRe.exec(str)[0];\r\n  };\r\n} else {\r\n  splitRoot = function splitRoot(str) {\r\n    for (var i = 0; i < str.length; ++i) {\r\n      if (str.charCodeAt(i) !== CHAR_FORWARD_SLASH)\r\n        return str.slice(0, i);\r\n    }\r\n    return str;\r\n  };\r\n}\r\n\r\nfunction encodeRealpathResult(result, options) {\r\n  if (!options || !options.encoding || options.encoding === 'utf8')\r\n    return result;\r\n  const asBuffer = Buffer.from(result);\r\n  if (options.encoding === 'buffer') {\r\n    return asBuffer;\r\n  } else {\r\n    return asBuffer.toString(options.encoding);\r\n  }\r\n}\r\n\r\n// Finds the next portion of a (partial) path, up to the next path delimiter\r\nlet nextPart;\r\nif (isWindows) {\r\n  nextPart = function nextPart(p, i) {\r\n    for (; i < p.length; ++i) {\r\n      const ch = p.charCodeAt(i);\r\n\r\n      // Check for a separator character\r\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\r\n        return i;\r\n    }\r\n    return -1;\r\n  };\r\n} else {\r\n  nextPart = function nextPart(p, i) { return p.indexOf('/', i); };\r\n}\r\n\r\nconst emptyObj = Object.create(null);\r\nfunction realpathSync(p, options) {\r\n  if (!options)\r\n    options = emptyObj;\r\n  else\r\n    options = getOptions(options, emptyObj);\r\n  p = toPathIfFileURL(p);\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const cache = options[realpathCacheKey];\r\n  const maybeCachedResult = cache && cache.get(p);\r\n  if (maybeCachedResult) {\r\n    return maybeCachedResult;\r\n  }\r\n\r\n  const seenLinks = Object.create(null);\r\n  const knownHard = Object.create(null);\r\n  const original = p;\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  // Skip over roots\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows && !knownHard[base]) {\r\n    const ctx = { path: base };\r\n    binding.lstat(pathModule.toNamespacedPath(base), false, undefined, ctx);\r\n    handleErrorFromBinding(ctx);\r\n    knownHard[base] = true;\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  // NB: p.length changes.\r\n  while (pos < p.length) {\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = p.slice(pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += p.slice(pos, result + 1);\r\n      base = previous + p.slice(pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard[base] || (cache && cache.get(base) === base)) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        break;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    let resolvedLink;\r\n    const maybeCachedResolved = cache && cache.get(base);\r\n    if (maybeCachedResolved) {\r\n      resolvedLink = maybeCachedResolved;\r\n    } else {\r\n      // Use stats array directly to avoid creating an fs.Stats instance just\r\n      // for our internal use.\r\n\r\n      const baseLong = pathModule.toNamespacedPath(base);\r\n      const ctx = { path: base };\r\n      const stats = binding.lstat(baseLong, false, undefined, ctx);\r\n      handleErrorFromBinding(ctx);\r\n\r\n      if (!isFileType(stats, S_IFLNK)) {\r\n        knownHard[base] = true;\r\n        if (cache) cache.set(base, base);\r\n        continue;\r\n      }\r\n\r\n      // Read the link if it wasn't read before\r\n      // dev/ino always return 0 on windows, so skip the check.\r\n      let linkTarget = null;\r\n      let id;\r\n      if (!isWindows) {\r\n        const dev = stats[0].toString(32);\r\n        const ino = stats[7].toString(32);\r\n        id = `${dev}:${ino}`;\r\n        if (seenLinks[id]) {\r\n          linkTarget = seenLinks[id];\r\n        }\r\n      }\r\n      if (linkTarget === null) {\r\n        const ctx = { path: base };\r\n        binding.stat(baseLong, false, undefined, ctx);\r\n        handleErrorFromBinding(ctx);\r\n        linkTarget = binding.readlink(baseLong, undefined, undefined, ctx);\r\n        handleErrorFromBinding(ctx);\r\n      }\r\n      resolvedLink = pathModule.resolve(previous, linkTarget);\r\n\r\n      if (cache) cache.set(base, resolvedLink);\r\n      if (!isWindows) seenLinks[id] = linkTarget;\r\n    }\r\n\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\r\n\r\n    // Skip over roots\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard[base]) {\r\n      const ctx = { path: base };\r\n      binding.lstat(pathModule.toNamespacedPath(base), false, undefined, ctx);\r\n      handleErrorFromBinding(ctx);\r\n      knownHard[base] = true;\r\n    }\r\n  }\r\n\r\n  if (cache) cache.set(original, p);\r\n  return encodeRealpathResult(p, options);\r\n}\r\n\r\n\r\nrealpathSync.native = (path, options) => {\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path);\r\n  const ctx = { path };\r\n  const result = binding.realpath(path, options.encoding, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n};\r\n\r\n\r\nfunction realpath(p, options, callback) {\r\n  callback = typeof options === 'function' ? options : maybeCallback(callback);\r\n  options = getOptions(options, {});\r\n  p = toPathIfFileURL(p);\r\n\r\n  if (typeof p !== 'string') {\r\n    p += '';\r\n  }\r\n  validatePath(p);\r\n  p = pathModule.resolve(p);\r\n\r\n  const seenLinks = Object.create(null);\r\n  const knownHard = Object.create(null);\r\n\r\n  // Current character position in p\r\n  let pos;\r\n  // The partial path so far, including a trailing slash if any\r\n  let current;\r\n  // The partial path without a trailing slash (except when pointing at a root)\r\n  let base;\r\n  // The partial path scanned in the previous round, with slash\r\n  let previous;\r\n\r\n  current = base = splitRoot(p);\r\n  pos = current.length;\r\n\r\n  // On windows, check that the root exists. On unix there is no need.\r\n  if (isWindows && !knownHard[base]) {\r\n    fs.lstat(base, (err, stats) => {\r\n      if (err) return callback(err);\r\n      knownHard[base] = true;\r\n      LOOP();\r\n    });\r\n  } else {\r\n    process.nextTick(LOOP);\r\n  }\r\n\r\n  // Walk down the path, swapping out linked path parts for their real\r\n  // values\r\n  function LOOP() {\r\n    // Stop if scanned past end of path\r\n    if (pos >= p.length) {\r\n      return callback(null, encodeRealpathResult(p, options));\r\n    }\r\n\r\n    // find the next part\r\n    const result = nextPart(p, pos);\r\n    previous = current;\r\n    if (result === -1) {\r\n      const last = p.slice(pos);\r\n      current += last;\r\n      base = previous + last;\r\n      pos = p.length;\r\n    } else {\r\n      current += p.slice(pos, result + 1);\r\n      base = previous + p.slice(pos, result);\r\n      pos = result + 1;\r\n    }\r\n\r\n    // Continue if not a symlink, break if a pipe/socket\r\n    if (knownHard[base]) {\r\n      if (isFileType(statValues, S_IFIFO) ||\r\n          isFileType(statValues, S_IFSOCK)) {\r\n        return callback(null, encodeRealpathResult(p, options));\r\n      }\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    return fs.lstat(base, gotStat);\r\n  }\r\n\r\n  function gotStat(err, stats) {\r\n    if (err) return callback(err);\r\n\r\n    // If not a symlink, skip to the next path part\r\n    if (!stats.isSymbolicLink()) {\r\n      knownHard[base] = true;\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    // Stat & read the link if not read before.\r\n    // Call `gotTarget()` as soon as the link target is known.\r\n    // `dev`/`ino` always return 0 on windows, so skip the check.\r\n    let id;\r\n    if (!isWindows) {\r\n      const dev = stats.dev.toString(32);\r\n      const ino = stats.ino.toString(32);\r\n      id = `${dev}:${ino}`;\r\n      if (seenLinks[id]) {\r\n        return gotTarget(null, seenLinks[id], base);\r\n      }\r\n    }\r\n    fs.stat(base, (err) => {\r\n      if (err) return callback(err);\r\n\r\n      fs.readlink(base, (err, target) => {\r\n        if (!isWindows) seenLinks[id] = target;\r\n        gotTarget(err, target);\r\n      });\r\n    });\r\n  }\r\n\r\n  function gotTarget(err, target, base) {\r\n    if (err) return callback(err);\r\n\r\n    gotResolvedLink(pathModule.resolve(previous, target));\r\n  }\r\n\r\n  function gotResolvedLink(resolvedLink) {\r\n    // Resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\r\n    current = base = splitRoot(p);\r\n    pos = current.length;\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard[base]) {\r\n      fs.lstat(base, (err) => {\r\n        if (err) return callback(err);\r\n        knownHard[base] = true;\r\n        LOOP();\r\n      });\r\n    } else {\r\n      process.nextTick(LOOP);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nrealpath.native = (path, options, callback) => {\r\n  callback = makeCallback(callback || options);\r\n  options = getOptions(options, {});\r\n  path = getValidatedPath(path);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  return binding.realpath(path, options.encoding, req);\r\n};\r\n\r\nfunction mkdtemp(prefix, options, callback) {\r\n  callback = makeCallback(typeof options === 'function' ? options : callback);\r\n  options = getOptions(options, {});\r\n  if (!prefix || typeof prefix !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE('prefix', 'string', prefix);\r\n  }\r\n  nullCheck(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = callback;\r\n  binding.mkdtemp(`${prefix}XXXXXX`, options.encoding, req);\r\n}\r\n\r\n\r\nfunction mkdtempSync(prefix, options) {\r\n  options = getOptions(options, {});\r\n  if (!prefix || typeof prefix !== 'string') {\r\n    throw new ERR_INVALID_ARG_TYPE('prefix', 'string', prefix);\r\n  }\r\n  nullCheck(prefix, 'prefix');\r\n  warnOnNonPortableTemplate(prefix);\r\n  const path = `${prefix}XXXXXX`;\r\n  const ctx = { path };\r\n  const result = binding.mkdtemp(path, options.encoding,\r\n                                 undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n  return result;\r\n}\r\n\r\n\r\nfunction copyFile(src, dest, flags, callback) {\r\n  if (typeof flags === 'function') {\r\n    callback = flags;\r\n    flags = 0;\r\n  } else if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  src = pathModule._makeLong(src);\r\n  dest = pathModule._makeLong(dest);\r\n  flags = flags | 0;\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = makeCallback(callback);\r\n  binding.copyFile(src, dest, flags, req);\r\n}\r\n\r\n\r\nfunction copyFileSync(src, dest, flags) {\r\n  src = getValidatedPath(src, 'src');\r\n  dest = getValidatedPath(dest, 'dest');\r\n\r\n  const ctx = { path: src, dest };  // non-prefixed\r\n\r\n  src = pathModule._makeLong(src);\r\n  dest = pathModule._makeLong(dest);\r\n  flags = flags | 0;\r\n  binding.copyFile(src, dest, flags, undefined, ctx);\r\n  handleErrorFromBinding(ctx);\r\n}\r\n\r\nfunction lazyLoadStreams() {\r\n  if (!ReadStream) {\r\n    ({ ReadStream, WriteStream } = require('internal/fs/streams'));\r\n    [ FileReadStream, FileWriteStream ] = [ ReadStream, WriteStream ];\r\n  }\r\n}\r\n\r\nfunction createReadStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new ReadStream(path, options);\r\n}\r\n\r\nfunction createWriteStream(path, options) {\r\n  lazyLoadStreams();\r\n  return new WriteStream(path, options);\r\n}\r\n\r\nmodule.exports = fs = {\r\n  appendFile,\r\n  appendFileSync,\r\n  access,\r\n  accessSync,\r\n  chown,\r\n  chownSync,\r\n  chmod,\r\n  chmodSync,\r\n  close,\r\n  closeSync,\r\n  copyFile,\r\n  copyFileSync,\r\n  createReadStream,\r\n  createWriteStream,\r\n  exists,\r\n  existsSync,\r\n  fchown,\r\n  fchownSync,\r\n  fchmod,\r\n  fchmodSync,\r\n  fdatasync,\r\n  fdatasyncSync,\r\n  fstat,\r\n  fstatSync,\r\n  fsync,\r\n  fsyncSync,\r\n  ftruncate,\r\n  ftruncateSync,\r\n  futimes,\r\n  futimesSync,\r\n  lchown,\r\n  lchownSync,\r\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined,\r\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined,\r\n  link,\r\n  linkSync,\r\n  lstat,\r\n  lstatSync,\r\n  mkdir,\r\n  mkdirSync,\r\n  mkdtemp,\r\n  mkdtempSync,\r\n  open,\r\n  openSync,\r\n  opendir,\r\n  opendirSync,\r\n  readdir,\r\n  readdirSync,\r\n  read,\r\n  readSync,\r\n  readFile,\r\n  readFileSync,\r\n  readlink,\r\n  readlinkSync,\r\n  realpath,\r\n  realpathSync,\r\n  rename,\r\n  renameSync,\r\n  rmdir,\r\n  rmdirSync,\r\n  stat,\r\n  statSync,\r\n  symlink,\r\n  symlinkSync,\r\n  truncate,\r\n  truncateSync,\r\n  unwatchFile,\r\n  unlink,\r\n  unlinkSync,\r\n  utimes,\r\n  utimesSync,\r\n  watch,\r\n  watchFile,\r\n  writeFile,\r\n  writeFileSync,\r\n  write,\r\n  writeSync,\r\n  writev,\r\n  writevSync,\r\n  Dir,\r\n  Dirent,\r\n  Stats,\r\n\r\n  get ReadStream() {\r\n    lazyLoadStreams();\r\n    return ReadStream;\r\n  },\r\n\r\n  set ReadStream(val) {\r\n    ReadStream = val;\r\n  },\r\n\r\n  get WriteStream() {\r\n    lazyLoadStreams();\r\n    return WriteStream;\r\n  },\r\n\r\n  set WriteStream(val) {\r\n    WriteStream = val;\r\n  },\r\n\r\n  // Legacy names... these have to be separate because of how graceful-fs\r\n  // (and possibly other) modules monkey patch the values.\r\n  get FileReadStream() {\r\n    lazyLoadStreams();\r\n    return FileReadStream;\r\n  },\r\n\r\n  set FileReadStream(val) {\r\n    FileReadStream = val;\r\n  },\r\n\r\n  get FileWriteStream() {\r\n    lazyLoadStreams();\r\n    return FileWriteStream;\r\n  },\r\n\r\n  set FileWriteStream(val) {\r\n    FileWriteStream = val;\r\n  },\r\n\r\n  // For tests\r\n  _toUnixTimestamp: toUnixTimestamp\r\n};\r\n\r\nObject.defineProperties(fs, {\r\n  F_OK: { enumerable: true, value: F_OK || 0 },\r\n  R_OK: { enumerable: true, value: R_OK || 0 },\r\n  W_OK: { enumerable: true, value: W_OK || 0 },\r\n  X_OK: { enumerable: true, value: X_OK || 0 },\r\n  constants: {\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants\r\n  },\r\n  promises: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      if (promises === null)\r\n        promises = require('internal/fs/promises').exports;\r\n      return promises;\r\n    }\r\n  }\r\n});\r\n"
  },
  {
    "name": "internal/fs/utils.js",
    "source": "'use strict';\r\n\r\nconst { Object, Reflect } = primordials;\r\n\r\nconst { Buffer, kMaxLength } = require('buffer');\r\nconst {\r\n  codes: {\r\n    ERR_FS_INVALID_SYMLINK_TYPE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_INVALID_ARG_VALUE,\r\n    ERR_INVALID_OPT_VALUE,\r\n    ERR_INVALID_OPT_VALUE_ENCODING,\r\n    ERR_OUT_OF_RANGE\r\n  },\r\n  hideStackFrames,\r\n  uvException\r\n} = require('internal/errors');\r\nconst {\r\n  isArrayBufferView,\r\n  isUint8Array,\r\n  isDate,\r\n  isBigUint64Array\r\n} = require('internal/util/types');\r\nconst { once } = require('internal/util');\r\nconst { toPathIfFileURL } = require('internal/url');\r\nconst {\r\n  validateInt32,\r\n  validateUint32\r\n} = require('internal/validators');\r\nconst pathModule = require('path');\r\nconst kType = Symbol('type');\r\nconst kStats = Symbol('stats');\r\n\r\nconst {\r\n  O_APPEND,\r\n  O_CREAT,\r\n  O_EXCL,\r\n  O_RDONLY,\r\n  O_RDWR,\r\n  O_SYNC,\r\n  O_TRUNC,\r\n  O_WRONLY,\r\n  S_IFBLK,\r\n  S_IFCHR,\r\n  S_IFDIR,\r\n  S_IFIFO,\r\n  S_IFLNK,\r\n  S_IFMT,\r\n  S_IFREG,\r\n  S_IFSOCK,\r\n  UV_FS_SYMLINK_DIR,\r\n  UV_FS_SYMLINK_JUNCTION,\r\n  UV_DIRENT_UNKNOWN,\r\n  UV_DIRENT_FILE,\r\n  UV_DIRENT_DIR,\r\n  UV_DIRENT_LINK,\r\n  UV_DIRENT_FIFO,\r\n  UV_DIRENT_SOCKET,\r\n  UV_DIRENT_CHAR,\r\n  UV_DIRENT_BLOCK\r\n} = internalBinding('constants').fs;\r\n\r\nconst isWindows = process.platform === 'win32';\r\n\r\nlet fs;\r\nfunction lazyLoadFs() {\r\n  if (!fs) {\r\n    fs = require('fs');\r\n  }\r\n  return fs;\r\n}\r\n\r\nfunction assertEncoding(encoding) {\r\n  if (encoding && !Buffer.isEncoding(encoding)) {\r\n    throw new ERR_INVALID_OPT_VALUE_ENCODING(encoding);\r\n  }\r\n}\r\n\r\nclass Dirent {\r\n  constructor(name, type) {\r\n    this.name = name;\r\n    this[kType] = type;\r\n  }\r\n\r\n  isDirectory() {\r\n    return this[kType] === UV_DIRENT_DIR;\r\n  }\r\n\r\n  isFile() {\r\n    return this[kType] === UV_DIRENT_FILE;\r\n  }\r\n\r\n  isBlockDevice() {\r\n    return this[kType] === UV_DIRENT_BLOCK;\r\n  }\r\n\r\n  isCharacterDevice() {\r\n    return this[kType] === UV_DIRENT_CHAR;\r\n  }\r\n\r\n  isSymbolicLink() {\r\n    return this[kType] === UV_DIRENT_LINK;\r\n  }\r\n\r\n  isFIFO() {\r\n    return this[kType] === UV_DIRENT_FIFO;\r\n  }\r\n\r\n  isSocket() {\r\n    return this[kType] === UV_DIRENT_SOCKET;\r\n  }\r\n}\r\n\r\nclass DirentFromStats extends Dirent {\r\n  constructor(name, stats) {\r\n    super(name, null);\r\n    this[kStats] = stats;\r\n  }\r\n}\r\n\r\nfor (const name of Reflect.ownKeys(Dirent.prototype)) {\r\n  if (name === 'constructor') {\r\n    continue;\r\n  }\r\n  DirentFromStats.prototype[name] = function() {\r\n    return this[kStats][name]();\r\n  };\r\n}\r\n\r\nfunction copyObject(source) {\r\n  const target = {};\r\n  for (const key in source)\r\n    target[key] = source[key];\r\n  return target;\r\n}\r\n\r\nfunction getDirents(path, [names, types], callback) {\r\n  let i;\r\n  if (typeof callback === 'function') {\r\n    const len = names.length;\r\n    let toFinish = 0;\r\n    callback = once(callback);\r\n    for (i = 0; i < len; i++) {\r\n      const type = types[i];\r\n      if (type === UV_DIRENT_UNKNOWN) {\r\n        const name = names[i];\r\n        const idx = i;\r\n        toFinish++;\r\n        lazyLoadFs().lstat(pathModule.join(path, name), (err, stats) => {\r\n          if (err) {\r\n            callback(err);\r\n            return;\r\n          }\r\n          names[idx] = new DirentFromStats(name, stats);\r\n          if (--toFinish === 0) {\r\n            callback(null, names);\r\n          }\r\n        });\r\n      } else {\r\n        names[i] = new Dirent(names[i], types[i]);\r\n      }\r\n    }\r\n    if (toFinish === 0) {\r\n      callback(null, names);\r\n    }\r\n  } else {\r\n    const len = names.length;\r\n    for (i = 0; i < len; i++) {\r\n      names[i] = getDirent(path, names[i], types[i]);\r\n    }\r\n    return names;\r\n  }\r\n}\r\n\r\nfunction getDirent(path, name, type, callback) {\r\n  if (typeof callback === 'function') {\r\n    if (type === UV_DIRENT_UNKNOWN) {\r\n      lazyLoadFs().lstat(pathModule.join(path, name), (err, stats) => {\r\n        if (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n        callback(null, new DirentFromStats(name, stats));\r\n      });\r\n    } else {\r\n      callback(null, new Dirent(name, type));\r\n    }\r\n  } else if (type === UV_DIRENT_UNKNOWN) {\r\n    const stats = lazyLoadFs().lstatSync(pathModule.join(path, name));\r\n    return new DirentFromStats(name, stats);\r\n  } else {\r\n    return new Dirent(name, type);\r\n  }\r\n}\r\n\r\nfunction getOptions(options, defaultOptions) {\r\n  if (options === null || options === undefined ||\r\n      typeof options === 'function') {\r\n    return defaultOptions;\r\n  }\r\n\r\n  if (typeof options === 'string') {\r\n    defaultOptions = { ...defaultOptions };\r\n    defaultOptions.encoding = options;\r\n    options = defaultOptions;\r\n  } else if (typeof options !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('options', ['string', 'Object'], options);\r\n  }\r\n\r\n  if (options.encoding !== 'buffer')\r\n    assertEncoding(options.encoding);\r\n  return options;\r\n}\r\n\r\nfunction handleErrorFromBinding(ctx) {\r\n  if (ctx.errno !== undefined) {  // libuv error numbers\r\n    const err = uvException(ctx);\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(err, handleErrorFromBinding);\r\n    throw err;\r\n  }\r\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\r\n    // TODO(joyeecheung): currently, ctx.error are encoding errors\r\n    // usually caused by memory problems. We need to figure out proper error\r\n    // code(s) for this.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    Error.captureStackTrace(ctx.error, handleErrorFromBinding);\r\n    throw ctx.error;\r\n  }\r\n}\r\n\r\n// Check if the path contains null types if it is a string nor Uint8Array,\r\n// otherwise return silently.\r\nconst nullCheck = hideStackFrames((path, propName, throwError = true) => {\r\n  const pathIsString = typeof path === 'string';\r\n  const pathIsUint8Array = isUint8Array(path);\r\n\r\n  // We can only perform meaningful checks on strings and Uint8Arrays.\r\n  if ((!pathIsString && !pathIsUint8Array) ||\r\n      (pathIsString && !path.includes('\\u0000')) ||\r\n      (pathIsUint8Array && !path.includes(0))) {\r\n    return;\r\n  }\r\n\r\n  const err = new ERR_INVALID_ARG_VALUE(\r\n    propName,\r\n    path,\r\n    'must be a string or Uint8Array without null bytes'\r\n  );\r\n  if (throwError) {\r\n    throw err;\r\n  }\r\n  return err;\r\n});\r\n\r\nfunction preprocessSymlinkDestination(path, type, linkPath) {\r\n  if (!isWindows) {\r\n    // No preprocessing is needed on Unix.\r\n    return path;\r\n  } else if (type === 'junction') {\r\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\r\n    // A relative target is relative to the link's parent directory.\r\n    path = pathModule.resolve(linkPath, '..', path);\r\n    return pathModule.toNamespacedPath(path);\r\n  } else {\r\n    // Windows symlinks don't tolerate forward slashes.\r\n    return ('' + path).replace(/\\//g, '\\\\');\r\n  }\r\n}\r\n\r\n// Constructor for file stats.\r\nfunction StatsBase(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                   ino, size, blocks) {\r\n  this.dev = dev;\r\n  this.mode = mode;\r\n  this.nlink = nlink;\r\n  this.uid = uid;\r\n  this.gid = gid;\r\n  this.rdev = rdev;\r\n  this.blksize = blksize;\r\n  this.ino = ino;\r\n  this.size = size;\r\n  this.blocks = blocks;\r\n}\r\n\r\nStatsBase.prototype.isDirectory = function() {\r\n  return this._checkModeProperty(S_IFDIR);\r\n};\r\n\r\nStatsBase.prototype.isFile = function() {\r\n  return this._checkModeProperty(S_IFREG);\r\n};\r\n\r\nStatsBase.prototype.isBlockDevice = function() {\r\n  return this._checkModeProperty(S_IFBLK);\r\n};\r\n\r\nStatsBase.prototype.isCharacterDevice = function() {\r\n  return this._checkModeProperty(S_IFCHR);\r\n};\r\n\r\nStatsBase.prototype.isSymbolicLink = function() {\r\n  return this._checkModeProperty(S_IFLNK);\r\n};\r\n\r\nStatsBase.prototype.isFIFO = function() {\r\n  return this._checkModeProperty(S_IFIFO);\r\n};\r\n\r\nStatsBase.prototype.isSocket = function() {\r\n  return this._checkModeProperty(S_IFSOCK);\r\n};\r\n\r\nconst kNsPerMsBigInt = 10n ** 6n;\r\nconst kNsPerSecBigInt = 10n ** 9n;\r\nconst kMsPerSec = 10 ** 3;\r\nconst kNsPerMs = 10 ** 6;\r\nfunction msFromTimeSpec(sec, nsec) {\r\n  return sec * kMsPerSec + nsec / kNsPerMs;\r\n}\r\n\r\nfunction nsFromTimeSpecBigInt(sec, nsec) {\r\n  return sec * kNsPerSecBigInt + nsec;\r\n}\r\n\r\n// The Date constructor performs Math.floor() to the timestamp.\r\n// https://www.ecma-international.org/ecma-262/#sec-timeclip\r\n// Since there may be a precision loss when the timestamp is\r\n// converted to a floating point number, we manually round\r\n// the timestamp here before passing it to Date().\r\n// Refs: https://github.com/nodejs/node/pull/12607\r\nfunction dateFromMs(ms) {\r\n  return new Date(Number(ms) + 0.5);\r\n}\r\n\r\nfunction BigIntStats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n                     ino, size, blocks,\r\n                     atimeNs, mtimeNs, ctimeNs, birthtimeNs) {\r\n  StatsBase.call(this, dev, mode, nlink, uid, gid, rdev, blksize,\r\n                 ino, size, blocks);\r\n\r\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\r\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\r\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\r\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\r\n  this.atimeNs = atimeNs;\r\n  this.mtimeNs = mtimeNs;\r\n  this.ctimeNs = ctimeNs;\r\n  this.birthtimeNs = birthtimeNs;\r\n  this.atime = dateFromMs(this.atimeMs);\r\n  this.mtime = dateFromMs(this.mtimeMs);\r\n  this.ctime = dateFromMs(this.ctimeMs);\r\n  this.birthtime = dateFromMs(this.birthtimeMs);\r\n}\r\n\r\nObject.setPrototypeOf(BigIntStats.prototype, StatsBase.prototype);\r\nObject.setPrototypeOf(BigIntStats, StatsBase);\r\n\r\nBigIntStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\r\n};\r\n\r\nfunction Stats(dev, mode, nlink, uid, gid, rdev, blksize,\r\n               ino, size, blocks,\r\n               atimeMs, mtimeMs, ctimeMs, birthtimeMs) {\r\n  StatsBase.call(this, dev, mode, nlink, uid, gid, rdev, blksize,\r\n                 ino, size, blocks);\r\n  this.atimeMs = atimeMs;\r\n  this.mtimeMs = mtimeMs;\r\n  this.ctimeMs = ctimeMs;\r\n  this.birthtimeMs = birthtimeMs;\r\n  this.atime = dateFromMs(atimeMs);\r\n  this.mtime = dateFromMs(mtimeMs);\r\n  this.ctime = dateFromMs(ctimeMs);\r\n  this.birthtime = dateFromMs(birthtimeMs);\r\n}\r\n\r\nObject.setPrototypeOf(Stats.prototype, StatsBase.prototype);\r\nObject.setPrototypeOf(Stats, StatsBase);\r\n\r\n// HACK: Workaround for https://github.com/standard-things/esm/issues/821.\r\n// TODO(ronag): Remove this as soon as `esm` publishes a fixed version.\r\nStats.prototype.isFile = StatsBase.prototype.isFile;\r\n\r\nStats.prototype._checkModeProperty = function(property) {\r\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\r\n    property === S_IFSOCK)) {\r\n    return false;  // Some types are not available on Windows\r\n  }\r\n  return (this.mode & S_IFMT) === property;\r\n};\r\n\r\nfunction getStatsFromBinding(stats, offset = 0) {\r\n  if (isBigUint64Array(stats)) {\r\n    return new BigIntStats(\r\n      stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n      stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n      stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n      stats[9 + offset],\r\n      nsFromTimeSpecBigInt(stats[10 + offset], stats[11 + offset]),\r\n      nsFromTimeSpecBigInt(stats[12 + offset], stats[13 + offset]),\r\n      nsFromTimeSpecBigInt(stats[14 + offset], stats[15 + offset]),\r\n      nsFromTimeSpecBigInt(stats[16 + offset], stats[17 + offset])\r\n    );\r\n  }\r\n  return new Stats(\r\n    stats[0 + offset], stats[1 + offset], stats[2 + offset],\r\n    stats[3 + offset], stats[4 + offset], stats[5 + offset],\r\n    stats[6 + offset], stats[7 + offset], stats[8 + offset],\r\n    stats[9 + offset],\r\n    msFromTimeSpec(stats[10 + offset], stats[11 + offset]),\r\n    msFromTimeSpec(stats[12 + offset], stats[13 + offset]),\r\n    msFromTimeSpec(stats[14 + offset], stats[15 + offset]),\r\n    msFromTimeSpec(stats[16 + offset], stats[17 + offset])\r\n  );\r\n}\r\n\r\nfunction stringToFlags(flags) {\r\n  if (typeof flags === 'number') {\r\n    return flags;\r\n  }\r\n\r\n  switch (flags) {\r\n    case 'r' : return O_RDONLY;\r\n    case 'rs' : // Fall through.\r\n    case 'sr' : return O_RDONLY | O_SYNC;\r\n    case 'r+' : return O_RDWR;\r\n    case 'rs+' : // Fall through.\r\n    case 'sr+' : return O_RDWR | O_SYNC;\r\n\r\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\r\n    case 'wx' : // Fall through.\r\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\r\n\r\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\r\n    case 'wx+': // Fall through.\r\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\r\n\r\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\r\n    case 'ax' : // Fall through.\r\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\r\n    case 'as' : // Fall through.\r\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\r\n\r\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\r\n    case 'ax+': // Fall through.\r\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\r\n    case 'as+': // Fall through.\r\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\r\n  }\r\n\r\n  throw new ERR_INVALID_OPT_VALUE('flags', flags);\r\n}\r\n\r\nconst stringToSymlinkType = hideStackFrames((type) => {\r\n  let flags = 0;\r\n  if (typeof type === 'string') {\r\n    switch (type) {\r\n      case 'dir':\r\n        flags |= UV_FS_SYMLINK_DIR;\r\n        break;\r\n      case 'junction':\r\n        flags |= UV_FS_SYMLINK_JUNCTION;\r\n        break;\r\n      case 'file':\r\n        break;\r\n      default:\r\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\r\n    }\r\n  }\r\n  return flags;\r\n});\r\n\r\n// converts Date or number to a fractional UNIX timestamp\r\nfunction toUnixTimestamp(time, name = 'time') {\r\n  // eslint-disable-next-line eqeqeq\r\n  if (typeof time === 'string' && +time == time) {\r\n    return +time;\r\n  }\r\n  if (Number.isFinite(time)) {\r\n    if (time < 0) {\r\n      return Date.now() / 1000;\r\n    }\r\n    return time;\r\n  }\r\n  if (isDate(time)) {\r\n    // Convert to 123.456 UNIX timestamp\r\n    return time.getTime() / 1000;\r\n  }\r\n  throw new ERR_INVALID_ARG_TYPE(name, ['Date', 'Time in seconds'], time);\r\n}\r\n\r\nconst validateOffsetLengthRead = hideStackFrames(\r\n  (offset, length, bufferLength) => {\r\n    if (offset < 0 || offset >= bufferLength) {\r\n      throw new ERR_OUT_OF_RANGE('offset',\r\n                                 `>= 0 && <= ${bufferLength}`, offset);\r\n    }\r\n    if (length < 0 || offset + length > bufferLength) {\r\n      throw new ERR_OUT_OF_RANGE('length',\r\n                                 `>= 0 && <= ${bufferLength - offset}`, length);\r\n    }\r\n  }\r\n);\r\n\r\nconst validateOffsetLengthWrite = hideStackFrames(\r\n  (offset, length, byteLength) => {\r\n    if (offset > byteLength) {\r\n      throw new ERR_OUT_OF_RANGE('offset', `<= ${byteLength}`, offset);\r\n    }\r\n\r\n    const max = byteLength > kMaxLength ? kMaxLength : byteLength;\r\n    if (length > max - offset) {\r\n      throw new ERR_OUT_OF_RANGE('length', `<= ${max - offset}`, length);\r\n    }\r\n  }\r\n);\r\n\r\nconst validatePath = hideStackFrames((path, propName = 'path') => {\r\n  if (typeof path !== 'string' && !isUint8Array(path)) {\r\n    throw new ERR_INVALID_ARG_TYPE(propName, ['string', 'Buffer', 'URL'], path);\r\n  }\r\n\r\n  const err = nullCheck(path, propName, false);\r\n\r\n  if (err !== undefined) {\r\n    throw err;\r\n  }\r\n});\r\n\r\nconst getValidatedPath = hideStackFrames((fileURLOrPath, propName = 'path') => {\r\n  const path = toPathIfFileURL(fileURLOrPath);\r\n  validatePath(path, propName);\r\n  return path;\r\n});\r\n\r\nconst validateBufferArray = hideStackFrames((buffers, propName = 'buffers') => {\r\n  if (!Array.isArray(buffers))\r\n    throw new ERR_INVALID_ARG_TYPE(propName, 'ArrayBufferView[]', buffers);\r\n\r\n  for (let i = 0; i < buffers.length; i++) {\r\n    if (!isArrayBufferView(buffers[i]))\r\n      throw new ERR_INVALID_ARG_TYPE(propName, 'ArrayBufferView[]', buffers);\r\n  }\r\n\r\n  return buffers;\r\n});\r\n\r\nlet nonPortableTemplateWarn = true;\r\n\r\nfunction warnOnNonPortableTemplate(template) {\r\n  // Template strings passed to the mkdtemp() family of functions should not\r\n  // end with 'X' because they are handled inconsistently across platforms.\r\n  if (nonPortableTemplateWarn && template.endsWith('X')) {\r\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\r\n                        'For details see: https://nodejs.org/api/fs.html');\r\n    nonPortableTemplateWarn = false;\r\n  }\r\n}\r\n\r\nconst defaultRmdirOptions = {\r\n  emfileWait: 1000,\r\n  maxBusyTries: 3,\r\n  recursive: false,\r\n};\r\n\r\nconst validateRmdirOptions = hideStackFrames((options) => {\r\n  if (options === undefined)\r\n    return defaultRmdirOptions;\r\n  if (options === null || typeof options !== 'object')\r\n    throw new ERR_INVALID_ARG_TYPE('options', 'object', options);\r\n\r\n  options = { ...defaultRmdirOptions, ...options };\r\n\r\n  if (typeof options.recursive !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE('recursive', 'boolean', options.recursive);\r\n\r\n  validateInt32(options.emfileWait, 'emfileWait', 0);\r\n  validateUint32(options.maxBusyTries, 'maxBusyTries');\r\n\r\n  return options;\r\n});\r\n\r\n\r\nmodule.exports = {\r\n  assertEncoding,\r\n  BigIntStats,  // for testing\r\n  copyObject,\r\n  Dirent,\r\n  getDirent,\r\n  getDirents,\r\n  getOptions,\r\n  getValidatedPath,\r\n  handleErrorFromBinding,\r\n  nullCheck,\r\n  preprocessSymlinkDestination,\r\n  realpathCacheKey: Symbol('realpathCacheKey'),\r\n  getStatsFromBinding,\r\n  stringToFlags,\r\n  stringToSymlinkType,\r\n  Stats,\r\n  toUnixTimestamp,\r\n  validateBufferArray,\r\n  validateOffsetLengthRead,\r\n  validateOffsetLengthWrite,\r\n  validatePath,\r\n  validateRmdirOptions,\r\n  warnOnNonPortableTemplate\r\n};\r\n"
  },
  {
    "name": "internal/fs/dir.js",
    "source": "'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nconst pathModule = require('path');\r\nconst binding = internalBinding('fs');\r\nconst dirBinding = internalBinding('fs_dir');\r\nconst {\r\n  codes: {\r\n    ERR_DIR_CLOSED,\r\n    ERR_INVALID_CALLBACK,\r\n    ERR_MISSING_ARGS\r\n  }\r\n} = require('internal/errors');\r\n\r\nconst { FSReqCallback } = binding;\r\nconst internalUtil = require('internal/util');\r\nconst {\r\n  getDirent,\r\n  getOptions,\r\n  getValidatedPath,\r\n  handleErrorFromBinding\r\n} = require('internal/fs/utils');\r\n\r\nconst kDirHandle = Symbol('kDirHandle');\r\nconst kDirPath = Symbol('kDirPath');\r\nconst kDirClosed = Symbol('kDirClosed');\r\nconst kDirOptions = Symbol('kDirOptions');\r\nconst kDirReadPromisified = Symbol('kDirReadPromisified');\r\nconst kDirClosePromisified = Symbol('kDirClosePromisified');\r\n\r\nclass Dir {\r\n  constructor(handle, path, options) {\r\n    if (handle == null) throw new ERR_MISSING_ARGS('handle');\r\n    this[kDirHandle] = handle;\r\n    this[kDirPath] = path;\r\n    this[kDirClosed] = false;\r\n\r\n    this[kDirOptions] = getOptions(options, {\r\n      encoding: 'utf8'\r\n    });\r\n\r\n    this[kDirReadPromisified] = internalUtil.promisify(this.read).bind(this);\r\n    this[kDirClosePromisified] = internalUtil.promisify(this.close).bind(this);\r\n  }\r\n\r\n  get path() {\r\n    return this[kDirPath];\r\n  }\r\n\r\n  read(callback) {\r\n    if (this[kDirClosed] === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    if (callback === undefined) {\r\n      return this[kDirReadPromisified]();\r\n    } else if (typeof callback !== 'function') {\r\n      throw new ERR_INVALID_CALLBACK(callback);\r\n    }\r\n\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = (err, result) => {\r\n      if (err || result === null) {\r\n        return callback(err, result);\r\n      }\r\n      getDirent(this[kDirPath], result[0], result[1], callback);\r\n    };\r\n\r\n    this[kDirHandle].read(\r\n      this[kDirOptions].encoding,\r\n      req\r\n    );\r\n  }\r\n\r\n  readSync(options) {\r\n    if (this[kDirClosed] === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    const ctx = { path: this[kDirPath] };\r\n    const result = this[kDirHandle].read(\r\n      this[kDirOptions].encoding,\r\n      undefined,\r\n      ctx\r\n    );\r\n    handleErrorFromBinding(ctx);\r\n\r\n    if (result === null) {\r\n      return result;\r\n    }\r\n\r\n    return getDirent(this[kDirPath], result[0], result[1]);\r\n  }\r\n\r\n  close(callback) {\r\n    if (this[kDirClosed] === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    if (callback === undefined) {\r\n      return this[kDirClosePromisified]();\r\n    } else if (typeof callback !== 'function') {\r\n      throw new ERR_INVALID_CALLBACK(callback);\r\n    }\r\n\r\n    this[kDirClosed] = true;\r\n    const req = new FSReqCallback();\r\n    req.oncomplete = callback;\r\n    this[kDirHandle].close(req);\r\n  }\r\n\r\n  closeSync() {\r\n    if (this[kDirClosed] === true) {\r\n      throw new ERR_DIR_CLOSED();\r\n    }\r\n\r\n    this[kDirClosed] = true;\r\n    const ctx = { path: this[kDirPath] };\r\n    const result = this[kDirHandle].close(undefined, ctx);\r\n    handleErrorFromBinding(ctx);\r\n    return result;\r\n  }\r\n\r\n  async* entries() {\r\n    try {\r\n      while (true) {\r\n        const result = await this[kDirReadPromisified]();\r\n        if (result === null) {\r\n          break;\r\n        }\r\n        yield result;\r\n      }\r\n    } finally {\r\n      await this[kDirClosePromisified]();\r\n    }\r\n  }\r\n}\r\n\r\nObject.defineProperty(Dir.prototype, Symbol.asyncIterator, {\r\n  value: Dir.prototype.entries,\r\n  enumerable: false,\r\n  writable: true,\r\n  configurable: true,\r\n});\r\n\r\nfunction opendir(path, options, callback) {\r\n  callback = typeof options === 'function' ? options : callback;\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_CALLBACK(callback);\r\n  }\r\n  path = getValidatedPath(path);\r\n  options = getOptions(options, {\r\n    encoding: 'utf8'\r\n  });\r\n\r\n  function opendirCallback(error, handle) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      callback(null, new Dir(handle, path, options));\r\n    }\r\n  }\r\n\r\n  const req = new FSReqCallback();\r\n  req.oncomplete = opendirCallback;\r\n\r\n  dirBinding.opendir(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n    req\r\n  );\r\n}\r\n\r\nfunction opendirSync(path, options) {\r\n  path = getValidatedPath(path);\r\n  options = getOptions(options, {\r\n    encoding: 'utf8'\r\n  });\r\n\r\n  const ctx = { path };\r\n  const handle = dirBinding.opendir(\r\n    pathModule.toNamespacedPath(path),\r\n    options.encoding,\r\n    undefined,\r\n    ctx\r\n  );\r\n  handleErrorFromBinding(ctx);\r\n\r\n  return new Dir(handle, path, options);\r\n}\r\n\r\nmodule.exports = {\r\n  Dir,\r\n  opendir,\r\n  opendirSync\r\n};\r\n"
  },
  {
    "name": "internal/modules/cjs/helpers.js",
    "source": "'use strict';\r\n\r\nconst { Object, SafeMap } = primordials;\r\nconst {\r\n  ERR_MANIFEST_DEPENDENCY_MISSING,\r\n  ERR_UNKNOWN_BUILTIN_MODULE\r\n} = require('internal/errors').codes;\r\nconst { NativeModule } = require('internal/bootstrap/loaders');\r\nconst { getOptionValue } = require('internal/options');\r\nconst experimentalModules = getOptionValue('--experimental-modules');\r\n\r\nconst { validateString } = require('internal/validators');\r\nconst path = require('path');\r\nconst { pathToFileURL, fileURLToPath } = require('internal/url');\r\nconst { URL } = require('url');\r\n\r\nconst debug = require('internal/util/debuglog').debuglog('module');\r\n\r\nfunction loadNativeModule(filename, request, experimentalModules) {\r\n  const mod = NativeModule.map.get(filename);\r\n  if (mod) {\r\n    debug('load native module %s', request);\r\n    mod.compileForPublicLoader(experimentalModules);\r\n    return mod;\r\n  }\r\n}\r\n\r\n// Invoke with makeRequireFunction(module) where |module| is the Module object\r\n// to use as the context for the require() function.\r\n// Use redirects to set up a mapping from a policy and restrict dependencies\r\nconst urlToFileCache = new SafeMap();\r\nfunction makeRequireFunction(mod, redirects) {\r\n  const Module = mod.constructor;\r\n\r\n  let require;\r\n  if (redirects) {\r\n    const { resolve, reaction } = redirects;\r\n    const id = mod.filename || mod.id;\r\n    require = function require(path) {\r\n      let missing = true;\r\n      const destination = resolve(path);\r\n      if (destination === true) {\r\n        missing = false;\r\n      } else if (destination) {\r\n        const href = destination.href;\r\n        if (destination.protocol === 'node:') {\r\n          const specifier = destination.pathname;\r\n          const mod = loadNativeModule(\r\n            specifier,\r\n            href,\r\n            experimentalModules);\r\n          if (mod && mod.canBeRequiredByUsers) {\r\n            return mod.exports;\r\n          }\r\n          throw new ERR_UNKNOWN_BUILTIN_MODULE(specifier);\r\n        } else if (destination.protocol === 'file:') {\r\n          let filepath;\r\n          if (urlToFileCache.has(href)) {\r\n            filepath = urlToFileCache.get(href);\r\n          } else {\r\n            filepath = fileURLToPath(destination);\r\n            urlToFileCache.set(href, filepath);\r\n          }\r\n          return mod.require(filepath);\r\n        }\r\n      }\r\n      if (missing) {\r\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(id, path));\r\n      }\r\n      return mod.require(path);\r\n    };\r\n  } else {\r\n    require = function require(path) {\r\n      return mod.require(path);\r\n    };\r\n  }\r\n\r\n  function resolve(request, options) {\r\n    validateString(request, 'request');\r\n    return Module._resolveFilename(request, mod, false, options);\r\n  }\r\n\r\n  require.resolve = resolve;\r\n\r\n  function paths(request) {\r\n    validateString(request, 'request');\r\n    return Module._resolveLookupPaths(request, mod);\r\n  }\r\n\r\n  resolve.paths = paths;\r\n\r\n  require.main = process.mainModule;\r\n\r\n  // Enable support to add extra extension types.\r\n  require.extensions = Module._extensions;\r\n\r\n  require.cache = Module._cache;\r\n\r\n  return require;\r\n}\r\n\r\n/**\r\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n * because the buffer-to-string conversion in `fs.readFileSync()`\r\n * translates it to FEFF, the UTF-16 BOM.\r\n */\r\nfunction stripBOM(content) {\r\n  if (content.charCodeAt(0) === 0xFEFF) {\r\n    content = content.slice(1);\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Find end of shebang line and slice it off\r\n */\r\nfunction stripShebang(content) {\r\n  // Remove shebang\r\n  if (content.charAt(0) === '#' && content.charAt(1) === '!') {\r\n    // Find end of shebang line and slice it off\r\n    let index = content.indexOf('\\n', 2);\r\n    if (index === -1)\r\n      return '';\r\n    if (content.charAt(index - 1) === '\\r')\r\n      index--;\r\n    // Note that this actually includes the newline character(s) in the\r\n    // new output. This duplicates the behavior of the regular expression\r\n    // that was previously used to replace the shebang line.\r\n    content = content.slice(index);\r\n  }\r\n  return content;\r\n}\r\n\r\nconst builtinLibs = [\r\n  'assert', 'async_hooks', 'buffer', 'child_process', 'cluster', 'crypto',\r\n  'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'http2', 'https', 'net',\r\n  'os', 'path', 'perf_hooks', 'punycode', 'querystring', 'readline', 'repl',\r\n  'stream', 'string_decoder', 'tls', 'trace_events', 'tty', 'url', 'util',\r\n  'v8', 'vm', 'worker_threads', 'zlib'\r\n];\r\n\r\nif (typeof internalBinding('inspector').open === 'function') {\r\n  builtinLibs.push('inspector');\r\n  builtinLibs.sort();\r\n}\r\n\r\nfunction addBuiltinLibsToObject(object) {\r\n  // Make built-in modules available directly (loaded lazily).\r\n  builtinLibs.forEach((name) => {\r\n    // Goals of this mechanism are:\r\n    // - Lazy loading of built-in modules\r\n    // - Having all built-in modules available as non-enumerable properties\r\n    // - Allowing the user to re-assign these variables as if there were no\r\n    //   pre-existing globals with the same name.\r\n\r\n    const setReal = (val) => {\r\n      // Deleting the property before re-assigning it disables the\r\n      // getter/setter mechanism.\r\n      delete object[name];\r\n      object[name] = val;\r\n    };\r\n\r\n    Object.defineProperty(object, name, {\r\n      get: () => {\r\n        const lib = require(name);\r\n\r\n        // Disable the current getter/setter and set up a new\r\n        // non-enumerable property.\r\n        delete object[name];\r\n        Object.defineProperty(object, name, {\r\n          get: () => lib,\r\n          set: setReal,\r\n          configurable: true,\r\n          enumerable: false\r\n        });\r\n\r\n        return lib;\r\n      },\r\n      set: setReal,\r\n      configurable: true,\r\n      enumerable: false\r\n    });\r\n  });\r\n}\r\n\r\nfunction normalizeReferrerURL(referrer) {\r\n  if (typeof referrer === 'string' && path.isAbsolute(referrer)) {\r\n    return pathToFileURL(referrer).href;\r\n  }\r\n  return new URL(referrer).href;\r\n}\r\n\r\nmodule.exports = {\r\n  addBuiltinLibsToObject,\r\n  builtinLibs,\r\n  loadNativeModule,\r\n  makeRequireFunction,\r\n  normalizeReferrerURL,\r\n  stripBOM,\r\n  stripShebang\r\n};\r\n"
  },
  {
    "name": "url.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Object, SafeSet } = primordials;\r\n\r\nconst { toASCII } = require('internal/idna');\r\nconst { encodeStr, hexTable } = require('internal/querystring');\r\n\r\nconst {\r\n  ERR_INVALID_ARG_TYPE\r\n} = require('internal/errors').codes;\r\nconst { validateString } = require('internal/validators');\r\n\r\n// This ensures setURLConstructor() is called before the native\r\n// URL::ToObject() method is used.\r\nconst { spliceOne } = require('internal/util');\r\n\r\n// WHATWG URL implementation provided by internal/url\r\nconst {\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n  formatSymbol,\r\n  pathToFileURL,\r\n  fileURLToPath\r\n} = require('internal/url');\r\n\r\n// Original url.parse() API\r\n\r\nfunction Url() {\r\n  this.protocol = null;\r\n  this.slashes = null;\r\n  this.auth = null;\r\n  this.host = null;\r\n  this.port = null;\r\n  this.hostname = null;\r\n  this.hash = null;\r\n  this.search = null;\r\n  this.query = null;\r\n  this.pathname = null;\r\n  this.path = null;\r\n  this.href = null;\r\n}\r\n\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n\r\n// define these here so at least they only have to be\r\n// compiled once on the first module load.\r\nconst protocolPattern = /^[a-z0-9.+-]+:/i;\r\nconst portPattern = /:[0-9]*$/;\r\nconst hostPattern = /^\\/\\/[^@/]+@[^@/]+/;\r\n\r\n// Special case for a simple path URL\r\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/;\r\n\r\nconst hostnameMaxLen = 255;\r\n// Protocols that can allow \"unsafe\" and \"unwise\" chars.\r\nconst unsafeProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:'\r\n]);\r\n// Protocols that never have a hostname.\r\nconst hostlessProtocol = new SafeSet([\r\n  'javascript',\r\n  'javascript:'\r\n]);\r\n// Protocols that always contain a // bit.\r\nconst slashedProtocol = new SafeSet([\r\n  'http',\r\n  'http:',\r\n  'https',\r\n  'https:',\r\n  'ftp',\r\n  'ftp:',\r\n  'gopher',\r\n  'gopher:',\r\n  'file',\r\n  'file:',\r\n  'ws',\r\n  'ws:',\r\n  'wss',\r\n  'wss:'\r\n]);\r\nconst {\r\n  CHAR_SPACE,\r\n  CHAR_TAB,\r\n  CHAR_CARRIAGE_RETURN,\r\n  CHAR_LINE_FEED,\r\n  CHAR_FORM_FEED,\r\n  CHAR_NO_BREAK_SPACE,\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE,\r\n  CHAR_HASH,\r\n  CHAR_FORWARD_SLASH,\r\n  CHAR_LEFT_SQUARE_BRACKET,\r\n  CHAR_RIGHT_SQUARE_BRACKET,\r\n  CHAR_LEFT_ANGLE_BRACKET,\r\n  CHAR_RIGHT_ANGLE_BRACKET,\r\n  CHAR_LEFT_CURLY_BRACKET,\r\n  CHAR_RIGHT_CURLY_BRACKET,\r\n  CHAR_QUESTION_MARK,\r\n  CHAR_LOWERCASE_A,\r\n  CHAR_LOWERCASE_Z,\r\n  CHAR_UPPERCASE_A,\r\n  CHAR_UPPERCASE_Z,\r\n  CHAR_DOT,\r\n  CHAR_0,\r\n  CHAR_9,\r\n  CHAR_HYPHEN_MINUS,\r\n  CHAR_PLUS,\r\n  CHAR_UNDERSCORE,\r\n  CHAR_DOUBLE_QUOTE,\r\n  CHAR_SINGLE_QUOTE,\r\n  CHAR_PERCENT,\r\n  CHAR_SEMICOLON,\r\n  CHAR_BACKWARD_SLASH,\r\n  CHAR_CIRCUMFLEX_ACCENT,\r\n  CHAR_GRAVE_ACCENT,\r\n  CHAR_VERTICAL_LINE,\r\n  CHAR_AT,\r\n} = require('internal/constants');\r\n\r\n// Lazy loaded for startup performance.\r\nlet querystring;\r\n\r\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\r\n  if (url instanceof Url) return url;\r\n\r\n  const urlObject = new Url();\r\n  urlObject.parse(url, parseQueryString, slashesDenoteHost);\r\n  return urlObject;\r\n}\r\n\r\nUrl.prototype.parse = function parse(url, parseQueryString, slashesDenoteHost) {\r\n  validateString(url, 'url');\r\n\r\n  // Copy chrome, IE, opera backslash-handling behavior.\r\n  // Back slashes before the query string get converted to forward slashes\r\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\r\n  var hasHash = false;\r\n  var start = -1;\r\n  var end = -1;\r\n  var rest = '';\r\n  var lastPos = 0;\r\n  var i = 0;\r\n  for (var inWs = false, split = false; i < url.length; ++i) {\r\n    const code = url.charCodeAt(i);\r\n\r\n    // Find first and last non-whitespace characters for trimming\r\n    const isWs = code === CHAR_SPACE ||\r\n                 code === CHAR_TAB ||\r\n                 code === CHAR_CARRIAGE_RETURN ||\r\n                 code === CHAR_LINE_FEED ||\r\n                 code === CHAR_FORM_FEED ||\r\n                 code === CHAR_NO_BREAK_SPACE ||\r\n                 code === CHAR_ZERO_WIDTH_NOBREAK_SPACE;\r\n    if (start === -1) {\r\n      if (isWs)\r\n        continue;\r\n      lastPos = start = i;\r\n    } else if (inWs) {\r\n      if (!isWs) {\r\n        end = -1;\r\n        inWs = false;\r\n      }\r\n    } else if (isWs) {\r\n      end = i;\r\n      inWs = true;\r\n    }\r\n\r\n    // Only convert backslashes while we haven't seen a split character\r\n    if (!split) {\r\n      switch (code) {\r\n        case CHAR_HASH:\r\n          hasHash = true;\r\n        // Fall through\r\n        case CHAR_QUESTION_MARK:\r\n          split = true;\r\n          break;\r\n        case CHAR_BACKWARD_SLASH:\r\n          if (i - lastPos > 0)\r\n            rest += url.slice(lastPos, i);\r\n          rest += '/';\r\n          lastPos = i + 1;\r\n          break;\r\n      }\r\n    } else if (!hasHash && code === CHAR_HASH) {\r\n      hasHash = true;\r\n    }\r\n  }\r\n\r\n  // Check if string was non-empty (including strings with only whitespace)\r\n  if (start !== -1) {\r\n    if (lastPos === start) {\r\n      // We didn't convert any backslashes\r\n\r\n      if (end === -1) {\r\n        if (start === 0)\r\n          rest = url;\r\n        else\r\n          rest = url.slice(start);\r\n      } else {\r\n        rest = url.slice(start, end);\r\n      }\r\n    } else if (end === -1 && lastPos < url.length) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos);\r\n    } else if (end !== -1 && lastPos < end) {\r\n      // We converted some backslashes and have only part of the entire string\r\n      rest += url.slice(lastPos, end);\r\n    }\r\n  }\r\n\r\n  if (!slashesDenoteHost && !hasHash) {\r\n    // Try fast path regexp\r\n    const simplePath = simplePathPattern.exec(rest);\r\n    if (simplePath) {\r\n      this.path = rest;\r\n      this.href = rest;\r\n      this.pathname = simplePath[1];\r\n      if (simplePath[2]) {\r\n        this.search = simplePath[2];\r\n        if (parseQueryString) {\r\n          if (querystring === undefined) querystring = require('querystring');\r\n          this.query = querystring.parse(this.search.slice(1));\r\n        } else {\r\n          this.query = this.search.slice(1);\r\n        }\r\n      } else if (parseQueryString) {\r\n        this.search = null;\r\n        this.query = Object.create(null);\r\n      }\r\n      return this;\r\n    }\r\n  }\r\n\r\n  let proto = protocolPattern.exec(rest);\r\n  let lowerProto;\r\n  if (proto) {\r\n    proto = proto[0];\r\n    lowerProto = proto.toLowerCase();\r\n    this.protocol = lowerProto;\r\n    rest = rest.slice(proto.length);\r\n  }\r\n\r\n  // Figure out if it's got a host\r\n  // user@server is *always* interpreted as a hostname, and url\r\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n  // how the browser resolves relative URLs.\r\n  let slashes;\r\n  if (slashesDenoteHost || proto || hostPattern.test(rest)) {\r\n    slashes = rest.charCodeAt(0) === CHAR_FORWARD_SLASH &&\r\n              rest.charCodeAt(1) === CHAR_FORWARD_SLASH;\r\n    if (slashes && !(proto && hostlessProtocol.has(lowerProto))) {\r\n      rest = rest.slice(2);\r\n      this.slashes = true;\r\n    }\r\n  }\r\n\r\n  if (!hostlessProtocol.has(lowerProto) &&\r\n      (slashes || (proto && !slashedProtocol.has(proto)))) {\r\n\r\n    // there's a hostname.\r\n    // the first instance of /, ?, ;, or # ends the host.\r\n    //\r\n    // If there is an @ in the hostname, then non-host chars *are* allowed\r\n    // to the left of the last @ sign, unless some host-ending character\r\n    // comes *before* the @-sign.\r\n    // URLs are obnoxious.\r\n    //\r\n    // ex:\r\n    // http://a@b@c/ => user:a@b host:c\r\n    // http://a@b?@c => user:a host:b path:/?@c\r\n\r\n    var hostEnd = -1;\r\n    var atSign = -1;\r\n    var nonHost = -1;\r\n    for (i = 0; i < rest.length; ++i) {\r\n      switch (rest.charCodeAt(i)) {\r\n        case CHAR_TAB:\r\n        case CHAR_LINE_FEED:\r\n        case CHAR_CARRIAGE_RETURN:\r\n        case CHAR_SPACE:\r\n        case CHAR_DOUBLE_QUOTE:\r\n        case CHAR_PERCENT:\r\n        case CHAR_SINGLE_QUOTE:\r\n        case CHAR_SEMICOLON:\r\n        case CHAR_LEFT_ANGLE_BRACKET:\r\n        case CHAR_RIGHT_ANGLE_BRACKET:\r\n        case CHAR_BACKWARD_SLASH:\r\n        case CHAR_CIRCUMFLEX_ACCENT:\r\n        case CHAR_GRAVE_ACCENT:\r\n        case CHAR_LEFT_CURLY_BRACKET:\r\n        case CHAR_VERTICAL_LINE:\r\n        case CHAR_RIGHT_CURLY_BRACKET:\r\n          // Characters that are never ever allowed in a hostname from RFC 2396\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          break;\r\n        case CHAR_HASH:\r\n        case CHAR_FORWARD_SLASH:\r\n        case CHAR_QUESTION_MARK:\r\n          // Find the first instance of any host-ending characters\r\n          if (nonHost === -1)\r\n            nonHost = i;\r\n          hostEnd = i;\r\n          break;\r\n        case CHAR_AT:\r\n          // At this point, either we have an explicit point where the\r\n          // auth portion cannot go past, or the last @ char is the decider.\r\n          atSign = i;\r\n          nonHost = -1;\r\n          break;\r\n      }\r\n      if (hostEnd !== -1)\r\n        break;\r\n    }\r\n    start = 0;\r\n    if (atSign !== -1) {\r\n      this.auth = decodeURIComponent(rest.slice(0, atSign));\r\n      start = atSign + 1;\r\n    }\r\n    if (nonHost === -1) {\r\n      this.host = rest.slice(start);\r\n      rest = '';\r\n    } else {\r\n      this.host = rest.slice(start, nonHost);\r\n      rest = rest.slice(nonHost);\r\n    }\r\n\r\n    // pull out port.\r\n    this.parseHost();\r\n\r\n    // We've indicated that there is a hostname,\r\n    // so even if it's empty, it has to be present.\r\n    if (typeof this.hostname !== 'string')\r\n      this.hostname = '';\r\n\r\n    var hostname = this.hostname;\r\n\r\n    // If hostname begins with [ and ends with ]\r\n    // assume that it's an IPv6 address.\r\n    var ipv6Hostname = hostname.charCodeAt(0) === CHAR_LEFT_SQUARE_BRACKET &&\r\n      hostname.charCodeAt(hostname.length - 1) === CHAR_RIGHT_SQUARE_BRACKET;\r\n\r\n    // validate a little.\r\n    if (!ipv6Hostname) {\r\n      rest = getHostname(this, rest, hostname);\r\n    }\r\n\r\n    if (this.hostname.length > hostnameMaxLen) {\r\n      this.hostname = '';\r\n    } else {\r\n      // Hostnames are always lower case.\r\n      this.hostname = this.hostname.toLowerCase();\r\n    }\r\n\r\n    if (!ipv6Hostname) {\r\n      // IDNA Support: Returns a punycoded representation of \"domain\".\r\n      // It only converts parts of the domain name that\r\n      // have non-ASCII characters, i.e. it doesn't matter if\r\n      // you call it with a domain that already is ASCII-only.\r\n\r\n      // Use lenient mode (`true`) to try to support even non-compliant\r\n      // URLs.\r\n      this.hostname = toASCII(this.hostname, true);\r\n    }\r\n\r\n    var p = this.port ? ':' + this.port : '';\r\n    var h = this.hostname || '';\r\n    this.host = h + p;\r\n\r\n    // strip [ and ] from the hostname\r\n    // the host field still retains them, though\r\n    if (ipv6Hostname) {\r\n      this.hostname = this.hostname.slice(1, -1);\r\n      if (rest[0] !== '/') {\r\n        rest = '/' + rest;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Now rest is set to the post-host stuff.\r\n  // Chop off any delim chars.\r\n  if (!unsafeProtocol.has(lowerProto)) {\r\n    // First, make 100% sure that any \"autoEscape\" chars get\r\n    // escaped, even if encodeURIComponent doesn't think they\r\n    // need to be.\r\n    rest = autoEscapeStr(rest);\r\n  }\r\n\r\n  var questionIdx = -1;\r\n  var hashIdx = -1;\r\n  for (i = 0; i < rest.length; ++i) {\r\n    const code = rest.charCodeAt(i);\r\n    if (code === CHAR_HASH) {\r\n      this.hash = rest.slice(i);\r\n      hashIdx = i;\r\n      break;\r\n    } else if (code === CHAR_QUESTION_MARK && questionIdx === -1) {\r\n      questionIdx = i;\r\n    }\r\n  }\r\n\r\n  if (questionIdx !== -1) {\r\n    if (hashIdx === -1) {\r\n      this.search = rest.slice(questionIdx);\r\n      this.query = rest.slice(questionIdx + 1);\r\n    } else {\r\n      this.search = rest.slice(questionIdx, hashIdx);\r\n      this.query = rest.slice(questionIdx + 1, hashIdx);\r\n    }\r\n    if (parseQueryString) {\r\n      if (querystring === undefined) querystring = require('querystring');\r\n      this.query = querystring.parse(this.query);\r\n    }\r\n  } else if (parseQueryString) {\r\n    // No query string, but parseQueryString still requested\r\n    this.search = null;\r\n    this.query = Object.create(null);\r\n  }\r\n\r\n  const useQuestionIdx =\r\n    questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx);\r\n  const firstIdx = useQuestionIdx ? questionIdx : hashIdx;\r\n  if (firstIdx === -1) {\r\n    if (rest.length > 0)\r\n      this.pathname = rest;\r\n  } else if (firstIdx > 0) {\r\n    this.pathname = rest.slice(0, firstIdx);\r\n  }\r\n  if (slashedProtocol.has(lowerProto) &&\r\n      this.hostname && !this.pathname) {\r\n    this.pathname = '/';\r\n  }\r\n\r\n  // To support http.request\r\n  if (this.pathname || this.search) {\r\n    const p = this.pathname || '';\r\n    const s = this.search || '';\r\n    this.path = p + s;\r\n  }\r\n\r\n  // Finally, reconstruct the href based on what has been validated.\r\n  this.href = this.format();\r\n  return this;\r\n};\r\n\r\nfunction getHostname(self, rest, hostname) {\r\n  for (var i = 0; i < hostname.length; ++i) {\r\n    const code = hostname.charCodeAt(i);\r\n    const isValid = (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z) ||\r\n                    code === CHAR_DOT ||\r\n                    (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\r\n                    (code >= CHAR_0 && code <= CHAR_9) ||\r\n                    code === CHAR_HYPHEN_MINUS ||\r\n                    code === CHAR_PLUS ||\r\n                    code === CHAR_UNDERSCORE ||\r\n                    code > 127;\r\n\r\n    // Invalid host character\r\n    if (!isValid) {\r\n      self.hostname = hostname.slice(0, i);\r\n      return `/${hostname.slice(i)}${rest}`;\r\n    }\r\n  }\r\n  return rest;\r\n}\r\n\r\n// Escaped characters. Use empty strings to fill up unused entries.\r\n// Using Array is faster than Object/Map\r\nconst escapedCodes = [\r\n  /* 0 - 9 */ '', '', '', '', '', '', '', '', '', '%09',\r\n  /* 10 - 19 */ '%0A', '', '', '%0D', '', '', '', '', '', '',\r\n  /* 20 - 29 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 30 - 39 */ '', '', '%20', '', '%22', '', '', '', '', '%27',\r\n  /* 40 - 49 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 50 - 59 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 60 - 69 */ '%3C', '', '%3E', '', '', '', '', '', '', '',\r\n  /* 70 - 79 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 80 - 89 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 90 - 99 */ '', '', '%5C', '', '%5E', '', '%60', '', '', '',\r\n  /* 100 - 109 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 110 - 119 */ '', '', '', '', '', '', '', '', '', '',\r\n  /* 120 - 125 */ '', '', '', '%7B', '%7C', '%7D'\r\n];\r\n\r\n// Automatically escape all delimiters and unwise characters from RFC 2396.\r\n// Also escape single quotes in case of an XSS attack.\r\n// Return the escaped string.\r\nfunction autoEscapeStr(rest) {\r\n  var escaped = '';\r\n  var lastEscapedPos = 0;\r\n  for (var i = 0; i < rest.length; ++i) {\r\n    // `escaped` contains substring up to the last escaped character.\r\n    var escapedChar = escapedCodes[rest.charCodeAt(i)];\r\n    if (escapedChar) {\r\n      // Concat if there are ordinary characters in the middle.\r\n      if (i > lastEscapedPos)\r\n        escaped += rest.slice(lastEscapedPos, i);\r\n      escaped += escapedChar;\r\n      lastEscapedPos = i + 1;\r\n    }\r\n  }\r\n  if (lastEscapedPos === 0)  // Nothing has been escaped.\r\n    return rest;\r\n\r\n  // There are ordinary characters at the end.\r\n  if (lastEscapedPos < rest.length)\r\n    escaped += rest.slice(lastEscapedPos);\r\n\r\n  return escaped;\r\n}\r\n\r\n// Format a parsed object into a url string\r\nfunction urlFormat(urlObject, options) {\r\n  // Ensure it's an object, and not a string url.\r\n  // If it's an object, this is a no-op.\r\n  // this way, you can call urlParse() on strings\r\n  // to clean up potentially wonky urls.\r\n  if (typeof urlObject === 'string') {\r\n    urlObject = urlParse(urlObject);\r\n  } else if (typeof urlObject !== 'object' || urlObject === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('urlObject',\r\n                                   ['Object', 'string'], urlObject);\r\n  } else if (!(urlObject instanceof Url)) {\r\n    var format = urlObject[formatSymbol];\r\n    return format ?\r\n      format.call(urlObject, options) :\r\n      Url.prototype.format.call(urlObject);\r\n  }\r\n  return urlObject.format();\r\n}\r\n\r\n// These characters do not need escaping:\r\n// ! - . _ ~\r\n// ' ( ) * :\r\n// digits\r\n// alpha (uppercase)\r\n// alpha (lowercase)\r\nconst noEscapeAuth = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x00 - 0x0F\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x10 - 0x1F\r\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 0x20 - 0x2F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 0x30 - 0x3F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 0x50 - 0x5F\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0  // 0x70 - 0x7F\r\n];\r\n\r\nUrl.prototype.format = function format() {\r\n  var auth = this.auth || '';\r\n  if (auth) {\r\n    auth = encodeStr(auth, noEscapeAuth, hexTable);\r\n    auth += '@';\r\n  }\r\n\r\n  var protocol = this.protocol || '';\r\n  var pathname = this.pathname || '';\r\n  var hash = this.hash || '';\r\n  var host = '';\r\n  var query = '';\r\n\r\n  if (this.host) {\r\n    host = auth + this.host;\r\n  } else if (this.hostname) {\r\n    host = auth + (\r\n      this.hostname.includes(':') ?\r\n        '[' + this.hostname + ']' :\r\n        this.hostname\r\n    );\r\n    if (this.port) {\r\n      host += ':' + this.port;\r\n    }\r\n  }\r\n\r\n  if (this.query !== null && typeof this.query === 'object') {\r\n    if (querystring === undefined) querystring = require('querystring');\r\n    query = querystring.stringify(this.query);\r\n  }\r\n\r\n  var search = this.search || (query && ('?' + query)) || '';\r\n\r\n  if (protocol && protocol.charCodeAt(protocol.length - 1) !== 58/* : */)\r\n    protocol += ':';\r\n\r\n  var newPathname = '';\r\n  var lastPos = 0;\r\n  for (var i = 0; i < pathname.length; ++i) {\r\n    switch (pathname.charCodeAt(i)) {\r\n      case CHAR_HASH:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%23';\r\n        lastPos = i + 1;\r\n        break;\r\n      case CHAR_QUESTION_MARK:\r\n        if (i - lastPos > 0)\r\n          newPathname += pathname.slice(lastPos, i);\r\n        newPathname += '%3F';\r\n        lastPos = i + 1;\r\n        break;\r\n    }\r\n  }\r\n  if (lastPos > 0) {\r\n    if (lastPos !== pathname.length)\r\n      pathname = newPathname + pathname.slice(lastPos);\r\n    else\r\n      pathname = newPathname;\r\n  }\r\n\r\n  // Only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n  // unless they had them to begin with.\r\n  if (this.slashes || slashedProtocol.has(protocol)) {\r\n    if (this.slashes || host) {\r\n      if (pathname && pathname.charCodeAt(0) !== CHAR_FORWARD_SLASH)\r\n        pathname = '/' + pathname;\r\n      host = '//' + host;\r\n    } else if (protocol.length >= 4 &&\r\n               protocol.charCodeAt(0) === 102/* f */ &&\r\n               protocol.charCodeAt(1) === 105/* i */ &&\r\n               protocol.charCodeAt(2) === 108/* l */ &&\r\n               protocol.charCodeAt(3) === 101/* e */) {\r\n      host = '//';\r\n    }\r\n  }\r\n\r\n  search = search.replace(/#/g, '%23');\r\n\r\n  if (hash && hash.charCodeAt(0) !== CHAR_HASH)\r\n    hash = '#' + hash;\r\n  if (search && search.charCodeAt(0) !== CHAR_QUESTION_MARK)\r\n    search = '?' + search;\r\n\r\n  return protocol + host + pathname + search + hash;\r\n};\r\n\r\nfunction urlResolve(source, relative) {\r\n  return urlParse(source, false, true).resolve(relative);\r\n}\r\n\r\nUrl.prototype.resolve = function resolve(relative) {\r\n  return this.resolveObject(urlParse(relative, false, true)).format();\r\n};\r\n\r\nfunction urlResolveObject(source, relative) {\r\n  if (!source) return relative;\r\n  return urlParse(source, false, true).resolveObject(relative);\r\n}\r\n\r\nUrl.prototype.resolveObject = function resolveObject(relative) {\r\n  if (typeof relative === 'string') {\r\n    var rel = new Url();\r\n    rel.parse(relative, false, true);\r\n    relative = rel;\r\n  }\r\n\r\n  const result = new Url();\r\n  const tkeys = Object.keys(this);\r\n  for (var tk = 0; tk < tkeys.length; tk++) {\r\n    var tkey = tkeys[tk];\r\n    result[tkey] = this[tkey];\r\n  }\r\n\r\n  // Hash is always overridden, no matter what.\r\n  // even href=\"\" will remove it.\r\n  result.hash = relative.hash;\r\n\r\n  // If the relative url is empty, then there's nothing left to do here.\r\n  if (relative.href === '') {\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // Hrefs like //foo/bar always cut to the protocol.\r\n  if (relative.slashes && !relative.protocol) {\r\n    // Take everything except the protocol from relative\r\n    var rkeys = Object.keys(relative);\r\n    for (var rk = 0; rk < rkeys.length; rk++) {\r\n      var rkey = rkeys[rk];\r\n      if (rkey !== 'protocol')\r\n        result[rkey] = relative[rkey];\r\n    }\r\n\r\n    // urlParse appends trailing / to urls like http://www.example.com\r\n    if (slashedProtocol.has(result.protocol) &&\r\n        result.hostname && !result.pathname) {\r\n      result.path = result.pathname = '/';\r\n    }\r\n\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (relative.protocol && relative.protocol !== result.protocol) {\r\n    // If it's a known url protocol, then changing\r\n    // the protocol does weird things\r\n    // first, if it's not file:, then we MUST have a host,\r\n    // and if there was a path\r\n    // to begin with, then we MUST have a path.\r\n    // if it is file:, then the host is dropped,\r\n    // because that's known to be hostless.\r\n    // anything else is assumed to be absolute.\r\n    if (!slashedProtocol.has(relative.protocol)) {\r\n      var keys = Object.keys(relative);\r\n      for (var v = 0; v < keys.length; v++) {\r\n        var k = keys[v];\r\n        result[k] = relative[k];\r\n      }\r\n      result.href = result.format();\r\n      return result;\r\n    }\r\n\r\n    result.protocol = relative.protocol;\r\n    if (!relative.host &&\r\n        !/^file:?$/.test(relative.protocol) &&\r\n        !hostlessProtocol.has(relative.protocol)) {\r\n      const relPath = (relative.pathname || '').split('/');\r\n      while (relPath.length && !(relative.host = relPath.shift()));\r\n      if (!relative.host) relative.host = '';\r\n      if (!relative.hostname) relative.hostname = '';\r\n      if (relPath[0] !== '') relPath.unshift('');\r\n      if (relPath.length < 2) relPath.unshift('');\r\n      result.pathname = relPath.join('/');\r\n    } else {\r\n      result.pathname = relative.pathname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    result.host = relative.host || '';\r\n    result.auth = relative.auth;\r\n    result.hostname = relative.hostname || relative.host;\r\n    result.port = relative.port;\r\n    // To support http.request\r\n    if (result.pathname || result.search) {\r\n      var p = result.pathname || '';\r\n      var s = result.search || '';\r\n      result.path = p + s;\r\n    }\r\n    result.slashes = result.slashes || relative.slashes;\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  const isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/');\r\n  const isRelAbs = (\r\n    relative.host || (relative.pathname && relative.pathname.charAt(0) === '/')\r\n  );\r\n  var mustEndAbs = (isRelAbs || isSourceAbs ||\r\n                    (result.host && relative.pathname));\r\n  const removeAllDots = mustEndAbs;\r\n  var srcPath = (result.pathname && result.pathname.split('/')) || [];\r\n  const relPath = (relative.pathname && relative.pathname.split('/')) || [];\r\n  const noLeadingSlashes = result.protocol &&\r\n      !slashedProtocol.has(result.protocol);\r\n\r\n  // If the url is a non-slashed url, then relative\r\n  // links like ../.. should be able\r\n  // to crawl up to the hostname, as well.  This is strange.\r\n  // result.protocol has already been set by now.\r\n  // Later on, put the first path part into the host field.\r\n  if (noLeadingSlashes) {\r\n    result.hostname = '';\r\n    result.port = null;\r\n    if (result.host) {\r\n      if (srcPath[0] === '') srcPath[0] = result.host;\r\n      else srcPath.unshift(result.host);\r\n    }\r\n    result.host = '';\r\n    if (relative.protocol) {\r\n      relative.hostname = null;\r\n      relative.port = null;\r\n      result.auth = null;\r\n      if (relative.host) {\r\n        if (relPath[0] === '') relPath[0] = relative.host;\r\n        else relPath.unshift(relative.host);\r\n      }\r\n      relative.host = null;\r\n    }\r\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\r\n  }\r\n\r\n  if (isRelAbs) {\r\n    // it's absolute.\r\n    if (relative.host || relative.host === '') {\r\n      if (result.host !== relative.host) result.auth = null;\r\n      result.host = relative.host;\r\n      result.port = relative.port;\r\n    }\r\n    if (relative.hostname || relative.hostname === '') {\r\n      if (result.hostname !== relative.hostname) result.auth = null;\r\n      result.hostname = relative.hostname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    srcPath = relPath;\r\n    // Fall through to the dot-handling below.\r\n  } else if (relPath.length) {\r\n    // it's relative\r\n    // throw away the existing file, and take the new path instead.\r\n    if (!srcPath) srcPath = [];\r\n    srcPath.pop();\r\n    srcPath = srcPath.concat(relPath);\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n  } else if (relative.search !== null && relative.search !== undefined) {\r\n    // Just pull out the search.\r\n    // like href='?foo'.\r\n    // Put this after the other two cases because it simplifies the booleans\r\n    if (noLeadingSlashes) {\r\n      result.hostname = result.host = srcPath.shift();\r\n      // Occasionally the auth can get stuck only in host.\r\n      // This especially happens in cases like\r\n      // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n      const authInHost =\r\n        result.host && result.host.indexOf('@') > 0 && result.host.split('@');\r\n      if (authInHost) {\r\n        result.auth = authInHost.shift();\r\n        result.host = result.hostname = authInHost.shift();\r\n      }\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    // To support http.request\r\n    if (result.pathname !== null || result.search !== null) {\r\n      result.path = (result.pathname ? result.pathname : '') +\r\n                    (result.search ? result.search : '');\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    // No path at all. All other things were already handled above.\r\n    result.pathname = null;\r\n    // To support http.request\r\n    if (result.search) {\r\n      result.path = '/' + result.search;\r\n    } else {\r\n      result.path = null;\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // If a url ENDs in . or .., then it must get a trailing slash.\r\n  // however, if it ends in anything else non-slashy,\r\n  // then it must NOT get a trailing slash.\r\n  var last = srcPath.slice(-1)[0];\r\n  const hasTrailingSlash = (\r\n    ((result.host || relative.host || srcPath.length > 1) &&\r\n    (last === '.' || last === '..')) || last === '');\r\n\r\n  // Strip single dots, resolve double dots to parent dir\r\n  // if the path tries to go above the root, `up` ends up > 0\r\n  var up = 0;\r\n  for (var i = srcPath.length - 1; i >= 0; i--) {\r\n    last = srcPath[i];\r\n    if (last === '.') {\r\n      spliceOne(srcPath, i);\r\n    } else if (last === '..') {\r\n      spliceOne(srcPath, i);\r\n      up++;\r\n    } else if (up) {\r\n      spliceOne(srcPath, i);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  // If the path is allowed to go above the root, restore leading ..s\r\n  if (!mustEndAbs && !removeAllDots) {\r\n    while (up--) {\r\n      srcPath.unshift('..');\r\n    }\r\n  }\r\n\r\n  if (mustEndAbs && srcPath[0] !== '' &&\r\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\r\n    srcPath.push('');\r\n  }\r\n\r\n  const isAbsolute = srcPath[0] === '' ||\r\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\r\n\r\n  // put the host back\r\n  if (noLeadingSlashes) {\r\n    result.hostname =\r\n      result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\r\n    // Occasionally the auth can get stuck only in host.\r\n    // This especially happens in cases like\r\n    // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n    const authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n      result.host.split('@') : false;\r\n    if (authInHost) {\r\n      result.auth = authInHost.shift();\r\n      result.host = result.hostname = authInHost.shift();\r\n    }\r\n  }\r\n\r\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n\r\n  if (mustEndAbs && !isAbsolute) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    result.pathname = null;\r\n    result.path = null;\r\n  } else {\r\n    result.pathname = srcPath.join('/');\r\n  }\r\n\r\n  // To support request.http\r\n  if (result.pathname !== null || result.search !== null) {\r\n    result.path = (result.pathname ? result.pathname : '') +\r\n                  (result.search ? result.search : '');\r\n  }\r\n  result.auth = relative.auth || result.auth;\r\n  result.slashes = result.slashes || relative.slashes;\r\n  result.href = result.format();\r\n  return result;\r\n};\r\n\r\nUrl.prototype.parseHost = function parseHost() {\r\n  var host = this.host;\r\n  var port = portPattern.exec(host);\r\n  if (port) {\r\n    port = port[0];\r\n    if (port !== ':') {\r\n      this.port = port.slice(1);\r\n    }\r\n    host = host.slice(0, host.length - port.length);\r\n  }\r\n  if (host) this.hostname = host;\r\n};\r\n\r\nmodule.exports = {\r\n  // Original API\r\n  Url,\r\n  parse: urlParse,\r\n  resolve: urlResolve,\r\n  resolveObject: urlResolveObject,\r\n  format: urlFormat,\r\n\r\n  // WHATWG API\r\n  URL,\r\n  URLSearchParams,\r\n  domainToASCII,\r\n  domainToUnicode,\r\n\r\n  // Utilities\r\n  pathToFileURL,\r\n  fileURLToPath\r\n};\r\n"
  },
  {
    "name": "internal/idna.js",
    "source": "'use strict';\r\n\r\nif (internalBinding('config').hasIntl) {\r\n  const { toASCII, toUnicode } = internalBinding('icu');\r\n  module.exports = { toASCII, toUnicode };\r\n} else {\r\n  const { toASCII, toUnicode } = require('punycode');\r\n  module.exports = { toASCII, toUnicode };\r\n}\r\n"
  },
  {
    "name": "vm.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Array, ArrayPrototype } = primordials;\r\n\r\nconst {\r\n  ContextifyScript,\r\n  makeContext,\r\n  isContext: _isContext,\r\n  compileFunction: _compileFunction\r\n} = internalBinding('contextify');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n} = require('internal/errors').codes;\r\nconst {\r\n  isArrayBufferView,\r\n} = require('internal/util/types');\r\nconst {\r\n  validateInt32,\r\n  validateUint32,\r\n  validateString\r\n} = require('internal/validators');\r\nconst { kVmBreakFirstLineSymbol } = require('internal/util');\r\nconst kParsingContext = Symbol('script parsing context');\r\n\r\nclass Script extends ContextifyScript {\r\n  constructor(code, options = {}) {\r\n    code = `${code}`;\r\n    if (typeof options === 'string') {\r\n      options = { filename: options };\r\n    } else if (typeof options !== 'object' || options === null) {\r\n      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n    }\r\n\r\n    const {\r\n      filename = 'evalmachine.<anonymous>',\r\n      lineOffset = 0,\r\n      columnOffset = 0,\r\n      cachedData,\r\n      produceCachedData = false,\r\n      importModuleDynamically,\r\n      [kParsingContext]: parsingContext,\r\n    } = options;\r\n\r\n    validateString(filename, 'options.filename');\r\n    validateInt32(lineOffset, 'options.lineOffset');\r\n    validateInt32(columnOffset, 'options.columnOffset');\r\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.cachedData',\r\n        ['Buffer', 'TypedArray', 'DataView'],\r\n        cachedData\r\n      );\r\n    }\r\n    if (typeof produceCachedData !== 'boolean') {\r\n      throw new ERR_INVALID_ARG_TYPE('options.produceCachedData', 'boolean',\r\n                                     produceCachedData);\r\n    }\r\n\r\n    // Calling `ReThrow()` on a native TryCatch does not generate a new\r\n    // abort-on-uncaught-exception check. A dummy try/catch in JS land\r\n    // protects against that.\r\n    try { // eslint-disable-line no-useless-catch\r\n      super(code,\r\n            filename,\r\n            lineOffset,\r\n            columnOffset,\r\n            cachedData,\r\n            produceCachedData,\r\n            parsingContext);\r\n    } catch (e) {\r\n      throw e; /* node-do-not-add-exception-line */\r\n    }\r\n\r\n    if (importModuleDynamically !== undefined) {\r\n      if (typeof importModuleDynamically !== 'function') {\r\n        throw new ERR_INVALID_ARG_TYPE('options.importModuleDynamically',\r\n                                       'function',\r\n                                       importModuleDynamically);\r\n      }\r\n      const { importModuleDynamicallyWrap } =\r\n        require('internal/vm/source_text_module');\r\n      const { callbackMap } = internalBinding('module_wrap');\r\n      callbackMap.set(this, {\r\n        importModuleDynamically:\r\n          importModuleDynamicallyWrap(importModuleDynamically),\r\n      });\r\n    }\r\n  }\r\n\r\n  runInThisContext(options) {\r\n    const { breakOnSigint, args } = getRunInContextArgs(options);\r\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\r\n      return sigintHandlersWrap(super.runInThisContext, this, args);\r\n    } else {\r\n      return super.runInThisContext(...args);\r\n    }\r\n  }\r\n\r\n  runInContext(contextifiedSandbox, options) {\r\n    validateContext(contextifiedSandbox);\r\n    const { breakOnSigint, args } = getRunInContextArgs(options);\r\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\r\n      return sigintHandlersWrap(super.runInContext, this,\r\n                                [contextifiedSandbox, ...args]);\r\n    } else {\r\n      return super.runInContext(contextifiedSandbox, ...args);\r\n    }\r\n  }\r\n\r\n  runInNewContext(sandbox, options) {\r\n    const context = createContext(sandbox, getContextOptions(options));\r\n    return this.runInContext(context, options);\r\n  }\r\n}\r\n\r\nfunction validateContext(sandbox) {\r\n  if (typeof sandbox !== 'object' || sandbox === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('contextifiedSandbox', 'Object', sandbox);\r\n  }\r\n  if (!_isContext(sandbox)) {\r\n    throw new ERR_INVALID_ARG_TYPE('contextifiedSandbox', 'vm.Context',\r\n                                   sandbox);\r\n  }\r\n}\r\n\r\nfunction validateBool(prop, propName) {\r\n  if (prop !== undefined && typeof prop !== 'boolean')\r\n    throw new ERR_INVALID_ARG_TYPE(propName, 'boolean', prop);\r\n}\r\n\r\nfunction validateObject(prop, propName) {\r\n  if (prop !== undefined && (typeof prop !== 'object' || prop === null))\r\n    throw new ERR_INVALID_ARG_TYPE(propName, 'Object', prop);\r\n}\r\n\r\nfunction getRunInContextArgs(options = {}) {\r\n  if (typeof options !== 'object' || options === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n  }\r\n\r\n  let timeout = options.timeout;\r\n  if (timeout === undefined) {\r\n    timeout = -1;\r\n  } else {\r\n    validateUint32(timeout, 'options.timeout', true);\r\n  }\r\n\r\n  const {\r\n    displayErrors = true,\r\n    breakOnSigint = false,\r\n    [kVmBreakFirstLineSymbol]: breakFirstLine = false,\r\n  } = options;\r\n\r\n  if (typeof displayErrors !== 'boolean') {\r\n    throw new ERR_INVALID_ARG_TYPE('options.displayErrors', 'boolean',\r\n                                   displayErrors);\r\n  }\r\n  if (typeof breakOnSigint !== 'boolean') {\r\n    throw new ERR_INVALID_ARG_TYPE('options.breakOnSigint', 'boolean',\r\n                                   breakOnSigint);\r\n  }\r\n\r\n  return {\r\n    breakOnSigint,\r\n    args: [timeout, displayErrors, breakOnSigint, breakFirstLine]\r\n  };\r\n}\r\n\r\nfunction getContextOptions(options) {\r\n  if (options) {\r\n    validateObject(options.contextCodeGeneration,\r\n                   'options.contextCodeGeneration');\r\n    const contextOptions = {\r\n      name: options.contextName,\r\n      origin: options.contextOrigin,\r\n      codeGeneration: typeof options.contextCodeGeneration === 'object' ? {\r\n        strings: options.contextCodeGeneration.strings,\r\n        wasm: options.contextCodeGeneration.wasm,\r\n      } : undefined,\r\n    };\r\n    if (contextOptions.name !== undefined)\r\n      validateString(contextOptions.name, 'options.contextName');\r\n    if (contextOptions.origin !== undefined)\r\n      validateString(contextOptions.origin, 'options.contextOrigin');\r\n    if (contextOptions.codeGeneration) {\r\n      validateBool(contextOptions.codeGeneration.strings,\r\n                   'options.contextCodeGeneration.strings');\r\n      validateBool(contextOptions.codeGeneration.wasm,\r\n                   'options.contextCodeGeneration.wasm');\r\n    }\r\n    return contextOptions;\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction isContext(sandbox) {\r\n  if (typeof sandbox !== 'object' || sandbox === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('sandbox', 'Object', sandbox);\r\n  }\r\n  return _isContext(sandbox);\r\n}\r\n\r\nlet defaultContextNameIndex = 1;\r\nfunction createContext(sandbox = {}, options = {}) {\r\n  if (isContext(sandbox)) {\r\n    return sandbox;\r\n  }\r\n\r\n  if (typeof options !== 'object' || options === null) {\r\n    throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\r\n  }\r\n\r\n  const {\r\n    name = `VM Context ${defaultContextNameIndex++}`,\r\n    origin,\r\n    codeGeneration\r\n  } = options;\r\n\r\n  validateString(name, 'options.name');\r\n  if (origin !== undefined)\r\n    validateString(origin, 'options.origin');\r\n  validateObject(codeGeneration, 'options.codeGeneration');\r\n\r\n  let strings = true;\r\n  let wasm = true;\r\n  if (codeGeneration !== undefined) {\r\n    ({ strings = true, wasm = true } = codeGeneration);\r\n    validateBool(strings, 'options.codeGeneration.strings');\r\n    validateBool(wasm, 'options.codeGeneration.wasm');\r\n  }\r\n\r\n  makeContext(sandbox, name, origin, strings, wasm);\r\n  return sandbox;\r\n}\r\n\r\nfunction createScript(code, options) {\r\n  return new Script(code, options);\r\n}\r\n\r\n// Remove all SIGINT listeners and re-attach them after the wrapped function\r\n// has executed, so that caught SIGINT are handled by the listeners again.\r\nfunction sigintHandlersWrap(fn, thisArg, argsArray) {\r\n  const sigintListeners = process.rawListeners('SIGINT');\r\n\r\n  process.removeAllListeners('SIGINT');\r\n\r\n  try {\r\n    return fn.apply(thisArg, argsArray);\r\n  } finally {\r\n    // Add using the public methods so that the `newListener` handler of\r\n    // process can re-attach the listeners.\r\n    for (const listener of sigintListeners) {\r\n      process.addListener('SIGINT', listener);\r\n    }\r\n  }\r\n}\r\n\r\nfunction runInContext(code, contextifiedSandbox, options) {\r\n  validateContext(contextifiedSandbox);\r\n  if (typeof options === 'string') {\r\n    options = {\r\n      filename: options,\r\n      [kParsingContext]: contextifiedSandbox\r\n    };\r\n  } else {\r\n    options = { ...options, [kParsingContext]: contextifiedSandbox };\r\n  }\r\n  return createScript(code, options)\r\n    .runInContext(contextifiedSandbox, options);\r\n}\r\n\r\nfunction runInNewContext(code, sandbox, options) {\r\n  if (typeof options === 'string') {\r\n    options = { filename: options };\r\n  }\r\n  sandbox = createContext(sandbox, getContextOptions(options));\r\n  options = { ...options, [kParsingContext]: sandbox };\r\n  return createScript(code, options).runInNewContext(sandbox, options);\r\n}\r\n\r\nfunction runInThisContext(code, options) {\r\n  if (typeof options === 'string') {\r\n    options = { filename: options };\r\n  }\r\n  return createScript(code, options).runInThisContext(options);\r\n}\r\n\r\nfunction compileFunction(code, params, options = {}) {\r\n  validateString(code, 'code');\r\n  if (params !== undefined) {\r\n    if (!Array.isArray(params)) {\r\n      throw new ERR_INVALID_ARG_TYPE('params', 'Array', params);\r\n    }\r\n    ArrayPrototype.forEach(params,\r\n                           (param, i) => validateString(param, `params[${i}]`));\r\n  }\r\n\r\n  const {\r\n    filename = '',\r\n    columnOffset = 0,\r\n    lineOffset = 0,\r\n    cachedData = undefined,\r\n    produceCachedData = false,\r\n    parsingContext = undefined,\r\n    contextExtensions = [],\r\n  } = options;\r\n\r\n  validateString(filename, 'options.filename');\r\n  validateUint32(columnOffset, 'options.columnOffset');\r\n  validateUint32(lineOffset, 'options.lineOffset');\r\n  if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'options.cachedData',\r\n      ['Buffer', 'TypedArray', 'DataView'],\r\n      cachedData\r\n    );\r\n  }\r\n  if (typeof produceCachedData !== 'boolean') {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'options.produceCachedData',\r\n      'boolean',\r\n      produceCachedData\r\n    );\r\n  }\r\n  if (parsingContext !== undefined) {\r\n    if (\r\n      typeof parsingContext !== 'object' ||\r\n      parsingContext === null ||\r\n      !isContext(parsingContext)\r\n    ) {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'options.parsingContext',\r\n        'Context',\r\n        parsingContext\r\n      );\r\n    }\r\n  }\r\n  if (!Array.isArray(contextExtensions)) {\r\n    throw new ERR_INVALID_ARG_TYPE(\r\n      'options.contextExtensions',\r\n      'Array',\r\n      contextExtensions\r\n    );\r\n  }\r\n  ArrayPrototype.forEach(contextExtensions, (extension, i) => {\r\n    if (typeof extension !== 'object') {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        `options.contextExtensions[${i}]`,\r\n        'object',\r\n        extension\r\n      );\r\n    }\r\n  });\r\n\r\n  const result = _compileFunction(\r\n    code,\r\n    filename,\r\n    lineOffset,\r\n    columnOffset,\r\n    cachedData,\r\n    produceCachedData,\r\n    parsingContext,\r\n    contextExtensions,\r\n    params\r\n  );\r\n\r\n  if (produceCachedData) {\r\n    result.function.cachedDataProduced = result.cachedDataProduced;\r\n  }\r\n\r\n  if (result.cachedData) {\r\n    result.function.cachedData = result.cachedData;\r\n  }\r\n\r\n  return result.function;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  Script,\r\n  createContext,\r\n  createScript,\r\n  runInContext,\r\n  runInNewContext,\r\n  runInThisContext,\r\n  isContext,\r\n  compileFunction,\r\n};\r\n\r\nif (require('internal/options').getOptionValue('--experimental-vm-modules')) {\r\n  const { SourceTextModule } = require('internal/vm/source_text_module');\r\n  module.exports.SourceTextModule = SourceTextModule;\r\n}\r\n"
  },
  {
    "name": "C:\\coding\\md-code\\blockchain-demo\\node\\zip.js",
    "source": "const zlib = require('zlib');\r\n\r\nconst payload = Buffer.from('This is some data');\r\n\r\n// WARNING: DO NOT DO THIS!\r\nfor (let i = 0; i < 30000; ++i) {\r\n  zlib.deflate(payload, (err, buffer) => {});\r\n}"
  },
  {
    "name": "zlib.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Math, Object } = primordials;\r\n\r\nconst {\r\n  codes: {\r\n    ERR_BROTLI_INVALID_PARAM,\r\n    ERR_BUFFER_TOO_LARGE,\r\n    ERR_INVALID_ARG_TYPE,\r\n    ERR_OUT_OF_RANGE,\r\n    ERR_ZLIB_INITIALIZATION_FAILED,\r\n  },\r\n  hideStackFrames\r\n} = require('internal/errors');\r\nconst Transform = require('_stream_transform');\r\nconst {\r\n  deprecate\r\n} = require('internal/util');\r\nconst {\r\n  isArrayBufferView,\r\n  isAnyArrayBuffer\r\n} = require('internal/util/types');\r\nconst binding = internalBinding('zlib');\r\nconst assert = require('internal/assert');\r\nconst {\r\n  Buffer,\r\n  kMaxLength\r\n} = require('buffer');\r\nconst { owner_symbol } = require('internal/async_hooks').symbols;\r\n\r\nconst kFlushFlag = Symbol('kFlushFlag');\r\n\r\nconst constants = internalBinding('constants').zlib;\r\nconst {\r\n  // Zlib flush levels\r\n  Z_NO_FLUSH, Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\r\n  // Zlib option values\r\n  Z_MIN_CHUNK, Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_MIN_LEVEL, Z_MAX_LEVEL,\r\n  Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_CHUNK, Z_DEFAULT_COMPRESSION,\r\n  Z_DEFAULT_STRATEGY, Z_DEFAULT_WINDOWBITS, Z_DEFAULT_MEMLEVEL, Z_FIXED,\r\n  // Node's compression stream modes (node_zlib_mode)\r\n  DEFLATE, DEFLATERAW, INFLATE, INFLATERAW, GZIP, GUNZIP, UNZIP,\r\n  BROTLI_DECODE, BROTLI_ENCODE,\r\n  // Brotli operations (~flush levels)\r\n  BROTLI_OPERATION_PROCESS, BROTLI_OPERATION_FLUSH,\r\n  BROTLI_OPERATION_FINISH\r\n} = constants;\r\n\r\n// Translation table for return codes.\r\nconst codes = {\r\n  Z_OK: constants.Z_OK,\r\n  Z_STREAM_END: constants.Z_STREAM_END,\r\n  Z_NEED_DICT: constants.Z_NEED_DICT,\r\n  Z_ERRNO: constants.Z_ERRNO,\r\n  Z_STREAM_ERROR: constants.Z_STREAM_ERROR,\r\n  Z_DATA_ERROR: constants.Z_DATA_ERROR,\r\n  Z_MEM_ERROR: constants.Z_MEM_ERROR,\r\n  Z_BUF_ERROR: constants.Z_BUF_ERROR,\r\n  Z_VERSION_ERROR: constants.Z_VERSION_ERROR\r\n};\r\n\r\nconst ckeys = Object.keys(codes);\r\nfor (var ck = 0; ck < ckeys.length; ck++) {\r\n  var ckey = ckeys[ck];\r\n  codes[codes[ckey]] = ckey;\r\n}\r\n\r\nfunction zlibBuffer(engine, buffer, callback) {\r\n  if (typeof callback !== 'function')\r\n    throw new ERR_INVALID_ARG_TYPE('callback', 'function', callback);\r\n  // Streams do not support non-Buffer ArrayBufferViews yet. Convert it to a\r\n  // Buffer without copying.\r\n  if (isArrayBufferView(buffer) &&\r\n      Object.getPrototypeOf(buffer) !== Buffer.prototype) {\r\n    buffer = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n  } else if (isAnyArrayBuffer(buffer)) {\r\n    buffer = Buffer.from(buffer);\r\n  }\r\n  engine.buffers = null;\r\n  engine.nread = 0;\r\n  engine.cb = callback;\r\n  engine.on('data', zlibBufferOnData);\r\n  engine.on('error', zlibBufferOnError);\r\n  engine.on('end', zlibBufferOnEnd);\r\n  engine.end(buffer);\r\n}\r\n\r\nfunction zlibBufferOnData(chunk) {\r\n  if (!this.buffers)\r\n    this.buffers = [chunk];\r\n  else\r\n    this.buffers.push(chunk);\r\n  this.nread += chunk.length;\r\n}\r\n\r\nfunction zlibBufferOnError(err) {\r\n  this.removeAllListeners('end');\r\n  this.cb(err);\r\n}\r\n\r\nfunction zlibBufferOnEnd() {\r\n  var buf;\r\n  var err;\r\n  if (this.nread >= kMaxLength) {\r\n    err = new ERR_BUFFER_TOO_LARGE();\r\n  } else if (this.nread === 0) {\r\n    buf = Buffer.alloc(0);\r\n  } else {\r\n    var bufs = this.buffers;\r\n    buf = (bufs.length === 1 ? bufs[0] : Buffer.concat(bufs, this.nread));\r\n  }\r\n  this.close();\r\n  if (err)\r\n    this.cb(err);\r\n  else if (this._info)\r\n    this.cb(null, { buffer: buf, engine: this });\r\n  else\r\n    this.cb(null, buf);\r\n}\r\n\r\nfunction zlibBufferSync(engine, buffer) {\r\n  if (typeof buffer === 'string') {\r\n    buffer = Buffer.from(buffer);\r\n  } else if (!isArrayBufferView(buffer)) {\r\n    if (isAnyArrayBuffer(buffer)) {\r\n      buffer = Buffer.from(buffer);\r\n    } else {\r\n      throw new ERR_INVALID_ARG_TYPE(\r\n        'buffer',\r\n        ['string', 'Buffer', 'TypedArray', 'DataView', 'ArrayBuffer'],\r\n        buffer\r\n      );\r\n    }\r\n  }\r\n  buffer = processChunkSync(engine, buffer, engine._finishFlushFlag);\r\n  if (engine._info)\r\n    return { buffer, engine };\r\n  return buffer;\r\n}\r\n\r\nfunction zlibOnError(message, errno, code) {\r\n  const self = this[owner_symbol];\r\n  // There is no way to cleanly recover.\r\n  // Continuing only obscures problems.\r\n  _close(self);\r\n  self._hadError = true;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  const error = new Error(message);\r\n  error.errno = errno;\r\n  error.code = code;\r\n  self.emit('error', error);\r\n}\r\n\r\n// 1. Returns false for undefined and NaN\r\n// 2. Returns true for finite numbers\r\n// 3. Throws ERR_INVALID_ARG_TYPE for non-numbers\r\n// 4. Throws ERR_OUT_OF_RANGE for infinite numbers\r\nconst checkFiniteNumber = hideStackFrames((number, name) => {\r\n  // Common case\r\n  if (number === undefined) {\r\n    return false;\r\n  }\r\n\r\n  if (Number.isFinite(number)) {\r\n    return true; // Is a valid number\r\n  }\r\n\r\n  if (Number.isNaN(number)) {\r\n    return false;\r\n  }\r\n\r\n  // Other non-numbers\r\n  if (typeof number !== 'number') {\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', number);\r\n  }\r\n\r\n  // Infinite numbers\r\n  throw new ERR_OUT_OF_RANGE(name, 'a finite number', number);\r\n});\r\n\r\n// 1. Returns def for number when it's undefined or NaN\r\n// 2. Returns number for finite numbers >= lower and <= upper\r\n// 3. Throws ERR_INVALID_ARG_TYPE for non-numbers\r\n// 4. Throws ERR_OUT_OF_RANGE for infinite numbers or numbers > upper or < lower\r\nconst checkRangesOrGetDefault = hideStackFrames(\r\n  (number, name, lower, upper, def) => {\r\n    if (!checkFiniteNumber(number, name)) {\r\n      return def;\r\n    }\r\n    if (number < lower || number > upper) {\r\n      throw new ERR_OUT_OF_RANGE(name,\r\n                                 `>= ${lower} and <= ${upper}`, number);\r\n    }\r\n    return number;\r\n  }\r\n);\r\n\r\n// The base class for all Zlib-style streams.\r\nfunction ZlibBase(opts, mode, handle, { flush, finishFlush, fullFlush }) {\r\n  var chunkSize = Z_DEFAULT_CHUNK;\r\n  // The ZlibBase class is not exported to user land, the mode should only be\r\n  // passed in by us.\r\n  assert(typeof mode === 'number');\r\n  assert(mode >= DEFLATE && mode <= BROTLI_ENCODE);\r\n\r\n  if (opts) {\r\n    chunkSize = opts.chunkSize;\r\n    if (!checkFiniteNumber(chunkSize, 'options.chunkSize')) {\r\n      chunkSize = Z_DEFAULT_CHUNK;\r\n    } else if (chunkSize < Z_MIN_CHUNK) {\r\n      throw new ERR_OUT_OF_RANGE('options.chunkSize',\r\n                                 `>= ${Z_MIN_CHUNK}`, chunkSize);\r\n    }\r\n\r\n    flush = checkRangesOrGetDefault(\r\n      opts.flush, 'options.flush',\r\n      Z_NO_FLUSH, Z_BLOCK, flush);\r\n\r\n    finishFlush = checkRangesOrGetDefault(\r\n      opts.finishFlush, 'options.finishFlush',\r\n      Z_NO_FLUSH, Z_BLOCK, finishFlush);\r\n\r\n    if (opts.encoding || opts.objectMode || opts.writableObjectMode) {\r\n      opts = { ...opts };\r\n      opts.encoding = null;\r\n      opts.objectMode = false;\r\n      opts.writableObjectMode = false;\r\n    }\r\n  }\r\n\r\n  Transform.call(this, opts);\r\n  this._hadError = false;\r\n  this.bytesWritten = 0;\r\n  this._handle = handle;\r\n  handle[owner_symbol] = this;\r\n  // Used by processCallback() and zlibOnError()\r\n  handle.onerror = zlibOnError;\r\n  this._outBuffer = Buffer.allocUnsafe(chunkSize);\r\n  this._outOffset = 0;\r\n\r\n  this._chunkSize = chunkSize;\r\n  this._defaultFlushFlag = flush;\r\n  this._finishFlushFlag = finishFlush;\r\n  this._defaultFullFlushFlag = fullFlush;\r\n  this.once('end', this.close);\r\n  this._info = opts && opts.info;\r\n}\r\nObject.setPrototypeOf(ZlibBase.prototype, Transform.prototype);\r\nObject.setPrototypeOf(ZlibBase, Transform);\r\n\r\nObject.defineProperty(ZlibBase.prototype, '_closed', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return !this._handle;\r\n  }\r\n});\r\n\r\n// `bytesRead` made sense as a name when looking from the zlib engine's\r\n// perspective, but it is inconsistent with all other streams exposed by Node.js\r\n// that have this concept, where it stands for the number of bytes read\r\n// *from* the stream (that is, net.Socket/tls.Socket & file system streams).\r\nObject.defineProperty(ZlibBase.prototype, 'bytesRead', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: deprecate(function() {\r\n    return this.bytesWritten;\r\n  }, 'zlib.bytesRead is deprecated and will change its meaning in the ' +\r\n     'future. Use zlib.bytesWritten instead.', 'DEP0108'),\r\n  set: deprecate(function(value) {\r\n    this.bytesWritten = value;\r\n  }, 'Setting zlib.bytesRead is deprecated. ' +\r\n     'This feature will be removed in the future.', 'DEP0108')\r\n});\r\n\r\nZlibBase.prototype.reset = function() {\r\n  if (!this._handle)\r\n    assert(false, 'zlib binding closed');\r\n  return this._handle.reset();\r\n};\r\n\r\n// This is the _flush function called by the transform class,\r\n// internally, when the last chunk has been written.\r\nZlibBase.prototype._flush = function(callback) {\r\n  this._transform(Buffer.alloc(0), '', callback);\r\n};\r\n\r\n// If a flush is scheduled while another flush is still pending, a way to figure\r\n// out which one is the \"stronger\" flush is needed.\r\n// This is currently only used to figure out which flush flag to use for the\r\n// last chunk.\r\n// Roughly, the following holds:\r\n// Z_NO_FLUSH (< Z_TREES) < Z_BLOCK < Z_PARTIAL_FLUSH <\r\n//     Z_SYNC_FLUSH < Z_FULL_FLUSH < Z_FINISH\r\nconst flushiness = [];\r\nlet i = 0;\r\nconst kFlushFlagList = [Z_NO_FLUSH, Z_BLOCK, Z_PARTIAL_FLUSH,\r\n                        Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH];\r\nfor (const flushFlag of kFlushFlagList) {\r\n  flushiness[flushFlag] = i++;\r\n}\r\n\r\nfunction maxFlush(a, b) {\r\n  return flushiness[a] > flushiness[b] ? a : b;\r\n}\r\n\r\n// Set up a list of 'special' buffers that can be written using .write()\r\n// from the .flush() code as a way of introducing flushing operations into the\r\n// write sequence.\r\nconst kFlushBuffers = [];\r\n{\r\n  const dummyArrayBuffer = new ArrayBuffer();\r\n  for (const flushFlag of kFlushFlagList) {\r\n    kFlushBuffers[flushFlag] = Buffer.from(dummyArrayBuffer);\r\n    kFlushBuffers[flushFlag][kFlushFlag] = flushFlag;\r\n  }\r\n}\r\n\r\nZlibBase.prototype.flush = function(kind, callback) {\r\n  const ws = this._writableState;\r\n\r\n  if (typeof kind === 'function' || (kind === undefined && !callback)) {\r\n    callback = kind;\r\n    kind = this._defaultFullFlushFlag;\r\n  }\r\n\r\n  if (ws.ended) {\r\n    if (callback)\r\n      process.nextTick(callback);\r\n  } else if (ws.ending) {\r\n    if (callback)\r\n      this.once('end', callback);\r\n  } else {\r\n    this.write(kFlushBuffers[kind], '', callback);\r\n  }\r\n};\r\n\r\nZlibBase.prototype.close = function(callback) {\r\n  _close(this, callback);\r\n  this.destroy();\r\n};\r\n\r\nZlibBase.prototype._destroy = function(err, callback) {\r\n  _close(this);\r\n  callback(err);\r\n};\r\n\r\nZlibBase.prototype._transform = function(chunk, encoding, cb) {\r\n  var flushFlag = this._defaultFlushFlag;\r\n  // We use a 'fake' zero-length chunk to carry information about flushes from\r\n  // the public API to the actual stream implementation.\r\n  if (typeof chunk[kFlushFlag] === 'number') {\r\n    flushFlag = chunk[kFlushFlag];\r\n  }\r\n\r\n  // For the last chunk, also apply `_finishFlushFlag`.\r\n  const ws = this._writableState;\r\n  if ((ws.ending || ws.ended) && ws.length === chunk.byteLength) {\r\n    flushFlag = maxFlush(flushFlag, this._finishFlushFlag);\r\n  }\r\n  processChunk(this, chunk, flushFlag, cb);\r\n};\r\n\r\nZlibBase.prototype._processChunk = function(chunk, flushFlag, cb) {\r\n  // _processChunk() is left for backwards compatibility\r\n  if (typeof cb === 'function')\r\n    processChunk(this, chunk, flushFlag, cb);\r\n  else\r\n    return processChunkSync(this, chunk, flushFlag);\r\n};\r\n\r\nfunction processChunkSync(self, chunk, flushFlag) {\r\n  var availInBefore = chunk.byteLength;\r\n  var availOutBefore = self._chunkSize - self._outOffset;\r\n  var inOff = 0;\r\n  var availOutAfter;\r\n  var availInAfter;\r\n\r\n  var buffers = null;\r\n  var nread = 0;\r\n  var inputRead = 0;\r\n  const state = self._writeState;\r\n  const handle = self._handle;\r\n  var buffer = self._outBuffer;\r\n  var offset = self._outOffset;\r\n  const chunkSize = self._chunkSize;\r\n\r\n  var error;\r\n  self.on('error', function onError(er) {\r\n    error = er;\r\n  });\r\n\r\n  while (true) {\r\n    handle.writeSync(flushFlag,\r\n                     chunk, // in\r\n                     inOff, // in_off\r\n                     availInBefore, // in_len\r\n                     buffer, // out\r\n                     offset, // out_off\r\n                     availOutBefore); // out_len\r\n    if (error)\r\n      throw error;\r\n\r\n    availOutAfter = state[0];\r\n    availInAfter = state[1];\r\n\r\n    var inDelta = (availInBefore - availInAfter);\r\n    inputRead += inDelta;\r\n\r\n    var have = availOutBefore - availOutAfter;\r\n    if (have > 0) {\r\n      var out = buffer.slice(offset, offset + have);\r\n      offset += have;\r\n      if (!buffers)\r\n        buffers = [out];\r\n      else\r\n        buffers.push(out);\r\n      nread += out.byteLength;\r\n    } else {\r\n      assert(have === 0, 'have should not go down');\r\n    }\r\n\r\n    // Exhausted the output buffer, or used all the input create a new one.\r\n    if (availOutAfter === 0 || offset >= chunkSize) {\r\n      availOutBefore = chunkSize;\r\n      offset = 0;\r\n      buffer = Buffer.allocUnsafe(chunkSize);\r\n    }\r\n\r\n    if (availOutAfter === 0) {\r\n      // Not actually done. Need to reprocess.\r\n      // Also, update the availInBefore to the availInAfter value,\r\n      // so that if we have to hit it a third (fourth, etc.) time,\r\n      // it'll have the correct byte counts.\r\n      inOff += inDelta;\r\n      availInBefore = availInAfter;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  self.bytesWritten = inputRead;\r\n  _close(self);\r\n\r\n  if (nread >= kMaxLength) {\r\n    throw new ERR_BUFFER_TOO_LARGE();\r\n  }\r\n\r\n  if (nread === 0)\r\n    return Buffer.alloc(0);\r\n\r\n  return (buffers.length === 1 ? buffers[0] : Buffer.concat(buffers, nread));\r\n}\r\n\r\nfunction processChunk(self, chunk, flushFlag, cb) {\r\n  const handle = self._handle;\r\n  assert(handle, 'zlib binding closed');\r\n\r\n  handle.buffer = chunk;\r\n  handle.cb = cb;\r\n  handle.availOutBefore = self._chunkSize - self._outOffset;\r\n  handle.availInBefore = chunk.byteLength;\r\n  handle.inOff = 0;\r\n  handle.flushFlag = flushFlag;\r\n\r\n  handle.write(flushFlag,\r\n               chunk, // in\r\n               0, // in_off\r\n               handle.availInBefore, // in_len\r\n               self._outBuffer, // out\r\n               self._outOffset, // out_off\r\n               handle.availOutBefore); // out_len\r\n}\r\n\r\nfunction processCallback() {\r\n  // This callback's context (`this`) is the `_handle` (ZCtx) object. It is\r\n  // important to null out the values once they are no longer needed since\r\n  // `_handle` can stay in memory long after the buffer is needed.\r\n  const handle = this;\r\n  const self = this[owner_symbol];\r\n  const state = self._writeState;\r\n\r\n  if (self._hadError) {\r\n    this.buffer = null;\r\n    return;\r\n  }\r\n\r\n  if (self.destroyed) {\r\n    this.buffer = null;\r\n    return;\r\n  }\r\n\r\n  const availOutAfter = state[0];\r\n  const availInAfter = state[1];\r\n\r\n  const inDelta = handle.availInBefore - availInAfter;\r\n  self.bytesWritten += inDelta;\r\n\r\n  const have = handle.availOutBefore - availOutAfter;\r\n  if (have > 0) {\r\n    var out = self._outBuffer.slice(self._outOffset, self._outOffset + have);\r\n    self._outOffset += have;\r\n    self.push(out);\r\n  } else {\r\n    assert(have === 0, 'have should not go down');\r\n  }\r\n\r\n  if (self.destroyed) {\r\n    return;\r\n  }\r\n\r\n  // Exhausted the output buffer, or used all the input create a new one.\r\n  if (availOutAfter === 0 || self._outOffset >= self._chunkSize) {\r\n    handle.availOutBefore = self._chunkSize;\r\n    self._outOffset = 0;\r\n    self._outBuffer = Buffer.allocUnsafe(self._chunkSize);\r\n  }\r\n\r\n  if (availOutAfter === 0) {\r\n    // Not actually done. Need to reprocess.\r\n    // Also, update the availInBefore to the availInAfter value,\r\n    // so that if we have to hit it a third (fourth, etc.) time,\r\n    // it'll have the correct byte counts.\r\n    handle.inOff += inDelta;\r\n    handle.availInBefore = availInAfter;\r\n\r\n    this.write(handle.flushFlag,\r\n               this.buffer, // in\r\n               handle.inOff, // in_off\r\n               handle.availInBefore, // in_len\r\n               self._outBuffer, // out\r\n               self._outOffset, // out_off\r\n               self._chunkSize); // out_len\r\n    return;\r\n  }\r\n\r\n  if (availInAfter > 0) {\r\n    // If we have more input that should be written, but we also have output\r\n    // space available, that means that the compression library was not\r\n    // interested in receiving more data, and in particular that the input\r\n    // stream has ended early.\r\n    // This applies to streams where we don't check data past the end of\r\n    // what was consumed; that is, everything except Gunzip/Unzip.\r\n    self.push(null);\r\n  }\r\n\r\n  // Finished with the chunk.\r\n  this.buffer = null;\r\n  this.cb();\r\n}\r\n\r\nfunction _close(engine, callback) {\r\n  if (callback)\r\n    process.nextTick(callback);\r\n\r\n  // Caller may invoke .close after a zlib error (which will null _handle).\r\n  if (!engine._handle)\r\n    return;\r\n\r\n  engine._handle.close();\r\n  engine._handle = null;\r\n}\r\n\r\nconst zlibDefaultOpts = {\r\n  flush: Z_NO_FLUSH,\r\n  finishFlush: Z_FINISH,\r\n  fullFlush: Z_FULL_FLUSH\r\n};\r\n// Base class for all streams actually backed by zlib and using zlib-specific\r\n// parameters.\r\nfunction Zlib(opts, mode) {\r\n  var windowBits = Z_DEFAULT_WINDOWBITS;\r\n  var level = Z_DEFAULT_COMPRESSION;\r\n  var memLevel = Z_DEFAULT_MEMLEVEL;\r\n  var strategy = Z_DEFAULT_STRATEGY;\r\n  var dictionary;\r\n\r\n  if (opts) {\r\n    // windowBits is special. On the compression side, 0 is an invalid value.\r\n    // But on the decompression side, a value of 0 for windowBits tells zlib\r\n    // to use the window size in the zlib header of the compressed stream.\r\n    if ((opts.windowBits == null || opts.windowBits === 0) &&\r\n        (mode === INFLATE ||\r\n         mode === GUNZIP ||\r\n         mode === UNZIP)) {\r\n      windowBits = 0;\r\n    } else {\r\n      windowBits = checkRangesOrGetDefault(\r\n        opts.windowBits, 'options.windowBits',\r\n        Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_DEFAULT_WINDOWBITS);\r\n    }\r\n\r\n    level = checkRangesOrGetDefault(\r\n      opts.level, 'options.level',\r\n      Z_MIN_LEVEL, Z_MAX_LEVEL, Z_DEFAULT_COMPRESSION);\r\n\r\n    memLevel = checkRangesOrGetDefault(\r\n      opts.memLevel, 'options.memLevel',\r\n      Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_MEMLEVEL);\r\n\r\n    strategy = checkRangesOrGetDefault(\r\n      opts.strategy, 'options.strategy',\r\n      Z_DEFAULT_STRATEGY, Z_FIXED, Z_DEFAULT_STRATEGY);\r\n\r\n    dictionary = opts.dictionary;\r\n    if (dictionary !== undefined && !isArrayBufferView(dictionary)) {\r\n      if (isAnyArrayBuffer(dictionary)) {\r\n        dictionary = Buffer.from(dictionary);\r\n      } else {\r\n        throw new ERR_INVALID_ARG_TYPE(\r\n          'options.dictionary',\r\n          ['Buffer', 'TypedArray', 'DataView', 'ArrayBuffer'],\r\n          dictionary\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const handle = new binding.Zlib(mode);\r\n  // Ideally, we could let ZlibBase() set up _writeState. I haven't been able\r\n  // to come up with a good solution that doesn't break our internal API,\r\n  // and with it all supported npm versions at the time of writing.\r\n  this._writeState = new Uint32Array(2);\r\n  if (!handle.init(windowBits,\r\n                   level,\r\n                   memLevel,\r\n                   strategy,\r\n                   this._writeState,\r\n                   processCallback,\r\n                   dictionary)) {\r\n    // TODO(addaleax): Sometimes we generate better error codes in C++ land,\r\n    // e.g. ERR_BROTLI_PARAM_SET_FAILED -- it's hard to access them with\r\n    // the current bindings setup, though.\r\n    throw new ERR_ZLIB_INITIALIZATION_FAILED();\r\n  }\r\n\r\n  ZlibBase.call(this, opts, mode, handle, zlibDefaultOpts);\r\n\r\n  this._level = level;\r\n  this._strategy = strategy;\r\n}\r\nObject.setPrototypeOf(Zlib.prototype, ZlibBase.prototype);\r\nObject.setPrototypeOf(Zlib, ZlibBase);\r\n\r\n// This callback is used by `.params()` to wait until a full flush happened\r\n// before adjusting the parameters. In particular, the call to the native\r\n// `params()` function should not happen while a write is currently in progress\r\n// on the threadpool.\r\nfunction paramsAfterFlushCallback(level, strategy, callback) {\r\n  assert(this._handle, 'zlib binding closed');\r\n  this._handle.params(level, strategy);\r\n  if (!this._hadError) {\r\n    this._level = level;\r\n    this._strategy = strategy;\r\n    if (callback) callback();\r\n  }\r\n}\r\n\r\nZlib.prototype.params = function params(level, strategy, callback) {\r\n  checkRangesOrGetDefault(level, 'level', Z_MIN_LEVEL, Z_MAX_LEVEL);\r\n  checkRangesOrGetDefault(strategy, 'strategy', Z_DEFAULT_STRATEGY, Z_FIXED);\r\n\r\n  if (this._level !== level || this._strategy !== strategy) {\r\n    this.flush(Z_SYNC_FLUSH,\r\n               paramsAfterFlushCallback.bind(this, level, strategy, callback));\r\n  } else {\r\n    process.nextTick(callback);\r\n  }\r\n};\r\n\r\n// generic zlib\r\n// minimal 2-byte header\r\nfunction Deflate(opts) {\r\n  if (!(this instanceof Deflate))\r\n    return new Deflate(opts);\r\n  Zlib.call(this, opts, DEFLATE);\r\n}\r\nObject.setPrototypeOf(Deflate.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Deflate, Zlib);\r\n\r\nfunction Inflate(opts) {\r\n  if (!(this instanceof Inflate))\r\n    return new Inflate(opts);\r\n  Zlib.call(this, opts, INFLATE);\r\n}\r\nObject.setPrototypeOf(Inflate.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Inflate, Zlib);\r\n\r\nfunction Gzip(opts) {\r\n  if (!(this instanceof Gzip))\r\n    return new Gzip(opts);\r\n  Zlib.call(this, opts, GZIP);\r\n}\r\nObject.setPrototypeOf(Gzip.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Gzip, Zlib);\r\n\r\nfunction Gunzip(opts) {\r\n  if (!(this instanceof Gunzip))\r\n    return new Gunzip(opts);\r\n  Zlib.call(this, opts, GUNZIP);\r\n}\r\nObject.setPrototypeOf(Gunzip.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Gunzip, Zlib);\r\n\r\nfunction DeflateRaw(opts) {\r\n  if (opts && opts.windowBits === 8) opts.windowBits = 9;\r\n  if (!(this instanceof DeflateRaw))\r\n    return new DeflateRaw(opts);\r\n  Zlib.call(this, opts, DEFLATERAW);\r\n}\r\nObject.setPrototypeOf(DeflateRaw.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(DeflateRaw, Zlib);\r\n\r\nfunction InflateRaw(opts) {\r\n  if (!(this instanceof InflateRaw))\r\n    return new InflateRaw(opts);\r\n  Zlib.call(this, opts, INFLATERAW);\r\n}\r\nObject.setPrototypeOf(InflateRaw.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(InflateRaw, Zlib);\r\n\r\nfunction Unzip(opts) {\r\n  if (!(this instanceof Unzip))\r\n    return new Unzip(opts);\r\n  Zlib.call(this, opts, UNZIP);\r\n}\r\nObject.setPrototypeOf(Unzip.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Unzip, Zlib);\r\n\r\nfunction createConvenienceMethod(ctor, sync) {\r\n  if (sync) {\r\n    return function syncBufferWrapper(buffer, opts) {\r\n      return zlibBufferSync(new ctor(opts), buffer);\r\n    };\r\n  } else {\r\n    return function asyncBufferWrapper(buffer, opts, callback) {\r\n      if (typeof opts === 'function') {\r\n        callback = opts;\r\n        opts = {};\r\n      }\r\n      return zlibBuffer(new ctor(opts), buffer, callback);\r\n    };\r\n  }\r\n}\r\n\r\nconst kMaxBrotliParam = Math.max(...Object.keys(constants).map((key) => {\r\n  return key.startsWith('BROTLI_PARAM_') ? constants[key] : 0;\r\n}));\r\n\r\nconst brotliInitParamsArray = new Uint32Array(kMaxBrotliParam + 1);\r\n\r\nconst brotliDefaultOpts = {\r\n  flush: BROTLI_OPERATION_PROCESS,\r\n  finishFlush: BROTLI_OPERATION_FINISH,\r\n  fullFlush: BROTLI_OPERATION_FLUSH\r\n};\r\nfunction Brotli(opts, mode) {\r\n  assert(mode === BROTLI_DECODE || mode === BROTLI_ENCODE);\r\n\r\n  brotliInitParamsArray.fill(-1);\r\n  if (opts && opts.params) {\r\n    for (const origKey of Object.keys(opts.params)) {\r\n      const key = +origKey;\r\n      if (Number.isNaN(key) || key < 0 || key > kMaxBrotliParam ||\r\n          (brotliInitParamsArray[key] | 0) !== -1) {\r\n        throw new ERR_BROTLI_INVALID_PARAM(origKey);\r\n      }\r\n\r\n      const value = opts.params[origKey];\r\n      if (typeof value !== 'number' && typeof value !== 'boolean') {\r\n        throw new ERR_INVALID_ARG_TYPE('options.params[key]',\r\n                                       'number', opts.params[origKey]);\r\n      }\r\n      brotliInitParamsArray[key] = value;\r\n    }\r\n  }\r\n\r\n  const handle = mode === BROTLI_DECODE ?\r\n    new binding.BrotliDecoder(mode) : new binding.BrotliEncoder(mode);\r\n\r\n  this._writeState = new Uint32Array(2);\r\n  if (!handle.init(brotliInitParamsArray,\r\n                   this._writeState,\r\n                   processCallback)) {\r\n    throw new ERR_ZLIB_INITIALIZATION_FAILED();\r\n  }\r\n\r\n  ZlibBase.call(this, opts, mode, handle, brotliDefaultOpts);\r\n}\r\nObject.setPrototypeOf(Brotli.prototype, Zlib.prototype);\r\nObject.setPrototypeOf(Brotli, Zlib);\r\n\r\nfunction BrotliCompress(opts) {\r\n  if (!(this instanceof BrotliCompress))\r\n    return new BrotliCompress(opts);\r\n  Brotli.call(this, opts, BROTLI_ENCODE);\r\n}\r\nObject.setPrototypeOf(BrotliCompress.prototype, Brotli.prototype);\r\nObject.setPrototypeOf(BrotliCompress, Brotli);\r\n\r\nfunction BrotliDecompress(opts) {\r\n  if (!(this instanceof BrotliDecompress))\r\n    return new BrotliDecompress(opts);\r\n  Brotli.call(this, opts, BROTLI_DECODE);\r\n}\r\nObject.setPrototypeOf(BrotliDecompress.prototype, Brotli.prototype);\r\nObject.setPrototypeOf(BrotliDecompress, Brotli);\r\n\r\n\r\nfunction createProperty(ctor) {\r\n  return {\r\n    configurable: true,\r\n    enumerable: true,\r\n    value: function(options) {\r\n      return new ctor(options);\r\n    }\r\n  };\r\n}\r\n\r\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\r\n// want to runtime-deprecate it at some point. There's no hurry, though.\r\nObject.defineProperty(binding.Zlib.prototype, 'jsref', {\r\n  get() { return this[owner_symbol]; },\r\n  set(v) { return this[owner_symbol] = v; }\r\n});\r\n\r\nmodule.exports = {\r\n  Deflate,\r\n  Inflate,\r\n  Gzip,\r\n  Gunzip,\r\n  DeflateRaw,\r\n  InflateRaw,\r\n  Unzip,\r\n  BrotliCompress,\r\n  BrotliDecompress,\r\n\r\n  // Convenience methods.\r\n  // compress/decompress a string or buffer in one step.\r\n  deflate: createConvenienceMethod(Deflate, false),\r\n  deflateSync: createConvenienceMethod(Deflate, true),\r\n  gzip: createConvenienceMethod(Gzip, false),\r\n  gzipSync: createConvenienceMethod(Gzip, true),\r\n  deflateRaw: createConvenienceMethod(DeflateRaw, false),\r\n  deflateRawSync: createConvenienceMethod(DeflateRaw, true),\r\n  unzip: createConvenienceMethod(Unzip, false),\r\n  unzipSync: createConvenienceMethod(Unzip, true),\r\n  inflate: createConvenienceMethod(Inflate, false),\r\n  inflateSync: createConvenienceMethod(Inflate, true),\r\n  gunzip: createConvenienceMethod(Gunzip, false),\r\n  gunzipSync: createConvenienceMethod(Gunzip, true),\r\n  inflateRaw: createConvenienceMethod(InflateRaw, false),\r\n  inflateRawSync: createConvenienceMethod(InflateRaw, true),\r\n  brotliCompress: createConvenienceMethod(BrotliCompress, false),\r\n  brotliCompressSync: createConvenienceMethod(BrotliCompress, true),\r\n  brotliDecompress: createConvenienceMethod(BrotliDecompress, false),\r\n  brotliDecompressSync: createConvenienceMethod(BrotliDecompress, true),\r\n};\r\n\r\nObject.defineProperties(module.exports, {\r\n  createDeflate: createProperty(Deflate),\r\n  createInflate: createProperty(Inflate),\r\n  createDeflateRaw: createProperty(DeflateRaw),\r\n  createInflateRaw: createProperty(InflateRaw),\r\n  createGzip: createProperty(Gzip),\r\n  createGunzip: createProperty(Gunzip),\r\n  createUnzip: createProperty(Unzip),\r\n  createBrotliCompress: createProperty(BrotliCompress),\r\n  createBrotliDecompress: createProperty(BrotliDecompress),\r\n  constants: {\r\n    configurable: false,\r\n    enumerable: true,\r\n    value: constants\r\n  },\r\n  codes: {\r\n    enumerable: true,\r\n    writable: false,\r\n    value: Object.freeze(codes)\r\n  }\r\n});\r\n\r\n// These should be considered deprecated\r\n// expose all the zlib constants\r\nconst bkeys = Object.keys(constants);\r\nfor (var bk = 0; bk < bkeys.length; bk++) {\r\n  var bkey = bkeys[bk];\r\n  if (bkey.startsWith('BROTLI')) continue;\r\n  Object.defineProperty(module.exports, bkey, {\r\n    enumerable: false, value: constants[bkey], writable: false\r\n  });\r\n}\r\n"
  },
  {
    "name": "_stream_transform.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a transform stream is a readable/writable stream where you do\r\n// something with the data.  Sometimes it's called a \"filter\",\r\n// but that's not a great name for it, since that implies a thing where\r\n// some bits pass through, and others are simply ignored.  (That would\r\n// be a valid example of a transform, of course.)\r\n//\r\n// While the output is causally related to the input, it's not a\r\n// necessarily symmetric or synchronous transformation.  For example,\r\n// a zlib stream might take multiple plain-text writes(), and then\r\n// emit a single compressed chunk some time in the future.\r\n//\r\n// Here's how this works:\r\n//\r\n// The Transform stream has all the aspects of the readable and writable\r\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\r\n// internally, and returns false if there's a lot of pending writes\r\n// buffered up.  When you call read(), that calls _read(n) until\r\n// there's enough pending readable data buffered up.\r\n//\r\n// In a transform stream, the written data is placed in a buffer.  When\r\n// _read(n) is called, it transforms the queued up data, calling the\r\n// buffered _write cb's as it consumes chunks.  If consuming a single\r\n// written chunk would result in multiple output chunks, then the first\r\n// outputted bit calls the readcb, and subsequent chunks just go into\r\n// the read buffer, and will cause it to emit 'readable' if necessary.\r\n//\r\n// This way, back-pressure is actually determined by the reading side,\r\n// since _read has to be called to start processing a new chunk.  However,\r\n// a pathological inflate type of transform can cause excessive buffering\r\n// here.  For example, imagine a stream where every byte of input is\r\n// interpreted as an integer from 0-255, and then results in that many\r\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\r\n// 1kb of data being output.  In this case, you could write a very small\r\n// amount of input, and end up with a very large amount of output.  In\r\n// such a pathological inflating mechanism, there'd be no way to tell\r\n// the system to stop doing the transform.  A single 4MB write could\r\n// cause the system to run out of memory.\r\n//\r\n// However, even in such a pathological case, only a single written chunk\r\n// would be consumed, and then the rest would wait (un-transformed) until\r\n// the results of the previous transformed chunk were consumed.\r\n\r\n'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nmodule.exports = Transform;\r\nconst {\r\n  ERR_METHOD_NOT_IMPLEMENTED,\r\n  ERR_MULTIPLE_CALLBACK,\r\n  ERR_TRANSFORM_ALREADY_TRANSFORMING,\r\n  ERR_TRANSFORM_WITH_LENGTH_0\r\n} = require('internal/errors').codes;\r\nconst Duplex = require('_stream_duplex');\r\nObject.setPrototypeOf(Transform.prototype, Duplex.prototype);\r\nObject.setPrototypeOf(Transform, Duplex);\r\n\r\n\r\nfunction afterTransform(er, data) {\r\n  const ts = this._transformState;\r\n  ts.transforming = false;\r\n\r\n  const cb = ts.writecb;\r\n\r\n  if (cb === null) {\r\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\r\n  }\r\n\r\n  ts.writechunk = null;\r\n  ts.writecb = null;\r\n\r\n  if (data != null) // Single equals check for both `null` and `undefined`\r\n    this.push(data);\r\n\r\n  cb(er);\r\n\r\n  const rs = this._readableState;\r\n  rs.reading = false;\r\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\r\n    this._read(rs.highWaterMark);\r\n  }\r\n}\r\n\r\n\r\nfunction Transform(options) {\r\n  if (!(this instanceof Transform))\r\n    return new Transform(options);\r\n\r\n  Duplex.call(this, options);\r\n\r\n  this._transformState = {\r\n    afterTransform: afterTransform.bind(this),\r\n    needTransform: false,\r\n    transforming: false,\r\n    writecb: null,\r\n    writechunk: null,\r\n    writeencoding: null\r\n  };\r\n\r\n  // We have implemented the _read method, and done the other things\r\n  // that Readable wants before the first _read call, so unset the\r\n  // sync guard flag.\r\n  this._readableState.sync = false;\r\n\r\n  if (options) {\r\n    if (typeof options.transform === 'function')\r\n      this._transform = options.transform;\r\n\r\n    if (typeof options.flush === 'function')\r\n      this._flush = options.flush;\r\n  }\r\n\r\n  // When the writable side finishes, then flush out anything remaining.\r\n  this.on('prefinish', prefinish);\r\n}\r\n\r\nfunction prefinish() {\r\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\r\n    this._flush((er, data) => {\r\n      done(this, er, data);\r\n    });\r\n  } else {\r\n    done(this, null, null);\r\n  }\r\n}\r\n\r\nTransform.prototype.push = function(chunk, encoding) {\r\n  this._transformState.needTransform = false;\r\n  return Duplex.prototype.push.call(this, chunk, encoding);\r\n};\r\n\r\n// This is the part where you do stuff!\r\n// override this function in implementation classes.\r\n// 'chunk' is an input chunk.\r\n//\r\n// Call `push(newChunk)` to pass along transformed output\r\n// to the readable side.  You may call 'push' zero or more times.\r\n//\r\n// Call `cb(err)` when you are done with this chunk.  If you pass\r\n// an error, then that'll put the hurt on the whole operation.  If you\r\n// never call cb(), then you'll never get another chunk.\r\nTransform.prototype._transform = function(chunk, encoding, cb) {\r\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\r\n};\r\n\r\nTransform.prototype._write = function(chunk, encoding, cb) {\r\n  const ts = this._transformState;\r\n  ts.writecb = cb;\r\n  ts.writechunk = chunk;\r\n  ts.writeencoding = encoding;\r\n  if (!ts.transforming) {\r\n    var rs = this._readableState;\r\n    if (ts.needTransform ||\r\n        rs.needReadable ||\r\n        rs.length < rs.highWaterMark)\r\n      this._read(rs.highWaterMark);\r\n  }\r\n};\r\n\r\n// Doesn't matter what the args are here.\r\n// _transform does all the work.\r\n// That we got here means that the readable side wants more data.\r\nTransform.prototype._read = function(n) {\r\n  const ts = this._transformState;\r\n\r\n  if (ts.writechunk !== null && !ts.transforming) {\r\n    ts.transforming = true;\r\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\r\n  } else {\r\n    // Mark that we need a transform, so that any data that comes in\r\n    // will get processed, now that we've asked for it.\r\n    ts.needTransform = true;\r\n  }\r\n};\r\n\r\n\r\nTransform.prototype._destroy = function(err, cb) {\r\n  Duplex.prototype._destroy.call(this, err, (err2) => {\r\n    cb(err2);\r\n  });\r\n};\r\n\r\n\r\nfunction done(stream, er, data) {\r\n  if (er)\r\n    return stream.emit('error', er);\r\n\r\n  if (data != null) // Single equals check for both `null` and `undefined`\r\n    stream.push(data);\r\n\r\n  // These two error cases are coherence checks that can likely not be tested.\r\n  if (stream._writableState.length)\r\n    throw new ERR_TRANSFORM_WITH_LENGTH_0();\r\n\r\n  if (stream._transformState.transforming)\r\n    throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\r\n  return stream.push(null);\r\n}\r\n"
  },
  {
    "name": "_stream_duplex.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a duplex stream is just a stream that is both readable and writable.\r\n// Since JS doesn't have multiple prototypal inheritance, this class\r\n// prototypally inherits from Readable, and then parasitically from\r\n// Writable.\r\n\r\n'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nmodule.exports = Duplex;\r\n\r\nconst Readable = require('_stream_readable');\r\nconst Writable = require('_stream_writable');\r\n\r\nObject.setPrototypeOf(Duplex.prototype, Readable.prototype);\r\nObject.setPrototypeOf(Duplex, Readable);\r\n\r\n{\r\n  // Allow the keys array to be GC'ed.\r\n  const keys = Object.keys(Writable.prototype);\r\n  for (var v = 0; v < keys.length; v++) {\r\n    const method = keys[v];\r\n    if (!Duplex.prototype[method])\r\n      Duplex.prototype[method] = Writable.prototype[method];\r\n  }\r\n}\r\n\r\nfunction Duplex(options) {\r\n  if (!(this instanceof Duplex))\r\n    return new Duplex(options);\r\n\r\n  Readable.call(this, options);\r\n  Writable.call(this, options);\r\n  this.allowHalfOpen = true;\r\n\r\n  if (options) {\r\n    if (options.readable === false)\r\n      this.readable = false;\r\n\r\n    if (options.writable === false)\r\n      this.writable = false;\r\n\r\n    if (options.allowHalfOpen === false) {\r\n      this.allowHalfOpen = false;\r\n      this.once('end', onend);\r\n    }\r\n  }\r\n}\r\n\r\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState && this._writableState.highWaterMark;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._writableState && this._writableState.getBuffer();\r\n  }\r\n});\r\n\r\nObject.defineProperty(Duplex.prototype, 'writableLength', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState && this._writableState.length;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Duplex.prototype, 'writableFinished', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState ? this._writableState.finished : false;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Duplex.prototype, 'writableEnded', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState ? this._writableState.ending : false;\r\n  }\r\n});\r\n\r\n// The no-half-open enforcer\r\nfunction onend() {\r\n  // If the writable side ended, then we're ok.\r\n  if (this._writableState.ended)\r\n    return;\r\n\r\n  // No more data can be written.\r\n  // But allow more writes to happen in this tick.\r\n  process.nextTick(onEndNT, this);\r\n}\r\n\r\nfunction onEndNT(self) {\r\n  self.end();\r\n}\r\n\r\nObject.defineProperty(Duplex.prototype, 'destroyed', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    if (this._readableState === undefined ||\r\n        this._writableState === undefined) {\r\n      return false;\r\n    }\r\n    return this._readableState.destroyed && this._writableState.destroyed;\r\n  },\r\n  set(value) {\r\n    // We ignore the value if the stream\r\n    // has not been initialized yet\r\n    if (this._readableState === undefined ||\r\n        this._writableState === undefined) {\r\n      return;\r\n    }\r\n\r\n    // Backward compatibility, the user is explicitly\r\n    // managing destroyed\r\n    this._readableState.destroyed = value;\r\n    this._writableState.destroyed = value;\r\n  }\r\n});\r\n"
  },
  {
    "name": "_stream_readable.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nmodule.exports = Readable;\r\nReadable.ReadableState = ReadableState;\r\n\r\nconst EE = require('events');\r\nconst Stream = require('stream');\r\nconst { Buffer } = require('buffer');\r\n\r\nconst debug = require('internal/util/debuglog').debuglog('stream');\r\nconst BufferList = require('internal/streams/buffer_list');\r\nconst destroyImpl = require('internal/streams/destroy');\r\nconst {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark\r\n} = require('internal/streams/state');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_STREAM_PUSH_AFTER_EOF,\r\n  ERR_METHOD_NOT_IMPLEMENTED,\r\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT\r\n} = require('internal/errors').codes;\r\n\r\n// Lazy loaded to improve the startup performance.\r\nlet StringDecoder;\r\nlet createReadableStreamAsyncIterator;\r\n\r\nObject.setPrototypeOf(Readable.prototype, Stream.prototype);\r\nObject.setPrototypeOf(Readable, Stream);\r\n\r\nconst { errorOrDestroy } = destroyImpl;\r\nconst kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\r\n\r\nfunction prependListener(emitter, event, fn) {\r\n  // Sadly this is not cacheable as some libraries bundle their own\r\n  // event emitter implementation with them.\r\n  if (typeof emitter.prependListener === 'function')\r\n    return emitter.prependListener(event, fn);\r\n\r\n  // This is a hack to make sure that our error handler is attached before any\r\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\r\n  // to continue to work with older versions of Node.js that do not include\r\n  // the prependListener() method. The goal is to eventually remove this hack.\r\n  if (!emitter._events || !emitter._events[event])\r\n    emitter.on(event, fn);\r\n  else if (Array.isArray(emitter._events[event]))\r\n    emitter._events[event].unshift(fn);\r\n  else\r\n    emitter._events[event] = [fn, emitter._events[event]];\r\n}\r\n\r\nfunction ReadableState(options, stream, isDuplex) {\r\n  // Duplex streams are both readable and writable, but share\r\n  // the same options object.\r\n  // However, some cases require setting options to different\r\n  // values for the readable and the writable sides of the duplex stream.\r\n  // These options can be provided separately as readableXXX and writableXXX.\r\n  if (typeof isDuplex !== 'boolean')\r\n    isDuplex = stream instanceof Stream.Duplex;\r\n\r\n  // Object stream flag. Used to make read(n) ignore n and to\r\n  // make all the buffer merging and length checks go away\r\n  this.objectMode = !!(options && options.objectMode);\r\n\r\n  if (isDuplex)\r\n    this.objectMode = this.objectMode ||\r\n      !!(options && options.readableObjectMode);\r\n\r\n  // The point at which it stops calling _read() to fill the buffer\r\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\r\n  this.highWaterMark = options ?\r\n    getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex) :\r\n    getDefaultHighWaterMark(false);\r\n\r\n  // A linked list is used to store data chunks instead of an array because the\r\n  // linked list can remove elements from the beginning faster than\r\n  // array.shift()\r\n  this.buffer = new BufferList();\r\n  this.length = 0;\r\n  this.pipes = null;\r\n  this.pipesCount = 0;\r\n  this.flowing = null;\r\n  this.ended = false;\r\n  this.endEmitted = false;\r\n  this.reading = false;\r\n\r\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\r\n  // immediately, or on a later tick.  We set this to true at first, because\r\n  // any actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first read call.\r\n  this.sync = true;\r\n\r\n  // Whenever we return null, then we set a flag to say\r\n  // that we're awaiting a 'readable' event emission.\r\n  this.needReadable = false;\r\n  this.emittedReadable = false;\r\n  this.readableListening = false;\r\n  this.resumeScheduled = false;\r\n  this.paused = true;\r\n\r\n  // Should close be emitted on destroy. Defaults to true.\r\n  this.emitClose = !options || options.emitClose !== false;\r\n\r\n  // Should .destroy() be called after 'end' (and potentially 'finish')\r\n  this.autoDestroy = !!(options && options.autoDestroy);\r\n\r\n  // Has it been destroyed\r\n  this.destroyed = false;\r\n\r\n  // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\r\n\r\n  // The number of writers that are awaiting a drain event in .pipe()s\r\n  this.awaitDrain = 0;\r\n\r\n  // If true, a maybeReadMore has been scheduled\r\n  this.readingMore = false;\r\n\r\n  this.decoder = null;\r\n  this.encoding = null;\r\n  if (options && options.encoding) {\r\n    if (!StringDecoder)\r\n      StringDecoder = require('string_decoder').StringDecoder;\r\n    this.decoder = new StringDecoder(options.encoding);\r\n    this.encoding = options.encoding;\r\n  }\r\n}\r\n\r\nfunction Readable(options) {\r\n  if (!(this instanceof Readable))\r\n    return new Readable(options);\r\n\r\n  // Checking for a Stream.Duplex instance is faster here instead of inside\r\n  // the ReadableState constructor, at least with V8 6.5\r\n  const isDuplex = this instanceof Stream.Duplex;\r\n\r\n  this._readableState = new ReadableState(options, this, isDuplex);\r\n\r\n  // legacy\r\n  this.readable = true;\r\n\r\n  if (options) {\r\n    if (typeof options.read === 'function')\r\n      this._read = options.read;\r\n\r\n    if (typeof options.destroy === 'function')\r\n      this._destroy = options.destroy;\r\n  }\r\n\r\n  Stream.call(this);\r\n}\r\n\r\nObject.defineProperty(Readable.prototype, 'destroyed', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    if (this._readableState === undefined) {\r\n      return false;\r\n    }\r\n    return this._readableState.destroyed;\r\n  },\r\n  set(value) {\r\n    // We ignore the value if the stream\r\n    // has not been initialized yet\r\n    if (!this._readableState) {\r\n      return;\r\n    }\r\n\r\n    // Backward compatibility, the user is explicitly\r\n    // managing destroyed\r\n    this._readableState.destroyed = value;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Readable.prototype, 'readableEnded', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._readableState ? this._readableState.endEmitted : false;\r\n  }\r\n});\r\n\r\nReadable.prototype.destroy = destroyImpl.destroy;\r\nReadable.prototype._undestroy = destroyImpl.undestroy;\r\nReadable.prototype._destroy = function(err, cb) {\r\n  cb(err);\r\n};\r\n\r\n// Manually shove something into the read() buffer.\r\n// This returns true if the highWaterMark has not been hit yet,\r\n// similar to how Writable.write() returns true if you should\r\n// write() some more.\r\nReadable.prototype.push = function(chunk, encoding) {\r\n  return readableAddChunk(this, chunk, encoding, false);\r\n};\r\n\r\n// Unshift should *always* be something directly out of read()\r\nReadable.prototype.unshift = function(chunk, encoding) {\r\n  return readableAddChunk(this, chunk, encoding, true);\r\n};\r\n\r\nfunction readableAddChunk(stream, chunk, encoding, addToFront) {\r\n  debug('readableAddChunk', chunk);\r\n  const state = stream._readableState;\r\n\r\n  let skipChunkCheck;\r\n\r\n  if (!state.objectMode) {\r\n    if (typeof chunk === 'string') {\r\n      encoding = encoding || state.defaultEncoding;\r\n      if (addToFront && state.encoding && state.encoding !== encoding) {\r\n        // When unshifting, if state.encoding is set, we have to save\r\n        // the string in the BufferList with the state encoding\r\n        chunk = Buffer.from(chunk, encoding).toString(state.encoding);\r\n      } else if (encoding !== state.encoding) {\r\n        chunk = Buffer.from(chunk, encoding);\r\n        encoding = '';\r\n      }\r\n      skipChunkCheck = true;\r\n    }\r\n  } else {\r\n    skipChunkCheck = true;\r\n  }\r\n\r\n  if (chunk === null) {\r\n    state.reading = false;\r\n    onEofChunk(stream, state);\r\n  } else {\r\n    var er;\r\n    if (!skipChunkCheck)\r\n      er = chunkInvalid(state, chunk);\r\n    if (er) {\r\n      errorOrDestroy(stream, er);\r\n    } else if (state.objectMode || (chunk && chunk.length > 0)) {\r\n      if (typeof chunk !== 'string' &&\r\n          !state.objectMode &&\r\n          // Do not use Object.getPrototypeOf as it is slower since V8 7.3.\r\n          !(chunk instanceof Buffer)) {\r\n        chunk = Stream._uint8ArrayToBuffer(chunk);\r\n      }\r\n\r\n      if (addToFront) {\r\n        if (state.endEmitted)\r\n          errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\r\n        else\r\n          addChunk(stream, state, chunk, true);\r\n      } else if (state.ended) {\r\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\r\n      } else if (state.destroyed) {\r\n        return false;\r\n      } else {\r\n        state.reading = false;\r\n        if (state.decoder && !encoding) {\r\n          chunk = state.decoder.write(chunk);\r\n          if (state.objectMode || chunk.length !== 0)\r\n            addChunk(stream, state, chunk, false);\r\n          else\r\n            maybeReadMore(stream, state);\r\n        } else {\r\n          addChunk(stream, state, chunk, false);\r\n        }\r\n      }\r\n    } else if (!addToFront) {\r\n      state.reading = false;\r\n      maybeReadMore(stream, state);\r\n    }\r\n  }\r\n\r\n  // We can push more data if we are below the highWaterMark.\r\n  // Also, if we have no data yet, we can stand some more bytes.\r\n  // This is to work around cases where hwm=0, such as the repl.\r\n  return !state.ended &&\r\n    (state.length < state.highWaterMark || state.length === 0);\r\n}\r\n\r\nfunction addChunk(stream, state, chunk, addToFront) {\r\n  if (state.flowing && state.length === 0 && !state.sync) {\r\n    state.awaitDrain = 0;\r\n    stream.emit('data', chunk);\r\n  } else {\r\n    // Update the buffer info.\r\n    state.length += state.objectMode ? 1 : chunk.length;\r\n    if (addToFront)\r\n      state.buffer.unshift(chunk);\r\n    else\r\n      state.buffer.push(chunk);\r\n\r\n    if (state.needReadable)\r\n      emitReadable(stream);\r\n  }\r\n  maybeReadMore(stream, state);\r\n}\r\n\r\nfunction chunkInvalid(state, chunk) {\r\n  if (!Stream._isUint8Array(chunk) &&\r\n      typeof chunk !== 'string' &&\r\n      chunk !== undefined &&\r\n      !state.objectMode) {\r\n    return new ERR_INVALID_ARG_TYPE(\r\n      'chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\r\n  }\r\n}\r\n\r\n\r\nReadable.prototype.isPaused = function() {\r\n  return this._readableState.flowing === false;\r\n};\r\n\r\n// Backwards compatibility.\r\nReadable.prototype.setEncoding = function(enc) {\r\n  if (!StringDecoder)\r\n    StringDecoder = require('string_decoder').StringDecoder;\r\n  const decoder = new StringDecoder(enc);\r\n  this._readableState.decoder = decoder;\r\n  // If setEncoding(null), decoder.encoding equals utf8\r\n  this._readableState.encoding = this._readableState.decoder.encoding;\r\n\r\n  const buffer = this._readableState.buffer;\r\n  // Iterate over current buffer to convert already stored Buffers:\r\n  let content = '';\r\n  for (const data of buffer) {\r\n    content += decoder.write(data);\r\n  }\r\n  buffer.clear();\r\n  if (content !== '')\r\n    buffer.push(content);\r\n  this._readableState.length = content.length;\r\n  return this;\r\n};\r\n\r\n// Don't raise the hwm > 8MB\r\nconst MAX_HWM = 0x800000;\r\nfunction computeNewHighWaterMark(n) {\r\n  if (n >= MAX_HWM) {\r\n    n = MAX_HWM;\r\n  } else {\r\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\r\n    // tiny amounts\r\n    n--;\r\n    n |= n >>> 1;\r\n    n |= n >>> 2;\r\n    n |= n >>> 4;\r\n    n |= n >>> 8;\r\n    n |= n >>> 16;\r\n    n++;\r\n  }\r\n  return n;\r\n}\r\n\r\n// This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\nfunction howMuchToRead(n, state) {\r\n  if (n <= 0 || (state.length === 0 && state.ended))\r\n    return 0;\r\n  if (state.objectMode)\r\n    return 1;\r\n  if (Number.isNaN(n)) {\r\n    // Only flow one buffer at a time\r\n    if (state.flowing && state.length)\r\n      return state.buffer.first().length;\r\n    else\r\n      return state.length;\r\n  }\r\n  if (n <= state.length)\r\n    return n;\r\n  return state.ended ? state.length : 0;\r\n}\r\n\r\n// You can override either this method, or the async _read(n) below.\r\nReadable.prototype.read = function(n) {\r\n  debug('read', n);\r\n  // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\r\n  // in this scenario, so we are doing it manually.\r\n  if (n === undefined) {\r\n    n = NaN;\r\n  } else if (!Number.isInteger(n)) {\r\n    n = parseInt(n, 10);\r\n  }\r\n  const state = this._readableState;\r\n  const nOrig = n;\r\n\r\n  // If we're asking for more than the current hwm, then raise the hwm.\r\n  if (n > state.highWaterMark)\r\n    state.highWaterMark = computeNewHighWaterMark(n);\r\n\r\n  if (n !== 0)\r\n    state.emittedReadable = false;\r\n\r\n  // If we're doing read(0) to trigger a readable event, but we\r\n  // already have a bunch of data in the buffer, then just trigger\r\n  // the 'readable' event and move on.\r\n  if (n === 0 &&\r\n      state.needReadable &&\r\n      ((state.highWaterMark !== 0 ?\r\n        state.length >= state.highWaterMark :\r\n        state.length > 0) ||\r\n       state.ended)) {\r\n    debug('read: emitReadable', state.length, state.ended);\r\n    if (state.length === 0 && state.ended)\r\n      endReadable(this);\r\n    else\r\n      emitReadable(this);\r\n    return null;\r\n  }\r\n\r\n  n = howMuchToRead(n, state);\r\n\r\n  // If we've ended, and we're now clear, then finish it up.\r\n  if (n === 0 && state.ended) {\r\n    if (state.length === 0)\r\n      endReadable(this);\r\n    return null;\r\n  }\r\n\r\n  // All the actual chunk generation logic needs to be\r\n  // *below* the call to _read.  The reason is that in certain\r\n  // synthetic stream cases, such as passthrough streams, _read\r\n  // may be a completely synchronous operation which may change\r\n  // the state of the read buffer, providing enough data when\r\n  // before there was *not* enough.\r\n  //\r\n  // So, the steps are:\r\n  // 1. Figure out what the state of things will be after we do\r\n  // a read from the buffer.\r\n  //\r\n  // 2. If that resulting state will trigger a _read, then call _read.\r\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\r\n  // deeply ugly to write APIs this way, but that still doesn't mean\r\n  // that the Readable class should behave improperly, as streams are\r\n  // designed to be sync/async agnostic.\r\n  // Take note if the _read call is sync or async (ie, if the read call\r\n  // has returned yet), so that we know whether or not it's safe to emit\r\n  // 'readable' etc.\r\n  //\r\n  // 3. Actually pull the requested chunks out of the buffer and return.\r\n\r\n  // if we need a readable event, then we need to do some reading.\r\n  var doRead = state.needReadable;\r\n  debug('need readable', doRead);\r\n\r\n  // If we currently have less than the highWaterMark, then also read some\r\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\r\n    doRead = true;\r\n    debug('length less than watermark', doRead);\r\n  }\r\n\r\n  // However, if we've ended, then there's no point, if we're already\r\n  // reading, then it's unnecessary, and if we're destroyed, then it's\r\n  // not allowed.\r\n  if (state.ended || state.reading || state.destroyed) {\r\n    doRead = false;\r\n    debug('reading or ended', doRead);\r\n  } else if (doRead) {\r\n    debug('do read');\r\n    state.reading = true;\r\n    state.sync = true;\r\n    // If the length is currently zero, then we *need* a readable event.\r\n    if (state.length === 0)\r\n      state.needReadable = true;\r\n    // Call internal read method\r\n    this._read(state.highWaterMark);\r\n    state.sync = false;\r\n    // If _read pushed data synchronously, then `reading` will be false,\r\n    // and we need to re-evaluate how much data we can return to the user.\r\n    if (!state.reading)\r\n      n = howMuchToRead(nOrig, state);\r\n  }\r\n\r\n  var ret;\r\n  if (n > 0)\r\n    ret = fromList(n, state);\r\n  else\r\n    ret = null;\r\n\r\n  if (ret === null) {\r\n    state.needReadable = state.length <= state.highWaterMark;\r\n    n = 0;\r\n  } else {\r\n    state.length -= n;\r\n    state.awaitDrain = 0;\r\n  }\r\n\r\n  if (state.length === 0) {\r\n    // If we have nothing in the buffer, then we want to know\r\n    // as soon as we *do* get something into the buffer.\r\n    if (!state.ended)\r\n      state.needReadable = true;\r\n\r\n    // If we tried to read() past the EOF, then emit end on the next tick.\r\n    if (nOrig !== n && state.ended)\r\n      endReadable(this);\r\n  }\r\n\r\n  if (ret !== null)\r\n    this.emit('data', ret);\r\n\r\n  return ret;\r\n};\r\n\r\nfunction onEofChunk(stream, state) {\r\n  debug('onEofChunk');\r\n  if (state.ended) return;\r\n  if (state.decoder) {\r\n    var chunk = state.decoder.end();\r\n    if (chunk && chunk.length) {\r\n      state.buffer.push(chunk);\r\n      state.length += state.objectMode ? 1 : chunk.length;\r\n    }\r\n  }\r\n  state.ended = true;\r\n\r\n  if (state.sync) {\r\n    // If we are sync, wait until next tick to emit the data.\r\n    // Otherwise we risk emitting data in the flow()\r\n    // the readable code triggers during a read() call\r\n    emitReadable(stream);\r\n  } else {\r\n    // Emit 'readable' now to make sure it gets picked up.\r\n    state.needReadable = false;\r\n    state.emittedReadable = true;\r\n    // We have to emit readable now that we are EOF. Modules\r\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\r\n    emitReadable_(stream);\r\n  }\r\n}\r\n\r\n// Don't emit readable right away in sync mode, because this can trigger\r\n// another read() call => stack overflow.  This way, it might trigger\r\n// a nextTick recursion warning, but that's not so bad.\r\nfunction emitReadable(stream) {\r\n  const state = stream._readableState;\r\n  debug('emitReadable', state.needReadable, state.emittedReadable);\r\n  state.needReadable = false;\r\n  if (!state.emittedReadable) {\r\n    debug('emitReadable', state.flowing);\r\n    state.emittedReadable = true;\r\n    process.nextTick(emitReadable_, stream);\r\n  }\r\n}\r\n\r\nfunction emitReadable_(stream) {\r\n  const state = stream._readableState;\r\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\r\n  if (!state.destroyed && (state.length || state.ended)) {\r\n    stream.emit('readable');\r\n    state.emittedReadable = false;\r\n  }\r\n\r\n  // The stream needs another readable event if\r\n  // 1. It is not flowing, as the flow mechanism will take\r\n  //    care of it.\r\n  // 2. It is not ended.\r\n  // 3. It is below the highWaterMark, so we can schedule\r\n  //    another readable later.\r\n  state.needReadable =\r\n    !state.flowing &&\r\n    !state.ended &&\r\n    state.length <= state.highWaterMark;\r\n  flow(stream);\r\n}\r\n\r\n\r\n// At this point, the user has presumably seen the 'readable' event,\r\n// and called read() to consume some data.  that may have triggered\r\n// in turn another _read(n) call, in which case reading = true if\r\n// it's in progress.\r\n// However, if we're not ended, or reading, and the length < hwm,\r\n// then go ahead and try to read some more preemptively.\r\nfunction maybeReadMore(stream, state) {\r\n  if (!state.readingMore) {\r\n    state.readingMore = true;\r\n    process.nextTick(maybeReadMore_, stream, state);\r\n  }\r\n}\r\n\r\nfunction maybeReadMore_(stream, state) {\r\n  // Attempt to read more data if we should.\r\n  //\r\n  // The conditions for reading more data are (one of):\r\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\r\n  //   is responsible for filling the buffer with enough data if such data\r\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\r\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\r\n  //   when the stream consumer calls read() instead.\r\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\r\n  //   the loop below is responsible for ensuring read() is called. Failing to\r\n  //   call read here would abort the flow and there's no other mechanism for\r\n  //   continuing the flow if the stream consumer has just subscribed to the\r\n  //   'data' event.\r\n  //\r\n  // In addition to the above conditions to keep reading data, the following\r\n  // conditions prevent the data from being read:\r\n  // - The stream has ended (state.ended).\r\n  // - There is already a pending 'read' operation (state.reading). This is a\r\n  //   case where the the stream has called the implementation defined _read()\r\n  //   method, but they are processing the call asynchronously and have _not_\r\n  //   called push() with new data. In this case we skip performing more\r\n  //   read()s. The execution ends in this method again after the _read() ends\r\n  //   up calling push() with more data.\r\n  while (!state.reading && !state.ended &&\r\n         (state.length < state.highWaterMark ||\r\n          (state.flowing && state.length === 0))) {\r\n    const len = state.length;\r\n    debug('maybeReadMore read 0');\r\n    stream.read(0);\r\n    if (len === state.length)\r\n      // Didn't get any data, stop spinning.\r\n      break;\r\n  }\r\n  state.readingMore = false;\r\n}\r\n\r\n// Abstract method.  to be overridden in specific implementation classes.\r\n// call cb(er, data) where data is <= n in length.\r\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\r\n// arbitrary, and perhaps not very meaningful.\r\nReadable.prototype._read = function(n) {\r\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\r\n};\r\n\r\nReadable.prototype.pipe = function(dest, pipeOpts) {\r\n  const src = this;\r\n  const state = this._readableState;\r\n\r\n  switch (state.pipesCount) {\r\n    case 0:\r\n      state.pipes = dest;\r\n      break;\r\n    case 1:\r\n      state.pipes = [state.pipes, dest];\r\n      break;\r\n    default:\r\n      state.pipes.push(dest);\r\n      break;\r\n  }\r\n  state.pipesCount += 1;\r\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\r\n\r\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) &&\r\n              dest !== process.stdout &&\r\n              dest !== process.stderr;\r\n\r\n  const endFn = doEnd ? onend : unpipe;\r\n  if (state.endEmitted)\r\n    process.nextTick(endFn);\r\n  else\r\n    src.once('end', endFn);\r\n\r\n  dest.on('unpipe', onunpipe);\r\n  function onunpipe(readable, unpipeInfo) {\r\n    debug('onunpipe');\r\n    if (readable === src) {\r\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\r\n        unpipeInfo.hasUnpiped = true;\r\n        cleanup();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onend() {\r\n    debug('onend');\r\n    dest.end();\r\n  }\r\n\r\n  let ondrain;\r\n\r\n  var cleanedUp = false;\r\n  function cleanup() {\r\n    debug('cleanup');\r\n    // Cleanup event handlers once the pipe is broken\r\n    dest.removeListener('close', onclose);\r\n    dest.removeListener('finish', onfinish);\r\n    if (ondrain) {\r\n      dest.removeListener('drain', ondrain);\r\n    }\r\n    dest.removeListener('error', onerror);\r\n    dest.removeListener('unpipe', onunpipe);\r\n    src.removeListener('end', onend);\r\n    src.removeListener('end', unpipe);\r\n    src.removeListener('data', ondata);\r\n\r\n    cleanedUp = true;\r\n\r\n    // If the reader is waiting for a drain event from this\r\n    // specific writer, then it would cause it to never start\r\n    // flowing again.\r\n    // So, if this is awaiting a drain, then we just call it now.\r\n    // If we don't know, then assume that we are waiting for one.\r\n    if (ondrain && state.awaitDrain &&\r\n        (!dest._writableState || dest._writableState.needDrain))\r\n      ondrain();\r\n  }\r\n\r\n  src.on('data', ondata);\r\n  function ondata(chunk) {\r\n    debug('ondata');\r\n    const ret = dest.write(chunk);\r\n    debug('dest.write', ret);\r\n    if (ret === false) {\r\n      // If the user unpiped during `dest.write()`, it is possible\r\n      // to get stuck in a permanently paused state if that write\r\n      // also returned false.\r\n      // => Check whether `dest` is still a piping destination.\r\n      if (((state.pipesCount === 1 && state.pipes === dest) ||\r\n           (state.pipesCount > 1 && state.pipes.includes(dest))) &&\r\n          !cleanedUp) {\r\n        debug('false write response, pause', state.awaitDrain);\r\n        state.awaitDrain++;\r\n      }\r\n      if (!ondrain) {\r\n        // When the dest drains, it reduces the awaitDrain counter\r\n        // on the source.  This would be more elegant with a .once()\r\n        // handler in flow(), but adding and removing repeatedly is\r\n        // too slow.\r\n        ondrain = pipeOnDrain(src);\r\n        dest.on('drain', ondrain);\r\n      }\r\n      src.pause();\r\n    }\r\n  }\r\n\r\n  // If the dest has an error, then stop piping into it.\r\n  // However, don't suppress the throwing behavior for this.\r\n  function onerror(er) {\r\n    debug('onerror', er);\r\n    unpipe();\r\n    dest.removeListener('error', onerror);\r\n    if (EE.listenerCount(dest, 'error') === 0)\r\n      errorOrDestroy(dest, er);\r\n  }\r\n\r\n  // Make sure our error handler is attached before userland ones.\r\n  prependListener(dest, 'error', onerror);\r\n\r\n  // Both close and finish should trigger unpipe, but only once.\r\n  function onclose() {\r\n    dest.removeListener('finish', onfinish);\r\n    unpipe();\r\n  }\r\n  dest.once('close', onclose);\r\n  function onfinish() {\r\n    debug('onfinish');\r\n    dest.removeListener('close', onclose);\r\n    unpipe();\r\n  }\r\n  dest.once('finish', onfinish);\r\n\r\n  function unpipe() {\r\n    debug('unpipe');\r\n    src.unpipe(dest);\r\n  }\r\n\r\n  // Tell the dest that it's being piped to\r\n  dest.emit('pipe', src);\r\n\r\n  // Start the flow if it hasn't been started already.\r\n  if (!state.flowing) {\r\n    debug('pipe resume');\r\n    src.resume();\r\n  }\r\n\r\n  return dest;\r\n};\r\n\r\nfunction pipeOnDrain(src) {\r\n  return function pipeOnDrainFunctionResult() {\r\n    const state = src._readableState;\r\n    debug('pipeOnDrain', state.awaitDrain);\r\n    if (state.awaitDrain)\r\n      state.awaitDrain--;\r\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\r\n      state.flowing = true;\r\n      flow(src);\r\n    }\r\n  };\r\n}\r\n\r\n\r\nReadable.prototype.unpipe = function(dest) {\r\n  const state = this._readableState;\r\n  const unpipeInfo = { hasUnpiped: false };\r\n\r\n  // If we're not piping anywhere, then do nothing.\r\n  if (state.pipesCount === 0)\r\n    return this;\r\n\r\n  // Just one destination.  most common case.\r\n  if (state.pipesCount === 1) {\r\n    // Passed in one, but it's not the right one.\r\n    if (dest && dest !== state.pipes)\r\n      return this;\r\n\r\n    if (!dest)\r\n      dest = state.pipes;\r\n\r\n    // got a match.\r\n    state.pipes = null;\r\n    state.pipesCount = 0;\r\n    state.flowing = false;\r\n    if (dest)\r\n      dest.emit('unpipe', this, unpipeInfo);\r\n    return this;\r\n  }\r\n\r\n  // Slow case with multiple pipe destinations.\r\n\r\n  if (!dest) {\r\n    // remove all.\r\n    var dests = state.pipes;\r\n    var len = state.pipesCount;\r\n    state.pipes = null;\r\n    state.pipesCount = 0;\r\n    state.flowing = false;\r\n\r\n    for (var i = 0; i < len; i++)\r\n      dests[i].emit('unpipe', this, { hasUnpiped: false });\r\n    return this;\r\n  }\r\n\r\n  // Try to find the right one.\r\n  const index = state.pipes.indexOf(dest);\r\n  if (index === -1)\r\n    return this;\r\n\r\n  state.pipes.splice(index, 1);\r\n  state.pipesCount -= 1;\r\n  if (state.pipesCount === 1)\r\n    state.pipes = state.pipes[0];\r\n\r\n  dest.emit('unpipe', this, unpipeInfo);\r\n\r\n  return this;\r\n};\r\n\r\n// Set up data events if they are asked for\r\n// Ensure readable listeners eventually get something\r\nReadable.prototype.on = function(ev, fn) {\r\n  const res = Stream.prototype.on.call(this, ev, fn);\r\n  const state = this._readableState;\r\n\r\n  if (ev === 'data') {\r\n    // Update readableListening so that resume() may be a no-op\r\n    // a few lines down. This is needed to support once('readable').\r\n    state.readableListening = this.listenerCount('readable') > 0;\r\n\r\n    // Try start flowing on next tick if stream isn't explicitly paused\r\n    if (state.flowing !== false)\r\n      this.resume();\r\n  } else if (ev === 'readable') {\r\n    if (!state.endEmitted && !state.readableListening) {\r\n      state.readableListening = state.needReadable = true;\r\n      state.flowing = false;\r\n      state.emittedReadable = false;\r\n      debug('on readable', state.length, state.reading);\r\n      if (state.length) {\r\n        emitReadable(this);\r\n      } else if (!state.reading) {\r\n        process.nextTick(nReadingNextTick, this);\r\n      }\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\nReadable.prototype.addListener = Readable.prototype.on;\r\n\r\nReadable.prototype.removeListener = function(ev, fn) {\r\n  const res = Stream.prototype.removeListener.call(this, ev, fn);\r\n\r\n  if (ev === 'readable') {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  }\r\n\r\n  return res;\r\n};\r\nReadable.prototype.off = Readable.prototype.removeListener;\r\n\r\nReadable.prototype.removeAllListeners = function(ev) {\r\n  const res = Stream.prototype.removeAllListeners.apply(this, arguments);\r\n\r\n  if (ev === 'readable' || ev === undefined) {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nfunction updateReadableListening(self) {\r\n  const state = self._readableState;\r\n  state.readableListening = self.listenerCount('readable') > 0;\r\n\r\n  if (state.resumeScheduled && !state.paused) {\r\n    // Flowing needs to be set to true now, otherwise\r\n    // the upcoming resume will not flow.\r\n    state.flowing = true;\r\n\r\n    // Crude way to check if we should resume\r\n  } else if (self.listenerCount('data') > 0) {\r\n    self.resume();\r\n  }\r\n}\r\n\r\nfunction nReadingNextTick(self) {\r\n  debug('readable nexttick read 0');\r\n  self.read(0);\r\n}\r\n\r\n// pause() and resume() are remnants of the legacy readable stream API\r\n// If the user uses them, then switch into old mode.\r\nReadable.prototype.resume = function() {\r\n  const state = this._readableState;\r\n  if (!state.flowing) {\r\n    debug('resume');\r\n    // We flow only if there is no one listening\r\n    // for readable, but we still have to call\r\n    // resume()\r\n    state.flowing = !state.readableListening;\r\n    resume(this, state);\r\n  }\r\n  state.paused = false;\r\n  return this;\r\n};\r\n\r\nfunction resume(stream, state) {\r\n  if (!state.resumeScheduled) {\r\n    state.resumeScheduled = true;\r\n    process.nextTick(resume_, stream, state);\r\n  }\r\n}\r\n\r\nfunction resume_(stream, state) {\r\n  debug('resume', state.reading);\r\n  if (!state.reading) {\r\n    stream.read(0);\r\n  }\r\n\r\n  state.resumeScheduled = false;\r\n  stream.emit('resume');\r\n  flow(stream);\r\n  if (state.flowing && !state.reading)\r\n    stream.read(0);\r\n}\r\n\r\nReadable.prototype.pause = function() {\r\n  debug('call pause flowing=%j', this._readableState.flowing);\r\n  if (this._readableState.flowing !== false) {\r\n    debug('pause');\r\n    this._readableState.flowing = false;\r\n    this.emit('pause');\r\n  }\r\n  this._readableState.paused = true;\r\n  return this;\r\n};\r\n\r\nfunction flow(stream) {\r\n  const state = stream._readableState;\r\n  debug('flow', state.flowing);\r\n  while (state.flowing && stream.read() !== null);\r\n}\r\n\r\n// Wrap an old-style stream as the async data source.\r\n// This is *not* part of the readable stream interface.\r\n// It is an ugly unfortunate mess of history.\r\nReadable.prototype.wrap = function(stream) {\r\n  const state = this._readableState;\r\n  var paused = false;\r\n\r\n  stream.on('end', () => {\r\n    debug('wrapped end');\r\n    if (state.decoder && !state.ended) {\r\n      var chunk = state.decoder.end();\r\n      if (chunk && chunk.length)\r\n        this.push(chunk);\r\n    }\r\n\r\n    this.push(null);\r\n  });\r\n\r\n  stream.on('data', (chunk) => {\r\n    debug('wrapped data');\r\n    if (state.decoder)\r\n      chunk = state.decoder.write(chunk);\r\n\r\n    // Don't skip over falsy values in objectMode\r\n    if (state.objectMode && (chunk === null || chunk === undefined))\r\n      return;\r\n    else if (!state.objectMode && (!chunk || !chunk.length))\r\n      return;\r\n\r\n    const ret = this.push(chunk);\r\n    if (!ret) {\r\n      paused = true;\r\n      stream.pause();\r\n    }\r\n  });\r\n\r\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\r\n  for (const i in stream) {\r\n    if (this[i] === undefined && typeof stream[i] === 'function') {\r\n      this[i] = function methodWrap(method) {\r\n        return function methodWrapReturnFunction() {\r\n          return stream[method].apply(stream, arguments);\r\n        };\r\n      }(i);\r\n    }\r\n  }\r\n\r\n  // Proxy certain important events.\r\n  for (var n = 0; n < kProxyEvents.length; n++) {\r\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\r\n  }\r\n\r\n  // When we try to consume some more bytes, simply unpause the\r\n  // underlying stream.\r\n  this._read = (n) => {\r\n    debug('wrapped _read', n);\r\n    if (paused) {\r\n      paused = false;\r\n      stream.resume();\r\n    }\r\n  };\r\n\r\n  return this;\r\n};\r\n\r\nReadable.prototype[Symbol.asyncIterator] = function() {\r\n  if (createReadableStreamAsyncIterator === undefined) {\r\n    createReadableStreamAsyncIterator =\r\n      require('internal/streams/async_iterator');\r\n  }\r\n  return createReadableStreamAsyncIterator(this);\r\n};\r\n\r\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._readableState.highWaterMark;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._readableState && this._readableState.buffer;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._readableState.flowing;\r\n  },\r\n  set: function(state) {\r\n    if (this._readableState) {\r\n      this._readableState.flowing = state;\r\n    }\r\n  }\r\n});\r\n\r\n// Exposed for testing purposes only.\r\nReadable._fromList = fromList;\r\n\r\nObject.defineProperty(Readable.prototype, 'readableLength', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._readableState.length;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Readable.prototype, 'readableObjectMode', {\r\n  enumerable: false,\r\n  get() {\r\n    return this._readableState ? this._readableState.objectMode : false;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Readable.prototype, 'readableEncoding', {\r\n  enumerable: false,\r\n  get() {\r\n    return this._readableState ? this._readableState.encoding : null;\r\n  }\r\n});\r\n\r\n// Pluck off n bytes from an array of buffers.\r\n// Length is the combined lengths of all the buffers in the list.\r\n// This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\nfunction fromList(n, state) {\r\n  // nothing buffered\r\n  if (state.length === 0)\r\n    return null;\r\n\r\n  var ret;\r\n  if (state.objectMode)\r\n    ret = state.buffer.shift();\r\n  else if (!n || n >= state.length) {\r\n    // Read it all, truncate the list\r\n    if (state.decoder)\r\n      ret = state.buffer.join('');\r\n    else if (state.buffer.length === 1)\r\n      ret = state.buffer.first();\r\n    else\r\n      ret = state.buffer.concat(state.length);\r\n    state.buffer.clear();\r\n  } else {\r\n    // read part of list\r\n    ret = state.buffer.consume(n, state.decoder);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction endReadable(stream) {\r\n  const state = stream._readableState;\r\n\r\n  debug('endReadable', state.endEmitted);\r\n  if (!state.endEmitted) {\r\n    state.ended = true;\r\n    process.nextTick(endReadableNT, state, stream);\r\n  }\r\n}\r\n\r\nfunction endReadableNT(state, stream) {\r\n  debug('endReadableNT', state.endEmitted, state.length);\r\n\r\n  // Check that we didn't get one last unshift.\r\n  if (!state.endEmitted && state.length === 0) {\r\n    state.endEmitted = true;\r\n    stream.readable = false;\r\n    stream.emit('end');\r\n\r\n    if (state.autoDestroy) {\r\n      // In case of duplex streams we need a way to detect\r\n      // if the writable side is ready for autoDestroy as well\r\n      const wState = stream._writableState;\r\n      if (!wState || (wState.autoDestroy && wState.finished)) {\r\n        stream.destroy();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nReadable.from = function(iterable, opts) {\r\n  let iterator;\r\n  if (iterable && iterable[Symbol.asyncIterator])\r\n    iterator = iterable[Symbol.asyncIterator]();\r\n  else if (iterable && iterable[Symbol.iterator])\r\n    iterator = iterable[Symbol.iterator]();\r\n  else\r\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);\r\n\r\n  const readable = new Readable({\r\n    objectMode: true,\r\n    ...opts\r\n  });\r\n  // Reading boolean to protect against _read\r\n  // being called before last iteration completion.\r\n  let reading = false;\r\n  readable._read = function() {\r\n    if (!reading) {\r\n      reading = true;\r\n      next();\r\n    }\r\n  };\r\n  async function next() {\r\n    try {\r\n      const { value, done } = await iterator.next();\r\n      if (done) {\r\n        readable.push(null);\r\n      } else if (readable.push(await value)) {\r\n        next();\r\n      } else {\r\n        reading = false;\r\n      }\r\n    } catch (err) {\r\n      readable.destroy(err);\r\n    }\r\n  }\r\n  return readable;\r\n};\r\n"
  },
  {
    "name": "stream.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nconst { Buffer } = require('buffer');\r\nconst pipeline = require('internal/streams/pipeline');\r\nconst eos = require('internal/streams/end-of-stream');\r\n\r\n// Note: export Stream before Readable/Writable/Duplex/...\r\n// to avoid a cross-reference(require) issues\r\nconst Stream = module.exports = require('internal/streams/legacy');\r\n\r\nStream.Readable = require('_stream_readable');\r\nStream.Writable = require('_stream_writable');\r\nStream.Duplex = require('_stream_duplex');\r\nStream.Transform = require('_stream_transform');\r\nStream.PassThrough = require('_stream_passthrough');\r\n\r\nStream.pipeline = pipeline;\r\nStream.finished = eos;\r\n\r\n// Backwards-compat with node 0.4.x\r\nStream.Stream = Stream;\r\n\r\nStream._isUint8Array = require('internal/util/types').isUint8Array;\r\n\r\nconst version = process.version.substr(1).split('.');\r\nif (version[0] === 0 && version[1] < 12) {\r\n  Stream._uint8ArrayToBuffer = Buffer;\r\n} else {\r\n  try {\r\n    const internalBuffer = require('internal/buffer');\r\n    Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\r\n      return new internalBuffer.FastBuffer(chunk.buffer,\r\n                                           chunk.byteOffset,\r\n                                           chunk.byteLength);\r\n    };\r\n  } catch (e) { // eslint-disable-line no-unused-vars\r\n  }\r\n\r\n  if (!Stream._uint8ArrayToBuffer) {\r\n    Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\r\n      return Buffer.prototype.slice.call(chunk);\r\n    };\r\n  }\r\n}\r\n"
  },
  {
    "name": "internal/streams/pipeline.js",
    "source": "// Ported from https://github.com/mafintosh/pump with\r\n// permission from the author, Mathias Buus (@mafintosh).\r\n\r\n'use strict';\r\n\r\nlet eos;\r\n\r\nconst { once } = require('internal/util');\r\nconst {\r\n  ERR_INVALID_CALLBACK,\r\n  ERR_MISSING_ARGS,\r\n  ERR_STREAM_DESTROYED\r\n} = require('internal/errors').codes;\r\n\r\nfunction isRequest(stream) {\r\n  return stream.setHeader && typeof stream.abort === 'function';\r\n}\r\n\r\nfunction destroyer(stream, reading, writing, callback) {\r\n  callback = once(callback);\r\n\r\n  let closed = false;\r\n  stream.on('close', () => {\r\n    closed = true;\r\n  });\r\n\r\n  if (eos === undefined) eos = require('internal/streams/end-of-stream');\r\n  eos(stream, { readable: reading, writable: writing }, (err) => {\r\n    if (err) return callback(err);\r\n    closed = true;\r\n    callback();\r\n  });\r\n\r\n  let destroyed = false;\r\n  return (err) => {\r\n    if (closed) return;\r\n    if (destroyed) return;\r\n    destroyed = true;\r\n\r\n    // request.destroy just do .end - .abort is what we want\r\n    if (isRequest(stream)) return stream.abort();\r\n    if (typeof stream.destroy === 'function') return stream.destroy();\r\n\r\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\r\n  };\r\n}\r\n\r\nfunction call(fn) {\r\n  fn();\r\n}\r\n\r\nfunction pipe(from, to) {\r\n  return from.pipe(to);\r\n}\r\n\r\nfunction popCallback(streams) {\r\n  // Streams should never be an empty array. It should always contain at least\r\n  // a single stream. Therefore optimize for the average case instead of\r\n  // checking for length === 0 as well.\r\n  if (typeof streams[streams.length - 1] !== 'function')\r\n    throw new ERR_INVALID_CALLBACK(streams[streams.length - 1]);\r\n  return streams.pop();\r\n}\r\n\r\nfunction pipeline(...streams) {\r\n  const callback = popCallback(streams);\r\n\r\n  if (Array.isArray(streams[0])) streams = streams[0];\r\n\r\n  if (streams.length < 2) {\r\n    throw new ERR_MISSING_ARGS('streams');\r\n  }\r\n\r\n  let error;\r\n  const destroys = streams.map(function(stream, i) {\r\n    const reading = i < streams.length - 1;\r\n    const writing = i > 0;\r\n    return destroyer(stream, reading, writing, function(err) {\r\n      if (!error) error = err;\r\n      if (err) destroys.forEach(call);\r\n      if (reading) return;\r\n      destroys.forEach(call);\r\n      callback(error);\r\n    });\r\n  });\r\n\r\n  return streams.reduce(pipe);\r\n}\r\n\r\nmodule.exports = pipeline;\r\n"
  },
  {
    "name": "internal/streams/end-of-stream.js",
    "source": "// Ported from https://github.com/mafintosh/end-of-stream with\r\n// permission from the author, Mathias Buus (@mafintosh).\r\n\r\n'use strict';\r\n\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_STREAM_PREMATURE_CLOSE\r\n} = require('internal/errors').codes;\r\nconst { once } = require('internal/util');\r\n\r\nfunction isRequest(stream) {\r\n  return stream.setHeader && typeof stream.abort === 'function';\r\n}\r\n\r\nfunction eos(stream, opts, callback) {\r\n  if (arguments.length === 2) {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts == null) {\r\n    opts = {};\r\n  } else if (typeof opts !== 'object') {\r\n    throw new ERR_INVALID_ARG_TYPE('opts', 'object', opts);\r\n  }\r\n  if (typeof callback !== 'function') {\r\n    throw new ERR_INVALID_ARG_TYPE('callback', 'function', callback);\r\n  }\r\n\r\n  callback = once(callback);\r\n\r\n  let readable = opts.readable || (opts.readable !== false && stream.readable);\r\n  let writable = opts.writable || (opts.writable !== false && stream.writable);\r\n\r\n  const onlegacyfinish = () => {\r\n    if (!stream.writable) onfinish();\r\n  };\r\n\r\n  var writableEnded = stream._writableState && stream._writableState.finished;\r\n  const onfinish = () => {\r\n    writable = false;\r\n    writableEnded = true;\r\n    if (!readable) callback.call(stream);\r\n  };\r\n\r\n  var readableEnded = stream.readableEnded ||\r\n    (stream._readableState && stream._readableState.endEmitted);\r\n  const onend = () => {\r\n    readable = false;\r\n    readableEnded = true;\r\n    if (!writable) callback.call(stream);\r\n  };\r\n\r\n  const onerror = (err) => {\r\n    callback.call(stream, err);\r\n  };\r\n\r\n  const onclose = () => {\r\n    let err;\r\n    if (readable && !readableEnded) {\r\n      if (!stream._readableState || !stream._readableState.ended)\r\n        err = new ERR_STREAM_PREMATURE_CLOSE();\r\n      return callback.call(stream, err);\r\n    }\r\n    if (writable && !writableEnded) {\r\n      if (!stream._writableState || !stream._writableState.ended)\r\n        err = new ERR_STREAM_PREMATURE_CLOSE();\r\n      return callback.call(stream, err);\r\n    }\r\n  };\r\n\r\n  const onrequest = () => {\r\n    stream.req.on('finish', onfinish);\r\n  };\r\n\r\n  if (isRequest(stream)) {\r\n    stream.on('complete', onfinish);\r\n    stream.on('abort', onclose);\r\n    if (stream.req) onrequest();\r\n    else stream.on('request', onrequest);\r\n  } else if (writable && !stream._writableState) { // legacy streams\r\n    stream.on('end', onlegacyfinish);\r\n    stream.on('close', onlegacyfinish);\r\n  }\r\n\r\n  // Not all streams will emit 'close' after 'aborted'.\r\n  if (typeof stream.aborted === 'boolean') {\r\n    stream.on('aborted', onclose);\r\n  }\r\n\r\n  stream.on('end', onend);\r\n  stream.on('finish', onfinish);\r\n  if (opts.error !== false) stream.on('error', onerror);\r\n  stream.on('close', onclose);\r\n\r\n  return function() {\r\n    stream.removeListener('aborted', onclose);\r\n    stream.removeListener('complete', onfinish);\r\n    stream.removeListener('abort', onclose);\r\n    stream.removeListener('request', onrequest);\r\n    if (stream.req) stream.req.removeListener('finish', onfinish);\r\n    stream.removeListener('end', onlegacyfinish);\r\n    stream.removeListener('close', onlegacyfinish);\r\n    stream.removeListener('finish', onfinish);\r\n    stream.removeListener('end', onend);\r\n    stream.removeListener('error', onerror);\r\n    stream.removeListener('close', onclose);\r\n  };\r\n}\r\n\r\nmodule.exports = eos;\r\n"
  },
  {
    "name": "internal/streams/legacy.js",
    "source": "'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nconst EE = require('events');\r\n\r\nfunction Stream() {\r\n  EE.call(this);\r\n}\r\nObject.setPrototypeOf(Stream.prototype, EE.prototype);\r\nObject.setPrototypeOf(Stream, EE);\r\n\r\nStream.prototype.pipe = function(dest, options) {\r\n  const source = this;\r\n\r\n  function ondata(chunk) {\r\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\r\n      source.pause();\r\n    }\r\n  }\r\n\r\n  source.on('data', ondata);\r\n\r\n  function ondrain() {\r\n    if (source.readable && source.resume) {\r\n      source.resume();\r\n    }\r\n  }\r\n\r\n  dest.on('drain', ondrain);\r\n\r\n  // If the 'end' option is not supplied, dest.end() will be called when\r\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\r\n  if (!dest._isStdio && (!options || options.end !== false)) {\r\n    source.on('end', onend);\r\n    source.on('close', onclose);\r\n  }\r\n\r\n  var didOnEnd = false;\r\n  function onend() {\r\n    if (didOnEnd) return;\r\n    didOnEnd = true;\r\n\r\n    dest.end();\r\n  }\r\n\r\n\r\n  function onclose() {\r\n    if (didOnEnd) return;\r\n    didOnEnd = true;\r\n\r\n    if (typeof dest.destroy === 'function') dest.destroy();\r\n  }\r\n\r\n  // Don't leave dangling pipes when there are errors.\r\n  function onerror(er) {\r\n    cleanup();\r\n    if (EE.listenerCount(this, 'error') === 0) {\r\n      throw er; // Unhandled stream error in pipe.\r\n    }\r\n  }\r\n\r\n  source.on('error', onerror);\r\n  dest.on('error', onerror);\r\n\r\n  // Remove all the event listeners that were added.\r\n  function cleanup() {\r\n    source.removeListener('data', ondata);\r\n    dest.removeListener('drain', ondrain);\r\n\r\n    source.removeListener('end', onend);\r\n    source.removeListener('close', onclose);\r\n\r\n    source.removeListener('error', onerror);\r\n    dest.removeListener('error', onerror);\r\n\r\n    source.removeListener('end', cleanup);\r\n    source.removeListener('close', cleanup);\r\n\r\n    dest.removeListener('close', cleanup);\r\n  }\r\n\r\n  source.on('end', cleanup);\r\n  source.on('close', cleanup);\r\n\r\n  dest.on('close', cleanup);\r\n  dest.emit('pipe', source);\r\n\r\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\r\n  return dest;\r\n};\r\n\r\nmodule.exports = Stream;\r\n"
  },
  {
    "name": "_stream_writable.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// A bit simpler than readable streams.\r\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\r\n// the drain event emission and buffering.\r\n\r\n'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nmodule.exports = Writable;\r\nWritable.WritableState = WritableState;\r\n\r\nconst internalUtil = require('internal/util');\r\nconst Stream = require('stream');\r\nconst { Buffer } = require('buffer');\r\nconst destroyImpl = require('internal/streams/destroy');\r\nconst {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark\r\n} = require('internal/streams/state');\r\nconst {\r\n  ERR_INVALID_ARG_TYPE,\r\n  ERR_METHOD_NOT_IMPLEMENTED,\r\n  ERR_MULTIPLE_CALLBACK,\r\n  ERR_STREAM_CANNOT_PIPE,\r\n  ERR_STREAM_DESTROYED,\r\n  ERR_STREAM_NULL_VALUES,\r\n  ERR_STREAM_WRITE_AFTER_END,\r\n  ERR_UNKNOWN_ENCODING\r\n} = require('internal/errors').codes;\r\n\r\nconst { errorOrDestroy } = destroyImpl;\r\n\r\nObject.setPrototypeOf(Writable.prototype, Stream.prototype);\r\nObject.setPrototypeOf(Writable, Stream);\r\n\r\nfunction nop() {}\r\n\r\nfunction WritableState(options, stream, isDuplex) {\r\n  // Duplex streams are both readable and writable, but share\r\n  // the same options object.\r\n  // However, some cases require setting options to different\r\n  // values for the readable and the writable sides of the duplex stream,\r\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\r\n  if (typeof isDuplex !== 'boolean')\r\n    isDuplex = stream instanceof Stream.Duplex;\r\n\r\n  // Object stream flag to indicate whether or not this stream\r\n  // contains buffers or objects.\r\n  this.objectMode = !!(options && options.objectMode);\r\n\r\n  if (isDuplex)\r\n    this.objectMode = this.objectMode ||\r\n      !!(options && options.writableObjectMode);\r\n\r\n  // The point at which write() starts returning false\r\n  // Note: 0 is a valid value, means that we always return false if\r\n  // the entire buffer is not flushed immediately on write()\r\n  this.highWaterMark = options ?\r\n    getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex) :\r\n    getDefaultHighWaterMark(false);\r\n\r\n  // if _final has been called\r\n  this.finalCalled = false;\r\n\r\n  // drain event flag.\r\n  this.needDrain = false;\r\n  // At the start of calling end()\r\n  this.ending = false;\r\n  // When end() has been called, and returned\r\n  this.ended = false;\r\n  // When 'finish' is emitted\r\n  this.finished = false;\r\n\r\n  // Has it been destroyed\r\n  this.destroyed = false;\r\n\r\n  // Should we decode strings into buffers before passing to _write?\r\n  // this is here so that some node-core streams can optimize string\r\n  // handling at a lower level.\r\n  const noDecode = !!(options && options.decodeStrings === false);\r\n  this.decodeStrings = !noDecode;\r\n\r\n  // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\r\n\r\n  // Not an actual buffer we keep track of, but a measurement\r\n  // of how much we're waiting to get pushed to some underlying\r\n  // socket or file.\r\n  this.length = 0;\r\n\r\n  // A flag to see when we're in the middle of a write.\r\n  this.writing = false;\r\n\r\n  // When true all writes will be buffered until .uncork() call\r\n  this.corked = 0;\r\n\r\n  // A flag to be able to tell if the onwrite cb is called immediately,\r\n  // or on a later tick.  We set this to true at first, because any\r\n  // actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first write call.\r\n  this.sync = true;\r\n\r\n  // A flag to know if we're processing previously buffered items, which\r\n  // may call the _write() callback in the same tick, so that we don't\r\n  // end up in an overlapped onwrite situation.\r\n  this.bufferProcessing = false;\r\n\r\n  // The callback that's passed to _write(chunk,cb)\r\n  this.onwrite = onwrite.bind(undefined, stream);\r\n\r\n  // The callback that the user supplies to write(chunk,encoding,cb)\r\n  this.writecb = null;\r\n\r\n  // The amount that is being written when _write is called.\r\n  this.writelen = 0;\r\n\r\n  this.bufferedRequest = null;\r\n  this.lastBufferedRequest = null;\r\n\r\n  // Number of pending user-supplied write callbacks\r\n  // this must be 0 before 'finish' can be emitted\r\n  this.pendingcb = 0;\r\n\r\n  // Emit prefinish if the only thing we're waiting for is _write cbs\r\n  // This is relevant for synchronous Transform streams\r\n  this.prefinished = false;\r\n\r\n  // True if the error was already emitted and should not be thrown again\r\n  this.errorEmitted = false;\r\n\r\n  // Should close be emitted on destroy. Defaults to true.\r\n  this.emitClose = !options || options.emitClose !== false;\r\n\r\n  // Should .destroy() be called after 'finish' (and potentially 'end')\r\n  this.autoDestroy = !!(options && options.autoDestroy);\r\n\r\n  // Count buffered requests\r\n  this.bufferedRequestCount = 0;\r\n\r\n  // Allocate the first CorkedRequest, there is always\r\n  // one allocated and free to use, and we maintain at most two\r\n  const corkReq = { next: null, entry: null, finish: undefined };\r\n  corkReq.finish = onCorkedFinish.bind(undefined, corkReq, this);\r\n  this.corkedRequestsFree = corkReq;\r\n}\r\n\r\nWritableState.prototype.getBuffer = function getBuffer() {\r\n  var current = this.bufferedRequest;\r\n  const out = [];\r\n  while (current) {\r\n    out.push(current);\r\n    current = current.next;\r\n  }\r\n  return out;\r\n};\r\n\r\nObject.defineProperty(WritableState.prototype, 'buffer', {\r\n  get: internalUtil.deprecate(function writableStateBufferGetter() {\r\n    return this.getBuffer();\r\n  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +\r\n     'instead.', 'DEP0003')\r\n});\r\n\r\n// Test _writableState for inheritance to account for Duplex streams,\r\n// whose prototype chain only points to Readable.\r\nvar realHasInstance;\r\nif (typeof Symbol === 'function' && Symbol.hasInstance) {\r\n  realHasInstance = Function.prototype[Symbol.hasInstance];\r\n  Object.defineProperty(Writable, Symbol.hasInstance, {\r\n    value: function(object) {\r\n      if (realHasInstance.call(this, object))\r\n        return true;\r\n      if (this !== Writable)\r\n        return false;\r\n\r\n      return object && object._writableState instanceof WritableState;\r\n    }\r\n  });\r\n} else {\r\n  realHasInstance = function(object) {\r\n    return object instanceof this;\r\n  };\r\n}\r\n\r\nfunction Writable(options) {\r\n  // Writable ctor is applied to Duplexes, too.\r\n  // `realHasInstance` is necessary because using plain `instanceof`\r\n  // would return false, as no `_writableState` property is attached.\r\n\r\n  // Trying to use the custom `instanceof` for Writable here will also break the\r\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\r\n  // `_writableState` that would lead to infinite recursion.\r\n\r\n  // Checking for a Stream.Duplex instance is faster here instead of inside\r\n  // the WritableState constructor, at least with V8 6.5\r\n  const isDuplex = (this instanceof Stream.Duplex);\r\n\r\n  if (!isDuplex && !realHasInstance.call(Writable, this))\r\n    return new Writable(options);\r\n\r\n  this._writableState = new WritableState(options, this, isDuplex);\r\n\r\n  // legacy.\r\n  this.writable = true;\r\n\r\n  if (options) {\r\n    if (typeof options.write === 'function')\r\n      this._write = options.write;\r\n\r\n    if (typeof options.writev === 'function')\r\n      this._writev = options.writev;\r\n\r\n    if (typeof options.destroy === 'function')\r\n      this._destroy = options.destroy;\r\n\r\n    if (typeof options.final === 'function')\r\n      this._final = options.final;\r\n  }\r\n\r\n  Stream.call(this);\r\n}\r\n\r\n// Otherwise people can pipe Writable streams, which is just wrong.\r\nWritable.prototype.pipe = function() {\r\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\r\n};\r\n\r\n\r\nfunction writeAfterEnd(stream, cb) {\r\n  const er = new ERR_STREAM_WRITE_AFTER_END();\r\n  // TODO: defer error events consistently everywhere, not just the cb\r\n  errorOrDestroy(stream, er);\r\n  process.nextTick(cb, er);\r\n}\r\n\r\n// Checks that a user-supplied chunk is valid, especially for the particular\r\n// mode the stream is in. Currently this means that `null` is never accepted\r\n// and undefined/non-string values are only allowed in object mode.\r\nfunction validChunk(stream, state, chunk, cb) {\r\n  var er;\r\n\r\n  if (chunk === null) {\r\n    er = new ERR_STREAM_NULL_VALUES();\r\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\r\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\r\n  }\r\n  if (er) {\r\n    errorOrDestroy(stream, er);\r\n    process.nextTick(cb, er);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nWritable.prototype.write = function(chunk, encoding, cb) {\r\n  const state = this._writableState;\r\n  var ret = false;\r\n  const isBuf = !state.objectMode && Stream._isUint8Array(chunk);\r\n\r\n  // Do not use Object.getPrototypeOf as it is slower since V8 7.3.\r\n  if (isBuf && !(chunk instanceof Buffer)) {\r\n    chunk = Stream._uint8ArrayToBuffer(chunk);\r\n  }\r\n\r\n  if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (isBuf)\r\n    encoding = 'buffer';\r\n  else if (!encoding)\r\n    encoding = state.defaultEncoding;\r\n\r\n  if (typeof cb !== 'function')\r\n    cb = nop;\r\n\r\n  if (state.ending)\r\n    writeAfterEnd(this, cb);\r\n  else if (isBuf || validChunk(this, state, chunk, cb)) {\r\n    state.pendingcb++;\r\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nWritable.prototype.cork = function() {\r\n  this._writableState.corked++;\r\n};\r\n\r\nWritable.prototype.uncork = function() {\r\n  const state = this._writableState;\r\n\r\n  if (state.corked) {\r\n    state.corked--;\r\n\r\n    if (!state.writing &&\r\n        !state.corked &&\r\n        !state.bufferProcessing &&\r\n        state.bufferedRequest)\r\n      clearBuffer(this, state);\r\n  }\r\n};\r\n\r\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\r\n  // node::ParseEncoding() requires lower case.\r\n  if (typeof encoding === 'string')\r\n    encoding = encoding.toLowerCase();\r\n  if (!Buffer.isEncoding(encoding))\r\n    throw new ERR_UNKNOWN_ENCODING(encoding);\r\n  this._writableState.defaultEncoding = encoding;\r\n  return this;\r\n};\r\n\r\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._writableState && this._writableState.getBuffer();\r\n  }\r\n});\r\n\r\nfunction decodeChunk(state, chunk, encoding) {\r\n  if (!state.objectMode &&\r\n      state.decodeStrings !== false &&\r\n      typeof chunk === 'string') {\r\n    chunk = Buffer.from(chunk, encoding);\r\n  }\r\n  return chunk;\r\n}\r\n\r\nObject.defineProperty(Writable.prototype, 'writableEnded', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._writableState ? this._writableState.ending : false;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function() {\r\n    return this._writableState && this._writableState.highWaterMark;\r\n  }\r\n});\r\n\r\n// If we're already writing something, then just put this\r\n// in the queue, and wait our turn.  Otherwise, call _write\r\n// If we return false, then we need a drain event, so set that flag.\r\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\r\n  if (!isBuf) {\r\n    var newChunk = decodeChunk(state, chunk, encoding);\r\n    if (chunk !== newChunk) {\r\n      isBuf = true;\r\n      encoding = 'buffer';\r\n      chunk = newChunk;\r\n    }\r\n  }\r\n  const len = state.objectMode ? 1 : chunk.length;\r\n\r\n  state.length += len;\r\n\r\n  const ret = state.length < state.highWaterMark;\r\n  // We must ensure that previous needDrain will not be reset to false.\r\n  if (!ret)\r\n    state.needDrain = true;\r\n\r\n  if (state.writing || state.corked) {\r\n    var last = state.lastBufferedRequest;\r\n    state.lastBufferedRequest = {\r\n      chunk,\r\n      encoding,\r\n      isBuf,\r\n      callback: cb,\r\n      next: null\r\n    };\r\n    if (last) {\r\n      last.next = state.lastBufferedRequest;\r\n    } else {\r\n      state.bufferedRequest = state.lastBufferedRequest;\r\n    }\r\n    state.bufferedRequestCount += 1;\r\n  } else {\r\n    doWrite(stream, state, false, len, chunk, encoding, cb);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\r\n  state.writelen = len;\r\n  state.writecb = cb;\r\n  state.writing = true;\r\n  state.sync = true;\r\n  if (state.destroyed)\r\n    state.onwrite(new ERR_STREAM_DESTROYED('write'));\r\n  else if (writev)\r\n    stream._writev(chunk, state.onwrite);\r\n  else\r\n    stream._write(chunk, encoding, state.onwrite);\r\n  state.sync = false;\r\n}\r\n\r\nfunction onwriteError(stream, state, sync, er, cb) {\r\n  --state.pendingcb;\r\n\r\n  if (sync) {\r\n    // Defer the callback if we are being called synchronously\r\n    // to avoid piling up things on the stack\r\n    process.nextTick(cb, er);\r\n    // This can emit finish, and it will always happen\r\n    // after error\r\n    process.nextTick(finishMaybe, stream, state);\r\n    stream._writableState.errorEmitted = true;\r\n    errorOrDestroy(stream, er);\r\n  } else {\r\n    // The caller expect this to happen before if\r\n    // it is async\r\n    cb(er);\r\n    stream._writableState.errorEmitted = true;\r\n    errorOrDestroy(stream, er);\r\n    // This can emit finish, but finish must\r\n    // always follow error\r\n    finishMaybe(stream, state);\r\n  }\r\n}\r\n\r\nfunction onwrite(stream, er) {\r\n  const state = stream._writableState;\r\n  const sync = state.sync;\r\n  const cb = state.writecb;\r\n\r\n  if (typeof cb !== 'function')\r\n    throw new ERR_MULTIPLE_CALLBACK();\r\n\r\n  state.writing = false;\r\n  state.writecb = null;\r\n  state.length -= state.writelen;\r\n  state.writelen = 0;\r\n\r\n  if (er)\r\n    onwriteError(stream, state, sync, er, cb);\r\n  else {\r\n    // Check if we're actually ready to finish, but don't emit yet\r\n    var finished = needFinish(state) || stream.destroyed;\r\n\r\n    if (!finished &&\r\n        !state.corked &&\r\n        !state.bufferProcessing &&\r\n        state.bufferedRequest) {\r\n      clearBuffer(stream, state);\r\n    }\r\n\r\n    if (sync) {\r\n      process.nextTick(afterWrite, stream, state, cb);\r\n    } else {\r\n      afterWrite(stream, state, cb);\r\n    }\r\n  }\r\n}\r\n\r\nfunction afterWrite(stream, state, cb) {\r\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 &&\r\n    state.needDrain;\r\n  if (needDrain) {\r\n    state.needDrain = false;\r\n    stream.emit('drain');\r\n  }\r\n  state.pendingcb--;\r\n  cb();\r\n  finishMaybe(stream, state);\r\n}\r\n\r\n// If there's something in the buffer waiting, then process it\r\nfunction clearBuffer(stream, state) {\r\n  state.bufferProcessing = true;\r\n  var entry = state.bufferedRequest;\r\n\r\n  if (stream._writev && entry && entry.next) {\r\n    // Fast case, write everything using _writev()\r\n    var l = state.bufferedRequestCount;\r\n    var buffer = new Array(l);\r\n    var holder = state.corkedRequestsFree;\r\n    holder.entry = entry;\r\n\r\n    var count = 0;\r\n    var allBuffers = true;\r\n    while (entry) {\r\n      buffer[count] = entry;\r\n      if (!entry.isBuf)\r\n        allBuffers = false;\r\n      entry = entry.next;\r\n      count += 1;\r\n    }\r\n    buffer.allBuffers = allBuffers;\r\n\r\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\r\n\r\n    // doWrite is almost always async, defer these to save a bit of time\r\n    // as the hot path ends with doWrite\r\n    state.pendingcb++;\r\n    state.lastBufferedRequest = null;\r\n    if (holder.next) {\r\n      state.corkedRequestsFree = holder.next;\r\n      holder.next = null;\r\n    } else {\r\n      var corkReq = { next: null, entry: null, finish: undefined };\r\n      corkReq.finish = onCorkedFinish.bind(undefined, corkReq, state);\r\n      state.corkedRequestsFree = corkReq;\r\n    }\r\n    state.bufferedRequestCount = 0;\r\n  } else {\r\n    // Slow case, write chunks one-by-one\r\n    while (entry) {\r\n      var chunk = entry.chunk;\r\n      var encoding = entry.encoding;\r\n      var cb = entry.callback;\r\n      var len = state.objectMode ? 1 : chunk.length;\r\n\r\n      doWrite(stream, state, false, len, chunk, encoding, cb);\r\n      entry = entry.next;\r\n      state.bufferedRequestCount--;\r\n      // If we didn't call the onwrite immediately, then\r\n      // it means that we need to wait until it does.\r\n      // also, that means that the chunk and cb are currently\r\n      // being processed, so move the buffer counter past them.\r\n      if (state.writing) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (entry === null)\r\n      state.lastBufferedRequest = null;\r\n  }\r\n\r\n  state.bufferedRequest = entry;\r\n  state.bufferProcessing = false;\r\n}\r\n\r\nWritable.prototype._write = function(chunk, encoding, cb) {\r\n  if (this._writev) {\r\n    this._writev([{ chunk, encoding }], cb);\r\n  } else {\r\n    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\r\n  }\r\n};\r\n\r\nWritable.prototype._writev = null;\r\n\r\nWritable.prototype.end = function(chunk, encoding, cb) {\r\n  const state = this._writableState;\r\n\r\n  if (typeof chunk === 'function') {\r\n    cb = chunk;\r\n    chunk = null;\r\n    encoding = null;\r\n  } else if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (chunk !== null && chunk !== undefined)\r\n    this.write(chunk, encoding);\r\n\r\n  // .end() fully uncorks\r\n  if (state.corked) {\r\n    state.corked = 1;\r\n    this.uncork();\r\n  }\r\n\r\n  // Ignore unnecessary end() calls.\r\n  if (!state.ending)\r\n    endWritable(this, state, cb);\r\n\r\n  return this;\r\n};\r\n\r\nObject.defineProperty(Writable.prototype, 'writableLength', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState.length;\r\n  }\r\n});\r\n\r\nfunction needFinish(state) {\r\n  return (state.ending &&\r\n          state.length === 0 &&\r\n          state.bufferedRequest === null &&\r\n          !state.finished &&\r\n          !state.writing);\r\n}\r\nfunction callFinal(stream, state) {\r\n  stream._final((err) => {\r\n    state.pendingcb--;\r\n    if (err) {\r\n      errorOrDestroy(stream, err);\r\n    }\r\n    state.prefinished = true;\r\n    stream.emit('prefinish');\r\n    finishMaybe(stream, state);\r\n  });\r\n}\r\nfunction prefinish(stream, state) {\r\n  if (!state.prefinished && !state.finalCalled) {\r\n    if (typeof stream._final === 'function' && !state.destroyed) {\r\n      state.pendingcb++;\r\n      state.finalCalled = true;\r\n      process.nextTick(callFinal, stream, state);\r\n    } else {\r\n      state.prefinished = true;\r\n      stream.emit('prefinish');\r\n    }\r\n  }\r\n}\r\n\r\nfunction finishMaybe(stream, state) {\r\n  const need = needFinish(state);\r\n  if (need) {\r\n    prefinish(stream, state);\r\n    if (state.pendingcb === 0) {\r\n      state.finished = true;\r\n      stream.emit('finish');\r\n\r\n      if (state.autoDestroy) {\r\n        // In case of duplex streams we need a way to detect\r\n        // if the readable side is ready for autoDestroy as well\r\n        const rState = stream._readableState;\r\n        if (!rState || (rState.autoDestroy && rState.endEmitted)) {\r\n          stream.destroy();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return need;\r\n}\r\n\r\nfunction endWritable(stream, state, cb) {\r\n  state.ending = true;\r\n  finishMaybe(stream, state);\r\n  if (cb) {\r\n    if (state.finished)\r\n      process.nextTick(cb);\r\n    else\r\n      stream.once('finish', cb);\r\n  }\r\n  state.ended = true;\r\n  stream.writable = false;\r\n}\r\n\r\nfunction onCorkedFinish(corkReq, state, err) {\r\n  var entry = corkReq.entry;\r\n  corkReq.entry = null;\r\n  while (entry) {\r\n    var cb = entry.callback;\r\n    state.pendingcb--;\r\n    cb(err);\r\n    entry = entry.next;\r\n  }\r\n\r\n  // Reuse the free corkReq.\r\n  state.corkedRequestsFree.next = corkReq;\r\n}\r\n\r\nObject.defineProperty(Writable.prototype, 'destroyed', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    if (this._writableState === undefined) {\r\n      return false;\r\n    }\r\n    return this._writableState.destroyed;\r\n  },\r\n  set(value) {\r\n    // We ignore the value if the stream\r\n    // has not been initialized yet\r\n    if (!this._writableState) {\r\n      return;\r\n    }\r\n\r\n    // Backward compatibility, the user is explicitly\r\n    // managing destroyed\r\n    this._writableState.destroyed = value;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Writable.prototype, 'writableObjectMode', {\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState ? this._writableState.objectMode : false;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Writable.prototype, 'writableFinished', {\r\n  // Making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get() {\r\n    return this._writableState ? this._writableState.finished : false;\r\n  }\r\n});\r\n\r\nWritable.prototype.destroy = destroyImpl.destroy;\r\nWritable.prototype._undestroy = destroyImpl.undestroy;\r\nWritable.prototype._destroy = function(err, cb) {\r\n  cb(err);\r\n};\r\n"
  },
  {
    "name": "internal/streams/destroy.js",
    "source": "'use strict';\r\n\r\n// Undocumented cb() API, needed for core, not for public API.\r\n// The cb() will be invoked synchronously if _destroy is synchronous.\r\nfunction destroy(err, cb) {\r\n  const readableDestroyed = this._readableState &&\r\n    this._readableState.destroyed;\r\n  const writableDestroyed = this._writableState &&\r\n    this._writableState.destroyed;\r\n\r\n  if (readableDestroyed || writableDestroyed) {\r\n    if (cb) {\r\n      cb(err);\r\n    } else if (err) {\r\n      if (!this._writableState) {\r\n        process.nextTick(emitErrorNT, this, err);\r\n      } else if (!this._writableState.errorEmitted) {\r\n        this._writableState.errorEmitted = true;\r\n        process.nextTick(emitErrorNT, this, err);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  // We set destroyed to true before firing error callbacks in order\r\n  // to make it re-entrance safe in case destroy() is called within callbacks\r\n\r\n  if (this._readableState) {\r\n    this._readableState.destroyed = true;\r\n  }\r\n\r\n  // If this is a duplex stream mark the writable part as destroyed as well\r\n  if (this._writableState) {\r\n    this._writableState.destroyed = true;\r\n  }\r\n\r\n  this._destroy(err || null, (err) => {\r\n    if (!cb && err) {\r\n      if (!this._writableState) {\r\n        process.nextTick(emitErrorAndCloseNT, this, err);\r\n      } else if (!this._writableState.errorEmitted) {\r\n        this._writableState.errorEmitted = true;\r\n        process.nextTick(emitErrorAndCloseNT, this, err);\r\n      } else {\r\n        process.nextTick(emitCloseNT, this);\r\n      }\r\n    } else if (cb) {\r\n      process.nextTick(emitCloseNT, this);\r\n      cb(err);\r\n    } else {\r\n      process.nextTick(emitCloseNT, this);\r\n    }\r\n  });\r\n\r\n  return this;\r\n}\r\n\r\nfunction emitErrorAndCloseNT(self, err) {\r\n  emitErrorNT(self, err);\r\n  emitCloseNT(self);\r\n}\r\n\r\nfunction emitCloseNT(self) {\r\n  if (self._writableState && !self._writableState.emitClose)\r\n    return;\r\n  if (self._readableState && !self._readableState.emitClose)\r\n    return;\r\n  self.emit('close');\r\n}\r\n\r\nfunction undestroy() {\r\n  if (this._readableState) {\r\n    this._readableState.destroyed = false;\r\n    this._readableState.reading = false;\r\n    this._readableState.ended = false;\r\n    this._readableState.endEmitted = false;\r\n  }\r\n\r\n  if (this._writableState) {\r\n    this._writableState.destroyed = false;\r\n    this._writableState.ended = false;\r\n    this._writableState.ending = false;\r\n    this._writableState.finalCalled = false;\r\n    this._writableState.prefinished = false;\r\n    this._writableState.finished = false;\r\n    this._writableState.errorEmitted = false;\r\n  }\r\n}\r\n\r\nfunction emitErrorNT(self, err) {\r\n  self.emit('error', err);\r\n}\r\n\r\nfunction errorOrDestroy(stream, err) {\r\n  // We have tests that rely on errors being emitted\r\n  // in the same tick, so changing this is semver major.\r\n  // For now when you opt-in to autoDestroy we allow\r\n  // the error to be emitted nextTick. In a future\r\n  // semver major update we should change the default to this.\r\n\r\n  const rState = stream._readableState;\r\n  const wState = stream._writableState;\r\n\r\n  if ((rState && rState.autoDestroy) || (wState && wState.autoDestroy))\r\n    stream.destroy(err);\r\n  else\r\n    stream.emit('error', err);\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  destroy,\r\n  undestroy,\r\n  errorOrDestroy\r\n};\r\n"
  },
  {
    "name": "internal/streams/state.js",
    "source": "'use strict';\r\n\r\nconst { Math } = primordials;\r\n\r\nconst { ERR_INVALID_OPT_VALUE } = require('internal/errors').codes;\r\n\r\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\r\n  return options.highWaterMark != null ? options.highWaterMark :\r\n    isDuplex ? options[duplexKey] : null;\r\n}\r\n\r\nfunction getDefaultHighWaterMark(objectMode) {\r\n  return objectMode ? 16 : 16 * 1024;\r\n}\r\n\r\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\r\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\r\n  if (hwm != null) {\r\n    if (!Number.isInteger(hwm) || hwm < 0) {\r\n      const name = isDuplex ? duplexKey : 'highWaterMark';\r\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\r\n    }\r\n    return Math.floor(hwm);\r\n  }\r\n\r\n  // Default value\r\n  return getDefaultHighWaterMark(state.objectMode);\r\n}\r\n\r\nmodule.exports = {\r\n  getHighWaterMark,\r\n  getDefaultHighWaterMark\r\n};\r\n"
  },
  {
    "name": "_stream_passthrough.js",
    "source": "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// a passthrough stream.\r\n// basically just the most minimal sort of Transform stream.\r\n// Every written chunk gets output as-is.\r\n\r\n'use strict';\r\n\r\nconst { Object } = primordials;\r\n\r\nmodule.exports = PassThrough;\r\n\r\nconst Transform = require('_stream_transform');\r\nObject.setPrototypeOf(PassThrough.prototype, Transform.prototype);\r\nObject.setPrototypeOf(PassThrough, Transform);\r\n\r\nfunction PassThrough(options) {\r\n  if (!(this instanceof PassThrough))\r\n    return new PassThrough(options);\r\n\r\n  Transform.call(this, options);\r\n}\r\n\r\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\r\n  cb(null, chunk);\r\n};\r\n"
  },
  {
    "name": "internal/streams/buffer_list.js",
    "source": "'use strict';\r\n\r\nconst { Buffer } = require('buffer');\r\nconst { inspect } = require('internal/util/inspect');\r\n\r\nmodule.exports = class BufferList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  push(v) {\r\n    const entry = { data: v, next: null };\r\n    if (this.length > 0)\r\n      this.tail.next = entry;\r\n    else\r\n      this.head = entry;\r\n    this.tail = entry;\r\n    ++this.length;\r\n  }\r\n\r\n  unshift(v) {\r\n    const entry = { data: v, next: this.head };\r\n    if (this.length === 0)\r\n      this.tail = entry;\r\n    this.head = entry;\r\n    ++this.length;\r\n  }\r\n\r\n  shift() {\r\n    if (this.length === 0)\r\n      return;\r\n    const ret = this.head.data;\r\n    if (this.length === 1)\r\n      this.head = this.tail = null;\r\n    else\r\n      this.head = this.head.next;\r\n    --this.length;\r\n    return ret;\r\n  }\r\n\r\n  clear() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  join(s) {\r\n    if (this.length === 0)\r\n      return '';\r\n    var p = this.head;\r\n    var ret = '' + p.data;\r\n    while (p = p.next)\r\n      ret += s + p.data;\r\n    return ret;\r\n  }\r\n\r\n  concat(n) {\r\n    if (this.length === 0)\r\n      return Buffer.alloc(0);\r\n    const ret = Buffer.allocUnsafe(n >>> 0);\r\n    var p = this.head;\r\n    var i = 0;\r\n    while (p) {\r\n      ret.set(p.data, i);\r\n      i += p.data.length;\r\n      p = p.next;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  // Consumes a specified amount of bytes or characters from the buffered data.\r\n  consume(n, hasStrings) {\r\n    const data = this.head.data;\r\n    if (n < data.length) {\r\n      // `slice` is the same for buffers and strings.\r\n      const slice = data.slice(0, n);\r\n      this.head.data = data.slice(n);\r\n      return slice;\r\n    }\r\n    if (n === data.length) {\r\n      // First chunk is a perfect match.\r\n      return this.shift();\r\n    }\r\n    // Result spans more than one buffer.\r\n    return hasStrings ? this._getString(n) : this._getBuffer(n);\r\n  }\r\n\r\n  first() {\r\n    return this.head.data;\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    for (let p = this.head; p; p = p.next) {\r\n      yield p.data;\r\n    }\r\n  }\r\n\r\n  // Consumes a specified amount of characters from the buffered data.\r\n  _getString(n) {\r\n    let ret = '';\r\n    let p = this.head;\r\n    let c = 0;\r\n    do {\r\n      const str = p.data;\r\n      if (n > str.length) {\r\n        ret += str;\r\n        n -= str.length;\r\n      } else {\r\n        if (n === str.length) {\r\n          ret += str;\r\n          ++c;\r\n          if (p.next)\r\n            this.head = p.next;\r\n          else\r\n            this.head = this.tail = null;\r\n        } else {\r\n          ret += str.slice(0, n);\r\n          this.head = p;\r\n          p.data = str.slice(n);\r\n        }\r\n        break;\r\n      }\r\n      ++c;\r\n    } while (p = p.next);\r\n    this.length -= c;\r\n    return ret;\r\n  }\r\n\r\n  // Consumes a specified amount of bytes from the buffered data.\r\n  _getBuffer(n) {\r\n    const ret = Buffer.allocUnsafe(n);\r\n    const retLen = n;\r\n    let p = this.head;\r\n    let c = 0;\r\n    do {\r\n      const buf = p.data;\r\n      if (n > buf.length) {\r\n        ret.set(buf, retLen - n);\r\n        n -= buf.length;\r\n      } else {\r\n        if (n === buf.length) {\r\n          ret.set(buf, retLen - n);\r\n          ++c;\r\n          if (p.next)\r\n            this.head = p.next;\r\n          else\r\n            this.head = this.tail = null;\r\n        } else {\r\n          ret.set(new Uint8Array(buf.buffer, buf.byteOffset, n), retLen - n);\r\n          this.head = p;\r\n          p.data = buf.slice(n);\r\n        }\r\n        break;\r\n      }\r\n      ++c;\r\n    } while (p = p.next);\r\n    this.length -= c;\r\n    return ret;\r\n  }\r\n\r\n  // Make sure the linked list only shows the minimal necessary information.\r\n  [inspect.custom](_, options) {\r\n    return inspect(this, {\r\n      ...options,\r\n      // Only inspect one level.\r\n      depth: 0,\r\n      // It should not recurse.\r\n      customInspect: false\r\n    });\r\n  }\r\n};\r\n"
  }
]}
